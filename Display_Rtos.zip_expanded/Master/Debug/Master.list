
Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d438  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  0800d708  0800d708  0000e708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dcd0  0800dcd0  0000ecd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dcd8  0800dcd8  0000ecd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800dcdc  0800dcdc  0000ecdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002dc  24000000  0800dce0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003e0  240002dc  0800dfbc  0000f2dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240006bc  0800dfbc  0000f6bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f2dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bfbb  00000000  00000000  0000f30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000038d6  00000000  00000000  0002b2c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b8  00000000  00000000  0002eba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001016  00000000  00000000  00030058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035bed  00000000  00000000  0003106e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e53c  00000000  00000000  00066c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00152d46  00000000  00000000  00085197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d7edd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000066b4  00000000  00000000  001d7f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  001de5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002dc 	.word	0x240002dc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800d6f0 	.word	0x0800d6f0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002e0 	.word	0x240002e0
 800030c:	0800d6f0 	.word	0x0800d6f0

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006b6:	4b0d      	ldr	r3, [pc, #52]	@ (80006ec <MX_DMA_Init+0x3c>)
 80006b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006bc:	4a0b      	ldr	r2, [pc, #44]	@ (80006ec <MX_DMA_Init+0x3c>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006c6:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <MX_DMA_Init+0x3c>)
 80006c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2100      	movs	r1, #0
 80006d8:	200b      	movs	r0, #11
 80006da:	f001 fbaf 	bl	8001e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006de:	200b      	movs	r0, #11
 80006e0:	f001 fbc6 	bl	8001e70 <HAL_NVIC_EnableIRQ>

}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	58024400 	.word	0x58024400

080006f0 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB15   ------> S_TIM12_CH2
*/
void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08c      	sub	sp, #48	@ 0x30
 80006f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	4b88      	ldr	r3, [pc, #544]	@ (8000928 <MX_GPIO_Init+0x238>)
 8000708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800070c:	4a86      	ldr	r2, [pc, #536]	@ (8000928 <MX_GPIO_Init+0x238>)
 800070e:	f043 0304 	orr.w	r3, r3, #4
 8000712:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000716:	4b84      	ldr	r3, [pc, #528]	@ (8000928 <MX_GPIO_Init+0x238>)
 8000718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800071c:	f003 0304 	and.w	r3, r3, #4
 8000720:	61bb      	str	r3, [r7, #24]
 8000722:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000724:	4b80      	ldr	r3, [pc, #512]	@ (8000928 <MX_GPIO_Init+0x238>)
 8000726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800072a:	4a7f      	ldr	r2, [pc, #508]	@ (8000928 <MX_GPIO_Init+0x238>)
 800072c:	f043 0320 	orr.w	r3, r3, #32
 8000730:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000734:	4b7c      	ldr	r3, [pc, #496]	@ (8000928 <MX_GPIO_Init+0x238>)
 8000736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073a:	f003 0320 	and.w	r3, r3, #32
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	4b79      	ldr	r3, [pc, #484]	@ (8000928 <MX_GPIO_Init+0x238>)
 8000744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000748:	4a77      	ldr	r2, [pc, #476]	@ (8000928 <MX_GPIO_Init+0x238>)
 800074a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800074e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000752:	4b75      	ldr	r3, [pc, #468]	@ (8000928 <MX_GPIO_Init+0x238>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000758:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000760:	4b71      	ldr	r3, [pc, #452]	@ (8000928 <MX_GPIO_Init+0x238>)
 8000762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000766:	4a70      	ldr	r2, [pc, #448]	@ (8000928 <MX_GPIO_Init+0x238>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000770:	4b6d      	ldr	r3, [pc, #436]	@ (8000928 <MX_GPIO_Init+0x238>)
 8000772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b6a      	ldr	r3, [pc, #424]	@ (8000928 <MX_GPIO_Init+0x238>)
 8000780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000784:	4a68      	ldr	r2, [pc, #416]	@ (8000928 <MX_GPIO_Init+0x238>)
 8000786:	f043 0302 	orr.w	r3, r3, #2
 800078a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800078e:	4b66      	ldr	r3, [pc, #408]	@ (8000928 <MX_GPIO_Init+0x238>)
 8000790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000794:	f003 0302 	and.w	r3, r3, #2
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079c:	4b62      	ldr	r3, [pc, #392]	@ (8000928 <MX_GPIO_Init+0x238>)
 800079e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a2:	4a61      	ldr	r2, [pc, #388]	@ (8000928 <MX_GPIO_Init+0x238>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007ac:	4b5e      	ldr	r3, [pc, #376]	@ (8000928 <MX_GPIO_Init+0x238>)
 80007ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ba:	4b5b      	ldr	r3, [pc, #364]	@ (8000928 <MX_GPIO_Init+0x238>)
 80007bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c0:	4a59      	ldr	r2, [pc, #356]	@ (8000928 <MX_GPIO_Init+0x238>)
 80007c2:	f043 0310 	orr.w	r3, r3, #16
 80007c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007ca:	4b57      	ldr	r3, [pc, #348]	@ (8000928 <MX_GPIO_Init+0x238>)
 80007cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d0:	f003 0310 	and.w	r3, r3, #16
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	2108      	movs	r1, #8
 80007dc:	4853      	ldr	r0, [pc, #332]	@ (800092c <MX_GPIO_Init+0x23c>)
 80007de:	f003 ff1f 	bl	8004620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	2110      	movs	r1, #16
 80007e6:	4852      	ldr	r0, [pc, #328]	@ (8000930 <MX_GPIO_Init+0x240>)
 80007e8:	f003 ff1a 	bl	8004620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f244 0101 	movw	r1, #16385	@ 0x4001
 80007f2:	4850      	ldr	r0, [pc, #320]	@ (8000934 <MX_GPIO_Init+0x244>)
 80007f4:	f003 ff14 	bl	8004620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TOUCH_CS_Pin|DISPL_CS_Pin, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80007fe:	484e      	ldr	r0, [pc, #312]	@ (8000938 <MX_GPIO_Init+0x248>)
 8000800:	f003 ff0e 	bl	8004620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2102      	movs	r1, #2
 8000808:	484c      	ldr	r0, [pc, #304]	@ (800093c <MX_GPIO_Init+0x24c>)
 800080a:	f003 ff09 	bl	8004620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISPL_DC_Pin;
 800080e:	2308      	movs	r3, #8
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081a:	2303      	movs	r3, #3
 800081c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DISPL_DC_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	4841      	ldr	r0, [pc, #260]	@ (800092c <MX_GPIO_Init+0x23c>)
 8000826:	f003 fd53 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800082a:	2310      	movs	r3, #16
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	483b      	ldr	r0, [pc, #236]	@ (8000930 <MX_GPIO_Init+0x240>)
 8000842:	f003 fd45 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000846:	f244 0301 	movw	r3, #16385	@ 0x4001
 800084a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000854:	2303      	movs	r3, #3
 8000856:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	4835      	ldr	r0, [pc, #212]	@ (8000934 <MX_GPIO_Init+0x244>)
 8000860:	f003 fd36 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Yellow_button_Pin|Blue_button_Pin|Green_button_Pin;
 8000864:	f44f 5398 	mov.w	r3, #4864	@ 0x1300
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800086e:	2301      	movs	r3, #1
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	482e      	ldr	r0, [pc, #184]	@ (8000934 <MX_GPIO_Init+0x244>)
 800087a:	f003 fd29 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISPL_LED_Pin;
 800087e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8000890:	2302      	movs	r3, #2
 8000892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DISPL_LED_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	4826      	ldr	r0, [pc, #152]	@ (8000934 <MX_GPIO_Init+0x244>)
 800089c:	f003 fd18 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin|DISPL_CS_Pin;
 80008a0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	481f      	ldr	r0, [pc, #124]	@ (8000938 <MX_GPIO_Init+0x248>)
 80008ba:	f003 fd09 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = White_button_Pin;
 80008be:	2340      	movs	r3, #64	@ 0x40
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(White_button_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	481b      	ldr	r0, [pc, #108]	@ (8000940 <MX_GPIO_Init+0x250>)
 80008d2:	f003 fcfd 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 80008d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008dc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4810      	ldr	r0, [pc, #64]	@ (8000930 <MX_GPIO_Init+0x240>)
 80008ee:	f003 fcef 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 80008f2:	2302      	movs	r3, #2
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fe:	2303      	movs	r3, #3
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	480c      	ldr	r0, [pc, #48]	@ (800093c <MX_GPIO_Init+0x24c>)
 800090a:	f003 fce1 	bl	80042d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2100      	movs	r1, #0
 8000912:	2028      	movs	r0, #40	@ 0x28
 8000914:	f001 fa92 	bl	8001e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000918:	2028      	movs	r0, #40	@ 0x28
 800091a:	f001 faa9 	bl	8001e70 <HAL_NVIC_EnableIRQ>

}
 800091e:	bf00      	nop
 8000920:	3730      	adds	r7, #48	@ 0x30
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	58024400 	.word	0x58024400
 800092c:	58021400 	.word	0x58021400
 8000930:	58020000 	.word	0x58020000
 8000934:	58020400 	.word	0x58020400
 8000938:	58020c00 	.word	0x58020c00
 800093c:	58021000 	.word	0x58021000
 8000940:	58020800 	.word	0x58020800

08000944 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
	// ส�?�?�?�?อมูลที�?�?ด�?�?า�? ptr �?�?า�? UART3
	if (HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, HAL_MAX_DELAY)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	b29a      	uxth	r2, r3
 8000954:	f04f 33ff 	mov.w	r3, #4294967295
 8000958:	68b9      	ldr	r1, [r7, #8]
 800095a:	4807      	ldr	r0, [pc, #28]	@ (8000978 <_write+0x34>)
 800095c:	f008 fa34 	bl	8008dc8 <HAL_UART_Transmit>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d002      	beq.n	800096c <_write+0x28>
			!= HAL_OK) {
		return -1; // ถ�?า�?ารส�?�?�?�?อมูลล�?มเหลว �?ห�?ส�?�?�?ื�? -1 เ�?ื�?อ�?�?�?�?อ�?�?�?อ�?ิด�?ลาด
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	e000      	b.n	800096e <_write+0x2a>
	}
	return len;  // ส�?�?�?ื�?�?ำ�?ว�? byte ที�?ส�?�?�?ด�?
 800096c:	687b      	ldr	r3, [r7, #4]
}
 800096e:	4618      	mov	r0, r3
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	240004d8 	.word	0x240004d8
 800097c:	00000000 	.word	0x00000000

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000986:	f001 f921 	bl	8001bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098a:	f000 f849 	bl	8000a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098e:	f7ff feaf 	bl	80006f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000992:	f7ff fe8d 	bl	80006b0 <MX_DMA_Init>
  MX_SPI3_Init();
 8000996:	f000 fc11 	bl	80011bc <MX_SPI3_Init>
  MX_USART3_UART_Init();
 800099a:	f001 f82f 	bl	80019fc <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800099e:	f000 fbb5 	bl	800110c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	mt6835_t *mt6835 = mt6835_stm32_spi_port_init();
 80009a2:	f000 fb8f 	bl	80010c4 <mt6835_stm32_spi_port_init>
 80009a6:	6078      	str	r0, [r7, #4]
    //mt6835_enable_crc_check(mt6835);
	mt6835_disable_crc_check(mt6835);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f000 f8e5 	bl	8000b78 <mt6835_disable_crc_check>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
        raw_angle = mt6835_get_raw_angle(mt6835, MT6835_READ_ANGLE_METHOD_NORMAL);
 80009ae:	2100      	movs	r1, #0
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f000 f9eb 	bl	8000d8c <mt6835_get_raw_angle>
 80009b6:	4603      	mov	r3, r0
 80009b8:	4a15      	ldr	r2, [pc, #84]	@ (8000a10 <main+0x90>)
 80009ba:	6013      	str	r3, [r2, #0]
        radian_angle = (raw_angle / 2097152.0f) * (M_PI * 2.0f);
 80009bc:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <main+0x90>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	ee07 3a90 	vmov	s15, r3
 80009c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009c8:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000a14 <main+0x94>
 80009cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009d4:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8000a08 <main+0x88>
 80009d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80009dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a18 <main+0x98>)
 80009e2:	edc3 7a00 	vstr	s15, [r3]
        printf("raw_angle: %lu, radian_angle: %f\n\r", raw_angle, radian_angle);
 80009e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <main+0x90>)
 80009e8:	6819      	ldr	r1, [r3, #0]
 80009ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <main+0x98>)
 80009ec:	edd3 7a00 	vldr	s15, [r3]
 80009f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009f4:	ec53 2b17 	vmov	r2, r3, d7
 80009f8:	4808      	ldr	r0, [pc, #32]	@ (8000a1c <main+0x9c>)
 80009fa:	f00a fdeb 	bl	800b5d4 <iprintf>
//id = mt6835_get_id(mt6835);
//		printf("id : 0x%x\n",id);
		HAL_Delay(250);
 80009fe:	20fa      	movs	r0, #250	@ 0xfa
 8000a00:	f001 f940 	bl	8001c84 <HAL_Delay>
        raw_angle = mt6835_get_raw_angle(mt6835, MT6835_READ_ANGLE_METHOD_NORMAL);
 8000a04:	bf00      	nop
 8000a06:	e7d2      	b.n	80009ae <main+0x2e>
 8000a08:	54442d18 	.word	0x54442d18
 8000a0c:	401921fb 	.word	0x401921fb
 8000a10:	240002f8 	.word	0x240002f8
 8000a14:	4a000000 	.word	0x4a000000
 8000a18:	240002fc 	.word	0x240002fc
 8000a1c:	0800d708 	.word	0x0800d708

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b09c      	sub	sp, #112	@ 0x70
 8000a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a2a:	224c      	movs	r2, #76	@ 0x4c
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f00a ff66 	bl	800b900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2220      	movs	r2, #32
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f00a ff60 	bl	800b900 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a40:	2002      	movs	r0, #2
 8000a42:	f003 fe2b 	bl	800469c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000af8 <SystemClock_Config+0xd8>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8000af8 <SystemClock_Config+0xd8>)
 8000a50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a54:	6193      	str	r3, [r2, #24]
 8000a56:	4b28      	ldr	r3, [pc, #160]	@ (8000af8 <SystemClock_Config+0xd8>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a62:	bf00      	nop
 8000a64:	4b24      	ldr	r3, [pc, #144]	@ (8000af8 <SystemClock_Config+0xd8>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a70:	d1f8      	bne.n	8000a64 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a72:	2302      	movs	r3, #2
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000a7a:	2340      	movs	r3, #64	@ 0x40
 8000a7c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a82:	2300      	movs	r3, #0
 8000a84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a86:	2304      	movs	r3, #4
 8000a88:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000a8a:	230c      	movs	r3, #12
 8000a8c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a92:	2304      	movs	r3, #4
 8000a94:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a96:	2302      	movs	r3, #2
 8000a98:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a9a:	230c      	movs	r3, #12
 8000a9c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f003 fe30 	bl	8004710 <HAL_RCC_OscConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ab6:	f000 f833 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aba:	233f      	movs	r3, #63	@ 0x3f
 8000abc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000aca:	2340      	movs	r3, #64	@ 0x40
 8000acc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ace:	2340      	movs	r3, #64	@ 0x40
 8000ad0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ad2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ad6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ad8:	2340      	movs	r3, #64	@ 0x40
 8000ada:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2102      	movs	r1, #2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f004 f9ef 	bl	8004ec4 <HAL_RCC_ClockConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000aec:	f000 f818 	bl	8000b20 <Error_Handler>
  }
}
 8000af0:	bf00      	nop
 8000af2:	3770      	adds	r7, #112	@ 0x70
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	58024800 	.word	0x58024800

08000afc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d101      	bne.n	8000b12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b0e:	f001 f899 	bl	8001c44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40001000 	.word	0x40001000

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <Error_Handler+0x8>

08000b2c <crc_table>:
 * @brief  CRC校验：X8+X2+X+1
 * @param  data  数据指针
 * @param  len   数据长度
 * @return CRC校验值
 */
static uint8_t crc_table(const uint8_t *data, uint8_t len) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0x00; // 初始CRC值
 8000b38:	2300      	movs	r3, #0
 8000b3a:	73fb      	strb	r3, [r7, #15]

    for (uint8_t i = 0; i < len; i++) {
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	73bb      	strb	r3, [r7, #14]
 8000b40:	e00d      	b.n	8000b5e <crc_table+0x32>
        crc ^= data[i]; // 与数据异或
 8000b42:	7bbb      	ldrb	r3, [r7, #14]
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	4413      	add	r3, r2
 8000b48:	781a      	ldrb	r2, [r3, #0]
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	4053      	eors	r3, r2
 8000b4e:	73fb      	strb	r3, [r7, #15]
        crc = crc8_table[crc]; // 查表更新CRC
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	4a08      	ldr	r2, [pc, #32]	@ (8000b74 <crc_table+0x48>)
 8000b54:	5cd3      	ldrb	r3, [r2, r3]
 8000b56:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len; i++) {
 8000b58:	7bbb      	ldrb	r3, [r7, #14]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	73bb      	strb	r3, [r7, #14]
 8000b5e:	7bba      	ldrb	r2, [r7, #14]
 8000b60:	78fb      	ldrb	r3, [r7, #3]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d3ed      	bcc.n	8000b42 <crc_table+0x16>
    }

    return crc;
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	24000004 	.word	0x24000004

08000b78 <mt6835_disable_crc_check>:

/**
 * @brief disable crc check
 * @param mt6835 mt6835 object
 */
void mt6835_disable_crc_check(mt6835_t *mt6835) {
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
    mt6835->crc_check = false;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2200      	movs	r2, #0
 8000b84:	775a      	strb	r2, [r3, #29]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <mt6835_cs_control>:

/**
 * @brief spi cs control, this function is weak, you can override it
 * @param state MT6835_CS_HIGH or MT6835_CS_LOW
 */
__attribute__((weak)) void mt6835_cs_control(mt6835_cs_state_enum_t state) {
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	71fb      	strb	r3, [r7, #7]
    (void)state;
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <mt6835_spi_send>:
/**
 * @brief spi send, this function is weak, you can override it
 * @param tx_buf tx buffer
 * @param len length
 */
__attribute__((weak)) void mt6835_spi_send(uint8_t *tx_buf, uint8_t len) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	70fb      	strb	r3, [r7, #3]
    (void)tx_buf;
    (void)len;
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <mt6835_spi_recv>:
 * @brief spi receive, this function is weak, you can override it
 * @param rx_buf rx buffer
 * @param len length
 * @return uint8_t rx data
 */
__attribute__((weak)) void mt6835_spi_recv(uint8_t *rx_buf, uint8_t len) {
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	70fb      	strb	r3, [r7, #3]
    (void)rx_buf;
    (void)len;
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <mt6835_spi_send_recv>:
 * @brief spi send and receive, this function is weak, you can override it
 * @param tx_buf tx buffer
 * @param rx_buf rx buffer
 * @param len length
 */
__attribute__((weak)) void mt6835_spi_send_recv(uint8_t *tx_buf, uint8_t *rx_buf, uint8_t len) {
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	4613      	mov	r3, r2
 8000be4:	71fb      	strb	r3, [r7, #7]
    (void)tx_buf;
    (void)rx_buf;
    (void)len;
}
 8000be6:	bf00      	nop
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <mt6835_create>:

/**
 * @brief create a mt6835 object
 * @return mt6835 object
 */
mt6835_t *mt6835_create() {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
    mt6835_t *mt6835 = (mt6835_t *)MT6835_MALLOC(sizeof(mt6835_t));
 8000bfa:	2020      	movs	r0, #32
 8000bfc:	f009 ff3a 	bl	800aa74 <malloc>
 8000c00:	4603      	mov	r3, r0
 8000c02:	607b      	str	r3, [r7, #4]
    if (mt6835 == NULL) {
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d107      	bne.n	8000c1a <mt6835_create+0x26>
        MT6835_DEBUG("%s malloc failed", TAG);
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <mt6835_create+0x40>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4809      	ldr	r0, [pc, #36]	@ (8000c38 <mt6835_create+0x44>)
 8000c12:	f00a fcdf 	bl	800b5d4 <iprintf>
        return NULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	e008      	b.n	8000c2c <mt6835_create+0x38>
    }
    memset(mt6835, 0, sizeof(mt6835_t));
 8000c1a:	2220      	movs	r2, #32
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f00a fe6e 	bl	800b900 <memset>
    mt6835->crc_check = false;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	775a      	strb	r2, [r3, #29]
    return mt6835;
 8000c2a:	687b      	ldr	r3, [r7, #4]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	24000000 	.word	0x24000000
 8000c38:	0800d734 	.word	0x0800d734

08000c3c <mt6835_link_spi_cs_control>:
/**
 * @brief link spi cs control function to mt6835 object
 * @param mt6835 mt6835 object
 * @param spi_cs_control spi cs control function
 */
void mt6835_link_spi_cs_control(mt6835_t *mt6835, void (*spi_cs_control)(mt6835_cs_state_enum_t state)) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
    if (mt6835 == NULL) {
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d106      	bne.n	8000c5a <mt6835_link_spi_cs_control+0x1e>
        MT6835_DEBUG("%s mt6835 object is null", TAG);
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <mt6835_link_spi_cs_control+0x44>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4619      	mov	r1, r3
 8000c52:	480c      	ldr	r0, [pc, #48]	@ (8000c84 <mt6835_link_spi_cs_control+0x48>)
 8000c54:	f00a fcbe 	bl	800b5d4 <iprintf>
        return;
 8000c58:	e00f      	b.n	8000c7a <mt6835_link_spi_cs_control+0x3e>
    }
    if (spi_cs_control == NULL) {
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d109      	bne.n	8000c74 <mt6835_link_spi_cs_control+0x38>
        MT6835_DEBUG("%s mt6835 object use default spi_cs_control(null)", TAG);
 8000c60:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <mt6835_link_spi_cs_control+0x44>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	4808      	ldr	r0, [pc, #32]	@ (8000c88 <mt6835_link_spi_cs_control+0x4c>)
 8000c68:	f00a fcb4 	bl	800b5d4 <iprintf>
        mt6835->func.spi_cs_control = mt6835_cs_control;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a07      	ldr	r2, [pc, #28]	@ (8000c8c <mt6835_link_spi_cs_control+0x50>)
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	e002      	b.n	8000c7a <mt6835_link_spi_cs_control+0x3e>
    } else {
        mt6835->func.spi_cs_control = spi_cs_control;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	601a      	str	r2, [r3, #0]
    }
}
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	24000000 	.word	0x24000000
 8000c84:	0800d748 	.word	0x0800d748
 8000c88:	0800d764 	.word	0x0800d764
 8000c8c:	08000b93 	.word	0x08000b93

08000c90 <mt6835_link_spi_send>:
/**
 * @brief link spi send function to mt6835 object
 * @param mt6835 mt6835 object
 * @param spi_send spi send function
 */
void mt6835_link_spi_send(mt6835_t *mt6835, void (*spi_send)(uint8_t *tx_buf, uint8_t len)) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
    if (mt6835 == NULL) {
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d106      	bne.n	8000cae <mt6835_link_spi_send+0x1e>
        MT6835_DEBUG("%s mt6835 object is null", TAG);
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <mt6835_link_spi_send+0x44>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480c      	ldr	r0, [pc, #48]	@ (8000cd8 <mt6835_link_spi_send+0x48>)
 8000ca8:	f00a fc94 	bl	800b5d4 <iprintf>
        return;
 8000cac:	e00e      	b.n	8000ccc <mt6835_link_spi_send+0x3c>
    }
    if (spi_send == NULL) {
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d108      	bne.n	8000cc6 <mt6835_link_spi_send+0x36>
        MT6835_DEBUG("%s mt6835 object use default spi_send(null)", TAG);
 8000cb4:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <mt6835_link_spi_send+0x44>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4808      	ldr	r0, [pc, #32]	@ (8000cdc <mt6835_link_spi_send+0x4c>)
 8000cbc:	f00a fc8a 	bl	800b5d4 <iprintf>
        mt6835->func.spi_send = mt6835_spi_send;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a07      	ldr	r2, [pc, #28]	@ (8000ce0 <mt6835_link_spi_send+0x50>)
 8000cc4:	605a      	str	r2, [r3, #4]
    }
    mt6835->func.spi_send = spi_send;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	683a      	ldr	r2, [r7, #0]
 8000cca:	605a      	str	r2, [r3, #4]
}
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	24000000 	.word	0x24000000
 8000cd8:	0800d748 	.word	0x0800d748
 8000cdc:	0800d798 	.word	0x0800d798
 8000ce0:	08000ba9 	.word	0x08000ba9

08000ce4 <mt6835_link_spi_recv>:
/**
 * @brief link spi receive function to mt6835 object
 * @param mt6835 mt6835 object
 * @param spi_recv spi receive function
 */
void mt6835_link_spi_recv(mt6835_t *mt6835, void (*spi_recv)(uint8_t *rx_buf, uint8_t len)) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
    if (mt6835 == NULL) {
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d106      	bne.n	8000d02 <mt6835_link_spi_recv+0x1e>
        MT6835_DEBUG("%s mt6835 object is null", TAG);
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <mt6835_link_spi_recv+0x44>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480c      	ldr	r0, [pc, #48]	@ (8000d2c <mt6835_link_spi_recv+0x48>)
 8000cfc:	f00a fc6a 	bl	800b5d4 <iprintf>
        return;
 8000d00:	e00e      	b.n	8000d20 <mt6835_link_spi_recv+0x3c>
    }
    if (spi_recv == NULL) {
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d108      	bne.n	8000d1a <mt6835_link_spi_recv+0x36>
        MT6835_DEBUG("%s mt6835 object use default spi_recv(null)", TAG);
 8000d08:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <mt6835_link_spi_recv+0x44>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4808      	ldr	r0, [pc, #32]	@ (8000d30 <mt6835_link_spi_recv+0x4c>)
 8000d10:	f00a fc60 	bl	800b5d4 <iprintf>
        mt6835->func.spi_recv = mt6835_spi_recv;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a07      	ldr	r2, [pc, #28]	@ (8000d34 <mt6835_link_spi_recv+0x50>)
 8000d18:	609a      	str	r2, [r3, #8]
    }
    mt6835->func.spi_recv = spi_recv;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	609a      	str	r2, [r3, #8]
}
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	24000000 	.word	0x24000000
 8000d2c:	0800d748 	.word	0x0800d748
 8000d30:	0800d7c4 	.word	0x0800d7c4
 8000d34:	08000bc1 	.word	0x08000bc1

08000d38 <mt6835_link_spi_send_recv>:
/**
 * @brief link spi send and receive function to mt6835 object
 * @param mt6835 mt6835 object
 * @param spi_send_recv spi send and receive function
 */
void mt6835_link_spi_send_recv(mt6835_t *mt6835, void (*spi_send_recv)(uint8_t *tx_buf, uint8_t *rx_buf, uint8_t len)) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
    if (mt6835 == NULL) {
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d106      	bne.n	8000d56 <mt6835_link_spi_send_recv+0x1e>
        MT6835_DEBUG("%s mt6835 object is null", TAG);
 8000d48:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <mt6835_link_spi_send_recv+0x44>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480c      	ldr	r0, [pc, #48]	@ (8000d80 <mt6835_link_spi_send_recv+0x48>)
 8000d50:	f00a fc40 	bl	800b5d4 <iprintf>
        return;
 8000d54:	e00e      	b.n	8000d74 <mt6835_link_spi_send_recv+0x3c>
    }
    if (spi_send_recv == NULL) {
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d108      	bne.n	8000d6e <mt6835_link_spi_send_recv+0x36>
        MT6835_DEBUG("%s mt6835 object use default spi_send_recv(null)", TAG);
 8000d5c:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <mt6835_link_spi_send_recv+0x44>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4619      	mov	r1, r3
 8000d62:	4808      	ldr	r0, [pc, #32]	@ (8000d84 <mt6835_link_spi_send_recv+0x4c>)
 8000d64:	f00a fc36 	bl	800b5d4 <iprintf>
        mt6835->func.spi_send_recv = mt6835_spi_send_recv;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a07      	ldr	r2, [pc, #28]	@ (8000d88 <mt6835_link_spi_send_recv+0x50>)
 8000d6c:	60da      	str	r2, [r3, #12]
    }
    mt6835->func.spi_send_recv = spi_send_recv;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	683a      	ldr	r2, [r7, #0]
 8000d72:	60da      	str	r2, [r3, #12]
}
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	24000000 	.word	0x24000000
 8000d80:	0800d748 	.word	0x0800d748
 8000d84:	0800d7f0 	.word	0x0800d7f0
 8000d88:	08000bd9 	.word	0x08000bd9

08000d8c <mt6835_get_raw_angle>:
 * @param mt6835 mt6835 object
 * @param method read angle method, MT6835_READ_ANGLE_METHOD_NORMAL or MT6835_READ_ANGLE_METHOD_BURST
 * @return raw angle data in raw
 */

uint32_t mt6835_get_raw_angle(mt6835_t *mt6835, mt6835_read_angle_method_enum_t method) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	70fb      	strb	r3, [r7, #3]
    uint8_t rx_buf[6] = {0};
 8000d98:	2300      	movs	r3, #0
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	82bb      	strh	r3, [r7, #20]
    uint8_t tx_buf[6] = {0};
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	2300      	movs	r3, #0
 8000da6:	81bb      	strh	r3, [r7, #12]

    switch (method) {
 8000da8:	78fb      	ldrb	r3, [r7, #3]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d002      	beq.n	8000db4 <mt6835_get_raw_angle+0x28>
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d01d      	beq.n	8000dee <mt6835_get_raw_angle+0x62>
 8000db2:	e070      	b.n	8000e96 <mt6835_get_raw_angle+0x10a>
        case MT6835_READ_ANGLE_METHOD_NORMAL: {
            rx_buf[0] = mt6835_read_reg(mt6835, MT6835_REG_ANGLE3);
 8000db4:	2103      	movs	r1, #3
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f000 f8a4 	bl	8000f04 <mt6835_read_reg>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	743b      	strb	r3, [r7, #16]
            rx_buf[1] = mt6835_read_reg(mt6835, MT6835_REG_ANGLE2);
 8000dc0:	2104      	movs	r1, #4
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f000 f89e 	bl	8000f04 <mt6835_read_reg>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	747b      	strb	r3, [r7, #17]
            rx_buf[2] = mt6835_read_reg(mt6835, MT6835_REG_ANGLE1);
 8000dcc:	2105      	movs	r1, #5
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f000 f898 	bl	8000f04 <mt6835_read_reg>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	74bb      	strb	r3, [r7, #18]
            if (mt6835->crc_check) {
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	7f5b      	ldrb	r3, [r3, #29]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d057      	beq.n	8000e90 <mt6835_get_raw_angle+0x104>
                rx_buf[3] = mt6835_read_reg(mt6835, MT6835_REG_CRC);
 8000de0:	2106      	movs	r1, #6
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f000 f88e 	bl	8000f04 <mt6835_read_reg>
 8000de8:	4603      	mov	r3, r0
 8000dea:	74fb      	strb	r3, [r7, #19]
            }
            break;
 8000dec:	e050      	b.n	8000e90 <mt6835_get_raw_angle+0x104>
        }
        case MT6835_READ_ANGLE_METHOD_BURST: {
            const uint8_t rd = mt6835->crc_check ? 6 : 5;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	7f5b      	ldrb	r3, [r3, #29]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <mt6835_get_raw_angle+0x6e>
 8000df6:	2306      	movs	r3, #6
 8000df8:	e000      	b.n	8000dfc <mt6835_get_raw_angle+0x70>
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	75fb      	strb	r3, [r7, #23]

            mt6835->func.spi_cs_control(MT6835_CS_HIGH);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2001      	movs	r0, #1
 8000e04:	4798      	blx	r3
            mt6835->data_frame.cmd = MT6835_CMD_BURST;
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	7e13      	ldrb	r3, [r2, #24]
 8000e0a:	210a      	movs	r1, #10
 8000e0c:	f361 1307 	bfi	r3, r1, #4, #4
 8000e10:	7613      	strb	r3, [r2, #24]
            mt6835->data_frame.reg = MT6835_REG_ANGLE3;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2203      	movs	r2, #3
 8000e16:	765a      	strb	r2, [r3, #25]
            tx_buf[0] = mt6835->data_frame.pack & 0xFF;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	723b      	strb	r3, [r7, #8]
            tx_buf[1] = (mt6835->data_frame.pack >> 8) & 0xFF;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	727b      	strb	r3, [r7, #9]

            mt6835->func.spi_cs_control(MT6835_CS_LOW);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2000      	movs	r0, #0
 8000e30:	4798      	blx	r3
            if (mt6835->func.spi_send_recv) {
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d008      	beq.n	8000e4c <mt6835_get_raw_angle+0xc0>
                mt6835->func.spi_send_recv(tx_buf, rx_buf, rd);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	7dfa      	ldrb	r2, [r7, #23]
 8000e40:	f107 0110 	add.w	r1, r7, #16
 8000e44:	f107 0008 	add.w	r0, r7, #8
 8000e48:	4798      	blx	r3
 8000e4a:	e00d      	b.n	8000e68 <mt6835_get_raw_angle+0xdc>
            } else {
                mt6835->func.spi_send(tx_buf, rd);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	7df9      	ldrb	r1, [r7, #23]
 8000e52:	f107 0208 	add.w	r2, r7, #8
 8000e56:	4610      	mov	r0, r2
 8000e58:	4798      	blx	r3
                mt6835->func.spi_recv(rx_buf, rd);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	7df9      	ldrb	r1, [r7, #23]
 8000e60:	f107 0210 	add.w	r2, r7, #16
 8000e64:	4610      	mov	r0, r2
 8000e66:	4798      	blx	r3
            }
            mt6835->func.spi_cs_control(MT6835_CS_HIGH);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	4798      	blx	r3

            memmove(rx_buf, &rx_buf[2], 3);
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	1c99      	adds	r1, r3, #2
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f00a fd25 	bl	800b8cc <memmove>
            if (mt6835->crc_check) {
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7f5b      	ldrb	r3, [r3, #29]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d004      	beq.n	8000e94 <mt6835_get_raw_angle+0x108>
                rx_buf[3] = rx_buf[5];
 8000e8a:	7d7b      	ldrb	r3, [r7, #21]
 8000e8c:	74fb      	strb	r3, [r7, #19]
            }
            break;
 8000e8e:	e001      	b.n	8000e94 <mt6835_get_raw_angle+0x108>
            break;
 8000e90:	bf00      	nop
 8000e92:	e000      	b.n	8000e96 <mt6835_get_raw_angle+0x10a>
            break;
 8000e94:	bf00      	nop
        }
    }

    if (mt6835->crc_check) {
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	7f5b      	ldrb	r3, [r3, #29]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d01b      	beq.n	8000ed6 <mt6835_get_raw_angle+0x14a>
        mt6835->crc = rx_buf[3];
 8000e9e:	7cfa      	ldrb	r2, [r7, #19]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	741a      	strb	r2, [r3, #16]
#if MT6835_USE_CRC == 1
        if (crc_table(rx_buf, 3) != rx_buf[3]) {
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	2103      	movs	r1, #3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fe3e 	bl	8000b2c <crc_table>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	7cfb      	ldrb	r3, [r7, #19]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d00a      	beq.n	8000ed0 <mt6835_get_raw_angle+0x144>
            MT6835_DEBUG("%s crc check failed\r\n", TAG);
 8000eba:	4b10      	ldr	r3, [pc, #64]	@ (8000efc <mt6835_get_raw_angle+0x170>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480f      	ldr	r0, [pc, #60]	@ (8000f00 <mt6835_get_raw_angle+0x174>)
 8000ec2:	f00a fb87 	bl	800b5d4 <iprintf>
            mt6835->crc_res = false;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	745a      	strb	r2, [r3, #17]
            return 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	e011      	b.n	8000ef4 <mt6835_get_raw_angle+0x168>
        }
        mt6835->crc_res = true;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	745a      	strb	r2, [r3, #17]
#endif
    }

    mt6835->state = rx_buf[2] & 0x07;
 8000ed6:	7cbb      	ldrb	r3, [r7, #18]
 8000ed8:	f003 0307 	and.w	r3, r3, #7
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	771a      	strb	r2, [r3, #28]
    return (rx_buf[0] << 13) | (rx_buf[1] << 5) | (rx_buf[2] >> 3);
 8000ee2:	7c3b      	ldrb	r3, [r7, #16]
 8000ee4:	035a      	lsls	r2, r3, #13
 8000ee6:	7c7b      	ldrb	r3, [r7, #17]
 8000ee8:	015b      	lsls	r3, r3, #5
 8000eea:	4313      	orrs	r3, r2
 8000eec:	7cba      	ldrb	r2, [r7, #18]
 8000eee:	08d2      	lsrs	r2, r2, #3
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	4313      	orrs	r3, r2
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	24000000 	.word	0x24000000
 8000f00:	0800d824 	.word	0x0800d824

08000f04 <mt6835_read_reg>:
 * @brief read mt6835 register
 * @param mt6835 mt6835 object
 * @param reg register address, @ref mt6835_reg_enum_t
 * @return data
 */
uint8_t mt6835_read_reg(mt6835_t *mt6835, mt6835_reg_enum_t reg) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	70fb      	strb	r3, [r7, #3]
     uint8_t result[3] = {0, 0, 0};
 8000f10:	4a1f      	ldr	r2, [pc, #124]	@ (8000f90 <mt6835_read_reg+0x8c>)
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	6812      	ldr	r2, [r2, #0]
 8000f18:	4611      	mov	r1, r2
 8000f1a:	8019      	strh	r1, [r3, #0]
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	0c12      	lsrs	r2, r2, #16
 8000f20:	701a      	strb	r2, [r3, #0]
    //printf("mt6835_read_reg: Sending Read Command for Reg 0x%02X\n", reg);

    /* data frame */
    mt6835->func.spi_cs_control(MT6835_CS_HIGH);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2001      	movs	r0, #1
 8000f28:	4798      	blx	r3
    mt6835->data_frame.cmd = MT6835_CMD_RD; // byte read command
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	7e13      	ldrb	r3, [r2, #24]
 8000f2e:	2103      	movs	r1, #3
 8000f30:	f361 1307 	bfi	r3, r1, #4, #4
 8000f34:	7613      	strb	r3, [r2, #24]
    mt6835->data_frame.reg = reg;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	78fa      	ldrb	r2, [r7, #3]
 8000f3a:	765a      	strb	r2, [r3, #25]
    //printf("Command: 0x%02X, Reg: 0x%02X\n", mt6835->data_frame.cmd, mt6835->data_frame.reg);

    mt6835->func.spi_cs_control(MT6835_CS_LOW);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2000      	movs	r0, #0
 8000f42:	4798      	blx	r3
    if (mt6835->func.spi_send_recv == NULL ? false : true) {
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d009      	beq.n	8000f60 <mt6835_read_reg+0x5c>
        mt6835->func.spi_send_recv((uint8_t *)&mt6835->data_frame.pack, (uint8_t *)&result, 3);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	f102 0018 	add.w	r0, r2, #24
 8000f56:	f107 010c 	add.w	r1, r7, #12
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	4798      	blx	r3
 8000f5e:	e00d      	b.n	8000f7c <mt6835_read_reg+0x78>
    } else {
        mt6835->func.spi_send((uint8_t *)&mt6835->data_frame.pack, 3);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	3218      	adds	r2, #24
 8000f68:	2103      	movs	r1, #3
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4798      	blx	r3
        mt6835->func.spi_recv((uint8_t *)&result, 3);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f107 020c 	add.w	r2, r7, #12
 8000f76:	2103      	movs	r1, #3
 8000f78:	4610      	mov	r0, r2
 8000f7a:	4798      	blx	r3
    }
    mt6835->func.spi_cs_control(MT6835_CS_HIGH);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2001      	movs	r0, #1
 8000f82:	4798      	blx	r3
   // printf("Received Data: 0x%02X 0x%02X 0x%02X\n", result[0], result[1], result[2]);

    return result[2];
 8000f84:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	0800d83c 	.word	0x0800d83c

08000f94 <mt6835_cs_control>:
#include "spi.h"
#define SPI_INSTANCE    hspi1
#define SPI_CS          SPI1_CS_Pin
#define SPI_CS_PORT     SPI1_CS_GPIO_Port

static void mt6835_cs_control(mt6835_cs_state_enum_t state) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
    if (state == MT6835_CS_HIGH) {
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d105      	bne.n	8000fb0 <mt6835_cs_control+0x1c>
        HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2110      	movs	r1, #16
 8000fa8:	4806      	ldr	r0, [pc, #24]	@ (8000fc4 <mt6835_cs_control+0x30>)
 8000faa:	f003 fb39 	bl	8004620 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS, GPIO_PIN_RESET);

    }
}
 8000fae:	e004      	b.n	8000fba <mt6835_cs_control+0x26>
        HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2110      	movs	r1, #16
 8000fb4:	4803      	ldr	r0, [pc, #12]	@ (8000fc4 <mt6835_cs_control+0x30>)
 8000fb6:	f003 fb33 	bl	8004620 <HAL_GPIO_WritePin>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	58020000 	.word	0x58020000

08000fc8 <mt6835_spi_send>:

static void mt6835_spi_send(uint8_t *tx_buf, uint8_t len) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef status = HAL_OK;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	73fb      	strb	r3, [r7, #15]
    status = HAL_SPI_Transmit(&SPI_INSTANCE, tx_buf, len, 10);
 8000fd8:	78fb      	ldrb	r3, [r7, #3]
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	230a      	movs	r3, #10
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	4808      	ldr	r0, [pc, #32]	@ (8001004 <mt6835_spi_send+0x3c>)
 8000fe2:	f006 fa23 	bl	800742c <HAL_SPI_Transmit>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d005      	beq.n	8000ffc <mt6835_spi_send+0x34>
        printf("spi send failed %d\n\r", status);
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4804      	ldr	r0, [pc, #16]	@ (8001008 <mt6835_spi_send+0x40>)
 8000ff6:	f00a faed 	bl	800b5d4 <iprintf>
        return;
 8000ffa:	bf00      	nop
    }
}
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	24000300 	.word	0x24000300
 8001008:	0800d844 	.word	0x0800d844

0800100c <mt6835_spi_recv>:

static void mt6835_spi_recv(uint8_t *rx_buf, uint8_t len) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]
    status = HAL_SPI_Receive(&SPI_INSTANCE, rx_buf, len, 10);
 800101c:	78fb      	ldrb	r3, [r7, #3]
 800101e:	b29a      	uxth	r2, r3
 8001020:	230a      	movs	r3, #10
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	4808      	ldr	r0, [pc, #32]	@ (8001048 <mt6835_spi_recv+0x3c>)
 8001026:	f006 fbef 	bl	8007808 <HAL_SPI_Receive>
 800102a:	4603      	mov	r3, r0
 800102c:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d005      	beq.n	8001040 <mt6835_spi_recv+0x34>
        printf("spi send failed %d\n\r", status);
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	4619      	mov	r1, r3
 8001038:	4804      	ldr	r0, [pc, #16]	@ (800104c <mt6835_spi_recv+0x40>)
 800103a:	f00a facb 	bl	800b5d4 <iprintf>
        return;
 800103e:	bf00      	nop
    }
}
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	24000300 	.word	0x24000300
 800104c:	0800d844 	.word	0x0800d844

08001050 <mt6835_spi_send_recv>:

static void mt6835_spi_send_recv(uint8_t *tx_buf, uint8_t *rx_buf, uint8_t len) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	4613      	mov	r3, r2
 800105c:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status = HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_TransmitReceive_IT(&SPI_INSTANCE, tx_buf, rx_buf, len);
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	b29b      	uxth	r3, r3
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	68f9      	ldr	r1, [r7, #12]
 800106a:	4813      	ldr	r0, [pc, #76]	@ (80010b8 <mt6835_spi_send_recv+0x68>)
 800106c:	f006 fe3e 	bl	8007cec <HAL_SPI_TransmitReceive_IT>
 8001070:	4603      	mov	r3, r0
 8001072:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 8001074:	7dfb      	ldrb	r3, [r7, #23]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d005      	beq.n	8001086 <mt6835_spi_send_recv+0x36>
        printf("spi send_recv failed %d\n\r", status);
 800107a:	7dfb      	ldrb	r3, [r7, #23]
 800107c:	4619      	mov	r1, r3
 800107e:	480f      	ldr	r0, [pc, #60]	@ (80010bc <mt6835_spi_send_recv+0x6c>)
 8001080:	f00a faa8 	bl	800b5d4 <iprintf>
        return;
 8001084:	e014      	b.n	80010b0 <mt6835_spi_send_recv+0x60>
    }
    // wait IT
    uint32_t tickstart = HAL_GetTick();
 8001086:	f000 fdf1 	bl	8001c6c <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]
    while (HAL_SPI_GetState(&SPI_INSTANCE) != HAL_SPI_STATE_READY) {
 800108c:	e00a      	b.n	80010a4 <mt6835_spi_send_recv+0x54>
        if (HAL_GetTick() - tickstart > 1) {
 800108e:	f000 fded 	bl	8001c6c <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b01      	cmp	r3, #1
 800109a:	d903      	bls.n	80010a4 <mt6835_spi_send_recv+0x54>
            printf("spi send_recv timeout\n\r");
 800109c:	4808      	ldr	r0, [pc, #32]	@ (80010c0 <mt6835_spi_send_recv+0x70>)
 800109e:	f00a fa99 	bl	800b5d4 <iprintf>
            return;
 80010a2:	e005      	b.n	80010b0 <mt6835_spi_send_recv+0x60>
    while (HAL_SPI_GetState(&SPI_INSTANCE) != HAL_SPI_STATE_READY) {
 80010a4:	4804      	ldr	r0, [pc, #16]	@ (80010b8 <mt6835_spi_send_recv+0x68>)
 80010a6:	f007 f933 	bl	8008310 <HAL_SPI_GetState>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d1ee      	bne.n	800108e <mt6835_spi_send_recv+0x3e>
        }
    }
}
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	24000300 	.word	0x24000300
 80010bc:	0800d85c 	.word	0x0800d85c
 80010c0:	0800d878 	.word	0x0800d878

080010c4 <mt6835_stm32_spi_port_init>:

/**
 * @brief mt6835 stm32 spi port init
 * @return mt6835 object
 */
mt6835_t * mt6835_stm32_spi_port_init(void) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
#if MT6835_STM32_SPI_PORT_ENABLE == 1
    mt6835_t *mt6835 = mt6835_create();
 80010ca:	f7ff fd93 	bl	8000bf4 <mt6835_create>
 80010ce:	6078      	str	r0, [r7, #4]
    mt6835_link_spi_cs_control(mt6835, mt6835_cs_control);
 80010d0:	490a      	ldr	r1, [pc, #40]	@ (80010fc <mt6835_stm32_spi_port_init+0x38>)
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff fdb2 	bl	8000c3c <mt6835_link_spi_cs_control>
    mt6835_link_spi_send_recv(mt6835, mt6835_spi_send_recv);
 80010d8:	4909      	ldr	r1, [pc, #36]	@ (8001100 <mt6835_stm32_spi_port_init+0x3c>)
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff fe2c 	bl	8000d38 <mt6835_link_spi_send_recv>
    mt6835_link_spi_send(mt6835, mt6835_spi_send);
 80010e0:	4908      	ldr	r1, [pc, #32]	@ (8001104 <mt6835_stm32_spi_port_init+0x40>)
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff fdd4 	bl	8000c90 <mt6835_link_spi_send>
    mt6835_link_spi_recv(mt6835, mt6835_spi_recv);
 80010e8:	4907      	ldr	r1, [pc, #28]	@ (8001108 <mt6835_stm32_spi_port_init+0x44>)
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff fdfa 	bl	8000ce4 <mt6835_link_spi_recv>
    return mt6835;
 80010f0:	687b      	ldr	r3, [r7, #4]
#else
    return NULL;
#endif
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	08000f95 	.word	0x08000f95
 8001100:	08001051 	.word	0x08001051
 8001104:	08000fc9 	.word	0x08000fc9
 8001108:	0800100d 	.word	0x0800100d

0800110c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001110:	4b28      	ldr	r3, [pc, #160]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001112:	4a29      	ldr	r2, [pc, #164]	@ (80011b8 <MX_SPI1_Init+0xac>)
 8001114:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001116:	4b27      	ldr	r3, [pc, #156]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001118:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800111c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800111e:	4b25      	ldr	r3, [pc, #148]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001124:	4b23      	ldr	r3, [pc, #140]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001126:	2207      	movs	r2, #7
 8001128:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800112a:	4b22      	ldr	r3, [pc, #136]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 800112c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001130:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001132:	4b20      	ldr	r3, [pc, #128]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001134:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001138:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800113a:	4b1e      	ldr	r3, [pc, #120]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 800113c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001140:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001142:	4b1c      	ldr	r3, [pc, #112]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001144:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001148:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800114a:	4b1a      	ldr	r3, [pc, #104]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 800114c:	2200      	movs	r2, #0
 800114e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001150:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001152:	2200      	movs	r2, #0
 8001154:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001156:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001158:	2200      	movs	r2, #0
 800115a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800115c:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 800115e:	2200      	movs	r2, #0
 8001160:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001162:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001164:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001168:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800116a:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 800116c:	2200      	movs	r2, #0
 800116e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001170:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001172:	2200      	movs	r2, #0
 8001174:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001176:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001178:	2200      	movs	r2, #0
 800117a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800117c:	4b0d      	ldr	r3, [pc, #52]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 800117e:	2200      	movs	r2, #0
 8001180:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001182:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001184:	2200      	movs	r2, #0
 8001186:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001188:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 800118a:	2200      	movs	r2, #0
 800118c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800118e:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001190:	2200      	movs	r2, #0
 8001192:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001194:	4b07      	ldr	r3, [pc, #28]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001196:	2200      	movs	r2, #0
 8001198:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 800119c:	2200      	movs	r2, #0
 800119e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011a0:	4804      	ldr	r0, [pc, #16]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 80011a2:	f006 f81f 	bl	80071e4 <HAL_SPI_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 80011ac:	f7ff fcb8 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	24000300 	.word	0x24000300
 80011b8:	40013000 	.word	0x40013000

080011bc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80011c0:	4b27      	ldr	r3, [pc, #156]	@ (8001260 <MX_SPI3_Init+0xa4>)
 80011c2:	4a28      	ldr	r2, [pc, #160]	@ (8001264 <MX_SPI3_Init+0xa8>)
 80011c4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80011c6:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <MX_SPI3_Init+0xa4>)
 80011c8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011cc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80011ce:	4b24      	ldr	r3, [pc, #144]	@ (8001260 <MX_SPI3_Init+0xa4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d4:	4b22      	ldr	r3, [pc, #136]	@ (8001260 <MX_SPI3_Init+0xa4>)
 80011d6:	2207      	movs	r2, #7
 80011d8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011da:	4b21      	ldr	r3, [pc, #132]	@ (8001260 <MX_SPI3_Init+0xa4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <MX_SPI3_Init+0xa4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80011e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001260 <MX_SPI3_Init+0xa4>)
 80011e8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011ec:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80011ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001260 <MX_SPI3_Init+0xa4>)
 80011f0:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80011f4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <MX_SPI3_Init+0xa4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80011fc:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <MX_SPI3_Init+0xa4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001202:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <MX_SPI3_Init+0xa4>)
 8001204:	2200      	movs	r2, #0
 8001206:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001208:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <MX_SPI3_Init+0xa4>)
 800120a:	2200      	movs	r2, #0
 800120c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800120e:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <MX_SPI3_Init+0xa4>)
 8001210:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001214:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001216:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_SPI3_Init+0xa4>)
 8001218:	2200      	movs	r2, #0
 800121a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800121c:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <MX_SPI3_Init+0xa4>)
 800121e:	2200      	movs	r2, #0
 8001220:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_SPI3_Init+0xa4>)
 8001224:	2200      	movs	r2, #0
 8001226:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001228:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <MX_SPI3_Init+0xa4>)
 800122a:	2200      	movs	r2, #0
 800122c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800122e:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_SPI3_Init+0xa4>)
 8001230:	2200      	movs	r2, #0
 8001232:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <MX_SPI3_Init+0xa4>)
 8001236:	2200      	movs	r2, #0
 8001238:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_SPI3_Init+0xa4>)
 800123c:	2200      	movs	r2, #0
 800123e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <MX_SPI3_Init+0xa4>)
 8001242:	2200      	movs	r2, #0
 8001244:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <MX_SPI3_Init+0xa4>)
 8001248:	2200      	movs	r2, #0
 800124a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	@ (8001260 <MX_SPI3_Init+0xa4>)
 800124e:	f005 ffc9 	bl	80071e4 <HAL_SPI_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001258:	f7ff fc62 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	24000388 	.word	0x24000388
 8001264:	40003c00 	.word	0x40003c00

08001268 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b0bc      	sub	sp, #240	@ 0xf0
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001280:	f107 0320 	add.w	r3, r7, #32
 8001284:	22b8      	movs	r2, #184	@ 0xb8
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f00a fb39 	bl	800b900 <memset>
  if(spiHandle->Instance==SPI1)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a87      	ldr	r2, [pc, #540]	@ (80014b0 <HAL_SPI_MspInit+0x248>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d171      	bne.n	800137c <HAL_SPI_MspInit+0x114>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001298:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a8:	f107 0320 	add.w	r3, r7, #32
 80012ac:	4618      	mov	r0, r3
 80012ae:	f004 f9d7 	bl	8005660 <HAL_RCCEx_PeriphCLKConfig>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80012b8:	f7ff fc32 	bl	8000b20 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012bc:	4b7d      	ldr	r3, [pc, #500]	@ (80014b4 <HAL_SPI_MspInit+0x24c>)
 80012be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012c2:	4a7c      	ldr	r2, [pc, #496]	@ (80014b4 <HAL_SPI_MspInit+0x24c>)
 80012c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012cc:	4b79      	ldr	r3, [pc, #484]	@ (80014b4 <HAL_SPI_MspInit+0x24c>)
 80012ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012d6:	61fb      	str	r3, [r7, #28]
 80012d8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	4b76      	ldr	r3, [pc, #472]	@ (80014b4 <HAL_SPI_MspInit+0x24c>)
 80012dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e0:	4a74      	ldr	r2, [pc, #464]	@ (80014b4 <HAL_SPI_MspInit+0x24c>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ea:	4b72      	ldr	r3, [pc, #456]	@ (80014b4 <HAL_SPI_MspInit+0x24c>)
 80012ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	61bb      	str	r3, [r7, #24]
 80012f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f8:	4b6e      	ldr	r3, [pc, #440]	@ (80014b4 <HAL_SPI_MspInit+0x24c>)
 80012fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fe:	4a6d      	ldr	r2, [pc, #436]	@ (80014b4 <HAL_SPI_MspInit+0x24c>)
 8001300:	f043 0308 	orr.w	r3, r3, #8
 8001304:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001308:	4b6a      	ldr	r3, [pc, #424]	@ (80014b4 <HAL_SPI_MspInit+0x24c>)
 800130a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001316:	2360      	movs	r3, #96	@ 0x60
 8001318:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800132e:	2305      	movs	r3, #5
 8001330:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001338:	4619      	mov	r1, r3
 800133a:	485f      	ldr	r0, [pc, #380]	@ (80014b8 <HAL_SPI_MspInit+0x250>)
 800133c:	f002 ffc8 	bl	80042d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001340:	2380      	movs	r3, #128	@ 0x80
 8001342:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001358:	2305      	movs	r3, #5
 800135a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800135e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001362:	4619      	mov	r1, r3
 8001364:	4855      	ldr	r0, [pc, #340]	@ (80014bc <HAL_SPI_MspInit+0x254>)
 8001366:	f002 ffb3 	bl	80042d0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2100      	movs	r1, #0
 800136e:	2023      	movs	r0, #35	@ 0x23
 8001370:	f000 fd64 	bl	8001e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001374:	2023      	movs	r0, #35	@ 0x23
 8001376:	f000 fd7b 	bl	8001e70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800137a:	e094      	b.n	80014a6 <HAL_SPI_MspInit+0x23e>
  else if(spiHandle->Instance==SPI3)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a4f      	ldr	r2, [pc, #316]	@ (80014c0 <HAL_SPI_MspInit+0x258>)
 8001382:	4293      	cmp	r3, r2
 8001384:	f040 808f 	bne.w	80014a6 <HAL_SPI_MspInit+0x23e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001388:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001394:	2300      	movs	r3, #0
 8001396:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001398:	f107 0320 	add.w	r3, r7, #32
 800139c:	4618      	mov	r0, r3
 800139e:	f004 f95f 	bl	8005660 <HAL_RCCEx_PeriphCLKConfig>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <HAL_SPI_MspInit+0x144>
      Error_Handler();
 80013a8:	f7ff fbba 	bl	8000b20 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013ac:	4b41      	ldr	r3, [pc, #260]	@ (80014b4 <HAL_SPI_MspInit+0x24c>)
 80013ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013b2:	4a40      	ldr	r2, [pc, #256]	@ (80014b4 <HAL_SPI_MspInit+0x24c>)
 80013b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013bc:	4b3d      	ldr	r3, [pc, #244]	@ (80014b4 <HAL_SPI_MspInit+0x24c>)
 80013be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ca:	4b3a      	ldr	r3, [pc, #232]	@ (80014b4 <HAL_SPI_MspInit+0x24c>)
 80013cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d0:	4a38      	ldr	r2, [pc, #224]	@ (80014b4 <HAL_SPI_MspInit+0x24c>)
 80013d2:	f043 0302 	orr.w	r3, r3, #2
 80013d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013da:	4b36      	ldr	r3, [pc, #216]	@ (80014b4 <HAL_SPI_MspInit+0x24c>)
 80013dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DISPL_SCK_Pin|TOUCH_MISO_Pin;
 80013e8:	2318      	movs	r3, #24
 80013ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001400:	2306      	movs	r3, #6
 8001402:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001406:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800140a:	4619      	mov	r1, r3
 800140c:	482d      	ldr	r0, [pc, #180]	@ (80014c4 <HAL_SPI_MspInit+0x25c>)
 800140e:	f002 ff5f 	bl	80042d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DISPL_MOSI_Pin;
 8001412:	2320      	movs	r3, #32
 8001414:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800142a:	2307      	movs	r3, #7
 800142c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(DISPL_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001434:	4619      	mov	r1, r3
 8001436:	4823      	ldr	r0, [pc, #140]	@ (80014c4 <HAL_SPI_MspInit+0x25c>)
 8001438:	f002 ff4a 	bl	80042d0 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream0;
 800143c:	4b22      	ldr	r3, [pc, #136]	@ (80014c8 <HAL_SPI_MspInit+0x260>)
 800143e:	4a23      	ldr	r2, [pc, #140]	@ (80014cc <HAL_SPI_MspInit+0x264>)
 8001440:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8001442:	4b21      	ldr	r3, [pc, #132]	@ (80014c8 <HAL_SPI_MspInit+0x260>)
 8001444:	223e      	movs	r2, #62	@ 0x3e
 8001446:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001448:	4b1f      	ldr	r3, [pc, #124]	@ (80014c8 <HAL_SPI_MspInit+0x260>)
 800144a:	2240      	movs	r2, #64	@ 0x40
 800144c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800144e:	4b1e      	ldr	r3, [pc, #120]	@ (80014c8 <HAL_SPI_MspInit+0x260>)
 8001450:	2200      	movs	r2, #0
 8001452:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001454:	4b1c      	ldr	r3, [pc, #112]	@ (80014c8 <HAL_SPI_MspInit+0x260>)
 8001456:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800145a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800145c:	4b1a      	ldr	r3, [pc, #104]	@ (80014c8 <HAL_SPI_MspInit+0x260>)
 800145e:	2200      	movs	r2, #0
 8001460:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001462:	4b19      	ldr	r3, [pc, #100]	@ (80014c8 <HAL_SPI_MspInit+0x260>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001468:	4b17      	ldr	r3, [pc, #92]	@ (80014c8 <HAL_SPI_MspInit+0x260>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800146e:	4b16      	ldr	r3, [pc, #88]	@ (80014c8 <HAL_SPI_MspInit+0x260>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001474:	4b14      	ldr	r3, [pc, #80]	@ (80014c8 <HAL_SPI_MspInit+0x260>)
 8001476:	2200      	movs	r2, #0
 8001478:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800147a:	4813      	ldr	r0, [pc, #76]	@ (80014c8 <HAL_SPI_MspInit+0x260>)
 800147c:	f000 fd06 	bl	8001e8c <HAL_DMA_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_SPI_MspInit+0x222>
      Error_Handler();
 8001486:	f7ff fb4b 	bl	8000b20 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a0e      	ldr	r2, [pc, #56]	@ (80014c8 <HAL_SPI_MspInit+0x260>)
 800148e:	679a      	str	r2, [r3, #120]	@ 0x78
 8001490:	4a0d      	ldr	r2, [pc, #52]	@ (80014c8 <HAL_SPI_MspInit+0x260>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	2033      	movs	r0, #51	@ 0x33
 800149c:	f000 fcce 	bl	8001e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80014a0:	2033      	movs	r0, #51	@ 0x33
 80014a2:	f000 fce5 	bl	8001e70 <HAL_NVIC_EnableIRQ>
}
 80014a6:	bf00      	nop
 80014a8:	37f0      	adds	r7, #240	@ 0xf0
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40013000 	.word	0x40013000
 80014b4:	58024400 	.word	0x58024400
 80014b8:	58020000 	.word	0x58020000
 80014bc:	58020c00 	.word	0x58020c00
 80014c0:	40003c00 	.word	0x40003c00
 80014c4:	58020400 	.word	0x58020400
 80014c8:	24000410 	.word	0x24000410
 80014cc:	40020010 	.word	0x40020010

080014d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001500 <HAL_MspInit+0x30>)
 80014d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014dc:	4a08      	ldr	r2, [pc, #32]	@ (8001500 <HAL_MspInit+0x30>)
 80014de:	f043 0302 	orr.w	r3, r3, #2
 80014e2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80014e6:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <HAL_MspInit+0x30>)
 80014e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	58024400 	.word	0x58024400

08001504 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b090      	sub	sp, #64	@ 0x40
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b0f      	cmp	r3, #15
 8001510:	d827      	bhi.n	8001562 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001512:	2200      	movs	r2, #0
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	2036      	movs	r0, #54	@ 0x36
 8001518:	f000 fc90 	bl	8001e3c <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800151c:	2036      	movs	r0, #54	@ 0x36
 800151e:	f000 fca7 	bl	8001e70 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001522:	4a29      	ldr	r2, [pc, #164]	@ (80015c8 <HAL_InitTick+0xc4>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001528:	4b28      	ldr	r3, [pc, #160]	@ (80015cc <HAL_InitTick+0xc8>)
 800152a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800152e:	4a27      	ldr	r2, [pc, #156]	@ (80015cc <HAL_InitTick+0xc8>)
 8001530:	f043 0310 	orr.w	r3, r3, #16
 8001534:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001538:	4b24      	ldr	r3, [pc, #144]	@ (80015cc <HAL_InitTick+0xc8>)
 800153a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001546:	f107 0210 	add.w	r2, r7, #16
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4611      	mov	r1, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f004 f843 	bl	80055dc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001558:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800155a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800155c:	2b00      	cmp	r3, #0
 800155e:	d106      	bne.n	800156e <HAL_InitTick+0x6a>
 8001560:	e001      	b.n	8001566 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e02b      	b.n	80015be <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001566:	f004 f80d 	bl	8005584 <HAL_RCC_GetPCLK1Freq>
 800156a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800156c:	e004      	b.n	8001578 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800156e:	f004 f809 	bl	8005584 <HAL_RCC_GetPCLK1Freq>
 8001572:	4603      	mov	r3, r0
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800157a:	4a15      	ldr	r2, [pc, #84]	@ (80015d0 <HAL_InitTick+0xcc>)
 800157c:	fba2 2303 	umull	r2, r3, r2, r3
 8001580:	0c9b      	lsrs	r3, r3, #18
 8001582:	3b01      	subs	r3, #1
 8001584:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001586:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <HAL_InitTick+0xd0>)
 8001588:	4a13      	ldr	r2, [pc, #76]	@ (80015d8 <HAL_InitTick+0xd4>)
 800158a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800158c:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <HAL_InitTick+0xd0>)
 800158e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001592:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001594:	4a0f      	ldr	r2, [pc, #60]	@ (80015d4 <HAL_InitTick+0xd0>)
 8001596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001598:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800159a:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <HAL_InitTick+0xd0>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <HAL_InitTick+0xd0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015a6:	480b      	ldr	r0, [pc, #44]	@ (80015d4 <HAL_InitTick+0xd0>)
 80015a8:	f007 f8d7 	bl	800875a <HAL_TIM_Base_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d104      	bne.n	80015bc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80015b2:	4808      	ldr	r0, [pc, #32]	@ (80015d4 <HAL_InitTick+0xd0>)
 80015b4:	f007 f932 	bl	800881c <HAL_TIM_Base_Start_IT>
 80015b8:	4603      	mov	r3, r0
 80015ba:	e000      	b.n	80015be <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3740      	adds	r7, #64	@ 0x40
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2400010c 	.word	0x2400010c
 80015cc:	58024400 	.word	0x58024400
 80015d0:	431bde83 	.word	0x431bde83
 80015d4:	24000488 	.word	0x24000488
 80015d8:	40001000 	.word	0x40001000

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <NMI_Handler+0x4>

080015e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b0c2      	sub	sp, #264	@ 0x108
 80015e8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN HardFault_IRQn 0 */
	   // สั�?�?าณเ�?ิด HardFault
	    printf("hardfault\n");
 80015ea:	483c      	ldr	r0, [pc, #240]	@ (80016dc <HardFault_Handler+0xf8>)
 80015ec:	f00a f85a 	bl	800b6a4 <puts>
 */
__STATIC_FORCEINLINE uint32_t __get_MSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 80015f0:	f3ef 8308 	mrs	r3, MSP
 80015f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  return(result);
 80015f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc

	    // รั�? Stack Frame
	    uint32_t *stackFrame = (uint32_t *) __get_MSP();
 80015fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

	    // รั�?�?�?า�?อ�?รี�?ิสเตอร�?ที�?สำ�?ั�?
	    uint32_t R0  = stackFrame[0];
 8001600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
	    uint32_t R1  = stackFrame[1];
 800160a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
	    uint32_t R2  = stackFrame[2];
 8001614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
	    uint32_t R3  = stackFrame[3];
 800161e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	    uint32_t R12 = stackFrame[4];
 8001628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	    uint32_t LR  = stackFrame[5];  // Link Register
 8001632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	    uint32_t PC  = stackFrame[6];  // Program Counter
 800163c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	    uint32_t xPSR = stackFrame[7]; // xPSR (Program Status Register)
 8001646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800164a:	69db      	ldr	r3, [r3, #28]
 800164c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

	    // สร�?า�?�?�?อ�?วามเ�?ื�?อ�?สด�?�?�?ารี�?ิสเตอร�?
	    char msg[200];
	    int len = snprintf(msg, sizeof(msg), "R0: %lx, R1: %lx, R2: %lx, R3: %lx", R0, R1, R2, R3);
 8001650:	1d38      	adds	r0, r7, #4
 8001652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001656:	9302      	str	r3, [sp, #8]
 8001658:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800165c:	9301      	str	r3, [sp, #4]
 800165e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001668:	4a1d      	ldr	r2, [pc, #116]	@ (80016e0 <HardFault_Handler+0xfc>)
 800166a:	21c8      	movs	r1, #200	@ 0xc8
 800166c:	f00a f822 	bl	800b6b4 <sniprintf>
 8001670:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
	    if (len < 0 || len >= sizeof(msg)) {
 8001674:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001678:	2b00      	cmp	r3, #0
 800167a:	db03      	blt.n	8001684 <HardFault_Handler+0xa0>
 800167c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001680:	2bc7      	cmp	r3, #199	@ 0xc7
 8001682:	d903      	bls.n	800168c <HardFault_Handler+0xa8>
	        printf("Error: snprintf failed\n");
 8001684:	4817      	ldr	r0, [pc, #92]	@ (80016e4 <HardFault_Handler+0x100>)
 8001686:	f00a f80d 	bl	800b6a4 <puts>
 800168a:	e003      	b.n	8001694 <HardFault_Handler+0xb0>
	    } else {
	        printf(msg);
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	4618      	mov	r0, r3
 8001690:	f009 ffa0 	bl	800b5d4 <iprintf>
	    }

	    snprintf(msg, sizeof(msg), "R12: %lx, LR: %lx, PC: %lx, xPSR: %lx\n", R12, LR, PC, xPSR);
 8001694:	1d38      	adds	r0, r7, #4
 8001696:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80016ac:	4a0e      	ldr	r2, [pc, #56]	@ (80016e8 <HardFault_Handler+0x104>)
 80016ae:	21c8      	movs	r1, #200	@ 0xc8
 80016b0:	f00a f800 	bl	800b6b4 <sniprintf>
	    printf(msg);
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	4618      	mov	r0, r3
 80016b8:	f009 ff8c 	bl	800b5d4 <iprintf>

	    // ตรว�?สอ�?�?หมด�?อ�?�?�?ร�?�?รม
	    if ((xPSR & 0x01000000) == 0) {
 80016bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80016c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d103      	bne.n	80016d0 <HardFault_Handler+0xec>
	        printf("Thread Mode\n");
 80016c8:	4808      	ldr	r0, [pc, #32]	@ (80016ec <HardFault_Handler+0x108>)
 80016ca:	f009 ffeb 	bl	800b6a4 <puts>
 80016ce:	e003      	b.n	80016d8 <HardFault_Handler+0xf4>
	    } else {
	        printf("Handler Mode\n");
 80016d0:	4807      	ldr	r0, [pc, #28]	@ (80016f0 <HardFault_Handler+0x10c>)
 80016d2:	f009 ffe7 	bl	800b6a4 <puts>
	    }

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d6:	bf00      	nop
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <HardFault_Handler+0xf4>
 80016dc:	0800d890 	.word	0x0800d890
 80016e0:	0800d89c 	.word	0x0800d89c
 80016e4:	0800d8c0 	.word	0x0800d8c0
 80016e8:	0800d8d8 	.word	0x0800d8d8
 80016ec:	0800d900 	.word	0x0800d900
 80016f0:	0800d90c 	.word	0x0800d90c

080016f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <MemManage_Handler+0x4>

080016fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <BusFault_Handler+0x4>

08001704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <UsageFault_Handler+0x4>

0800170c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001748:	4802      	ldr	r0, [pc, #8]	@ (8001754 <DMA1_Stream0_IRQHandler+0x10>)
 800174a:	f001 fc5b 	bl	8003004 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	24000410 	.word	0x24000410

08001758 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800175c:	4802      	ldr	r0, [pc, #8]	@ (8001768 <SPI1_IRQHandler+0x10>)
 800175e:	f006 fbd7 	bl	8007f10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	24000300 	.word	0x24000300

0800176c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001770:	4802      	ldr	r0, [pc, #8]	@ (800177c <USART3_IRQHandler+0x10>)
 8001772:	f007 fbb7 	bl	8008ee4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	240004d8 	.word	0x240004d8

08001780 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_INT_Pin);
 8001784:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001788:	f002 ff63 	bl	8004652 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}

08001790 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001794:	4802      	ldr	r0, [pc, #8]	@ (80017a0 <SPI3_IRQHandler+0x10>)
 8001796:	f006 fbbb 	bl	8007f10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	24000388 	.word	0x24000388

080017a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017a8:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <TIM6_DAC_IRQHandler+0x10>)
 80017aa:	f007 f8bd 	bl	8008928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	24000488 	.word	0x24000488

080017b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return 1;
 80017bc:	2301      	movs	r3, #1
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <_kill>:

int _kill(int pid, int sig)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017d2:	f00a f8f7 	bl	800b9c4 <__errno>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2216      	movs	r2, #22
 80017da:	601a      	str	r2, [r3, #0]
  return -1;
 80017dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <_exit>:

void _exit (int status)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ffe7 	bl	80017c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017fa:	bf00      	nop
 80017fc:	e7fd      	b.n	80017fa <_exit+0x12>

080017fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b086      	sub	sp, #24
 8001802:	af00      	add	r7, sp, #0
 8001804:	60f8      	str	r0, [r7, #12]
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	e00a      	b.n	8001826 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001810:	f3af 8000 	nop.w
 8001814:	4601      	mov	r1, r0
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	60ba      	str	r2, [r7, #8]
 800181c:	b2ca      	uxtb	r2, r1
 800181e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	3301      	adds	r3, #1
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	429a      	cmp	r2, r3
 800182c:	dbf0      	blt.n	8001810 <_read+0x12>
  }

  return len;
 800182e:	687b      	ldr	r3, [r7, #4]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001840:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001860:	605a      	str	r2, [r3, #4]
  return 0;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <_isatty>:

int _isatty(int file)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001878:	2301      	movs	r3, #1
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001886:	b480      	push	{r7}
 8001888:	b085      	sub	sp, #20
 800188a:	af00      	add	r7, sp, #0
 800188c:	60f8      	str	r0, [r7, #12]
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a8:	4a14      	ldr	r2, [pc, #80]	@ (80018fc <_sbrk+0x5c>)
 80018aa:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <_sbrk+0x60>)
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b4:	4b13      	ldr	r3, [pc, #76]	@ (8001904 <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d102      	bne.n	80018c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018bc:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <_sbrk+0x64>)
 80018be:	4a12      	ldr	r2, [pc, #72]	@ (8001908 <_sbrk+0x68>)
 80018c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018c2:	4b10      	ldr	r3, [pc, #64]	@ (8001904 <_sbrk+0x64>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d207      	bcs.n	80018e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d0:	f00a f878 	bl	800b9c4 <__errno>
 80018d4:	4603      	mov	r3, r0
 80018d6:	220c      	movs	r2, #12
 80018d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
 80018de:	e009      	b.n	80018f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e0:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018e6:	4b07      	ldr	r3, [pc, #28]	@ (8001904 <_sbrk+0x64>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	4a05      	ldr	r2, [pc, #20]	@ (8001904 <_sbrk+0x64>)
 80018f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	24050000 	.word	0x24050000
 8001900:	00000400 	.word	0x00000400
 8001904:	240004d4 	.word	0x240004d4
 8001908:	240006c0 	.word	0x240006c0

0800190c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001910:	4b32      	ldr	r3, [pc, #200]	@ (80019dc <SystemInit+0xd0>)
 8001912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001916:	4a31      	ldr	r2, [pc, #196]	@ (80019dc <SystemInit+0xd0>)
 8001918:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800191c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001920:	4b2f      	ldr	r3, [pc, #188]	@ (80019e0 <SystemInit+0xd4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 030f 	and.w	r3, r3, #15
 8001928:	2b06      	cmp	r3, #6
 800192a:	d807      	bhi.n	800193c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800192c:	4b2c      	ldr	r3, [pc, #176]	@ (80019e0 <SystemInit+0xd4>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 030f 	bic.w	r3, r3, #15
 8001934:	4a2a      	ldr	r2, [pc, #168]	@ (80019e0 <SystemInit+0xd4>)
 8001936:	f043 0307 	orr.w	r3, r3, #7
 800193a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800193c:	4b29      	ldr	r3, [pc, #164]	@ (80019e4 <SystemInit+0xd8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a28      	ldr	r2, [pc, #160]	@ (80019e4 <SystemInit+0xd8>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001948:	4b26      	ldr	r3, [pc, #152]	@ (80019e4 <SystemInit+0xd8>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800194e:	4b25      	ldr	r3, [pc, #148]	@ (80019e4 <SystemInit+0xd8>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	4924      	ldr	r1, [pc, #144]	@ (80019e4 <SystemInit+0xd8>)
 8001954:	4b24      	ldr	r3, [pc, #144]	@ (80019e8 <SystemInit+0xdc>)
 8001956:	4013      	ands	r3, r2
 8001958:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800195a:	4b21      	ldr	r3, [pc, #132]	@ (80019e0 <SystemInit+0xd4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d007      	beq.n	8001976 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001966:	4b1e      	ldr	r3, [pc, #120]	@ (80019e0 <SystemInit+0xd4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 030f 	bic.w	r3, r3, #15
 800196e:	4a1c      	ldr	r2, [pc, #112]	@ (80019e0 <SystemInit+0xd4>)
 8001970:	f043 0307 	orr.w	r3, r3, #7
 8001974:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001976:	4b1b      	ldr	r3, [pc, #108]	@ (80019e4 <SystemInit+0xd8>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800197c:	4b19      	ldr	r3, [pc, #100]	@ (80019e4 <SystemInit+0xd8>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001982:	4b18      	ldr	r3, [pc, #96]	@ (80019e4 <SystemInit+0xd8>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001988:	4b16      	ldr	r3, [pc, #88]	@ (80019e4 <SystemInit+0xd8>)
 800198a:	4a18      	ldr	r2, [pc, #96]	@ (80019ec <SystemInit+0xe0>)
 800198c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800198e:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <SystemInit+0xd8>)
 8001990:	4a17      	ldr	r2, [pc, #92]	@ (80019f0 <SystemInit+0xe4>)
 8001992:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001994:	4b13      	ldr	r3, [pc, #76]	@ (80019e4 <SystemInit+0xd8>)
 8001996:	4a17      	ldr	r2, [pc, #92]	@ (80019f4 <SystemInit+0xe8>)
 8001998:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800199a:	4b12      	ldr	r3, [pc, #72]	@ (80019e4 <SystemInit+0xd8>)
 800199c:	2200      	movs	r2, #0
 800199e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80019a0:	4b10      	ldr	r3, [pc, #64]	@ (80019e4 <SystemInit+0xd8>)
 80019a2:	4a14      	ldr	r2, [pc, #80]	@ (80019f4 <SystemInit+0xe8>)
 80019a4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80019a6:	4b0f      	ldr	r3, [pc, #60]	@ (80019e4 <SystemInit+0xd8>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80019ac:	4b0d      	ldr	r3, [pc, #52]	@ (80019e4 <SystemInit+0xd8>)
 80019ae:	4a11      	ldr	r2, [pc, #68]	@ (80019f4 <SystemInit+0xe8>)
 80019b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80019b2:	4b0c      	ldr	r3, [pc, #48]	@ (80019e4 <SystemInit+0xd8>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019b8:	4b0a      	ldr	r3, [pc, #40]	@ (80019e4 <SystemInit+0xd8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a09      	ldr	r2, [pc, #36]	@ (80019e4 <SystemInit+0xd8>)
 80019be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019c4:	4b07      	ldr	r3, [pc, #28]	@ (80019e4 <SystemInit+0xd8>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <SystemInit+0xec>)
 80019cc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80019d0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00
 80019e0:	52002000 	.word	0x52002000
 80019e4:	58024400 	.word	0x58024400
 80019e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80019ec:	02020200 	.word	0x02020200
 80019f0:	01ff0000 	.word	0x01ff0000
 80019f4:	01010280 	.word	0x01010280
 80019f8:	52004000 	.word	0x52004000

080019fc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a00:	4b22      	ldr	r3, [pc, #136]	@ (8001a8c <MX_USART3_UART_Init+0x90>)
 8001a02:	4a23      	ldr	r2, [pc, #140]	@ (8001a90 <MX_USART3_UART_Init+0x94>)
 8001a04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a06:	4b21      	ldr	r3, [pc, #132]	@ (8001a8c <MX_USART3_UART_Init+0x90>)
 8001a08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a8c <MX_USART3_UART_Init+0x90>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a14:	4b1d      	ldr	r3, [pc, #116]	@ (8001a8c <MX_USART3_UART_Init+0x90>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a8c <MX_USART3_UART_Init+0x90>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a20:	4b1a      	ldr	r3, [pc, #104]	@ (8001a8c <MX_USART3_UART_Init+0x90>)
 8001a22:	220c      	movs	r2, #12
 8001a24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a26:	4b19      	ldr	r3, [pc, #100]	@ (8001a8c <MX_USART3_UART_Init+0x90>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a2c:	4b17      	ldr	r3, [pc, #92]	@ (8001a8c <MX_USART3_UART_Init+0x90>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a32:	4b16      	ldr	r3, [pc, #88]	@ (8001a8c <MX_USART3_UART_Init+0x90>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a38:	4b14      	ldr	r3, [pc, #80]	@ (8001a8c <MX_USART3_UART_Init+0x90>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a3e:	4b13      	ldr	r3, [pc, #76]	@ (8001a8c <MX_USART3_UART_Init+0x90>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a44:	4811      	ldr	r0, [pc, #68]	@ (8001a8c <MX_USART3_UART_Init+0x90>)
 8001a46:	f007 f96f 	bl	8008d28 <HAL_UART_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001a50:	f7ff f866 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a54:	2100      	movs	r1, #0
 8001a56:	480d      	ldr	r0, [pc, #52]	@ (8001a8c <MX_USART3_UART_Init+0x90>)
 8001a58:	f008 ff42 	bl	800a8e0 <HAL_UARTEx_SetTxFifoThreshold>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001a62:	f7ff f85d 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a66:	2100      	movs	r1, #0
 8001a68:	4808      	ldr	r0, [pc, #32]	@ (8001a8c <MX_USART3_UART_Init+0x90>)
 8001a6a:	f008 ff77 	bl	800a95c <HAL_UARTEx_SetRxFifoThreshold>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001a74:	f7ff f854 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a78:	4804      	ldr	r0, [pc, #16]	@ (8001a8c <MX_USART3_UART_Init+0x90>)
 8001a7a:	f008 fef8 	bl	800a86e <HAL_UARTEx_DisableFifoMode>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001a84:	f7ff f84c 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	240004d8 	.word	0x240004d8
 8001a90:	40004800 	.word	0x40004800

08001a94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b0b8      	sub	sp, #224	@ 0xe0
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aac:	f107 0310 	add.w	r3, r7, #16
 8001ab0:	22b8      	movs	r2, #184	@ 0xb8
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f009 ff23 	bl	800b900 <memset>
  if(uartHandle->Instance==USART3)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a2b      	ldr	r2, [pc, #172]	@ (8001b6c <HAL_UART_MspInit+0xd8>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d14e      	bne.n	8001b62 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ac4:	f04f 0202 	mov.w	r2, #2
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ad6:	f107 0310 	add.w	r3, r7, #16
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 fdc0 	bl	8005660 <HAL_RCCEx_PeriphCLKConfig>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001ae6:	f7ff f81b 	bl	8000b20 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001aea:	4b21      	ldr	r3, [pc, #132]	@ (8001b70 <HAL_UART_MspInit+0xdc>)
 8001aec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001af0:	4a1f      	ldr	r2, [pc, #124]	@ (8001b70 <HAL_UART_MspInit+0xdc>)
 8001af2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001af6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001afa:	4b1d      	ldr	r3, [pc, #116]	@ (8001b70 <HAL_UART_MspInit+0xdc>)
 8001afc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b08:	4b19      	ldr	r3, [pc, #100]	@ (8001b70 <HAL_UART_MspInit+0xdc>)
 8001b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b0e:	4a18      	ldr	r2, [pc, #96]	@ (8001b70 <HAL_UART_MspInit+0xdc>)
 8001b10:	f043 0308 	orr.w	r3, r3, #8
 8001b14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b18:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <HAL_UART_MspInit+0xdc>)
 8001b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001b26:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b40:	2307      	movs	r3, #7
 8001b42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b46:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4809      	ldr	r0, [pc, #36]	@ (8001b74 <HAL_UART_MspInit+0xe0>)
 8001b4e:	f002 fbbf 	bl	80042d0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	2027      	movs	r0, #39	@ 0x27
 8001b58:	f000 f970 	bl	8001e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b5c:	2027      	movs	r0, #39	@ 0x27
 8001b5e:	f000 f987 	bl	8001e70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b62:	bf00      	nop
 8001b64:	37e0      	adds	r7, #224	@ 0xe0
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40004800 	.word	0x40004800
 8001b70:	58024400 	.word	0x58024400
 8001b74:	58020c00 	.word	0x58020c00

08001b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b7c:	f7ff fec6 	bl	800190c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b80:	480c      	ldr	r0, [pc, #48]	@ (8001bb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b82:	490d      	ldr	r1, [pc, #52]	@ (8001bb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b84:	4a0d      	ldr	r2, [pc, #52]	@ (8001bbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b88:	e002      	b.n	8001b90 <LoopCopyDataInit>

08001b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8e:	3304      	adds	r3, #4

08001b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b94:	d3f9      	bcc.n	8001b8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b96:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b98:	4c0a      	ldr	r4, [pc, #40]	@ (8001bc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b9c:	e001      	b.n	8001ba2 <LoopFillZerobss>

08001b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba0:	3204      	adds	r2, #4

08001ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba4:	d3fb      	bcc.n	8001b9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ba6:	f009 ff13 	bl	800b9d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001baa:	f7fe fee9 	bl	8000980 <main>
  bx  lr
 8001bae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bb0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001bb4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001bb8:	240002dc 	.word	0x240002dc
  ldr r2, =_sidata
 8001bbc:	0800dce0 	.word	0x0800dce0
  ldr r2, =_sbss
 8001bc0:	240002dc 	.word	0x240002dc
  ldr r4, =_ebss
 8001bc4:	240006bc 	.word	0x240006bc

08001bc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bc8:	e7fe      	b.n	8001bc8 <ADC3_IRQHandler>
	...

08001bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd2:	2003      	movs	r0, #3
 8001bd4:	f000 f927 	bl	8001e26 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bd8:	f003 fb2a 	bl	8005230 <HAL_RCC_GetSysClockFreq>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4b15      	ldr	r3, [pc, #84]	@ (8001c34 <HAL_Init+0x68>)
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	0a1b      	lsrs	r3, r3, #8
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	4913      	ldr	r1, [pc, #76]	@ (8001c38 <HAL_Init+0x6c>)
 8001bea:	5ccb      	ldrb	r3, [r1, r3]
 8001bec:	f003 031f 	and.w	r3, r3, #31
 8001bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c34 <HAL_Init+0x68>)
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8001c38 <HAL_Init+0x6c>)
 8001c00:	5cd3      	ldrb	r3, [r2, r3]
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c3c <HAL_Init+0x70>)
 8001c0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c10:	4a0b      	ldr	r2, [pc, #44]	@ (8001c40 <HAL_Init+0x74>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c16:	200f      	movs	r0, #15
 8001c18:	f7ff fc74 	bl	8001504 <HAL_InitTick>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e002      	b.n	8001c2c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c26:	f7ff fc53 	bl	80014d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	58024400 	.word	0x58024400
 8001c38:	0800d91c 	.word	0x0800d91c
 8001c3c:	24000108 	.word	0x24000108
 8001c40:	24000104 	.word	0x24000104

08001c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_IncTick+0x20>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_IncTick+0x24>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	4a04      	ldr	r2, [pc, #16]	@ (8001c68 <HAL_IncTick+0x24>)
 8001c56:	6013      	str	r3, [r2, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	24000110 	.word	0x24000110
 8001c68:	2400056c 	.word	0x2400056c

08001c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c70:	4b03      	ldr	r3, [pc, #12]	@ (8001c80 <HAL_GetTick+0x14>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	2400056c 	.word	0x2400056c

08001c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c8c:	f7ff ffee 	bl	8001c6c <HAL_GetTick>
 8001c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9c:	d005      	beq.n	8001caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc8 <HAL_Delay+0x44>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001caa:	bf00      	nop
 8001cac:	f7ff ffde 	bl	8001c6c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d8f7      	bhi.n	8001cac <HAL_Delay+0x28>
  {
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	24000110 	.word	0x24000110

08001ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <__NVIC_SetPriorityGrouping+0x40>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cf4:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfa:	4a04      	ldr	r2, [pc, #16]	@ (8001d0c <__NVIC_SetPriorityGrouping+0x40>)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	60d3      	str	r3, [r2, #12]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00
 8001d10:	05fa0000 	.word	0x05fa0000

08001d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d18:	4b04      	ldr	r3, [pc, #16]	@ (8001d2c <__NVIC_GetPriorityGrouping+0x18>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	f003 0307 	and.w	r3, r3, #7
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	db0b      	blt.n	8001d5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	f003 021f 	and.w	r2, r3, #31
 8001d48:	4907      	ldr	r1, [pc, #28]	@ (8001d68 <__NVIC_EnableIRQ+0x38>)
 8001d4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	2001      	movs	r0, #1
 8001d52:	fa00 f202 	lsl.w	r2, r0, r2
 8001d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000e100 	.word	0xe000e100

08001d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	6039      	str	r1, [r7, #0]
 8001d76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	db0a      	blt.n	8001d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	490c      	ldr	r1, [pc, #48]	@ (8001db8 <__NVIC_SetPriority+0x4c>)
 8001d86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d8a:	0112      	lsls	r2, r2, #4
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	440b      	add	r3, r1
 8001d90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d94:	e00a      	b.n	8001dac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4908      	ldr	r1, [pc, #32]	@ (8001dbc <__NVIC_SetPriority+0x50>)
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	3b04      	subs	r3, #4
 8001da4:	0112      	lsls	r2, r2, #4
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	440b      	add	r3, r1
 8001daa:	761a      	strb	r2, [r3, #24]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	e000e100 	.word	0xe000e100
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b089      	sub	sp, #36	@ 0x24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f1c3 0307 	rsb	r3, r3, #7
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	bf28      	it	cs
 8001dde:	2304      	movcs	r3, #4
 8001de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3304      	adds	r3, #4
 8001de6:	2b06      	cmp	r3, #6
 8001de8:	d902      	bls.n	8001df0 <NVIC_EncodePriority+0x30>
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3b03      	subs	r3, #3
 8001dee:	e000      	b.n	8001df2 <NVIC_EncodePriority+0x32>
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	f04f 32ff 	mov.w	r2, #4294967295
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	401a      	ands	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e08:	f04f 31ff 	mov.w	r1, #4294967295
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	43d9      	mvns	r1, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	4313      	orrs	r3, r2
         );
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3724      	adds	r7, #36	@ 0x24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ff4c 	bl	8001ccc <__NVIC_SetPriorityGrouping>
}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
 8001e48:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e4a:	f7ff ff63 	bl	8001d14 <__NVIC_GetPriorityGrouping>
 8001e4e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	68b9      	ldr	r1, [r7, #8]
 8001e54:	6978      	ldr	r0, [r7, #20]
 8001e56:	f7ff ffb3 	bl	8001dc0 <NVIC_EncodePriority>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e60:	4611      	mov	r1, r2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff ff82 	bl	8001d6c <__NVIC_SetPriority>
}
 8001e68:	bf00      	nop
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff ff56 	bl	8001d30 <__NVIC_EnableIRQ>
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001e94:	f7ff feea 	bl	8001c6c <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e312      	b.n	80024ca <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a66      	ldr	r2, [pc, #408]	@ (8002044 <HAL_DMA_Init+0x1b8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d04a      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a65      	ldr	r2, [pc, #404]	@ (8002048 <HAL_DMA_Init+0x1bc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d045      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a63      	ldr	r2, [pc, #396]	@ (800204c <HAL_DMA_Init+0x1c0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d040      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a62      	ldr	r2, [pc, #392]	@ (8002050 <HAL_DMA_Init+0x1c4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d03b      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a60      	ldr	r2, [pc, #384]	@ (8002054 <HAL_DMA_Init+0x1c8>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d036      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a5f      	ldr	r2, [pc, #380]	@ (8002058 <HAL_DMA_Init+0x1cc>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d031      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a5d      	ldr	r2, [pc, #372]	@ (800205c <HAL_DMA_Init+0x1d0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d02c      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a5c      	ldr	r2, [pc, #368]	@ (8002060 <HAL_DMA_Init+0x1d4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d027      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a5a      	ldr	r2, [pc, #360]	@ (8002064 <HAL_DMA_Init+0x1d8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d022      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a59      	ldr	r2, [pc, #356]	@ (8002068 <HAL_DMA_Init+0x1dc>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d01d      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a57      	ldr	r2, [pc, #348]	@ (800206c <HAL_DMA_Init+0x1e0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d018      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a56      	ldr	r2, [pc, #344]	@ (8002070 <HAL_DMA_Init+0x1e4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d013      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a54      	ldr	r2, [pc, #336]	@ (8002074 <HAL_DMA_Init+0x1e8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00e      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a53      	ldr	r2, [pc, #332]	@ (8002078 <HAL_DMA_Init+0x1ec>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d009      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a51      	ldr	r2, [pc, #324]	@ (800207c <HAL_DMA_Init+0x1f0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d004      	beq.n	8001f44 <HAL_DMA_Init+0xb8>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a50      	ldr	r2, [pc, #320]	@ (8002080 <HAL_DMA_Init+0x1f4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d101      	bne.n	8001f48 <HAL_DMA_Init+0xbc>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <HAL_DMA_Init+0xbe>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 813c 	beq.w	80021c8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2202      	movs	r2, #2
 8001f54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a37      	ldr	r2, [pc, #220]	@ (8002044 <HAL_DMA_Init+0x1b8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d04a      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a36      	ldr	r2, [pc, #216]	@ (8002048 <HAL_DMA_Init+0x1bc>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d045      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a34      	ldr	r2, [pc, #208]	@ (800204c <HAL_DMA_Init+0x1c0>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d040      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a33      	ldr	r2, [pc, #204]	@ (8002050 <HAL_DMA_Init+0x1c4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d03b      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a31      	ldr	r2, [pc, #196]	@ (8002054 <HAL_DMA_Init+0x1c8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d036      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a30      	ldr	r2, [pc, #192]	@ (8002058 <HAL_DMA_Init+0x1cc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d031      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a2e      	ldr	r2, [pc, #184]	@ (800205c <HAL_DMA_Init+0x1d0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d02c      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a2d      	ldr	r2, [pc, #180]	@ (8002060 <HAL_DMA_Init+0x1d4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d027      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a2b      	ldr	r2, [pc, #172]	@ (8002064 <HAL_DMA_Init+0x1d8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d022      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a2a      	ldr	r2, [pc, #168]	@ (8002068 <HAL_DMA_Init+0x1dc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d01d      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a28      	ldr	r2, [pc, #160]	@ (800206c <HAL_DMA_Init+0x1e0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d018      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a27      	ldr	r2, [pc, #156]	@ (8002070 <HAL_DMA_Init+0x1e4>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d013      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a25      	ldr	r2, [pc, #148]	@ (8002074 <HAL_DMA_Init+0x1e8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00e      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a24      	ldr	r2, [pc, #144]	@ (8002078 <HAL_DMA_Init+0x1ec>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d009      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a22      	ldr	r2, [pc, #136]	@ (800207c <HAL_DMA_Init+0x1f0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d004      	beq.n	8002000 <HAL_DMA_Init+0x174>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a21      	ldr	r2, [pc, #132]	@ (8002080 <HAL_DMA_Init+0x1f4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d108      	bne.n	8002012 <HAL_DMA_Init+0x186>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0201 	bic.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	e007      	b.n	8002022 <HAL_DMA_Init+0x196>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0201 	bic.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002022:	e02f      	b.n	8002084 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002024:	f7ff fe22 	bl	8001c6c <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b05      	cmp	r3, #5
 8002030:	d928      	bls.n	8002084 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2220      	movs	r2, #32
 8002036:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2203      	movs	r2, #3
 800203c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e242      	b.n	80024ca <HAL_DMA_Init+0x63e>
 8002044:	40020010 	.word	0x40020010
 8002048:	40020028 	.word	0x40020028
 800204c:	40020040 	.word	0x40020040
 8002050:	40020058 	.word	0x40020058
 8002054:	40020070 	.word	0x40020070
 8002058:	40020088 	.word	0x40020088
 800205c:	400200a0 	.word	0x400200a0
 8002060:	400200b8 	.word	0x400200b8
 8002064:	40020410 	.word	0x40020410
 8002068:	40020428 	.word	0x40020428
 800206c:	40020440 	.word	0x40020440
 8002070:	40020458 	.word	0x40020458
 8002074:	40020470 	.word	0x40020470
 8002078:	40020488 	.word	0x40020488
 800207c:	400204a0 	.word	0x400204a0
 8002080:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1c8      	bne.n	8002024 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	4b83      	ldr	r3, [pc, #524]	@ (80022ac <HAL_DMA_Init+0x420>)
 800209e:	4013      	ands	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80020aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d107      	bne.n	80020e8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e0:	4313      	orrs	r3, r2
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b28      	cmp	r3, #40	@ 0x28
 80020ee:	d903      	bls.n	80020f8 <HAL_DMA_Init+0x26c>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80020f6:	d91f      	bls.n	8002138 <HAL_DMA_Init+0x2ac>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80020fe:	d903      	bls.n	8002108 <HAL_DMA_Init+0x27c>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b42      	cmp	r3, #66	@ 0x42
 8002106:	d917      	bls.n	8002138 <HAL_DMA_Init+0x2ac>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b46      	cmp	r3, #70	@ 0x46
 800210e:	d903      	bls.n	8002118 <HAL_DMA_Init+0x28c>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b48      	cmp	r3, #72	@ 0x48
 8002116:	d90f      	bls.n	8002138 <HAL_DMA_Init+0x2ac>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b4e      	cmp	r3, #78	@ 0x4e
 800211e:	d903      	bls.n	8002128 <HAL_DMA_Init+0x29c>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b52      	cmp	r3, #82	@ 0x52
 8002126:	d907      	bls.n	8002138 <HAL_DMA_Init+0x2ac>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b73      	cmp	r3, #115	@ 0x73
 800212e:	d905      	bls.n	800213c <HAL_DMA_Init+0x2b0>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b77      	cmp	r3, #119	@ 0x77
 8002136:	d801      	bhi.n	800213c <HAL_DMA_Init+0x2b0>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <HAL_DMA_Init+0x2b2>
 800213c:	2300      	movs	r3, #0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002148:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f023 0307 	bic.w	r3, r3, #7
 8002160:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	4313      	orrs	r3, r2
 800216a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002170:	2b04      	cmp	r3, #4
 8002172:	d117      	bne.n	80021a4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	4313      	orrs	r3, r2
 800217c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00e      	beq.n	80021a4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f001 ff18 	bl	8003fbc <DMA_CheckFifoParam>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d008      	beq.n	80021a4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2240      	movs	r2, #64	@ 0x40
 8002196:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e192      	b.n	80024ca <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f001 fe53 	bl	8003e58 <DMA_CalcBaseAndBitshift>
 80021b2:	4603      	mov	r3, r0
 80021b4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	223f      	movs	r2, #63	@ 0x3f
 80021c0:	409a      	lsls	r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	e0c8      	b.n	800235a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a38      	ldr	r2, [pc, #224]	@ (80022b0 <HAL_DMA_Init+0x424>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d022      	beq.n	8002218 <HAL_DMA_Init+0x38c>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a37      	ldr	r2, [pc, #220]	@ (80022b4 <HAL_DMA_Init+0x428>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d01d      	beq.n	8002218 <HAL_DMA_Init+0x38c>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a35      	ldr	r2, [pc, #212]	@ (80022b8 <HAL_DMA_Init+0x42c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d018      	beq.n	8002218 <HAL_DMA_Init+0x38c>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a34      	ldr	r2, [pc, #208]	@ (80022bc <HAL_DMA_Init+0x430>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d013      	beq.n	8002218 <HAL_DMA_Init+0x38c>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a32      	ldr	r2, [pc, #200]	@ (80022c0 <HAL_DMA_Init+0x434>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d00e      	beq.n	8002218 <HAL_DMA_Init+0x38c>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a31      	ldr	r2, [pc, #196]	@ (80022c4 <HAL_DMA_Init+0x438>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d009      	beq.n	8002218 <HAL_DMA_Init+0x38c>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a2f      	ldr	r2, [pc, #188]	@ (80022c8 <HAL_DMA_Init+0x43c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d004      	beq.n	8002218 <HAL_DMA_Init+0x38c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a2e      	ldr	r2, [pc, #184]	@ (80022cc <HAL_DMA_Init+0x440>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d101      	bne.n	800221c <HAL_DMA_Init+0x390>
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <HAL_DMA_Init+0x392>
 800221c:	2300      	movs	r3, #0
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 8092 	beq.w	8002348 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a21      	ldr	r2, [pc, #132]	@ (80022b0 <HAL_DMA_Init+0x424>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d021      	beq.n	8002272 <HAL_DMA_Init+0x3e6>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a20      	ldr	r2, [pc, #128]	@ (80022b4 <HAL_DMA_Init+0x428>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d01c      	beq.n	8002272 <HAL_DMA_Init+0x3e6>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a1e      	ldr	r2, [pc, #120]	@ (80022b8 <HAL_DMA_Init+0x42c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d017      	beq.n	8002272 <HAL_DMA_Init+0x3e6>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a1d      	ldr	r2, [pc, #116]	@ (80022bc <HAL_DMA_Init+0x430>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d012      	beq.n	8002272 <HAL_DMA_Init+0x3e6>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1b      	ldr	r2, [pc, #108]	@ (80022c0 <HAL_DMA_Init+0x434>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00d      	beq.n	8002272 <HAL_DMA_Init+0x3e6>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a1a      	ldr	r2, [pc, #104]	@ (80022c4 <HAL_DMA_Init+0x438>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d008      	beq.n	8002272 <HAL_DMA_Init+0x3e6>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a18      	ldr	r2, [pc, #96]	@ (80022c8 <HAL_DMA_Init+0x43c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d003      	beq.n	8002272 <HAL_DMA_Init+0x3e6>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a17      	ldr	r2, [pc, #92]	@ (80022cc <HAL_DMA_Init+0x440>)
 8002270:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2202      	movs	r2, #2
 8002276:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	4b10      	ldr	r3, [pc, #64]	@ (80022d0 <HAL_DMA_Init+0x444>)
 800228e:	4013      	ands	r3, r2
 8002290:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b40      	cmp	r3, #64	@ 0x40
 8002298:	d01c      	beq.n	80022d4 <HAL_DMA_Init+0x448>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2b80      	cmp	r3, #128	@ 0x80
 80022a0:	d102      	bne.n	80022a8 <HAL_DMA_Init+0x41c>
 80022a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022a6:	e016      	b.n	80022d6 <HAL_DMA_Init+0x44a>
 80022a8:	2300      	movs	r3, #0
 80022aa:	e014      	b.n	80022d6 <HAL_DMA_Init+0x44a>
 80022ac:	fe10803f 	.word	0xfe10803f
 80022b0:	58025408 	.word	0x58025408
 80022b4:	5802541c 	.word	0x5802541c
 80022b8:	58025430 	.word	0x58025430
 80022bc:	58025444 	.word	0x58025444
 80022c0:	58025458 	.word	0x58025458
 80022c4:	5802546c 	.word	0x5802546c
 80022c8:	58025480 	.word	0x58025480
 80022cc:	58025494 	.word	0x58025494
 80022d0:	fffe000f 	.word	0xfffe000f
 80022d4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68d2      	ldr	r2, [r2, #12]
 80022da:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80022e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80022ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80022f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80022fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002304:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	4313      	orrs	r3, r2
 800230a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	4b6e      	ldr	r3, [pc, #440]	@ (80024d4 <HAL_DMA_Init+0x648>)
 800231c:	4413      	add	r3, r2
 800231e:	4a6e      	ldr	r2, [pc, #440]	@ (80024d8 <HAL_DMA_Init+0x64c>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	009a      	lsls	r2, r3, #2
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f001 fd93 	bl	8003e58 <DMA_CalcBaseAndBitshift>
 8002332:	4603      	mov	r3, r0
 8002334:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800233a:	f003 031f 	and.w	r3, r3, #31
 800233e:	2201      	movs	r2, #1
 8002340:	409a      	lsls	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	e008      	b.n	800235a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2240      	movs	r2, #64	@ 0x40
 800234c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2203      	movs	r2, #3
 8002352:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e0b7      	b.n	80024ca <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a5f      	ldr	r2, [pc, #380]	@ (80024dc <HAL_DMA_Init+0x650>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d072      	beq.n	800244a <HAL_DMA_Init+0x5be>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a5d      	ldr	r2, [pc, #372]	@ (80024e0 <HAL_DMA_Init+0x654>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d06d      	beq.n	800244a <HAL_DMA_Init+0x5be>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a5c      	ldr	r2, [pc, #368]	@ (80024e4 <HAL_DMA_Init+0x658>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d068      	beq.n	800244a <HAL_DMA_Init+0x5be>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a5a      	ldr	r2, [pc, #360]	@ (80024e8 <HAL_DMA_Init+0x65c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d063      	beq.n	800244a <HAL_DMA_Init+0x5be>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a59      	ldr	r2, [pc, #356]	@ (80024ec <HAL_DMA_Init+0x660>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d05e      	beq.n	800244a <HAL_DMA_Init+0x5be>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a57      	ldr	r2, [pc, #348]	@ (80024f0 <HAL_DMA_Init+0x664>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d059      	beq.n	800244a <HAL_DMA_Init+0x5be>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a56      	ldr	r2, [pc, #344]	@ (80024f4 <HAL_DMA_Init+0x668>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d054      	beq.n	800244a <HAL_DMA_Init+0x5be>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a54      	ldr	r2, [pc, #336]	@ (80024f8 <HAL_DMA_Init+0x66c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d04f      	beq.n	800244a <HAL_DMA_Init+0x5be>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a53      	ldr	r2, [pc, #332]	@ (80024fc <HAL_DMA_Init+0x670>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d04a      	beq.n	800244a <HAL_DMA_Init+0x5be>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a51      	ldr	r2, [pc, #324]	@ (8002500 <HAL_DMA_Init+0x674>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d045      	beq.n	800244a <HAL_DMA_Init+0x5be>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a50      	ldr	r2, [pc, #320]	@ (8002504 <HAL_DMA_Init+0x678>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d040      	beq.n	800244a <HAL_DMA_Init+0x5be>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a4e      	ldr	r2, [pc, #312]	@ (8002508 <HAL_DMA_Init+0x67c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d03b      	beq.n	800244a <HAL_DMA_Init+0x5be>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a4d      	ldr	r2, [pc, #308]	@ (800250c <HAL_DMA_Init+0x680>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d036      	beq.n	800244a <HAL_DMA_Init+0x5be>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002510 <HAL_DMA_Init+0x684>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d031      	beq.n	800244a <HAL_DMA_Init+0x5be>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a4a      	ldr	r2, [pc, #296]	@ (8002514 <HAL_DMA_Init+0x688>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d02c      	beq.n	800244a <HAL_DMA_Init+0x5be>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a48      	ldr	r2, [pc, #288]	@ (8002518 <HAL_DMA_Init+0x68c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d027      	beq.n	800244a <HAL_DMA_Init+0x5be>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a47      	ldr	r2, [pc, #284]	@ (800251c <HAL_DMA_Init+0x690>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d022      	beq.n	800244a <HAL_DMA_Init+0x5be>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a45      	ldr	r2, [pc, #276]	@ (8002520 <HAL_DMA_Init+0x694>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d01d      	beq.n	800244a <HAL_DMA_Init+0x5be>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a44      	ldr	r2, [pc, #272]	@ (8002524 <HAL_DMA_Init+0x698>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d018      	beq.n	800244a <HAL_DMA_Init+0x5be>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a42      	ldr	r2, [pc, #264]	@ (8002528 <HAL_DMA_Init+0x69c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d013      	beq.n	800244a <HAL_DMA_Init+0x5be>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a41      	ldr	r2, [pc, #260]	@ (800252c <HAL_DMA_Init+0x6a0>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d00e      	beq.n	800244a <HAL_DMA_Init+0x5be>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a3f      	ldr	r2, [pc, #252]	@ (8002530 <HAL_DMA_Init+0x6a4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d009      	beq.n	800244a <HAL_DMA_Init+0x5be>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a3e      	ldr	r2, [pc, #248]	@ (8002534 <HAL_DMA_Init+0x6a8>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d004      	beq.n	800244a <HAL_DMA_Init+0x5be>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a3c      	ldr	r2, [pc, #240]	@ (8002538 <HAL_DMA_Init+0x6ac>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d101      	bne.n	800244e <HAL_DMA_Init+0x5c2>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_DMA_Init+0x5c4>
 800244e:	2300      	movs	r3, #0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d032      	beq.n	80024ba <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f001 fe2d 	bl	80040b4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2b80      	cmp	r3, #128	@ 0x80
 8002460:	d102      	bne.n	8002468 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800247c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d010      	beq.n	80024a8 <HAL_DMA_Init+0x61c>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b08      	cmp	r3, #8
 800248c:	d80c      	bhi.n	80024a8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f001 feaa 	bl	80041e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	e008      	b.n	80024ba <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	a7fdabf8 	.word	0xa7fdabf8
 80024d8:	cccccccd 	.word	0xcccccccd
 80024dc:	40020010 	.word	0x40020010
 80024e0:	40020028 	.word	0x40020028
 80024e4:	40020040 	.word	0x40020040
 80024e8:	40020058 	.word	0x40020058
 80024ec:	40020070 	.word	0x40020070
 80024f0:	40020088 	.word	0x40020088
 80024f4:	400200a0 	.word	0x400200a0
 80024f8:	400200b8 	.word	0x400200b8
 80024fc:	40020410 	.word	0x40020410
 8002500:	40020428 	.word	0x40020428
 8002504:	40020440 	.word	0x40020440
 8002508:	40020458 	.word	0x40020458
 800250c:	40020470 	.word	0x40020470
 8002510:	40020488 	.word	0x40020488
 8002514:	400204a0 	.word	0x400204a0
 8002518:	400204b8 	.word	0x400204b8
 800251c:	58025408 	.word	0x58025408
 8002520:	5802541c 	.word	0x5802541c
 8002524:	58025430 	.word	0x58025430
 8002528:	58025444 	.word	0x58025444
 800252c:	58025458 	.word	0x58025458
 8002530:	5802546c 	.word	0x5802546c
 8002534:	58025480 	.word	0x58025480
 8002538:	58025494 	.word	0x58025494

0800253c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002544:	f7ff fb92 	bl	8001c6c <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e2dc      	b.n	8002b0e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d008      	beq.n	8002572 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2280      	movs	r2, #128	@ 0x80
 8002564:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e2cd      	b.n	8002b0e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a76      	ldr	r2, [pc, #472]	@ (8002750 <HAL_DMA_Abort+0x214>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d04a      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a74      	ldr	r2, [pc, #464]	@ (8002754 <HAL_DMA_Abort+0x218>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d045      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a73      	ldr	r2, [pc, #460]	@ (8002758 <HAL_DMA_Abort+0x21c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d040      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a71      	ldr	r2, [pc, #452]	@ (800275c <HAL_DMA_Abort+0x220>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d03b      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a70      	ldr	r2, [pc, #448]	@ (8002760 <HAL_DMA_Abort+0x224>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d036      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a6e      	ldr	r2, [pc, #440]	@ (8002764 <HAL_DMA_Abort+0x228>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d031      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a6d      	ldr	r2, [pc, #436]	@ (8002768 <HAL_DMA_Abort+0x22c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d02c      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a6b      	ldr	r2, [pc, #428]	@ (800276c <HAL_DMA_Abort+0x230>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d027      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a6a      	ldr	r2, [pc, #424]	@ (8002770 <HAL_DMA_Abort+0x234>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d022      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a68      	ldr	r2, [pc, #416]	@ (8002774 <HAL_DMA_Abort+0x238>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d01d      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a67      	ldr	r2, [pc, #412]	@ (8002778 <HAL_DMA_Abort+0x23c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d018      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a65      	ldr	r2, [pc, #404]	@ (800277c <HAL_DMA_Abort+0x240>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a64      	ldr	r2, [pc, #400]	@ (8002780 <HAL_DMA_Abort+0x244>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d00e      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a62      	ldr	r2, [pc, #392]	@ (8002784 <HAL_DMA_Abort+0x248>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d009      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a61      	ldr	r2, [pc, #388]	@ (8002788 <HAL_DMA_Abort+0x24c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d004      	beq.n	8002612 <HAL_DMA_Abort+0xd6>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a5f      	ldr	r2, [pc, #380]	@ (800278c <HAL_DMA_Abort+0x250>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d101      	bne.n	8002616 <HAL_DMA_Abort+0xda>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_DMA_Abort+0xdc>
 8002616:	2300      	movs	r3, #0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d013      	beq.n	8002644 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 021e 	bic.w	r2, r2, #30
 800262a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695a      	ldr	r2, [r3, #20]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800263a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	e00a      	b.n	800265a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 020e 	bic.w	r2, r2, #14
 8002652:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a3c      	ldr	r2, [pc, #240]	@ (8002750 <HAL_DMA_Abort+0x214>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d072      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a3a      	ldr	r2, [pc, #232]	@ (8002754 <HAL_DMA_Abort+0x218>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d06d      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a39      	ldr	r2, [pc, #228]	@ (8002758 <HAL_DMA_Abort+0x21c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d068      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a37      	ldr	r2, [pc, #220]	@ (800275c <HAL_DMA_Abort+0x220>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d063      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a36      	ldr	r2, [pc, #216]	@ (8002760 <HAL_DMA_Abort+0x224>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d05e      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a34      	ldr	r2, [pc, #208]	@ (8002764 <HAL_DMA_Abort+0x228>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d059      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a33      	ldr	r2, [pc, #204]	@ (8002768 <HAL_DMA_Abort+0x22c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d054      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a31      	ldr	r2, [pc, #196]	@ (800276c <HAL_DMA_Abort+0x230>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d04f      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a30      	ldr	r2, [pc, #192]	@ (8002770 <HAL_DMA_Abort+0x234>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d04a      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a2e      	ldr	r2, [pc, #184]	@ (8002774 <HAL_DMA_Abort+0x238>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d045      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002778 <HAL_DMA_Abort+0x23c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d040      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a2b      	ldr	r2, [pc, #172]	@ (800277c <HAL_DMA_Abort+0x240>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d03b      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002780 <HAL_DMA_Abort+0x244>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d036      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a28      	ldr	r2, [pc, #160]	@ (8002784 <HAL_DMA_Abort+0x248>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d031      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a27      	ldr	r2, [pc, #156]	@ (8002788 <HAL_DMA_Abort+0x24c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d02c      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a25      	ldr	r2, [pc, #148]	@ (800278c <HAL_DMA_Abort+0x250>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d027      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a24      	ldr	r2, [pc, #144]	@ (8002790 <HAL_DMA_Abort+0x254>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d022      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a22      	ldr	r2, [pc, #136]	@ (8002794 <HAL_DMA_Abort+0x258>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d01d      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a21      	ldr	r2, [pc, #132]	@ (8002798 <HAL_DMA_Abort+0x25c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d018      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a1f      	ldr	r2, [pc, #124]	@ (800279c <HAL_DMA_Abort+0x260>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d013      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a1e      	ldr	r2, [pc, #120]	@ (80027a0 <HAL_DMA_Abort+0x264>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d00e      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a1c      	ldr	r2, [pc, #112]	@ (80027a4 <HAL_DMA_Abort+0x268>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d009      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a1b      	ldr	r2, [pc, #108]	@ (80027a8 <HAL_DMA_Abort+0x26c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d004      	beq.n	800274a <HAL_DMA_Abort+0x20e>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a19      	ldr	r2, [pc, #100]	@ (80027ac <HAL_DMA_Abort+0x270>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d132      	bne.n	80027b0 <HAL_DMA_Abort+0x274>
 800274a:	2301      	movs	r3, #1
 800274c:	e031      	b.n	80027b2 <HAL_DMA_Abort+0x276>
 800274e:	bf00      	nop
 8002750:	40020010 	.word	0x40020010
 8002754:	40020028 	.word	0x40020028
 8002758:	40020040 	.word	0x40020040
 800275c:	40020058 	.word	0x40020058
 8002760:	40020070 	.word	0x40020070
 8002764:	40020088 	.word	0x40020088
 8002768:	400200a0 	.word	0x400200a0
 800276c:	400200b8 	.word	0x400200b8
 8002770:	40020410 	.word	0x40020410
 8002774:	40020428 	.word	0x40020428
 8002778:	40020440 	.word	0x40020440
 800277c:	40020458 	.word	0x40020458
 8002780:	40020470 	.word	0x40020470
 8002784:	40020488 	.word	0x40020488
 8002788:	400204a0 	.word	0x400204a0
 800278c:	400204b8 	.word	0x400204b8
 8002790:	58025408 	.word	0x58025408
 8002794:	5802541c 	.word	0x5802541c
 8002798:	58025430 	.word	0x58025430
 800279c:	58025444 	.word	0x58025444
 80027a0:	58025458 	.word	0x58025458
 80027a4:	5802546c 	.word	0x5802546c
 80027a8:	58025480 	.word	0x58025480
 80027ac:	58025494 	.word	0x58025494
 80027b0:	2300      	movs	r3, #0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d007      	beq.n	80027c6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a6d      	ldr	r2, [pc, #436]	@ (8002980 <HAL_DMA_Abort+0x444>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d04a      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a6b      	ldr	r2, [pc, #428]	@ (8002984 <HAL_DMA_Abort+0x448>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d045      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a6a      	ldr	r2, [pc, #424]	@ (8002988 <HAL_DMA_Abort+0x44c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d040      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a68      	ldr	r2, [pc, #416]	@ (800298c <HAL_DMA_Abort+0x450>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d03b      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a67      	ldr	r2, [pc, #412]	@ (8002990 <HAL_DMA_Abort+0x454>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d036      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a65      	ldr	r2, [pc, #404]	@ (8002994 <HAL_DMA_Abort+0x458>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d031      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a64      	ldr	r2, [pc, #400]	@ (8002998 <HAL_DMA_Abort+0x45c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d02c      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a62      	ldr	r2, [pc, #392]	@ (800299c <HAL_DMA_Abort+0x460>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d027      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a61      	ldr	r2, [pc, #388]	@ (80029a0 <HAL_DMA_Abort+0x464>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d022      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a5f      	ldr	r2, [pc, #380]	@ (80029a4 <HAL_DMA_Abort+0x468>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d01d      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a5e      	ldr	r2, [pc, #376]	@ (80029a8 <HAL_DMA_Abort+0x46c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d018      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a5c      	ldr	r2, [pc, #368]	@ (80029ac <HAL_DMA_Abort+0x470>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d013      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a5b      	ldr	r2, [pc, #364]	@ (80029b0 <HAL_DMA_Abort+0x474>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d00e      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a59      	ldr	r2, [pc, #356]	@ (80029b4 <HAL_DMA_Abort+0x478>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d009      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a58      	ldr	r2, [pc, #352]	@ (80029b8 <HAL_DMA_Abort+0x47c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d004      	beq.n	8002866 <HAL_DMA_Abort+0x32a>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a56      	ldr	r2, [pc, #344]	@ (80029bc <HAL_DMA_Abort+0x480>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d108      	bne.n	8002878 <HAL_DMA_Abort+0x33c>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0201 	bic.w	r2, r2, #1
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	e007      	b.n	8002888 <HAL_DMA_Abort+0x34c>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002888:	e013      	b.n	80028b2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800288a:	f7ff f9ef 	bl	8001c6c <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b05      	cmp	r3, #5
 8002896:	d90c      	bls.n	80028b2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2220      	movs	r2, #32
 800289c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2203      	movs	r2, #3
 80028a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e12d      	b.n	8002b0e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1e5      	bne.n	800288a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a2f      	ldr	r2, [pc, #188]	@ (8002980 <HAL_DMA_Abort+0x444>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d04a      	beq.n	800295e <HAL_DMA_Abort+0x422>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a2d      	ldr	r2, [pc, #180]	@ (8002984 <HAL_DMA_Abort+0x448>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d045      	beq.n	800295e <HAL_DMA_Abort+0x422>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a2c      	ldr	r2, [pc, #176]	@ (8002988 <HAL_DMA_Abort+0x44c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d040      	beq.n	800295e <HAL_DMA_Abort+0x422>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a2a      	ldr	r2, [pc, #168]	@ (800298c <HAL_DMA_Abort+0x450>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d03b      	beq.n	800295e <HAL_DMA_Abort+0x422>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a29      	ldr	r2, [pc, #164]	@ (8002990 <HAL_DMA_Abort+0x454>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d036      	beq.n	800295e <HAL_DMA_Abort+0x422>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a27      	ldr	r2, [pc, #156]	@ (8002994 <HAL_DMA_Abort+0x458>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d031      	beq.n	800295e <HAL_DMA_Abort+0x422>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a26      	ldr	r2, [pc, #152]	@ (8002998 <HAL_DMA_Abort+0x45c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d02c      	beq.n	800295e <HAL_DMA_Abort+0x422>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a24      	ldr	r2, [pc, #144]	@ (800299c <HAL_DMA_Abort+0x460>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d027      	beq.n	800295e <HAL_DMA_Abort+0x422>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a23      	ldr	r2, [pc, #140]	@ (80029a0 <HAL_DMA_Abort+0x464>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d022      	beq.n	800295e <HAL_DMA_Abort+0x422>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a21      	ldr	r2, [pc, #132]	@ (80029a4 <HAL_DMA_Abort+0x468>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d01d      	beq.n	800295e <HAL_DMA_Abort+0x422>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a20      	ldr	r2, [pc, #128]	@ (80029a8 <HAL_DMA_Abort+0x46c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d018      	beq.n	800295e <HAL_DMA_Abort+0x422>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1e      	ldr	r2, [pc, #120]	@ (80029ac <HAL_DMA_Abort+0x470>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <HAL_DMA_Abort+0x422>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a1d      	ldr	r2, [pc, #116]	@ (80029b0 <HAL_DMA_Abort+0x474>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00e      	beq.n	800295e <HAL_DMA_Abort+0x422>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a1b      	ldr	r2, [pc, #108]	@ (80029b4 <HAL_DMA_Abort+0x478>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d009      	beq.n	800295e <HAL_DMA_Abort+0x422>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a1a      	ldr	r2, [pc, #104]	@ (80029b8 <HAL_DMA_Abort+0x47c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d004      	beq.n	800295e <HAL_DMA_Abort+0x422>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a18      	ldr	r2, [pc, #96]	@ (80029bc <HAL_DMA_Abort+0x480>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d101      	bne.n	8002962 <HAL_DMA_Abort+0x426>
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <HAL_DMA_Abort+0x428>
 8002962:	2300      	movs	r3, #0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d02b      	beq.n	80029c0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002972:	f003 031f 	and.w	r3, r3, #31
 8002976:	223f      	movs	r2, #63	@ 0x3f
 8002978:	409a      	lsls	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	e02a      	b.n	80029d6 <HAL_DMA_Abort+0x49a>
 8002980:	40020010 	.word	0x40020010
 8002984:	40020028 	.word	0x40020028
 8002988:	40020040 	.word	0x40020040
 800298c:	40020058 	.word	0x40020058
 8002990:	40020070 	.word	0x40020070
 8002994:	40020088 	.word	0x40020088
 8002998:	400200a0 	.word	0x400200a0
 800299c:	400200b8 	.word	0x400200b8
 80029a0:	40020410 	.word	0x40020410
 80029a4:	40020428 	.word	0x40020428
 80029a8:	40020440 	.word	0x40020440
 80029ac:	40020458 	.word	0x40020458
 80029b0:	40020470 	.word	0x40020470
 80029b4:	40020488 	.word	0x40020488
 80029b8:	400204a0 	.word	0x400204a0
 80029bc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ca:	f003 031f 	and.w	r3, r3, #31
 80029ce:	2201      	movs	r2, #1
 80029d0:	409a      	lsls	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a4f      	ldr	r2, [pc, #316]	@ (8002b18 <HAL_DMA_Abort+0x5dc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d072      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a4d      	ldr	r2, [pc, #308]	@ (8002b1c <HAL_DMA_Abort+0x5e0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d06d      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a4c      	ldr	r2, [pc, #304]	@ (8002b20 <HAL_DMA_Abort+0x5e4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d068      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a4a      	ldr	r2, [pc, #296]	@ (8002b24 <HAL_DMA_Abort+0x5e8>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d063      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a49      	ldr	r2, [pc, #292]	@ (8002b28 <HAL_DMA_Abort+0x5ec>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d05e      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a47      	ldr	r2, [pc, #284]	@ (8002b2c <HAL_DMA_Abort+0x5f0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d059      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a46      	ldr	r2, [pc, #280]	@ (8002b30 <HAL_DMA_Abort+0x5f4>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d054      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a44      	ldr	r2, [pc, #272]	@ (8002b34 <HAL_DMA_Abort+0x5f8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d04f      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a43      	ldr	r2, [pc, #268]	@ (8002b38 <HAL_DMA_Abort+0x5fc>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d04a      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a41      	ldr	r2, [pc, #260]	@ (8002b3c <HAL_DMA_Abort+0x600>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d045      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a40      	ldr	r2, [pc, #256]	@ (8002b40 <HAL_DMA_Abort+0x604>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d040      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a3e      	ldr	r2, [pc, #248]	@ (8002b44 <HAL_DMA_Abort+0x608>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d03b      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a3d      	ldr	r2, [pc, #244]	@ (8002b48 <HAL_DMA_Abort+0x60c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d036      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a3b      	ldr	r2, [pc, #236]	@ (8002b4c <HAL_DMA_Abort+0x610>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d031      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a3a      	ldr	r2, [pc, #232]	@ (8002b50 <HAL_DMA_Abort+0x614>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d02c      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a38      	ldr	r2, [pc, #224]	@ (8002b54 <HAL_DMA_Abort+0x618>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d027      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a37      	ldr	r2, [pc, #220]	@ (8002b58 <HAL_DMA_Abort+0x61c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d022      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a35      	ldr	r2, [pc, #212]	@ (8002b5c <HAL_DMA_Abort+0x620>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d01d      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a34      	ldr	r2, [pc, #208]	@ (8002b60 <HAL_DMA_Abort+0x624>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d018      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a32      	ldr	r2, [pc, #200]	@ (8002b64 <HAL_DMA_Abort+0x628>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d013      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a31      	ldr	r2, [pc, #196]	@ (8002b68 <HAL_DMA_Abort+0x62c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00e      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a2f      	ldr	r2, [pc, #188]	@ (8002b6c <HAL_DMA_Abort+0x630>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d009      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a2e      	ldr	r2, [pc, #184]	@ (8002b70 <HAL_DMA_Abort+0x634>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d004      	beq.n	8002ac6 <HAL_DMA_Abort+0x58a>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a2c      	ldr	r2, [pc, #176]	@ (8002b74 <HAL_DMA_Abort+0x638>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d101      	bne.n	8002aca <HAL_DMA_Abort+0x58e>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <HAL_DMA_Abort+0x590>
 8002aca:	2300      	movs	r3, #0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d015      	beq.n	8002afc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002ad8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00c      	beq.n	8002afc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002aec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002af0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002afa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40020010 	.word	0x40020010
 8002b1c:	40020028 	.word	0x40020028
 8002b20:	40020040 	.word	0x40020040
 8002b24:	40020058 	.word	0x40020058
 8002b28:	40020070 	.word	0x40020070
 8002b2c:	40020088 	.word	0x40020088
 8002b30:	400200a0 	.word	0x400200a0
 8002b34:	400200b8 	.word	0x400200b8
 8002b38:	40020410 	.word	0x40020410
 8002b3c:	40020428 	.word	0x40020428
 8002b40:	40020440 	.word	0x40020440
 8002b44:	40020458 	.word	0x40020458
 8002b48:	40020470 	.word	0x40020470
 8002b4c:	40020488 	.word	0x40020488
 8002b50:	400204a0 	.word	0x400204a0
 8002b54:	400204b8 	.word	0x400204b8
 8002b58:	58025408 	.word	0x58025408
 8002b5c:	5802541c 	.word	0x5802541c
 8002b60:	58025430 	.word	0x58025430
 8002b64:	58025444 	.word	0x58025444
 8002b68:	58025458 	.word	0x58025458
 8002b6c:	5802546c 	.word	0x5802546c
 8002b70:	58025480 	.word	0x58025480
 8002b74:	58025494 	.word	0x58025494

08002b78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e237      	b.n	8002ffa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d004      	beq.n	8002ba0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2280      	movs	r2, #128	@ 0x80
 8002b9a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e22c      	b.n	8002ffa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a5c      	ldr	r2, [pc, #368]	@ (8002d18 <HAL_DMA_Abort_IT+0x1a0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d04a      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a5b      	ldr	r2, [pc, #364]	@ (8002d1c <HAL_DMA_Abort_IT+0x1a4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d045      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a59      	ldr	r2, [pc, #356]	@ (8002d20 <HAL_DMA_Abort_IT+0x1a8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d040      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a58      	ldr	r2, [pc, #352]	@ (8002d24 <HAL_DMA_Abort_IT+0x1ac>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d03b      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a56      	ldr	r2, [pc, #344]	@ (8002d28 <HAL_DMA_Abort_IT+0x1b0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d036      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a55      	ldr	r2, [pc, #340]	@ (8002d2c <HAL_DMA_Abort_IT+0x1b4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d031      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a53      	ldr	r2, [pc, #332]	@ (8002d30 <HAL_DMA_Abort_IT+0x1b8>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d02c      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a52      	ldr	r2, [pc, #328]	@ (8002d34 <HAL_DMA_Abort_IT+0x1bc>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d027      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a50      	ldr	r2, [pc, #320]	@ (8002d38 <HAL_DMA_Abort_IT+0x1c0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d022      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a4f      	ldr	r2, [pc, #316]	@ (8002d3c <HAL_DMA_Abort_IT+0x1c4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d01d      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a4d      	ldr	r2, [pc, #308]	@ (8002d40 <HAL_DMA_Abort_IT+0x1c8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d018      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a4c      	ldr	r2, [pc, #304]	@ (8002d44 <HAL_DMA_Abort_IT+0x1cc>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d013      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a4a      	ldr	r2, [pc, #296]	@ (8002d48 <HAL_DMA_Abort_IT+0x1d0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00e      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a49      	ldr	r2, [pc, #292]	@ (8002d4c <HAL_DMA_Abort_IT+0x1d4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d009      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a47      	ldr	r2, [pc, #284]	@ (8002d50 <HAL_DMA_Abort_IT+0x1d8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d004      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xc8>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a46      	ldr	r2, [pc, #280]	@ (8002d54 <HAL_DMA_Abort_IT+0x1dc>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d101      	bne.n	8002c44 <HAL_DMA_Abort_IT+0xcc>
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <HAL_DMA_Abort_IT+0xce>
 8002c44:	2300      	movs	r3, #0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 8086 	beq.w	8002d58 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2204      	movs	r2, #4
 8002c50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a2f      	ldr	r2, [pc, #188]	@ (8002d18 <HAL_DMA_Abort_IT+0x1a0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d04a      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x17c>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a2e      	ldr	r2, [pc, #184]	@ (8002d1c <HAL_DMA_Abort_IT+0x1a4>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d045      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x17c>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a2c      	ldr	r2, [pc, #176]	@ (8002d20 <HAL_DMA_Abort_IT+0x1a8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d040      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x17c>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a2b      	ldr	r2, [pc, #172]	@ (8002d24 <HAL_DMA_Abort_IT+0x1ac>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d03b      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x17c>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a29      	ldr	r2, [pc, #164]	@ (8002d28 <HAL_DMA_Abort_IT+0x1b0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d036      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x17c>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a28      	ldr	r2, [pc, #160]	@ (8002d2c <HAL_DMA_Abort_IT+0x1b4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d031      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x17c>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a26      	ldr	r2, [pc, #152]	@ (8002d30 <HAL_DMA_Abort_IT+0x1b8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d02c      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x17c>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a25      	ldr	r2, [pc, #148]	@ (8002d34 <HAL_DMA_Abort_IT+0x1bc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d027      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x17c>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a23      	ldr	r2, [pc, #140]	@ (8002d38 <HAL_DMA_Abort_IT+0x1c0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d022      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x17c>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a22      	ldr	r2, [pc, #136]	@ (8002d3c <HAL_DMA_Abort_IT+0x1c4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d01d      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x17c>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a20      	ldr	r2, [pc, #128]	@ (8002d40 <HAL_DMA_Abort_IT+0x1c8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d018      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x17c>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a1f      	ldr	r2, [pc, #124]	@ (8002d44 <HAL_DMA_Abort_IT+0x1cc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d013      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x17c>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8002d48 <HAL_DMA_Abort_IT+0x1d0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00e      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x17c>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a1c      	ldr	r2, [pc, #112]	@ (8002d4c <HAL_DMA_Abort_IT+0x1d4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d009      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x17c>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a1a      	ldr	r2, [pc, #104]	@ (8002d50 <HAL_DMA_Abort_IT+0x1d8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d004      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x17c>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a19      	ldr	r2, [pc, #100]	@ (8002d54 <HAL_DMA_Abort_IT+0x1dc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d108      	bne.n	8002d06 <HAL_DMA_Abort_IT+0x18e>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0201 	bic.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	e178      	b.n	8002ff8 <HAL_DMA_Abort_IT+0x480>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0201 	bic.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	e16f      	b.n	8002ff8 <HAL_DMA_Abort_IT+0x480>
 8002d18:	40020010 	.word	0x40020010
 8002d1c:	40020028 	.word	0x40020028
 8002d20:	40020040 	.word	0x40020040
 8002d24:	40020058 	.word	0x40020058
 8002d28:	40020070 	.word	0x40020070
 8002d2c:	40020088 	.word	0x40020088
 8002d30:	400200a0 	.word	0x400200a0
 8002d34:	400200b8 	.word	0x400200b8
 8002d38:	40020410 	.word	0x40020410
 8002d3c:	40020428 	.word	0x40020428
 8002d40:	40020440 	.word	0x40020440
 8002d44:	40020458 	.word	0x40020458
 8002d48:	40020470 	.word	0x40020470
 8002d4c:	40020488 	.word	0x40020488
 8002d50:	400204a0 	.word	0x400204a0
 8002d54:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 020e 	bic.w	r2, r2, #14
 8002d66:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a6c      	ldr	r2, [pc, #432]	@ (8002f20 <HAL_DMA_Abort_IT+0x3a8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d04a      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x290>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a6b      	ldr	r2, [pc, #428]	@ (8002f24 <HAL_DMA_Abort_IT+0x3ac>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d045      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x290>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a69      	ldr	r2, [pc, #420]	@ (8002f28 <HAL_DMA_Abort_IT+0x3b0>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d040      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x290>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a68      	ldr	r2, [pc, #416]	@ (8002f2c <HAL_DMA_Abort_IT+0x3b4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d03b      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x290>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a66      	ldr	r2, [pc, #408]	@ (8002f30 <HAL_DMA_Abort_IT+0x3b8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d036      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x290>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a65      	ldr	r2, [pc, #404]	@ (8002f34 <HAL_DMA_Abort_IT+0x3bc>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d031      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x290>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a63      	ldr	r2, [pc, #396]	@ (8002f38 <HAL_DMA_Abort_IT+0x3c0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d02c      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x290>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a62      	ldr	r2, [pc, #392]	@ (8002f3c <HAL_DMA_Abort_IT+0x3c4>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d027      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x290>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a60      	ldr	r2, [pc, #384]	@ (8002f40 <HAL_DMA_Abort_IT+0x3c8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d022      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x290>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a5f      	ldr	r2, [pc, #380]	@ (8002f44 <HAL_DMA_Abort_IT+0x3cc>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d01d      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x290>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a5d      	ldr	r2, [pc, #372]	@ (8002f48 <HAL_DMA_Abort_IT+0x3d0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d018      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x290>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a5c      	ldr	r2, [pc, #368]	@ (8002f4c <HAL_DMA_Abort_IT+0x3d4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d013      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x290>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a5a      	ldr	r2, [pc, #360]	@ (8002f50 <HAL_DMA_Abort_IT+0x3d8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00e      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x290>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a59      	ldr	r2, [pc, #356]	@ (8002f54 <HAL_DMA_Abort_IT+0x3dc>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d009      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x290>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a57      	ldr	r2, [pc, #348]	@ (8002f58 <HAL_DMA_Abort_IT+0x3e0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d004      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x290>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a56      	ldr	r2, [pc, #344]	@ (8002f5c <HAL_DMA_Abort_IT+0x3e4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d108      	bne.n	8002e1a <HAL_DMA_Abort_IT+0x2a2>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0201 	bic.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	e007      	b.n	8002e2a <HAL_DMA_Abort_IT+0x2b2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0201 	bic.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a3c      	ldr	r2, [pc, #240]	@ (8002f20 <HAL_DMA_Abort_IT+0x3a8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d072      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x3a2>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a3a      	ldr	r2, [pc, #232]	@ (8002f24 <HAL_DMA_Abort_IT+0x3ac>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d06d      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x3a2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a39      	ldr	r2, [pc, #228]	@ (8002f28 <HAL_DMA_Abort_IT+0x3b0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d068      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x3a2>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a37      	ldr	r2, [pc, #220]	@ (8002f2c <HAL_DMA_Abort_IT+0x3b4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d063      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x3a2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a36      	ldr	r2, [pc, #216]	@ (8002f30 <HAL_DMA_Abort_IT+0x3b8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d05e      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x3a2>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a34      	ldr	r2, [pc, #208]	@ (8002f34 <HAL_DMA_Abort_IT+0x3bc>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d059      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x3a2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a33      	ldr	r2, [pc, #204]	@ (8002f38 <HAL_DMA_Abort_IT+0x3c0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d054      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x3a2>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a31      	ldr	r2, [pc, #196]	@ (8002f3c <HAL_DMA_Abort_IT+0x3c4>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d04f      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x3a2>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a30      	ldr	r2, [pc, #192]	@ (8002f40 <HAL_DMA_Abort_IT+0x3c8>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d04a      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x3a2>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a2e      	ldr	r2, [pc, #184]	@ (8002f44 <HAL_DMA_Abort_IT+0x3cc>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d045      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x3a2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a2d      	ldr	r2, [pc, #180]	@ (8002f48 <HAL_DMA_Abort_IT+0x3d0>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d040      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x3a2>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a2b      	ldr	r2, [pc, #172]	@ (8002f4c <HAL_DMA_Abort_IT+0x3d4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d03b      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x3a2>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a2a      	ldr	r2, [pc, #168]	@ (8002f50 <HAL_DMA_Abort_IT+0x3d8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d036      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x3a2>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a28      	ldr	r2, [pc, #160]	@ (8002f54 <HAL_DMA_Abort_IT+0x3dc>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d031      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x3a2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a27      	ldr	r2, [pc, #156]	@ (8002f58 <HAL_DMA_Abort_IT+0x3e0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d02c      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x3a2>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a25      	ldr	r2, [pc, #148]	@ (8002f5c <HAL_DMA_Abort_IT+0x3e4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d027      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x3a2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a24      	ldr	r2, [pc, #144]	@ (8002f60 <HAL_DMA_Abort_IT+0x3e8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d022      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x3a2>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a22      	ldr	r2, [pc, #136]	@ (8002f64 <HAL_DMA_Abort_IT+0x3ec>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d01d      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x3a2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a21      	ldr	r2, [pc, #132]	@ (8002f68 <HAL_DMA_Abort_IT+0x3f0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d018      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x3a2>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1f      	ldr	r2, [pc, #124]	@ (8002f6c <HAL_DMA_Abort_IT+0x3f4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d013      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x3a2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a1e      	ldr	r2, [pc, #120]	@ (8002f70 <HAL_DMA_Abort_IT+0x3f8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d00e      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x3a2>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a1c      	ldr	r2, [pc, #112]	@ (8002f74 <HAL_DMA_Abort_IT+0x3fc>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d009      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x3a2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8002f78 <HAL_DMA_Abort_IT+0x400>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d004      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x3a2>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a19      	ldr	r2, [pc, #100]	@ (8002f7c <HAL_DMA_Abort_IT+0x404>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d132      	bne.n	8002f80 <HAL_DMA_Abort_IT+0x408>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e031      	b.n	8002f82 <HAL_DMA_Abort_IT+0x40a>
 8002f1e:	bf00      	nop
 8002f20:	40020010 	.word	0x40020010
 8002f24:	40020028 	.word	0x40020028
 8002f28:	40020040 	.word	0x40020040
 8002f2c:	40020058 	.word	0x40020058
 8002f30:	40020070 	.word	0x40020070
 8002f34:	40020088 	.word	0x40020088
 8002f38:	400200a0 	.word	0x400200a0
 8002f3c:	400200b8 	.word	0x400200b8
 8002f40:	40020410 	.word	0x40020410
 8002f44:	40020428 	.word	0x40020428
 8002f48:	40020440 	.word	0x40020440
 8002f4c:	40020458 	.word	0x40020458
 8002f50:	40020470 	.word	0x40020470
 8002f54:	40020488 	.word	0x40020488
 8002f58:	400204a0 	.word	0x400204a0
 8002f5c:	400204b8 	.word	0x400204b8
 8002f60:	58025408 	.word	0x58025408
 8002f64:	5802541c 	.word	0x5802541c
 8002f68:	58025430 	.word	0x58025430
 8002f6c:	58025444 	.word	0x58025444
 8002f70:	58025458 	.word	0x58025458
 8002f74:	5802546c 	.word	0x5802546c
 8002f78:	58025480 	.word	0x58025480
 8002f7c:	58025494 	.word	0x58025494
 8002f80:	2300      	movs	r3, #0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d028      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f94:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002fb4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00c      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fcc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002fd6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop

08003004 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08a      	sub	sp, #40	@ 0x28
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003010:	4b67      	ldr	r3, [pc, #412]	@ (80031b0 <HAL_DMA_IRQHandler+0x1ac>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a67      	ldr	r2, [pc, #412]	@ (80031b4 <HAL_DMA_IRQHandler+0x1b0>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	0a9b      	lsrs	r3, r3, #10
 800301c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003022:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003028:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a5f      	ldr	r2, [pc, #380]	@ (80031b8 <HAL_DMA_IRQHandler+0x1b4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d04a      	beq.n	80030d6 <HAL_DMA_IRQHandler+0xd2>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a5d      	ldr	r2, [pc, #372]	@ (80031bc <HAL_DMA_IRQHandler+0x1b8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d045      	beq.n	80030d6 <HAL_DMA_IRQHandler+0xd2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a5c      	ldr	r2, [pc, #368]	@ (80031c0 <HAL_DMA_IRQHandler+0x1bc>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d040      	beq.n	80030d6 <HAL_DMA_IRQHandler+0xd2>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a5a      	ldr	r2, [pc, #360]	@ (80031c4 <HAL_DMA_IRQHandler+0x1c0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d03b      	beq.n	80030d6 <HAL_DMA_IRQHandler+0xd2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a59      	ldr	r2, [pc, #356]	@ (80031c8 <HAL_DMA_IRQHandler+0x1c4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d036      	beq.n	80030d6 <HAL_DMA_IRQHandler+0xd2>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a57      	ldr	r2, [pc, #348]	@ (80031cc <HAL_DMA_IRQHandler+0x1c8>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d031      	beq.n	80030d6 <HAL_DMA_IRQHandler+0xd2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a56      	ldr	r2, [pc, #344]	@ (80031d0 <HAL_DMA_IRQHandler+0x1cc>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d02c      	beq.n	80030d6 <HAL_DMA_IRQHandler+0xd2>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a54      	ldr	r2, [pc, #336]	@ (80031d4 <HAL_DMA_IRQHandler+0x1d0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d027      	beq.n	80030d6 <HAL_DMA_IRQHandler+0xd2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a53      	ldr	r2, [pc, #332]	@ (80031d8 <HAL_DMA_IRQHandler+0x1d4>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d022      	beq.n	80030d6 <HAL_DMA_IRQHandler+0xd2>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a51      	ldr	r2, [pc, #324]	@ (80031dc <HAL_DMA_IRQHandler+0x1d8>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d01d      	beq.n	80030d6 <HAL_DMA_IRQHandler+0xd2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a50      	ldr	r2, [pc, #320]	@ (80031e0 <HAL_DMA_IRQHandler+0x1dc>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d018      	beq.n	80030d6 <HAL_DMA_IRQHandler+0xd2>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a4e      	ldr	r2, [pc, #312]	@ (80031e4 <HAL_DMA_IRQHandler+0x1e0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_DMA_IRQHandler+0xd2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a4d      	ldr	r2, [pc, #308]	@ (80031e8 <HAL_DMA_IRQHandler+0x1e4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00e      	beq.n	80030d6 <HAL_DMA_IRQHandler+0xd2>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a4b      	ldr	r2, [pc, #300]	@ (80031ec <HAL_DMA_IRQHandler+0x1e8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d009      	beq.n	80030d6 <HAL_DMA_IRQHandler+0xd2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a4a      	ldr	r2, [pc, #296]	@ (80031f0 <HAL_DMA_IRQHandler+0x1ec>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d004      	beq.n	80030d6 <HAL_DMA_IRQHandler+0xd2>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a48      	ldr	r2, [pc, #288]	@ (80031f4 <HAL_DMA_IRQHandler+0x1f0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d101      	bne.n	80030da <HAL_DMA_IRQHandler+0xd6>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <HAL_DMA_IRQHandler+0xd8>
 80030da:	2300      	movs	r3, #0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 842b 	beq.w	8003938 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e6:	f003 031f 	and.w	r3, r3, #31
 80030ea:	2208      	movs	r2, #8
 80030ec:	409a      	lsls	r2, r3
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 80a2 	beq.w	800323c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a2e      	ldr	r2, [pc, #184]	@ (80031b8 <HAL_DMA_IRQHandler+0x1b4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d04a      	beq.n	8003198 <HAL_DMA_IRQHandler+0x194>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a2d      	ldr	r2, [pc, #180]	@ (80031bc <HAL_DMA_IRQHandler+0x1b8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d045      	beq.n	8003198 <HAL_DMA_IRQHandler+0x194>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a2b      	ldr	r2, [pc, #172]	@ (80031c0 <HAL_DMA_IRQHandler+0x1bc>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d040      	beq.n	8003198 <HAL_DMA_IRQHandler+0x194>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a2a      	ldr	r2, [pc, #168]	@ (80031c4 <HAL_DMA_IRQHandler+0x1c0>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d03b      	beq.n	8003198 <HAL_DMA_IRQHandler+0x194>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a28      	ldr	r2, [pc, #160]	@ (80031c8 <HAL_DMA_IRQHandler+0x1c4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d036      	beq.n	8003198 <HAL_DMA_IRQHandler+0x194>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a27      	ldr	r2, [pc, #156]	@ (80031cc <HAL_DMA_IRQHandler+0x1c8>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d031      	beq.n	8003198 <HAL_DMA_IRQHandler+0x194>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a25      	ldr	r2, [pc, #148]	@ (80031d0 <HAL_DMA_IRQHandler+0x1cc>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d02c      	beq.n	8003198 <HAL_DMA_IRQHandler+0x194>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a24      	ldr	r2, [pc, #144]	@ (80031d4 <HAL_DMA_IRQHandler+0x1d0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d027      	beq.n	8003198 <HAL_DMA_IRQHandler+0x194>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a22      	ldr	r2, [pc, #136]	@ (80031d8 <HAL_DMA_IRQHandler+0x1d4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d022      	beq.n	8003198 <HAL_DMA_IRQHandler+0x194>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a21      	ldr	r2, [pc, #132]	@ (80031dc <HAL_DMA_IRQHandler+0x1d8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d01d      	beq.n	8003198 <HAL_DMA_IRQHandler+0x194>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1f      	ldr	r2, [pc, #124]	@ (80031e0 <HAL_DMA_IRQHandler+0x1dc>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d018      	beq.n	8003198 <HAL_DMA_IRQHandler+0x194>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a1e      	ldr	r2, [pc, #120]	@ (80031e4 <HAL_DMA_IRQHandler+0x1e0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d013      	beq.n	8003198 <HAL_DMA_IRQHandler+0x194>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a1c      	ldr	r2, [pc, #112]	@ (80031e8 <HAL_DMA_IRQHandler+0x1e4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d00e      	beq.n	8003198 <HAL_DMA_IRQHandler+0x194>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a1b      	ldr	r2, [pc, #108]	@ (80031ec <HAL_DMA_IRQHandler+0x1e8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d009      	beq.n	8003198 <HAL_DMA_IRQHandler+0x194>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a19      	ldr	r2, [pc, #100]	@ (80031f0 <HAL_DMA_IRQHandler+0x1ec>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d004      	beq.n	8003198 <HAL_DMA_IRQHandler+0x194>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a18      	ldr	r2, [pc, #96]	@ (80031f4 <HAL_DMA_IRQHandler+0x1f0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d12f      	bne.n	80031f8 <HAL_DMA_IRQHandler+0x1f4>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	bf14      	ite	ne
 80031a6:	2301      	movne	r3, #1
 80031a8:	2300      	moveq	r3, #0
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	e02e      	b.n	800320c <HAL_DMA_IRQHandler+0x208>
 80031ae:	bf00      	nop
 80031b0:	24000104 	.word	0x24000104
 80031b4:	1b4e81b5 	.word	0x1b4e81b5
 80031b8:	40020010 	.word	0x40020010
 80031bc:	40020028 	.word	0x40020028
 80031c0:	40020040 	.word	0x40020040
 80031c4:	40020058 	.word	0x40020058
 80031c8:	40020070 	.word	0x40020070
 80031cc:	40020088 	.word	0x40020088
 80031d0:	400200a0 	.word	0x400200a0
 80031d4:	400200b8 	.word	0x400200b8
 80031d8:	40020410 	.word	0x40020410
 80031dc:	40020428 	.word	0x40020428
 80031e0:	40020440 	.word	0x40020440
 80031e4:	40020458 	.word	0x40020458
 80031e8:	40020470 	.word	0x40020470
 80031ec:	40020488 	.word	0x40020488
 80031f0:	400204a0 	.word	0x400204a0
 80031f4:	400204b8 	.word	0x400204b8
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	bf14      	ite	ne
 8003206:	2301      	movne	r3, #1
 8003208:	2300      	moveq	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d015      	beq.n	800323c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0204 	bic.w	r2, r2, #4
 800321e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003224:	f003 031f 	and.w	r3, r3, #31
 8003228:	2208      	movs	r2, #8
 800322a:	409a      	lsls	r2, r3
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003234:	f043 0201 	orr.w	r2, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	fa22 f303 	lsr.w	r3, r2, r3
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d06e      	beq.n	8003330 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a69      	ldr	r2, [pc, #420]	@ (80033fc <HAL_DMA_IRQHandler+0x3f8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d04a      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x2ee>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a67      	ldr	r2, [pc, #412]	@ (8003400 <HAL_DMA_IRQHandler+0x3fc>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d045      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x2ee>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a66      	ldr	r2, [pc, #408]	@ (8003404 <HAL_DMA_IRQHandler+0x400>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d040      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x2ee>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a64      	ldr	r2, [pc, #400]	@ (8003408 <HAL_DMA_IRQHandler+0x404>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d03b      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x2ee>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a63      	ldr	r2, [pc, #396]	@ (800340c <HAL_DMA_IRQHandler+0x408>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d036      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x2ee>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a61      	ldr	r2, [pc, #388]	@ (8003410 <HAL_DMA_IRQHandler+0x40c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d031      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x2ee>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a60      	ldr	r2, [pc, #384]	@ (8003414 <HAL_DMA_IRQHandler+0x410>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d02c      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x2ee>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a5e      	ldr	r2, [pc, #376]	@ (8003418 <HAL_DMA_IRQHandler+0x414>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d027      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x2ee>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a5d      	ldr	r2, [pc, #372]	@ (800341c <HAL_DMA_IRQHandler+0x418>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d022      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x2ee>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a5b      	ldr	r2, [pc, #364]	@ (8003420 <HAL_DMA_IRQHandler+0x41c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d01d      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x2ee>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a5a      	ldr	r2, [pc, #360]	@ (8003424 <HAL_DMA_IRQHandler+0x420>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d018      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x2ee>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a58      	ldr	r2, [pc, #352]	@ (8003428 <HAL_DMA_IRQHandler+0x424>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d013      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x2ee>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a57      	ldr	r2, [pc, #348]	@ (800342c <HAL_DMA_IRQHandler+0x428>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00e      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x2ee>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a55      	ldr	r2, [pc, #340]	@ (8003430 <HAL_DMA_IRQHandler+0x42c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d009      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x2ee>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a54      	ldr	r2, [pc, #336]	@ (8003434 <HAL_DMA_IRQHandler+0x430>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d004      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x2ee>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a52      	ldr	r2, [pc, #328]	@ (8003438 <HAL_DMA_IRQHandler+0x434>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d10a      	bne.n	8003308 <HAL_DMA_IRQHandler+0x304>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	bf14      	ite	ne
 8003300:	2301      	movne	r3, #1
 8003302:	2300      	moveq	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	e003      	b.n	8003310 <HAL_DMA_IRQHandler+0x30c>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2300      	movs	r3, #0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00d      	beq.n	8003330 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	2201      	movs	r2, #1
 800331e:	409a      	lsls	r2, r3
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003328:	f043 0202 	orr.w	r2, r3, #2
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	2204      	movs	r2, #4
 800333a:	409a      	lsls	r2, r3
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	4013      	ands	r3, r2
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 808f 	beq.w	8003464 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a2c      	ldr	r2, [pc, #176]	@ (80033fc <HAL_DMA_IRQHandler+0x3f8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d04a      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x3e2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a2a      	ldr	r2, [pc, #168]	@ (8003400 <HAL_DMA_IRQHandler+0x3fc>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d045      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x3e2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a29      	ldr	r2, [pc, #164]	@ (8003404 <HAL_DMA_IRQHandler+0x400>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d040      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x3e2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a27      	ldr	r2, [pc, #156]	@ (8003408 <HAL_DMA_IRQHandler+0x404>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d03b      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x3e2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a26      	ldr	r2, [pc, #152]	@ (800340c <HAL_DMA_IRQHandler+0x408>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d036      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x3e2>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a24      	ldr	r2, [pc, #144]	@ (8003410 <HAL_DMA_IRQHandler+0x40c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d031      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x3e2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a23      	ldr	r2, [pc, #140]	@ (8003414 <HAL_DMA_IRQHandler+0x410>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d02c      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x3e2>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a21      	ldr	r2, [pc, #132]	@ (8003418 <HAL_DMA_IRQHandler+0x414>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d027      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x3e2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a20      	ldr	r2, [pc, #128]	@ (800341c <HAL_DMA_IRQHandler+0x418>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d022      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x3e2>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003420 <HAL_DMA_IRQHandler+0x41c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d01d      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x3e2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003424 <HAL_DMA_IRQHandler+0x420>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d018      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x3e2>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003428 <HAL_DMA_IRQHandler+0x424>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d013      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x3e2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a1a      	ldr	r2, [pc, #104]	@ (800342c <HAL_DMA_IRQHandler+0x428>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00e      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x3e2>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a18      	ldr	r2, [pc, #96]	@ (8003430 <HAL_DMA_IRQHandler+0x42c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d009      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x3e2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a17      	ldr	r2, [pc, #92]	@ (8003434 <HAL_DMA_IRQHandler+0x430>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d004      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x3e2>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a15      	ldr	r2, [pc, #84]	@ (8003438 <HAL_DMA_IRQHandler+0x434>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d12a      	bne.n	800343c <HAL_DMA_IRQHandler+0x438>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	bf14      	ite	ne
 80033f4:	2301      	movne	r3, #1
 80033f6:	2300      	moveq	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	e023      	b.n	8003444 <HAL_DMA_IRQHandler+0x440>
 80033fc:	40020010 	.word	0x40020010
 8003400:	40020028 	.word	0x40020028
 8003404:	40020040 	.word	0x40020040
 8003408:	40020058 	.word	0x40020058
 800340c:	40020070 	.word	0x40020070
 8003410:	40020088 	.word	0x40020088
 8003414:	400200a0 	.word	0x400200a0
 8003418:	400200b8 	.word	0x400200b8
 800341c:	40020410 	.word	0x40020410
 8003420:	40020428 	.word	0x40020428
 8003424:	40020440 	.word	0x40020440
 8003428:	40020458 	.word	0x40020458
 800342c:	40020470 	.word	0x40020470
 8003430:	40020488 	.word	0x40020488
 8003434:	400204a0 	.word	0x400204a0
 8003438:	400204b8 	.word	0x400204b8
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2300      	movs	r3, #0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00d      	beq.n	8003464 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	2204      	movs	r2, #4
 8003452:	409a      	lsls	r2, r3
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800345c:	f043 0204 	orr.w	r2, r3, #4
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	2210      	movs	r2, #16
 800346e:	409a      	lsls	r2, r3
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	4013      	ands	r3, r2
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80a6 	beq.w	80035c6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a85      	ldr	r2, [pc, #532]	@ (8003694 <HAL_DMA_IRQHandler+0x690>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d04a      	beq.n	800351a <HAL_DMA_IRQHandler+0x516>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a83      	ldr	r2, [pc, #524]	@ (8003698 <HAL_DMA_IRQHandler+0x694>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d045      	beq.n	800351a <HAL_DMA_IRQHandler+0x516>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a82      	ldr	r2, [pc, #520]	@ (800369c <HAL_DMA_IRQHandler+0x698>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d040      	beq.n	800351a <HAL_DMA_IRQHandler+0x516>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a80      	ldr	r2, [pc, #512]	@ (80036a0 <HAL_DMA_IRQHandler+0x69c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d03b      	beq.n	800351a <HAL_DMA_IRQHandler+0x516>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a7f      	ldr	r2, [pc, #508]	@ (80036a4 <HAL_DMA_IRQHandler+0x6a0>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d036      	beq.n	800351a <HAL_DMA_IRQHandler+0x516>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a7d      	ldr	r2, [pc, #500]	@ (80036a8 <HAL_DMA_IRQHandler+0x6a4>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d031      	beq.n	800351a <HAL_DMA_IRQHandler+0x516>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a7c      	ldr	r2, [pc, #496]	@ (80036ac <HAL_DMA_IRQHandler+0x6a8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d02c      	beq.n	800351a <HAL_DMA_IRQHandler+0x516>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a7a      	ldr	r2, [pc, #488]	@ (80036b0 <HAL_DMA_IRQHandler+0x6ac>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d027      	beq.n	800351a <HAL_DMA_IRQHandler+0x516>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a79      	ldr	r2, [pc, #484]	@ (80036b4 <HAL_DMA_IRQHandler+0x6b0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d022      	beq.n	800351a <HAL_DMA_IRQHandler+0x516>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a77      	ldr	r2, [pc, #476]	@ (80036b8 <HAL_DMA_IRQHandler+0x6b4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d01d      	beq.n	800351a <HAL_DMA_IRQHandler+0x516>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a76      	ldr	r2, [pc, #472]	@ (80036bc <HAL_DMA_IRQHandler+0x6b8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d018      	beq.n	800351a <HAL_DMA_IRQHandler+0x516>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a74      	ldr	r2, [pc, #464]	@ (80036c0 <HAL_DMA_IRQHandler+0x6bc>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d013      	beq.n	800351a <HAL_DMA_IRQHandler+0x516>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a73      	ldr	r2, [pc, #460]	@ (80036c4 <HAL_DMA_IRQHandler+0x6c0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00e      	beq.n	800351a <HAL_DMA_IRQHandler+0x516>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a71      	ldr	r2, [pc, #452]	@ (80036c8 <HAL_DMA_IRQHandler+0x6c4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d009      	beq.n	800351a <HAL_DMA_IRQHandler+0x516>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a70      	ldr	r2, [pc, #448]	@ (80036cc <HAL_DMA_IRQHandler+0x6c8>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d004      	beq.n	800351a <HAL_DMA_IRQHandler+0x516>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a6e      	ldr	r2, [pc, #440]	@ (80036d0 <HAL_DMA_IRQHandler+0x6cc>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d10a      	bne.n	8003530 <HAL_DMA_IRQHandler+0x52c>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	2b00      	cmp	r3, #0
 8003526:	bf14      	ite	ne
 8003528:	2301      	movne	r3, #1
 800352a:	2300      	moveq	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	e009      	b.n	8003544 <HAL_DMA_IRQHandler+0x540>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	bf14      	ite	ne
 800353e:	2301      	movne	r3, #1
 8003540:	2300      	moveq	r3, #0
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d03e      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354c:	f003 031f 	and.w	r3, r3, #31
 8003550:	2210      	movs	r2, #16
 8003552:	409a      	lsls	r2, r3
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d018      	beq.n	8003598 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d108      	bne.n	8003586 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003578:	2b00      	cmp	r3, #0
 800357a:	d024      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	4798      	blx	r3
 8003584:	e01f      	b.n	80035c6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800358a:	2b00      	cmp	r3, #0
 800358c:	d01b      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	4798      	blx	r3
 8003596:	e016      	b.n	80035c6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d107      	bne.n	80035b6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0208 	bic.w	r2, r2, #8
 80035b4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ca:	f003 031f 	and.w	r3, r3, #31
 80035ce:	2220      	movs	r2, #32
 80035d0:	409a      	lsls	r2, r3
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8110 	beq.w	80037fc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a2c      	ldr	r2, [pc, #176]	@ (8003694 <HAL_DMA_IRQHandler+0x690>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d04a      	beq.n	800367c <HAL_DMA_IRQHandler+0x678>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a2b      	ldr	r2, [pc, #172]	@ (8003698 <HAL_DMA_IRQHandler+0x694>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d045      	beq.n	800367c <HAL_DMA_IRQHandler+0x678>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a29      	ldr	r2, [pc, #164]	@ (800369c <HAL_DMA_IRQHandler+0x698>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d040      	beq.n	800367c <HAL_DMA_IRQHandler+0x678>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a28      	ldr	r2, [pc, #160]	@ (80036a0 <HAL_DMA_IRQHandler+0x69c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d03b      	beq.n	800367c <HAL_DMA_IRQHandler+0x678>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a26      	ldr	r2, [pc, #152]	@ (80036a4 <HAL_DMA_IRQHandler+0x6a0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d036      	beq.n	800367c <HAL_DMA_IRQHandler+0x678>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a25      	ldr	r2, [pc, #148]	@ (80036a8 <HAL_DMA_IRQHandler+0x6a4>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d031      	beq.n	800367c <HAL_DMA_IRQHandler+0x678>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a23      	ldr	r2, [pc, #140]	@ (80036ac <HAL_DMA_IRQHandler+0x6a8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d02c      	beq.n	800367c <HAL_DMA_IRQHandler+0x678>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a22      	ldr	r2, [pc, #136]	@ (80036b0 <HAL_DMA_IRQHandler+0x6ac>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d027      	beq.n	800367c <HAL_DMA_IRQHandler+0x678>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a20      	ldr	r2, [pc, #128]	@ (80036b4 <HAL_DMA_IRQHandler+0x6b0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d022      	beq.n	800367c <HAL_DMA_IRQHandler+0x678>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a1f      	ldr	r2, [pc, #124]	@ (80036b8 <HAL_DMA_IRQHandler+0x6b4>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d01d      	beq.n	800367c <HAL_DMA_IRQHandler+0x678>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a1d      	ldr	r2, [pc, #116]	@ (80036bc <HAL_DMA_IRQHandler+0x6b8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d018      	beq.n	800367c <HAL_DMA_IRQHandler+0x678>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1c      	ldr	r2, [pc, #112]	@ (80036c0 <HAL_DMA_IRQHandler+0x6bc>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d013      	beq.n	800367c <HAL_DMA_IRQHandler+0x678>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a1a      	ldr	r2, [pc, #104]	@ (80036c4 <HAL_DMA_IRQHandler+0x6c0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00e      	beq.n	800367c <HAL_DMA_IRQHandler+0x678>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a19      	ldr	r2, [pc, #100]	@ (80036c8 <HAL_DMA_IRQHandler+0x6c4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d009      	beq.n	800367c <HAL_DMA_IRQHandler+0x678>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a17      	ldr	r2, [pc, #92]	@ (80036cc <HAL_DMA_IRQHandler+0x6c8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d004      	beq.n	800367c <HAL_DMA_IRQHandler+0x678>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a16      	ldr	r2, [pc, #88]	@ (80036d0 <HAL_DMA_IRQHandler+0x6cc>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d12b      	bne.n	80036d4 <HAL_DMA_IRQHandler+0x6d0>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b00      	cmp	r3, #0
 8003688:	bf14      	ite	ne
 800368a:	2301      	movne	r3, #1
 800368c:	2300      	moveq	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	e02a      	b.n	80036e8 <HAL_DMA_IRQHandler+0x6e4>
 8003692:	bf00      	nop
 8003694:	40020010 	.word	0x40020010
 8003698:	40020028 	.word	0x40020028
 800369c:	40020040 	.word	0x40020040
 80036a0:	40020058 	.word	0x40020058
 80036a4:	40020070 	.word	0x40020070
 80036a8:	40020088 	.word	0x40020088
 80036ac:	400200a0 	.word	0x400200a0
 80036b0:	400200b8 	.word	0x400200b8
 80036b4:	40020410 	.word	0x40020410
 80036b8:	40020428 	.word	0x40020428
 80036bc:	40020440 	.word	0x40020440
 80036c0:	40020458 	.word	0x40020458
 80036c4:	40020470 	.word	0x40020470
 80036c8:	40020488 	.word	0x40020488
 80036cc:	400204a0 	.word	0x400204a0
 80036d0:	400204b8 	.word	0x400204b8
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	bf14      	ite	ne
 80036e2:	2301      	movne	r3, #1
 80036e4:	2300      	moveq	r3, #0
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 8087 	beq.w	80037fc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f2:	f003 031f 	and.w	r3, r3, #31
 80036f6:	2220      	movs	r2, #32
 80036f8:	409a      	lsls	r2, r3
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b04      	cmp	r3, #4
 8003708:	d139      	bne.n	800377e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0216 	bic.w	r2, r2, #22
 8003718:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695a      	ldr	r2, [r3, #20]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003728:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	d103      	bne.n	800373a <HAL_DMA_IRQHandler+0x736>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003736:	2b00      	cmp	r3, #0
 8003738:	d007      	beq.n	800374a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0208 	bic.w	r2, r2, #8
 8003748:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374e:	f003 031f 	and.w	r3, r3, #31
 8003752:	223f      	movs	r2, #63	@ 0x3f
 8003754:	409a      	lsls	r2, r3
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 834a 	beq.w	8003e08 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	4798      	blx	r3
          }
          return;
 800377c:	e344      	b.n	8003e08 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d018      	beq.n	80037be <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d108      	bne.n	80037ac <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d02c      	beq.n	80037fc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	4798      	blx	r3
 80037aa:	e027      	b.n	80037fc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d023      	beq.n	80037fc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	4798      	blx	r3
 80037bc:	e01e      	b.n	80037fc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10f      	bne.n	80037ec <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0210 	bic.w	r2, r2, #16
 80037da:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8306 	beq.w	8003e12 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 8088 	beq.w	8003924 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2204      	movs	r2, #4
 8003818:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a7a      	ldr	r2, [pc, #488]	@ (8003a0c <HAL_DMA_IRQHandler+0xa08>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d04a      	beq.n	80038bc <HAL_DMA_IRQHandler+0x8b8>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a79      	ldr	r2, [pc, #484]	@ (8003a10 <HAL_DMA_IRQHandler+0xa0c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d045      	beq.n	80038bc <HAL_DMA_IRQHandler+0x8b8>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a77      	ldr	r2, [pc, #476]	@ (8003a14 <HAL_DMA_IRQHandler+0xa10>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d040      	beq.n	80038bc <HAL_DMA_IRQHandler+0x8b8>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a76      	ldr	r2, [pc, #472]	@ (8003a18 <HAL_DMA_IRQHandler+0xa14>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d03b      	beq.n	80038bc <HAL_DMA_IRQHandler+0x8b8>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a74      	ldr	r2, [pc, #464]	@ (8003a1c <HAL_DMA_IRQHandler+0xa18>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d036      	beq.n	80038bc <HAL_DMA_IRQHandler+0x8b8>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a73      	ldr	r2, [pc, #460]	@ (8003a20 <HAL_DMA_IRQHandler+0xa1c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d031      	beq.n	80038bc <HAL_DMA_IRQHandler+0x8b8>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a71      	ldr	r2, [pc, #452]	@ (8003a24 <HAL_DMA_IRQHandler+0xa20>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d02c      	beq.n	80038bc <HAL_DMA_IRQHandler+0x8b8>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a70      	ldr	r2, [pc, #448]	@ (8003a28 <HAL_DMA_IRQHandler+0xa24>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d027      	beq.n	80038bc <HAL_DMA_IRQHandler+0x8b8>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a6e      	ldr	r2, [pc, #440]	@ (8003a2c <HAL_DMA_IRQHandler+0xa28>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d022      	beq.n	80038bc <HAL_DMA_IRQHandler+0x8b8>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a6d      	ldr	r2, [pc, #436]	@ (8003a30 <HAL_DMA_IRQHandler+0xa2c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d01d      	beq.n	80038bc <HAL_DMA_IRQHandler+0x8b8>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a6b      	ldr	r2, [pc, #428]	@ (8003a34 <HAL_DMA_IRQHandler+0xa30>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d018      	beq.n	80038bc <HAL_DMA_IRQHandler+0x8b8>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a6a      	ldr	r2, [pc, #424]	@ (8003a38 <HAL_DMA_IRQHandler+0xa34>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d013      	beq.n	80038bc <HAL_DMA_IRQHandler+0x8b8>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a68      	ldr	r2, [pc, #416]	@ (8003a3c <HAL_DMA_IRQHandler+0xa38>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d00e      	beq.n	80038bc <HAL_DMA_IRQHandler+0x8b8>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a67      	ldr	r2, [pc, #412]	@ (8003a40 <HAL_DMA_IRQHandler+0xa3c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d009      	beq.n	80038bc <HAL_DMA_IRQHandler+0x8b8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a65      	ldr	r2, [pc, #404]	@ (8003a44 <HAL_DMA_IRQHandler+0xa40>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d004      	beq.n	80038bc <HAL_DMA_IRQHandler+0x8b8>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a64      	ldr	r2, [pc, #400]	@ (8003a48 <HAL_DMA_IRQHandler+0xa44>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d108      	bne.n	80038ce <HAL_DMA_IRQHandler+0x8ca>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0201 	bic.w	r2, r2, #1
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	e007      	b.n	80038de <HAL_DMA_IRQHandler+0x8da>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	3301      	adds	r3, #1
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d307      	bcc.n	80038fa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f2      	bne.n	80038de <HAL_DMA_IRQHandler+0x8da>
 80038f8:	e000      	b.n	80038fc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80038fa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d004      	beq.n	8003914 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2203      	movs	r2, #3
 800390e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003912:	e003      	b.n	800391c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 8272 	beq.w	8003e12 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	4798      	blx	r3
 8003936:	e26c      	b.n	8003e12 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a43      	ldr	r2, [pc, #268]	@ (8003a4c <HAL_DMA_IRQHandler+0xa48>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d022      	beq.n	8003988 <HAL_DMA_IRQHandler+0x984>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a42      	ldr	r2, [pc, #264]	@ (8003a50 <HAL_DMA_IRQHandler+0xa4c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d01d      	beq.n	8003988 <HAL_DMA_IRQHandler+0x984>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a40      	ldr	r2, [pc, #256]	@ (8003a54 <HAL_DMA_IRQHandler+0xa50>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d018      	beq.n	8003988 <HAL_DMA_IRQHandler+0x984>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a3f      	ldr	r2, [pc, #252]	@ (8003a58 <HAL_DMA_IRQHandler+0xa54>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d013      	beq.n	8003988 <HAL_DMA_IRQHandler+0x984>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a3d      	ldr	r2, [pc, #244]	@ (8003a5c <HAL_DMA_IRQHandler+0xa58>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00e      	beq.n	8003988 <HAL_DMA_IRQHandler+0x984>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a3c      	ldr	r2, [pc, #240]	@ (8003a60 <HAL_DMA_IRQHandler+0xa5c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d009      	beq.n	8003988 <HAL_DMA_IRQHandler+0x984>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a3a      	ldr	r2, [pc, #232]	@ (8003a64 <HAL_DMA_IRQHandler+0xa60>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d004      	beq.n	8003988 <HAL_DMA_IRQHandler+0x984>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a39      	ldr	r2, [pc, #228]	@ (8003a68 <HAL_DMA_IRQHandler+0xa64>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d101      	bne.n	800398c <HAL_DMA_IRQHandler+0x988>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <HAL_DMA_IRQHandler+0x98a>
 800398c:	2300      	movs	r3, #0
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 823f 	beq.w	8003e12 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a0:	f003 031f 	and.w	r3, r3, #31
 80039a4:	2204      	movs	r2, #4
 80039a6:	409a      	lsls	r2, r3
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 80cd 	beq.w	8003b4c <HAL_DMA_IRQHandler+0xb48>
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 80c7 	beq.w	8003b4c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c2:	f003 031f 	and.w	r3, r3, #31
 80039c6:	2204      	movs	r2, #4
 80039c8:	409a      	lsls	r2, r3
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d049      	beq.n	8003a6c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d109      	bne.n	80039f6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 8210 	beq.w	8003e0c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039f4:	e20a      	b.n	8003e0c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 8206 	beq.w	8003e0c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a08:	e200      	b.n	8003e0c <HAL_DMA_IRQHandler+0xe08>
 8003a0a:	bf00      	nop
 8003a0c:	40020010 	.word	0x40020010
 8003a10:	40020028 	.word	0x40020028
 8003a14:	40020040 	.word	0x40020040
 8003a18:	40020058 	.word	0x40020058
 8003a1c:	40020070 	.word	0x40020070
 8003a20:	40020088 	.word	0x40020088
 8003a24:	400200a0 	.word	0x400200a0
 8003a28:	400200b8 	.word	0x400200b8
 8003a2c:	40020410 	.word	0x40020410
 8003a30:	40020428 	.word	0x40020428
 8003a34:	40020440 	.word	0x40020440
 8003a38:	40020458 	.word	0x40020458
 8003a3c:	40020470 	.word	0x40020470
 8003a40:	40020488 	.word	0x40020488
 8003a44:	400204a0 	.word	0x400204a0
 8003a48:	400204b8 	.word	0x400204b8
 8003a4c:	58025408 	.word	0x58025408
 8003a50:	5802541c 	.word	0x5802541c
 8003a54:	58025430 	.word	0x58025430
 8003a58:	58025444 	.word	0x58025444
 8003a5c:	58025458 	.word	0x58025458
 8003a60:	5802546c 	.word	0x5802546c
 8003a64:	58025480 	.word	0x58025480
 8003a68:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d160      	bne.n	8003b38 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a7f      	ldr	r2, [pc, #508]	@ (8003c78 <HAL_DMA_IRQHandler+0xc74>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d04a      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xb12>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a7d      	ldr	r2, [pc, #500]	@ (8003c7c <HAL_DMA_IRQHandler+0xc78>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d045      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xb12>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a7c      	ldr	r2, [pc, #496]	@ (8003c80 <HAL_DMA_IRQHandler+0xc7c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d040      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xb12>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a7a      	ldr	r2, [pc, #488]	@ (8003c84 <HAL_DMA_IRQHandler+0xc80>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d03b      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xb12>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a79      	ldr	r2, [pc, #484]	@ (8003c88 <HAL_DMA_IRQHandler+0xc84>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d036      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xb12>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a77      	ldr	r2, [pc, #476]	@ (8003c8c <HAL_DMA_IRQHandler+0xc88>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d031      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xb12>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a76      	ldr	r2, [pc, #472]	@ (8003c90 <HAL_DMA_IRQHandler+0xc8c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d02c      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xb12>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a74      	ldr	r2, [pc, #464]	@ (8003c94 <HAL_DMA_IRQHandler+0xc90>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d027      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xb12>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a73      	ldr	r2, [pc, #460]	@ (8003c98 <HAL_DMA_IRQHandler+0xc94>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d022      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xb12>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a71      	ldr	r2, [pc, #452]	@ (8003c9c <HAL_DMA_IRQHandler+0xc98>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d01d      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xb12>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a70      	ldr	r2, [pc, #448]	@ (8003ca0 <HAL_DMA_IRQHandler+0xc9c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d018      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xb12>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a6e      	ldr	r2, [pc, #440]	@ (8003ca4 <HAL_DMA_IRQHandler+0xca0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d013      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xb12>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a6d      	ldr	r2, [pc, #436]	@ (8003ca8 <HAL_DMA_IRQHandler+0xca4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d00e      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xb12>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a6b      	ldr	r2, [pc, #428]	@ (8003cac <HAL_DMA_IRQHandler+0xca8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d009      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xb12>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a6a      	ldr	r2, [pc, #424]	@ (8003cb0 <HAL_DMA_IRQHandler+0xcac>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d004      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xb12>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a68      	ldr	r2, [pc, #416]	@ (8003cb4 <HAL_DMA_IRQHandler+0xcb0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d108      	bne.n	8003b28 <HAL_DMA_IRQHandler+0xb24>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0208 	bic.w	r2, r2, #8
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	e007      	b.n	8003b38 <HAL_DMA_IRQHandler+0xb34>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0204 	bic.w	r2, r2, #4
 8003b36:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 8165 	beq.w	8003e0c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b4a:	e15f      	b.n	8003e0c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	2202      	movs	r2, #2
 8003b56:	409a      	lsls	r2, r3
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80c5 	beq.w	8003cec <HAL_DMA_IRQHandler+0xce8>
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 80bf 	beq.w	8003cec <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b72:	f003 031f 	and.w	r3, r3, #31
 8003b76:	2202      	movs	r2, #2
 8003b78:	409a      	lsls	r2, r3
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d018      	beq.n	8003bba <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d109      	bne.n	8003ba6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 813a 	beq.w	8003e10 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ba4:	e134      	b.n	8003e10 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 8130 	beq.w	8003e10 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bb8:	e12a      	b.n	8003e10 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f040 8089 	bne.w	8003cd8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a2b      	ldr	r2, [pc, #172]	@ (8003c78 <HAL_DMA_IRQHandler+0xc74>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d04a      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xc62>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a29      	ldr	r2, [pc, #164]	@ (8003c7c <HAL_DMA_IRQHandler+0xc78>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d045      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xc62>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a28      	ldr	r2, [pc, #160]	@ (8003c80 <HAL_DMA_IRQHandler+0xc7c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d040      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xc62>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a26      	ldr	r2, [pc, #152]	@ (8003c84 <HAL_DMA_IRQHandler+0xc80>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d03b      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xc62>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a25      	ldr	r2, [pc, #148]	@ (8003c88 <HAL_DMA_IRQHandler+0xc84>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d036      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xc62>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a23      	ldr	r2, [pc, #140]	@ (8003c8c <HAL_DMA_IRQHandler+0xc88>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d031      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xc62>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a22      	ldr	r2, [pc, #136]	@ (8003c90 <HAL_DMA_IRQHandler+0xc8c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d02c      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xc62>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a20      	ldr	r2, [pc, #128]	@ (8003c94 <HAL_DMA_IRQHandler+0xc90>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d027      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xc62>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a1f      	ldr	r2, [pc, #124]	@ (8003c98 <HAL_DMA_IRQHandler+0xc94>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d022      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xc62>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a1d      	ldr	r2, [pc, #116]	@ (8003c9c <HAL_DMA_IRQHandler+0xc98>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d01d      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xc62>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ca0 <HAL_DMA_IRQHandler+0xc9c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d018      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xc62>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a1a      	ldr	r2, [pc, #104]	@ (8003ca4 <HAL_DMA_IRQHandler+0xca0>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d013      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xc62>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a19      	ldr	r2, [pc, #100]	@ (8003ca8 <HAL_DMA_IRQHandler+0xca4>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00e      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xc62>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a17      	ldr	r2, [pc, #92]	@ (8003cac <HAL_DMA_IRQHandler+0xca8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d009      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xc62>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a16      	ldr	r2, [pc, #88]	@ (8003cb0 <HAL_DMA_IRQHandler+0xcac>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d004      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xc62>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a14      	ldr	r2, [pc, #80]	@ (8003cb4 <HAL_DMA_IRQHandler+0xcb0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d128      	bne.n	8003cb8 <HAL_DMA_IRQHandler+0xcb4>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0214 	bic.w	r2, r2, #20
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	e027      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xcc4>
 8003c78:	40020010 	.word	0x40020010
 8003c7c:	40020028 	.word	0x40020028
 8003c80:	40020040 	.word	0x40020040
 8003c84:	40020058 	.word	0x40020058
 8003c88:	40020070 	.word	0x40020070
 8003c8c:	40020088 	.word	0x40020088
 8003c90:	400200a0 	.word	0x400200a0
 8003c94:	400200b8 	.word	0x400200b8
 8003c98:	40020410 	.word	0x40020410
 8003c9c:	40020428 	.word	0x40020428
 8003ca0:	40020440 	.word	0x40020440
 8003ca4:	40020458 	.word	0x40020458
 8003ca8:	40020470 	.word	0x40020470
 8003cac:	40020488 	.word	0x40020488
 8003cb0:	400204a0 	.word	0x400204a0
 8003cb4:	400204b8 	.word	0x400204b8
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 020a 	bic.w	r2, r2, #10
 8003cc6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 8097 	beq.w	8003e10 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cea:	e091      	b.n	8003e10 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf0:	f003 031f 	and.w	r3, r3, #31
 8003cf4:	2208      	movs	r2, #8
 8003cf6:	409a      	lsls	r2, r3
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 8088 	beq.w	8003e12 <HAL_DMA_IRQHandler+0xe0e>
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 8082 	beq.w	8003e12 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a41      	ldr	r2, [pc, #260]	@ (8003e18 <HAL_DMA_IRQHandler+0xe14>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d04a      	beq.n	8003dae <HAL_DMA_IRQHandler+0xdaa>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a3f      	ldr	r2, [pc, #252]	@ (8003e1c <HAL_DMA_IRQHandler+0xe18>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d045      	beq.n	8003dae <HAL_DMA_IRQHandler+0xdaa>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a3e      	ldr	r2, [pc, #248]	@ (8003e20 <HAL_DMA_IRQHandler+0xe1c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d040      	beq.n	8003dae <HAL_DMA_IRQHandler+0xdaa>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a3c      	ldr	r2, [pc, #240]	@ (8003e24 <HAL_DMA_IRQHandler+0xe20>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d03b      	beq.n	8003dae <HAL_DMA_IRQHandler+0xdaa>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a3b      	ldr	r2, [pc, #236]	@ (8003e28 <HAL_DMA_IRQHandler+0xe24>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d036      	beq.n	8003dae <HAL_DMA_IRQHandler+0xdaa>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a39      	ldr	r2, [pc, #228]	@ (8003e2c <HAL_DMA_IRQHandler+0xe28>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d031      	beq.n	8003dae <HAL_DMA_IRQHandler+0xdaa>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a38      	ldr	r2, [pc, #224]	@ (8003e30 <HAL_DMA_IRQHandler+0xe2c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d02c      	beq.n	8003dae <HAL_DMA_IRQHandler+0xdaa>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a36      	ldr	r2, [pc, #216]	@ (8003e34 <HAL_DMA_IRQHandler+0xe30>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d027      	beq.n	8003dae <HAL_DMA_IRQHandler+0xdaa>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a35      	ldr	r2, [pc, #212]	@ (8003e38 <HAL_DMA_IRQHandler+0xe34>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d022      	beq.n	8003dae <HAL_DMA_IRQHandler+0xdaa>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a33      	ldr	r2, [pc, #204]	@ (8003e3c <HAL_DMA_IRQHandler+0xe38>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01d      	beq.n	8003dae <HAL_DMA_IRQHandler+0xdaa>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a32      	ldr	r2, [pc, #200]	@ (8003e40 <HAL_DMA_IRQHandler+0xe3c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d018      	beq.n	8003dae <HAL_DMA_IRQHandler+0xdaa>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a30      	ldr	r2, [pc, #192]	@ (8003e44 <HAL_DMA_IRQHandler+0xe40>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d013      	beq.n	8003dae <HAL_DMA_IRQHandler+0xdaa>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a2f      	ldr	r2, [pc, #188]	@ (8003e48 <HAL_DMA_IRQHandler+0xe44>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00e      	beq.n	8003dae <HAL_DMA_IRQHandler+0xdaa>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a2d      	ldr	r2, [pc, #180]	@ (8003e4c <HAL_DMA_IRQHandler+0xe48>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d009      	beq.n	8003dae <HAL_DMA_IRQHandler+0xdaa>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a2c      	ldr	r2, [pc, #176]	@ (8003e50 <HAL_DMA_IRQHandler+0xe4c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d004      	beq.n	8003dae <HAL_DMA_IRQHandler+0xdaa>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a2a      	ldr	r2, [pc, #168]	@ (8003e54 <HAL_DMA_IRQHandler+0xe50>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d108      	bne.n	8003dc0 <HAL_DMA_IRQHandler+0xdbc>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 021c 	bic.w	r2, r2, #28
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	e007      	b.n	8003dd0 <HAL_DMA_IRQHandler+0xdcc>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 020e 	bic.w	r2, r2, #14
 8003dce:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd4:	f003 031f 	and.w	r3, r3, #31
 8003dd8:	2201      	movs	r2, #1
 8003dda:	409a      	lsls	r2, r3
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d009      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	4798      	blx	r3
 8003e06:	e004      	b.n	8003e12 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003e08:	bf00      	nop
 8003e0a:	e002      	b.n	8003e12 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e0c:	bf00      	nop
 8003e0e:	e000      	b.n	8003e12 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e10:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e12:	3728      	adds	r7, #40	@ 0x28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40020010 	.word	0x40020010
 8003e1c:	40020028 	.word	0x40020028
 8003e20:	40020040 	.word	0x40020040
 8003e24:	40020058 	.word	0x40020058
 8003e28:	40020070 	.word	0x40020070
 8003e2c:	40020088 	.word	0x40020088
 8003e30:	400200a0 	.word	0x400200a0
 8003e34:	400200b8 	.word	0x400200b8
 8003e38:	40020410 	.word	0x40020410
 8003e3c:	40020428 	.word	0x40020428
 8003e40:	40020440 	.word	0x40020440
 8003e44:	40020458 	.word	0x40020458
 8003e48:	40020470 	.word	0x40020470
 8003e4c:	40020488 	.word	0x40020488
 8003e50:	400204a0 	.word	0x400204a0
 8003e54:	400204b8 	.word	0x400204b8

08003e58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a42      	ldr	r2, [pc, #264]	@ (8003f70 <DMA_CalcBaseAndBitshift+0x118>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d04a      	beq.n	8003f00 <DMA_CalcBaseAndBitshift+0xa8>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a41      	ldr	r2, [pc, #260]	@ (8003f74 <DMA_CalcBaseAndBitshift+0x11c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d045      	beq.n	8003f00 <DMA_CalcBaseAndBitshift+0xa8>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a3f      	ldr	r2, [pc, #252]	@ (8003f78 <DMA_CalcBaseAndBitshift+0x120>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d040      	beq.n	8003f00 <DMA_CalcBaseAndBitshift+0xa8>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a3e      	ldr	r2, [pc, #248]	@ (8003f7c <DMA_CalcBaseAndBitshift+0x124>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d03b      	beq.n	8003f00 <DMA_CalcBaseAndBitshift+0xa8>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a3c      	ldr	r2, [pc, #240]	@ (8003f80 <DMA_CalcBaseAndBitshift+0x128>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d036      	beq.n	8003f00 <DMA_CalcBaseAndBitshift+0xa8>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a3b      	ldr	r2, [pc, #236]	@ (8003f84 <DMA_CalcBaseAndBitshift+0x12c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d031      	beq.n	8003f00 <DMA_CalcBaseAndBitshift+0xa8>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a39      	ldr	r2, [pc, #228]	@ (8003f88 <DMA_CalcBaseAndBitshift+0x130>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d02c      	beq.n	8003f00 <DMA_CalcBaseAndBitshift+0xa8>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a38      	ldr	r2, [pc, #224]	@ (8003f8c <DMA_CalcBaseAndBitshift+0x134>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d027      	beq.n	8003f00 <DMA_CalcBaseAndBitshift+0xa8>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a36      	ldr	r2, [pc, #216]	@ (8003f90 <DMA_CalcBaseAndBitshift+0x138>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d022      	beq.n	8003f00 <DMA_CalcBaseAndBitshift+0xa8>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a35      	ldr	r2, [pc, #212]	@ (8003f94 <DMA_CalcBaseAndBitshift+0x13c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d01d      	beq.n	8003f00 <DMA_CalcBaseAndBitshift+0xa8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a33      	ldr	r2, [pc, #204]	@ (8003f98 <DMA_CalcBaseAndBitshift+0x140>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d018      	beq.n	8003f00 <DMA_CalcBaseAndBitshift+0xa8>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a32      	ldr	r2, [pc, #200]	@ (8003f9c <DMA_CalcBaseAndBitshift+0x144>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d013      	beq.n	8003f00 <DMA_CalcBaseAndBitshift+0xa8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a30      	ldr	r2, [pc, #192]	@ (8003fa0 <DMA_CalcBaseAndBitshift+0x148>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00e      	beq.n	8003f00 <DMA_CalcBaseAndBitshift+0xa8>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a2f      	ldr	r2, [pc, #188]	@ (8003fa4 <DMA_CalcBaseAndBitshift+0x14c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d009      	beq.n	8003f00 <DMA_CalcBaseAndBitshift+0xa8>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a2d      	ldr	r2, [pc, #180]	@ (8003fa8 <DMA_CalcBaseAndBitshift+0x150>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d004      	beq.n	8003f00 <DMA_CalcBaseAndBitshift+0xa8>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a2c      	ldr	r2, [pc, #176]	@ (8003fac <DMA_CalcBaseAndBitshift+0x154>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d101      	bne.n	8003f04 <DMA_CalcBaseAndBitshift+0xac>
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <DMA_CalcBaseAndBitshift+0xae>
 8003f04:	2300      	movs	r3, #0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d024      	beq.n	8003f54 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	3b10      	subs	r3, #16
 8003f12:	4a27      	ldr	r2, [pc, #156]	@ (8003fb0 <DMA_CalcBaseAndBitshift+0x158>)
 8003f14:	fba2 2303 	umull	r2, r3, r2, r3
 8003f18:	091b      	lsrs	r3, r3, #4
 8003f1a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	4a24      	ldr	r2, [pc, #144]	@ (8003fb4 <DMA_CalcBaseAndBitshift+0x15c>)
 8003f24:	5cd3      	ldrb	r3, [r2, r3]
 8003f26:	461a      	mov	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d908      	bls.n	8003f44 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	4b1f      	ldr	r3, [pc, #124]	@ (8003fb8 <DMA_CalcBaseAndBitshift+0x160>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	1d1a      	adds	r2, r3, #4
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f42:	e00d      	b.n	8003f60 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb8 <DMA_CalcBaseAndBitshift+0x160>)
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f52:	e005      	b.n	8003f60 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	40020010 	.word	0x40020010
 8003f74:	40020028 	.word	0x40020028
 8003f78:	40020040 	.word	0x40020040
 8003f7c:	40020058 	.word	0x40020058
 8003f80:	40020070 	.word	0x40020070
 8003f84:	40020088 	.word	0x40020088
 8003f88:	400200a0 	.word	0x400200a0
 8003f8c:	400200b8 	.word	0x400200b8
 8003f90:	40020410 	.word	0x40020410
 8003f94:	40020428 	.word	0x40020428
 8003f98:	40020440 	.word	0x40020440
 8003f9c:	40020458 	.word	0x40020458
 8003fa0:	40020470 	.word	0x40020470
 8003fa4:	40020488 	.word	0x40020488
 8003fa8:	400204a0 	.word	0x400204a0
 8003fac:	400204b8 	.word	0x400204b8
 8003fb0:	aaaaaaab 	.word	0xaaaaaaab
 8003fb4:	0800d92c 	.word	0x0800d92c
 8003fb8:	fffffc00 	.word	0xfffffc00

08003fbc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d120      	bne.n	8004012 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd4:	2b03      	cmp	r3, #3
 8003fd6:	d858      	bhi.n	800408a <DMA_CheckFifoParam+0xce>
 8003fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003fe0 <DMA_CheckFifoParam+0x24>)
 8003fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fde:	bf00      	nop
 8003fe0:	08003ff1 	.word	0x08003ff1
 8003fe4:	08004003 	.word	0x08004003
 8003fe8:	08003ff1 	.word	0x08003ff1
 8003fec:	0800408b 	.word	0x0800408b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d048      	beq.n	800408e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004000:	e045      	b.n	800408e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004006:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800400a:	d142      	bne.n	8004092 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004010:	e03f      	b.n	8004092 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800401a:	d123      	bne.n	8004064 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004020:	2b03      	cmp	r3, #3
 8004022:	d838      	bhi.n	8004096 <DMA_CheckFifoParam+0xda>
 8004024:	a201      	add	r2, pc, #4	@ (adr r2, 800402c <DMA_CheckFifoParam+0x70>)
 8004026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402a:	bf00      	nop
 800402c:	0800403d 	.word	0x0800403d
 8004030:	08004043 	.word	0x08004043
 8004034:	0800403d 	.word	0x0800403d
 8004038:	08004055 	.word	0x08004055
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	73fb      	strb	r3, [r7, #15]
        break;
 8004040:	e030      	b.n	80040a4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004046:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d025      	beq.n	800409a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004052:	e022      	b.n	800409a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004058:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800405c:	d11f      	bne.n	800409e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004062:	e01c      	b.n	800409e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004068:	2b02      	cmp	r3, #2
 800406a:	d902      	bls.n	8004072 <DMA_CheckFifoParam+0xb6>
 800406c:	2b03      	cmp	r3, #3
 800406e:	d003      	beq.n	8004078 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004070:	e018      	b.n	80040a4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	73fb      	strb	r3, [r7, #15]
        break;
 8004076:	e015      	b.n	80040a4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00e      	beq.n	80040a2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	73fb      	strb	r3, [r7, #15]
    break;
 8004088:	e00b      	b.n	80040a2 <DMA_CheckFifoParam+0xe6>
        break;
 800408a:	bf00      	nop
 800408c:	e00a      	b.n	80040a4 <DMA_CheckFifoParam+0xe8>
        break;
 800408e:	bf00      	nop
 8004090:	e008      	b.n	80040a4 <DMA_CheckFifoParam+0xe8>
        break;
 8004092:	bf00      	nop
 8004094:	e006      	b.n	80040a4 <DMA_CheckFifoParam+0xe8>
        break;
 8004096:	bf00      	nop
 8004098:	e004      	b.n	80040a4 <DMA_CheckFifoParam+0xe8>
        break;
 800409a:	bf00      	nop
 800409c:	e002      	b.n	80040a4 <DMA_CheckFifoParam+0xe8>
        break;
 800409e:	bf00      	nop
 80040a0:	e000      	b.n	80040a4 <DMA_CheckFifoParam+0xe8>
    break;
 80040a2:	bf00      	nop
    }
  }

  return status;
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop

080040b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a38      	ldr	r2, [pc, #224]	@ (80041a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d022      	beq.n	8004112 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a36      	ldr	r2, [pc, #216]	@ (80041ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d01d      	beq.n	8004112 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a35      	ldr	r2, [pc, #212]	@ (80041b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d018      	beq.n	8004112 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a33      	ldr	r2, [pc, #204]	@ (80041b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d013      	beq.n	8004112 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a32      	ldr	r2, [pc, #200]	@ (80041b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00e      	beq.n	8004112 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a30      	ldr	r2, [pc, #192]	@ (80041bc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d009      	beq.n	8004112 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a2f      	ldr	r2, [pc, #188]	@ (80041c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d004      	beq.n	8004112 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a2d      	ldr	r2, [pc, #180]	@ (80041c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d101      	bne.n	8004116 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004116:	2300      	movs	r3, #0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01a      	beq.n	8004152 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	b2db      	uxtb	r3, r3
 8004122:	3b08      	subs	r3, #8
 8004124:	4a28      	ldr	r2, [pc, #160]	@ (80041c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	091b      	lsrs	r3, r3, #4
 800412c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	4b26      	ldr	r3, [pc, #152]	@ (80041cc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	461a      	mov	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a24      	ldr	r2, [pc, #144]	@ (80041d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004140:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f003 031f 	and.w	r3, r3, #31
 8004148:	2201      	movs	r2, #1
 800414a:	409a      	lsls	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004150:	e024      	b.n	800419c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	3b10      	subs	r3, #16
 800415a:	4a1e      	ldr	r2, [pc, #120]	@ (80041d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800415c:	fba2 2303 	umull	r2, r3, r2, r3
 8004160:	091b      	lsrs	r3, r3, #4
 8004162:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4a1c      	ldr	r2, [pc, #112]	@ (80041d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d806      	bhi.n	800417a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4a1b      	ldr	r2, [pc, #108]	@ (80041dc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d902      	bls.n	800417a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	3308      	adds	r3, #8
 8004178:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4b18      	ldr	r3, [pc, #96]	@ (80041e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800417e:	4413      	add	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	461a      	mov	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a16      	ldr	r2, [pc, #88]	@ (80041e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800418c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f003 031f 	and.w	r3, r3, #31
 8004194:	2201      	movs	r2, #1
 8004196:	409a      	lsls	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800419c:	bf00      	nop
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	58025408 	.word	0x58025408
 80041ac:	5802541c 	.word	0x5802541c
 80041b0:	58025430 	.word	0x58025430
 80041b4:	58025444 	.word	0x58025444
 80041b8:	58025458 	.word	0x58025458
 80041bc:	5802546c 	.word	0x5802546c
 80041c0:	58025480 	.word	0x58025480
 80041c4:	58025494 	.word	0x58025494
 80041c8:	cccccccd 	.word	0xcccccccd
 80041cc:	16009600 	.word	0x16009600
 80041d0:	58025880 	.word	0x58025880
 80041d4:	aaaaaaab 	.word	0xaaaaaaab
 80041d8:	400204b8 	.word	0x400204b8
 80041dc:	4002040f 	.word	0x4002040f
 80041e0:	10008200 	.word	0x10008200
 80041e4:	40020880 	.word	0x40020880

080041e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d04a      	beq.n	8004294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2b08      	cmp	r3, #8
 8004202:	d847      	bhi.n	8004294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a25      	ldr	r2, [pc, #148]	@ (80042a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d022      	beq.n	8004254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a24      	ldr	r2, [pc, #144]	@ (80042a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d01d      	beq.n	8004254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a22      	ldr	r2, [pc, #136]	@ (80042a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d018      	beq.n	8004254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a21      	ldr	r2, [pc, #132]	@ (80042ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d013      	beq.n	8004254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a1f      	ldr	r2, [pc, #124]	@ (80042b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00e      	beq.n	8004254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1e      	ldr	r2, [pc, #120]	@ (80042b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d009      	beq.n	8004254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a1c      	ldr	r2, [pc, #112]	@ (80042b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d004      	beq.n	8004254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a1b      	ldr	r2, [pc, #108]	@ (80042bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d101      	bne.n	8004258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004258:	2300      	movs	r3, #0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4b17      	ldr	r3, [pc, #92]	@ (80042c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	461a      	mov	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a15      	ldr	r2, [pc, #84]	@ (80042c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004270:	671a      	str	r2, [r3, #112]	@ 0x70
 8004272:	e009      	b.n	8004288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4b14      	ldr	r3, [pc, #80]	@ (80042c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004278:	4413      	add	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	461a      	mov	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a11      	ldr	r2, [pc, #68]	@ (80042cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004286:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	3b01      	subs	r3, #1
 800428c:	2201      	movs	r2, #1
 800428e:	409a      	lsls	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004294:	bf00      	nop
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	58025408 	.word	0x58025408
 80042a4:	5802541c 	.word	0x5802541c
 80042a8:	58025430 	.word	0x58025430
 80042ac:	58025444 	.word	0x58025444
 80042b0:	58025458 	.word	0x58025458
 80042b4:	5802546c 	.word	0x5802546c
 80042b8:	58025480 	.word	0x58025480
 80042bc:	58025494 	.word	0x58025494
 80042c0:	1600963f 	.word	0x1600963f
 80042c4:	58025940 	.word	0x58025940
 80042c8:	1000823f 	.word	0x1000823f
 80042cc:	40020940 	.word	0x40020940

080042d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b089      	sub	sp, #36	@ 0x24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80042da:	2300      	movs	r3, #0
 80042dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80042de:	4b86      	ldr	r3, [pc, #536]	@ (80044f8 <HAL_GPIO_Init+0x228>)
 80042e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80042e2:	e18c      	b.n	80045fe <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	2101      	movs	r1, #1
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	fa01 f303 	lsl.w	r3, r1, r3
 80042f0:	4013      	ands	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 817e 	beq.w	80045f8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f003 0303 	and.w	r3, r3, #3
 8004304:	2b01      	cmp	r3, #1
 8004306:	d005      	beq.n	8004314 <HAL_GPIO_Init+0x44>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f003 0303 	and.w	r3, r3, #3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d130      	bne.n	8004376 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	2203      	movs	r2, #3
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	43db      	mvns	r3, r3
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	4013      	ands	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	4313      	orrs	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800434a:	2201      	movs	r2, #1
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	43db      	mvns	r3, r3
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	4013      	ands	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	091b      	lsrs	r3, r3, #4
 8004360:	f003 0201 	and.w	r2, r3, #1
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	4313      	orrs	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	2b03      	cmp	r3, #3
 8004380:	d017      	beq.n	80043b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	2203      	movs	r2, #3
 800438e:	fa02 f303 	lsl.w	r3, r2, r3
 8004392:	43db      	mvns	r3, r3
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	4013      	ands	r3, r2
 8004398:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d123      	bne.n	8004406 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	08da      	lsrs	r2, r3, #3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3208      	adds	r2, #8
 80043c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	220f      	movs	r2, #15
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	43db      	mvns	r3, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4013      	ands	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	691a      	ldr	r2, [r3, #16]
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	fa02 f303 	lsl.w	r3, r2, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	08da      	lsrs	r2, r3, #3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3208      	adds	r2, #8
 8004400:	69b9      	ldr	r1, [r7, #24]
 8004402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	2203      	movs	r2, #3
 8004412:	fa02 f303 	lsl.w	r3, r2, r3
 8004416:	43db      	mvns	r3, r3
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	4013      	ands	r3, r2
 800441c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f003 0203 	and.w	r2, r3, #3
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	4313      	orrs	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 80d8 	beq.w	80045f8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004448:	4b2c      	ldr	r3, [pc, #176]	@ (80044fc <HAL_GPIO_Init+0x22c>)
 800444a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800444e:	4a2b      	ldr	r2, [pc, #172]	@ (80044fc <HAL_GPIO_Init+0x22c>)
 8004450:	f043 0302 	orr.w	r3, r3, #2
 8004454:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004458:	4b28      	ldr	r3, [pc, #160]	@ (80044fc <HAL_GPIO_Init+0x22c>)
 800445a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004466:	4a26      	ldr	r2, [pc, #152]	@ (8004500 <HAL_GPIO_Init+0x230>)
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	089b      	lsrs	r3, r3, #2
 800446c:	3302      	adds	r3, #2
 800446e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	220f      	movs	r2, #15
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43db      	mvns	r3, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4013      	ands	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a1d      	ldr	r2, [pc, #116]	@ (8004504 <HAL_GPIO_Init+0x234>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d04a      	beq.n	8004528 <HAL_GPIO_Init+0x258>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a1c      	ldr	r2, [pc, #112]	@ (8004508 <HAL_GPIO_Init+0x238>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d02b      	beq.n	80044f2 <HAL_GPIO_Init+0x222>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a1b      	ldr	r2, [pc, #108]	@ (800450c <HAL_GPIO_Init+0x23c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d025      	beq.n	80044ee <HAL_GPIO_Init+0x21e>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a1a      	ldr	r2, [pc, #104]	@ (8004510 <HAL_GPIO_Init+0x240>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d01f      	beq.n	80044ea <HAL_GPIO_Init+0x21a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a19      	ldr	r2, [pc, #100]	@ (8004514 <HAL_GPIO_Init+0x244>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d019      	beq.n	80044e6 <HAL_GPIO_Init+0x216>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a18      	ldr	r2, [pc, #96]	@ (8004518 <HAL_GPIO_Init+0x248>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d013      	beq.n	80044e2 <HAL_GPIO_Init+0x212>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a17      	ldr	r2, [pc, #92]	@ (800451c <HAL_GPIO_Init+0x24c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00d      	beq.n	80044de <HAL_GPIO_Init+0x20e>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a16      	ldr	r2, [pc, #88]	@ (8004520 <HAL_GPIO_Init+0x250>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d007      	beq.n	80044da <HAL_GPIO_Init+0x20a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a15      	ldr	r2, [pc, #84]	@ (8004524 <HAL_GPIO_Init+0x254>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d101      	bne.n	80044d6 <HAL_GPIO_Init+0x206>
 80044d2:	2309      	movs	r3, #9
 80044d4:	e029      	b.n	800452a <HAL_GPIO_Init+0x25a>
 80044d6:	230a      	movs	r3, #10
 80044d8:	e027      	b.n	800452a <HAL_GPIO_Init+0x25a>
 80044da:	2307      	movs	r3, #7
 80044dc:	e025      	b.n	800452a <HAL_GPIO_Init+0x25a>
 80044de:	2306      	movs	r3, #6
 80044e0:	e023      	b.n	800452a <HAL_GPIO_Init+0x25a>
 80044e2:	2305      	movs	r3, #5
 80044e4:	e021      	b.n	800452a <HAL_GPIO_Init+0x25a>
 80044e6:	2304      	movs	r3, #4
 80044e8:	e01f      	b.n	800452a <HAL_GPIO_Init+0x25a>
 80044ea:	2303      	movs	r3, #3
 80044ec:	e01d      	b.n	800452a <HAL_GPIO_Init+0x25a>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e01b      	b.n	800452a <HAL_GPIO_Init+0x25a>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e019      	b.n	800452a <HAL_GPIO_Init+0x25a>
 80044f6:	bf00      	nop
 80044f8:	58000080 	.word	0x58000080
 80044fc:	58024400 	.word	0x58024400
 8004500:	58000400 	.word	0x58000400
 8004504:	58020000 	.word	0x58020000
 8004508:	58020400 	.word	0x58020400
 800450c:	58020800 	.word	0x58020800
 8004510:	58020c00 	.word	0x58020c00
 8004514:	58021000 	.word	0x58021000
 8004518:	58021400 	.word	0x58021400
 800451c:	58021800 	.word	0x58021800
 8004520:	58021c00 	.word	0x58021c00
 8004524:	58022400 	.word	0x58022400
 8004528:	2300      	movs	r3, #0
 800452a:	69fa      	ldr	r2, [r7, #28]
 800452c:	f002 0203 	and.w	r2, r2, #3
 8004530:	0092      	lsls	r2, r2, #2
 8004532:	4093      	lsls	r3, r2
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4313      	orrs	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800453a:	4938      	ldr	r1, [pc, #224]	@ (800461c <HAL_GPIO_Init+0x34c>)
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	089b      	lsrs	r3, r3, #2
 8004540:	3302      	adds	r3, #2
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004548:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	43db      	mvns	r3, r3
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	4013      	ands	r3, r2
 8004558:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800456e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004576:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	43db      	mvns	r3, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4013      	ands	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800459c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	43db      	mvns	r3, r3
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	4013      	ands	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	43db      	mvns	r3, r3
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	4013      	ands	r3, r2
 80045dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	3301      	adds	r3, #1
 80045fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	fa22 f303 	lsr.w	r3, r2, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	f47f ae6b 	bne.w	80042e4 <HAL_GPIO_Init+0x14>
  }
}
 800460e:	bf00      	nop
 8004610:	bf00      	nop
 8004612:	3724      	adds	r7, #36	@ 0x24
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	58000400 	.word	0x58000400

08004620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	807b      	strh	r3, [r7, #2]
 800462c:	4613      	mov	r3, r2
 800462e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004630:	787b      	ldrb	r3, [r7, #1]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004636:	887a      	ldrh	r2, [r7, #2]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800463c:	e003      	b.n	8004646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800463e:	887b      	ldrh	r3, [r7, #2]
 8004640:	041a      	lsls	r2, r3, #16
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	619a      	str	r2, [r3, #24]
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b082      	sub	sp, #8
 8004656:	af00      	add	r7, sp, #0
 8004658:	4603      	mov	r3, r0
 800465a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800465c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004660:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004664:	88fb      	ldrh	r3, [r7, #6]
 8004666:	4013      	ands	r3, r2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d008      	beq.n	800467e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800466c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004670:	88fb      	ldrh	r3, [r7, #6]
 8004672:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004676:	88fb      	ldrh	r3, [r7, #6]
 8004678:	4618      	mov	r0, r3
 800467a:	f000 f804 	bl	8004686 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800467e:	bf00      	nop
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	4603      	mov	r3, r0
 800468e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80046a4:	4b19      	ldr	r3, [pc, #100]	@ (800470c <HAL_PWREx_ConfigSupply+0x70>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d00a      	beq.n	80046c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80046b0:	4b16      	ldr	r3, [pc, #88]	@ (800470c <HAL_PWREx_ConfigSupply+0x70>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d001      	beq.n	80046c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e01f      	b.n	8004702 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	e01d      	b.n	8004702 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80046c6:	4b11      	ldr	r3, [pc, #68]	@ (800470c <HAL_PWREx_ConfigSupply+0x70>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f023 0207 	bic.w	r2, r3, #7
 80046ce:	490f      	ldr	r1, [pc, #60]	@ (800470c <HAL_PWREx_ConfigSupply+0x70>)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80046d6:	f7fd fac9 	bl	8001c6c <HAL_GetTick>
 80046da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046dc:	e009      	b.n	80046f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80046de:	f7fd fac5 	bl	8001c6c <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80046ec:	d901      	bls.n	80046f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e007      	b.n	8004702 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046f2:	4b06      	ldr	r3, [pc, #24]	@ (800470c <HAL_PWREx_ConfigSupply+0x70>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046fe:	d1ee      	bne.n	80046de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	58024800 	.word	0x58024800

08004710 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08c      	sub	sp, #48	@ 0x30
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e3c8      	b.n	8004eb4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 8087 	beq.w	800483e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004730:	4b88      	ldr	r3, [pc, #544]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004738:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800473a:	4b86      	ldr	r3, [pc, #536]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 800473c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004742:	2b10      	cmp	r3, #16
 8004744:	d007      	beq.n	8004756 <HAL_RCC_OscConfig+0x46>
 8004746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004748:	2b18      	cmp	r3, #24
 800474a:	d110      	bne.n	800476e <HAL_RCC_OscConfig+0x5e>
 800474c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d10b      	bne.n	800476e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004756:	4b7f      	ldr	r3, [pc, #508]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d06c      	beq.n	800483c <HAL_RCC_OscConfig+0x12c>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d168      	bne.n	800483c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e3a2      	b.n	8004eb4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004776:	d106      	bne.n	8004786 <HAL_RCC_OscConfig+0x76>
 8004778:	4b76      	ldr	r3, [pc, #472]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a75      	ldr	r2, [pc, #468]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 800477e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	e02e      	b.n	80047e4 <HAL_RCC_OscConfig+0xd4>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10c      	bne.n	80047a8 <HAL_RCC_OscConfig+0x98>
 800478e:	4b71      	ldr	r3, [pc, #452]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a70      	ldr	r2, [pc, #448]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 8004794:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	4b6e      	ldr	r3, [pc, #440]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a6d      	ldr	r2, [pc, #436]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 80047a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	e01d      	b.n	80047e4 <HAL_RCC_OscConfig+0xd4>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047b0:	d10c      	bne.n	80047cc <HAL_RCC_OscConfig+0xbc>
 80047b2:	4b68      	ldr	r3, [pc, #416]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a67      	ldr	r2, [pc, #412]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 80047b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	4b65      	ldr	r3, [pc, #404]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a64      	ldr	r2, [pc, #400]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 80047c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	e00b      	b.n	80047e4 <HAL_RCC_OscConfig+0xd4>
 80047cc:	4b61      	ldr	r3, [pc, #388]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a60      	ldr	r2, [pc, #384]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 80047d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	4b5e      	ldr	r3, [pc, #376]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a5d      	ldr	r2, [pc, #372]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 80047de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d013      	beq.n	8004814 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ec:	f7fd fa3e 	bl	8001c6c <HAL_GetTick>
 80047f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047f4:	f7fd fa3a 	bl	8001c6c <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b64      	cmp	r3, #100	@ 0x64
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e356      	b.n	8004eb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004806:	4b53      	ldr	r3, [pc, #332]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0f0      	beq.n	80047f4 <HAL_RCC_OscConfig+0xe4>
 8004812:	e014      	b.n	800483e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004814:	f7fd fa2a 	bl	8001c6c <HAL_GetTick>
 8004818:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800481c:	f7fd fa26 	bl	8001c6c <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b64      	cmp	r3, #100	@ 0x64
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e342      	b.n	8004eb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800482e:	4b49      	ldr	r3, [pc, #292]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f0      	bne.n	800481c <HAL_RCC_OscConfig+0x10c>
 800483a:	e000      	b.n	800483e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800483c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 808c 	beq.w	8004964 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800484c:	4b41      	ldr	r3, [pc, #260]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004854:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004856:	4b3f      	ldr	r3, [pc, #252]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 8004858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d007      	beq.n	8004872 <HAL_RCC_OscConfig+0x162>
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	2b18      	cmp	r3, #24
 8004866:	d137      	bne.n	80048d8 <HAL_RCC_OscConfig+0x1c8>
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d132      	bne.n	80048d8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004872:	4b38      	ldr	r3, [pc, #224]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	2b00      	cmp	r3, #0
 800487c:	d005      	beq.n	800488a <HAL_RCC_OscConfig+0x17a>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e314      	b.n	8004eb4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800488a:	4b32      	ldr	r3, [pc, #200]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 0219 	bic.w	r2, r3, #25
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	492f      	ldr	r1, [pc, #188]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 8004898:	4313      	orrs	r3, r2
 800489a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489c:	f7fd f9e6 	bl	8001c6c <HAL_GetTick>
 80048a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048a4:	f7fd f9e2 	bl	8001c6c <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e2fe      	b.n	8004eb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048b6:	4b27      	ldr	r3, [pc, #156]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0304 	and.w	r3, r3, #4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c2:	4b24      	ldr	r3, [pc, #144]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	061b      	lsls	r3, r3, #24
 80048d0:	4920      	ldr	r1, [pc, #128]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048d6:	e045      	b.n	8004964 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d026      	beq.n	800492e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80048e0:	4b1c      	ldr	r3, [pc, #112]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f023 0219 	bic.w	r2, r3, #25
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	4919      	ldr	r1, [pc, #100]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f2:	f7fd f9bb 	bl	8001c6c <HAL_GetTick>
 80048f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048fa:	f7fd f9b7 	bl	8001c6c <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e2d3      	b.n	8004eb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800490c:	4b11      	ldr	r3, [pc, #68]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0f0      	beq.n	80048fa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004918:	4b0e      	ldr	r3, [pc, #56]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	061b      	lsls	r3, r3, #24
 8004926:	490b      	ldr	r1, [pc, #44]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 8004928:	4313      	orrs	r3, r2
 800492a:	604b      	str	r3, [r1, #4]
 800492c:	e01a      	b.n	8004964 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800492e:	4b09      	ldr	r3, [pc, #36]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a08      	ldr	r2, [pc, #32]	@ (8004954 <HAL_RCC_OscConfig+0x244>)
 8004934:	f023 0301 	bic.w	r3, r3, #1
 8004938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493a:	f7fd f997 	bl	8001c6c <HAL_GetTick>
 800493e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004940:	e00a      	b.n	8004958 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004942:	f7fd f993 	bl	8001c6c <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d903      	bls.n	8004958 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e2af      	b.n	8004eb4 <HAL_RCC_OscConfig+0x7a4>
 8004954:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004958:	4b96      	ldr	r3, [pc, #600]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1ee      	bne.n	8004942 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0310 	and.w	r3, r3, #16
 800496c:	2b00      	cmp	r3, #0
 800496e:	d06a      	beq.n	8004a46 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004970:	4b90      	ldr	r3, [pc, #576]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004978:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800497a:	4b8e      	ldr	r3, [pc, #568]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 800497c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	2b08      	cmp	r3, #8
 8004984:	d007      	beq.n	8004996 <HAL_RCC_OscConfig+0x286>
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b18      	cmp	r3, #24
 800498a:	d11b      	bne.n	80049c4 <HAL_RCC_OscConfig+0x2b4>
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	2b01      	cmp	r3, #1
 8004994:	d116      	bne.n	80049c4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004996:	4b87      	ldr	r3, [pc, #540]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <HAL_RCC_OscConfig+0x29e>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	2b80      	cmp	r3, #128	@ 0x80
 80049a8:	d001      	beq.n	80049ae <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e282      	b.n	8004eb4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049ae:	4b81      	ldr	r3, [pc, #516]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	061b      	lsls	r3, r3, #24
 80049bc:	497d      	ldr	r1, [pc, #500]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049c2:	e040      	b.n	8004a46 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d023      	beq.n	8004a14 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80049cc:	4b79      	ldr	r3, [pc, #484]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a78      	ldr	r2, [pc, #480]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 80049d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d8:	f7fd f948 	bl	8001c6c <HAL_GetTick>
 80049dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80049e0:	f7fd f944 	bl	8001c6c <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e260      	b.n	8004eb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049f2:	4b70      	ldr	r3, [pc, #448]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0f0      	beq.n	80049e0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049fe:	4b6d      	ldr	r3, [pc, #436]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	061b      	lsls	r3, r3, #24
 8004a0c:	4969      	ldr	r1, [pc, #420]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60cb      	str	r3, [r1, #12]
 8004a12:	e018      	b.n	8004a46 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004a14:	4b67      	ldr	r3, [pc, #412]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a66      	ldr	r2, [pc, #408]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 8004a1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a20:	f7fd f924 	bl	8001c6c <HAL_GetTick>
 8004a24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a28:	f7fd f920 	bl	8001c6c <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e23c      	b.n	8004eb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a3a:	4b5e      	ldr	r3, [pc, #376]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1f0      	bne.n	8004a28 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d036      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d019      	beq.n	8004a8e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a5a:	4b56      	ldr	r3, [pc, #344]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 8004a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a5e:	4a55      	ldr	r2, [pc, #340]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 8004a60:	f043 0301 	orr.w	r3, r3, #1
 8004a64:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a66:	f7fd f901 	bl	8001c6c <HAL_GetTick>
 8004a6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a6c:	e008      	b.n	8004a80 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a6e:	f7fd f8fd 	bl	8001c6c <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e219      	b.n	8004eb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a80:	4b4c      	ldr	r3, [pc, #304]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 8004a82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0f0      	beq.n	8004a6e <HAL_RCC_OscConfig+0x35e>
 8004a8c:	e018      	b.n	8004ac0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a8e:	4b49      	ldr	r3, [pc, #292]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 8004a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a92:	4a48      	ldr	r2, [pc, #288]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 8004a94:	f023 0301 	bic.w	r3, r3, #1
 8004a98:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a9a:	f7fd f8e7 	bl	8001c6c <HAL_GetTick>
 8004a9e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aa2:	f7fd f8e3 	bl	8001c6c <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e1ff      	b.n	8004eb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ab4:	4b3f      	ldr	r3, [pc, #252]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 8004ab6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1f0      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d036      	beq.n	8004b3a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d019      	beq.n	8004b08 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ad4:	4b37      	ldr	r3, [pc, #220]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a36      	ldr	r2, [pc, #216]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 8004ada:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004ade:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ae0:	f7fd f8c4 	bl	8001c6c <HAL_GetTick>
 8004ae4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ae8:	f7fd f8c0 	bl	8001c6c <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e1dc      	b.n	8004eb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004afa:	4b2e      	ldr	r3, [pc, #184]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0f0      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x3d8>
 8004b06:	e018      	b.n	8004b3a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b08:	4b2a      	ldr	r3, [pc, #168]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a29      	ldr	r2, [pc, #164]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 8004b0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b14:	f7fd f8aa 	bl	8001c6c <HAL_GetTick>
 8004b18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b1c:	f7fd f8a6 	bl	8001c6c <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e1c2      	b.n	8004eb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b2e:	4b21      	ldr	r3, [pc, #132]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1f0      	bne.n	8004b1c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 8086 	beq.w	8004c54 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b48:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb8 <HAL_RCC_OscConfig+0x4a8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8004bb8 <HAL_RCC_OscConfig+0x4a8>)
 8004b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b54:	f7fd f88a 	bl	8001c6c <HAL_GetTick>
 8004b58:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b5c:	f7fd f886 	bl	8001c6c <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b64      	cmp	r3, #100	@ 0x64
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e1a2      	b.n	8004eb4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b6e:	4b12      	ldr	r3, [pc, #72]	@ (8004bb8 <HAL_RCC_OscConfig+0x4a8>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d106      	bne.n	8004b90 <HAL_RCC_OscConfig+0x480>
 8004b82:	4b0c      	ldr	r3, [pc, #48]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 8004b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b86:	4a0b      	ldr	r2, [pc, #44]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 8004b88:	f043 0301 	orr.w	r3, r3, #1
 8004b8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b8e:	e032      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e6>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d111      	bne.n	8004bbc <HAL_RCC_OscConfig+0x4ac>
 8004b98:	4b06      	ldr	r3, [pc, #24]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9c:	4a05      	ldr	r2, [pc, #20]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 8004b9e:	f023 0301 	bic.w	r3, r3, #1
 8004ba2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ba4:	4b03      	ldr	r3, [pc, #12]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 8004ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba8:	4a02      	ldr	r2, [pc, #8]	@ (8004bb4 <HAL_RCC_OscConfig+0x4a4>)
 8004baa:	f023 0304 	bic.w	r3, r3, #4
 8004bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bb0:	e021      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e6>
 8004bb2:	bf00      	nop
 8004bb4:	58024400 	.word	0x58024400
 8004bb8:	58024800 	.word	0x58024800
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	2b05      	cmp	r3, #5
 8004bc2:	d10c      	bne.n	8004bde <HAL_RCC_OscConfig+0x4ce>
 8004bc4:	4b83      	ldr	r3, [pc, #524]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc8:	4a82      	ldr	r2, [pc, #520]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004bca:	f043 0304 	orr.w	r3, r3, #4
 8004bce:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bd0:	4b80      	ldr	r3, [pc, #512]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd4:	4a7f      	ldr	r2, [pc, #508]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004bd6:	f043 0301 	orr.w	r3, r3, #1
 8004bda:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bdc:	e00b      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4e6>
 8004bde:	4b7d      	ldr	r3, [pc, #500]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be2:	4a7c      	ldr	r2, [pc, #496]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004be4:	f023 0301 	bic.w	r3, r3, #1
 8004be8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bea:	4b7a      	ldr	r3, [pc, #488]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bee:	4a79      	ldr	r2, [pc, #484]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004bf0:	f023 0304 	bic.w	r3, r3, #4
 8004bf4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d015      	beq.n	8004c2a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bfe:	f7fd f835 	bl	8001c6c <HAL_GetTick>
 8004c02:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c04:	e00a      	b.n	8004c1c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c06:	f7fd f831 	bl	8001c6c <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d901      	bls.n	8004c1c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e14b      	b.n	8004eb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c1c:	4b6d      	ldr	r3, [pc, #436]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d0ee      	beq.n	8004c06 <HAL_RCC_OscConfig+0x4f6>
 8004c28:	e014      	b.n	8004c54 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2a:	f7fd f81f 	bl	8001c6c <HAL_GetTick>
 8004c2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c30:	e00a      	b.n	8004c48 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c32:	f7fd f81b 	bl	8001c6c <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e135      	b.n	8004eb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c48:	4b62      	ldr	r3, [pc, #392]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1ee      	bne.n	8004c32 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 812a 	beq.w	8004eb2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004c5e:	4b5d      	ldr	r3, [pc, #372]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c66:	2b18      	cmp	r3, #24
 8004c68:	f000 80ba 	beq.w	8004de0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	f040 8095 	bne.w	8004da0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c76:	4b57      	ldr	r3, [pc, #348]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a56      	ldr	r2, [pc, #344]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004c7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c82:	f7fc fff3 	bl	8001c6c <HAL_GetTick>
 8004c86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c8a:	f7fc ffef 	bl	8001c6c <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e10b      	b.n	8004eb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c9c:	4b4d      	ldr	r3, [pc, #308]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1f0      	bne.n	8004c8a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ca8:	4b4a      	ldr	r3, [pc, #296]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004caa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cac:	4b4a      	ldr	r3, [pc, #296]	@ (8004dd8 <HAL_RCC_OscConfig+0x6c8>)
 8004cae:	4013      	ands	r3, r2
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004cb8:	0112      	lsls	r2, r2, #4
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	4945      	ldr	r1, [pc, #276]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	628b      	str	r3, [r1, #40]	@ 0x28
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	025b      	lsls	r3, r3, #9
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	041b      	lsls	r3, r3, #16
 8004ce0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cea:	3b01      	subs	r3, #1
 8004cec:	061b      	lsls	r3, r3, #24
 8004cee:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004cf2:	4938      	ldr	r1, [pc, #224]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004cf8:	4b36      	ldr	r3, [pc, #216]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfc:	4a35      	ldr	r2, [pc, #212]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004cfe:	f023 0301 	bic.w	r3, r3, #1
 8004d02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d04:	4b33      	ldr	r3, [pc, #204]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004d06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d08:	4b34      	ldr	r3, [pc, #208]	@ (8004ddc <HAL_RCC_OscConfig+0x6cc>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d10:	00d2      	lsls	r2, r2, #3
 8004d12:	4930      	ldr	r1, [pc, #192]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004d18:	4b2e      	ldr	r3, [pc, #184]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1c:	f023 020c 	bic.w	r2, r3, #12
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d24:	492b      	ldr	r1, [pc, #172]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2e:	f023 0202 	bic.w	r2, r3, #2
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d36:	4927      	ldr	r1, [pc, #156]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d3c:	4b25      	ldr	r3, [pc, #148]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d40:	4a24      	ldr	r2, [pc, #144]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004d42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d48:	4b22      	ldr	r3, [pc, #136]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4c:	4a21      	ldr	r2, [pc, #132]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004d4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d54:	4b1f      	ldr	r3, [pc, #124]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d58:	4a1e      	ldr	r2, [pc, #120]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004d5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004d60:	4b1c      	ldr	r3, [pc, #112]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d64:	4a1b      	ldr	r2, [pc, #108]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004d66:	f043 0301 	orr.w	r3, r3, #1
 8004d6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d6c:	4b19      	ldr	r3, [pc, #100]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a18      	ldr	r2, [pc, #96]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004d72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d78:	f7fc ff78 	bl	8001c6c <HAL_GetTick>
 8004d7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d80:	f7fc ff74 	bl	8001c6c <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e090      	b.n	8004eb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d92:	4b10      	ldr	r3, [pc, #64]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0f0      	beq.n	8004d80 <HAL_RCC_OscConfig+0x670>
 8004d9e:	e088      	b.n	8004eb2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004da0:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a0b      	ldr	r2, [pc, #44]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004da6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dac:	f7fc ff5e 	bl	8001c6c <HAL_GetTick>
 8004db0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db4:	f7fc ff5a 	bl	8001c6c <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e076      	b.n	8004eb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004dc6:	4b03      	ldr	r3, [pc, #12]	@ (8004dd4 <HAL_RCC_OscConfig+0x6c4>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f0      	bne.n	8004db4 <HAL_RCC_OscConfig+0x6a4>
 8004dd2:	e06e      	b.n	8004eb2 <HAL_RCC_OscConfig+0x7a2>
 8004dd4:	58024400 	.word	0x58024400
 8004dd8:	fffffc0c 	.word	0xfffffc0c
 8004ddc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004de0:	4b36      	ldr	r3, [pc, #216]	@ (8004ebc <HAL_RCC_OscConfig+0x7ac>)
 8004de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004de6:	4b35      	ldr	r3, [pc, #212]	@ (8004ebc <HAL_RCC_OscConfig+0x7ac>)
 8004de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d031      	beq.n	8004e58 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	f003 0203 	and.w	r2, r3, #3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d12a      	bne.n	8004e58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	091b      	lsrs	r3, r3, #4
 8004e06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d122      	bne.n	8004e58 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d11a      	bne.n	8004e58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	0a5b      	lsrs	r3, r3, #9
 8004e26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e2e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d111      	bne.n	8004e58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	0c1b      	lsrs	r3, r3, #16
 8004e38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d108      	bne.n	8004e58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	0e1b      	lsrs	r3, r3, #24
 8004e4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e52:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d001      	beq.n	8004e5c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e02b      	b.n	8004eb4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004e5c:	4b17      	ldr	r3, [pc, #92]	@ (8004ebc <HAL_RCC_OscConfig+0x7ac>)
 8004e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e60:	08db      	lsrs	r3, r3, #3
 8004e62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e66:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d01f      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004e72:	4b12      	ldr	r3, [pc, #72]	@ (8004ebc <HAL_RCC_OscConfig+0x7ac>)
 8004e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e76:	4a11      	ldr	r2, [pc, #68]	@ (8004ebc <HAL_RCC_OscConfig+0x7ac>)
 8004e78:	f023 0301 	bic.w	r3, r3, #1
 8004e7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e7e:	f7fc fef5 	bl	8001c6c <HAL_GetTick>
 8004e82:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004e84:	bf00      	nop
 8004e86:	f7fc fef1 	bl	8001c6c <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d0f9      	beq.n	8004e86 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e92:	4b0a      	ldr	r3, [pc, #40]	@ (8004ebc <HAL_RCC_OscConfig+0x7ac>)
 8004e94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e96:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec0 <HAL_RCC_OscConfig+0x7b0>)
 8004e98:	4013      	ands	r3, r2
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e9e:	00d2      	lsls	r2, r2, #3
 8004ea0:	4906      	ldr	r1, [pc, #24]	@ (8004ebc <HAL_RCC_OscConfig+0x7ac>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004ea6:	4b05      	ldr	r3, [pc, #20]	@ (8004ebc <HAL_RCC_OscConfig+0x7ac>)
 8004ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eaa:	4a04      	ldr	r2, [pc, #16]	@ (8004ebc <HAL_RCC_OscConfig+0x7ac>)
 8004eac:	f043 0301 	orr.w	r3, r3, #1
 8004eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3730      	adds	r7, #48	@ 0x30
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	58024400 	.word	0x58024400
 8004ec0:	ffff0007 	.word	0xffff0007

08004ec4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e19c      	b.n	8005212 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ed8:	4b8a      	ldr	r3, [pc, #552]	@ (8005104 <HAL_RCC_ClockConfig+0x240>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 030f 	and.w	r3, r3, #15
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d910      	bls.n	8004f08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee6:	4b87      	ldr	r3, [pc, #540]	@ (8005104 <HAL_RCC_ClockConfig+0x240>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f023 020f 	bic.w	r2, r3, #15
 8004eee:	4985      	ldr	r1, [pc, #532]	@ (8005104 <HAL_RCC_ClockConfig+0x240>)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ef6:	4b83      	ldr	r3, [pc, #524]	@ (8005104 <HAL_RCC_ClockConfig+0x240>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d001      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e184      	b.n	8005212 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d010      	beq.n	8004f36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	4b7b      	ldr	r3, [pc, #492]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d908      	bls.n	8004f36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f24:	4b78      	ldr	r3, [pc, #480]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	4975      	ldr	r1, [pc, #468]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d010      	beq.n	8004f64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695a      	ldr	r2, [r3, #20]
 8004f46:	4b70      	ldr	r3, [pc, #448]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d908      	bls.n	8004f64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f52:	4b6d      	ldr	r3, [pc, #436]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	496a      	ldr	r1, [pc, #424]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0310 	and.w	r3, r3, #16
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d010      	beq.n	8004f92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	699a      	ldr	r2, [r3, #24]
 8004f74:	4b64      	ldr	r3, [pc, #400]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d908      	bls.n	8004f92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f80:	4b61      	ldr	r3, [pc, #388]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	495e      	ldr	r1, [pc, #376]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d010      	beq.n	8004fc0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69da      	ldr	r2, [r3, #28]
 8004fa2:	4b59      	ldr	r3, [pc, #356]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d908      	bls.n	8004fc0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004fae:	4b56      	ldr	r3, [pc, #344]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	4953      	ldr	r1, [pc, #332]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d010      	beq.n	8004fee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	4b4d      	ldr	r3, [pc, #308]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d908      	bls.n	8004fee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fdc:	4b4a      	ldr	r3, [pc, #296]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	f023 020f 	bic.w	r2, r3, #15
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	4947      	ldr	r1, [pc, #284]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d055      	beq.n	80050a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004ffa:	4b43      	ldr	r3, [pc, #268]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	4940      	ldr	r1, [pc, #256]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 8005008:	4313      	orrs	r3, r2
 800500a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2b02      	cmp	r3, #2
 8005012:	d107      	bne.n	8005024 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005014:	4b3c      	ldr	r3, [pc, #240]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d121      	bne.n	8005064 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e0f6      	b.n	8005212 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	2b03      	cmp	r3, #3
 800502a:	d107      	bne.n	800503c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800502c:	4b36      	ldr	r3, [pc, #216]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d115      	bne.n	8005064 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e0ea      	b.n	8005212 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d107      	bne.n	8005054 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005044:	4b30      	ldr	r3, [pc, #192]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800504c:	2b00      	cmp	r3, #0
 800504e:	d109      	bne.n	8005064 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e0de      	b.n	8005212 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005054:	4b2c      	ldr	r3, [pc, #176]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e0d6      	b.n	8005212 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005064:	4b28      	ldr	r3, [pc, #160]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	f023 0207 	bic.w	r2, r3, #7
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	4925      	ldr	r1, [pc, #148]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 8005072:	4313      	orrs	r3, r2
 8005074:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005076:	f7fc fdf9 	bl	8001c6c <HAL_GetTick>
 800507a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800507c:	e00a      	b.n	8005094 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800507e:	f7fc fdf5 	bl	8001c6c <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800508c:	4293      	cmp	r3, r2
 800508e:	d901      	bls.n	8005094 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e0be      	b.n	8005212 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005094:	4b1c      	ldr	r3, [pc, #112]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d1eb      	bne.n	800507e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d010      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	4b14      	ldr	r3, [pc, #80]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	429a      	cmp	r2, r3
 80050c0:	d208      	bcs.n	80050d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050c2:	4b11      	ldr	r3, [pc, #68]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	f023 020f 	bic.w	r2, r3, #15
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	490e      	ldr	r1, [pc, #56]	@ (8005108 <HAL_RCC_ClockConfig+0x244>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005104 <HAL_RCC_ClockConfig+0x240>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 030f 	and.w	r3, r3, #15
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d214      	bcs.n	800510c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050e2:	4b08      	ldr	r3, [pc, #32]	@ (8005104 <HAL_RCC_ClockConfig+0x240>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f023 020f 	bic.w	r2, r3, #15
 80050ea:	4906      	ldr	r1, [pc, #24]	@ (8005104 <HAL_RCC_ClockConfig+0x240>)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f2:	4b04      	ldr	r3, [pc, #16]	@ (8005104 <HAL_RCC_ClockConfig+0x240>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d005      	beq.n	800510c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e086      	b.n	8005212 <HAL_RCC_ClockConfig+0x34e>
 8005104:	52002000 	.word	0x52002000
 8005108:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b00      	cmp	r3, #0
 8005116:	d010      	beq.n	800513a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	4b3f      	ldr	r3, [pc, #252]	@ (800521c <HAL_RCC_ClockConfig+0x358>)
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005124:	429a      	cmp	r2, r3
 8005126:	d208      	bcs.n	800513a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005128:	4b3c      	ldr	r3, [pc, #240]	@ (800521c <HAL_RCC_ClockConfig+0x358>)
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	4939      	ldr	r1, [pc, #228]	@ (800521c <HAL_RCC_ClockConfig+0x358>)
 8005136:	4313      	orrs	r3, r2
 8005138:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d010      	beq.n	8005168 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695a      	ldr	r2, [r3, #20]
 800514a:	4b34      	ldr	r3, [pc, #208]	@ (800521c <HAL_RCC_ClockConfig+0x358>)
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005152:	429a      	cmp	r2, r3
 8005154:	d208      	bcs.n	8005168 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005156:	4b31      	ldr	r3, [pc, #196]	@ (800521c <HAL_RCC_ClockConfig+0x358>)
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	492e      	ldr	r1, [pc, #184]	@ (800521c <HAL_RCC_ClockConfig+0x358>)
 8005164:	4313      	orrs	r3, r2
 8005166:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0310 	and.w	r3, r3, #16
 8005170:	2b00      	cmp	r3, #0
 8005172:	d010      	beq.n	8005196 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	699a      	ldr	r2, [r3, #24]
 8005178:	4b28      	ldr	r3, [pc, #160]	@ (800521c <HAL_RCC_ClockConfig+0x358>)
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005180:	429a      	cmp	r2, r3
 8005182:	d208      	bcs.n	8005196 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005184:	4b25      	ldr	r3, [pc, #148]	@ (800521c <HAL_RCC_ClockConfig+0x358>)
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	4922      	ldr	r1, [pc, #136]	@ (800521c <HAL_RCC_ClockConfig+0x358>)
 8005192:	4313      	orrs	r3, r2
 8005194:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0320 	and.w	r3, r3, #32
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d010      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69da      	ldr	r2, [r3, #28]
 80051a6:	4b1d      	ldr	r3, [pc, #116]	@ (800521c <HAL_RCC_ClockConfig+0x358>)
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d208      	bcs.n	80051c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80051b2:	4b1a      	ldr	r3, [pc, #104]	@ (800521c <HAL_RCC_ClockConfig+0x358>)
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	4917      	ldr	r1, [pc, #92]	@ (800521c <HAL_RCC_ClockConfig+0x358>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80051c4:	f000 f834 	bl	8005230 <HAL_RCC_GetSysClockFreq>
 80051c8:	4602      	mov	r2, r0
 80051ca:	4b14      	ldr	r3, [pc, #80]	@ (800521c <HAL_RCC_ClockConfig+0x358>)
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	0a1b      	lsrs	r3, r3, #8
 80051d0:	f003 030f 	and.w	r3, r3, #15
 80051d4:	4912      	ldr	r1, [pc, #72]	@ (8005220 <HAL_RCC_ClockConfig+0x35c>)
 80051d6:	5ccb      	ldrb	r3, [r1, r3]
 80051d8:	f003 031f 	and.w	r3, r3, #31
 80051dc:	fa22 f303 	lsr.w	r3, r2, r3
 80051e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051e2:	4b0e      	ldr	r3, [pc, #56]	@ (800521c <HAL_RCC_ClockConfig+0x358>)
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	4a0d      	ldr	r2, [pc, #52]	@ (8005220 <HAL_RCC_ClockConfig+0x35c>)
 80051ec:	5cd3      	ldrb	r3, [r2, r3]
 80051ee:	f003 031f 	and.w	r3, r3, #31
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	fa22 f303 	lsr.w	r3, r2, r3
 80051f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005224 <HAL_RCC_ClockConfig+0x360>)
 80051fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005228 <HAL_RCC_ClockConfig+0x364>)
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005202:	4b0a      	ldr	r3, [pc, #40]	@ (800522c <HAL_RCC_ClockConfig+0x368>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4618      	mov	r0, r3
 8005208:	f7fc f97c 	bl	8001504 <HAL_InitTick>
 800520c:	4603      	mov	r3, r0
 800520e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005210:	7bfb      	ldrb	r3, [r7, #15]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3718      	adds	r7, #24
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	58024400 	.word	0x58024400
 8005220:	0800d91c 	.word	0x0800d91c
 8005224:	24000108 	.word	0x24000108
 8005228:	24000104 	.word	0x24000104
 800522c:	2400010c 	.word	0x2400010c

08005230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005230:	b480      	push	{r7}
 8005232:	b089      	sub	sp, #36	@ 0x24
 8005234:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005236:	4bb3      	ldr	r3, [pc, #716]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800523e:	2b18      	cmp	r3, #24
 8005240:	f200 8155 	bhi.w	80054ee <HAL_RCC_GetSysClockFreq+0x2be>
 8005244:	a201      	add	r2, pc, #4	@ (adr r2, 800524c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524a:	bf00      	nop
 800524c:	080052b1 	.word	0x080052b1
 8005250:	080054ef 	.word	0x080054ef
 8005254:	080054ef 	.word	0x080054ef
 8005258:	080054ef 	.word	0x080054ef
 800525c:	080054ef 	.word	0x080054ef
 8005260:	080054ef 	.word	0x080054ef
 8005264:	080054ef 	.word	0x080054ef
 8005268:	080054ef 	.word	0x080054ef
 800526c:	080052d7 	.word	0x080052d7
 8005270:	080054ef 	.word	0x080054ef
 8005274:	080054ef 	.word	0x080054ef
 8005278:	080054ef 	.word	0x080054ef
 800527c:	080054ef 	.word	0x080054ef
 8005280:	080054ef 	.word	0x080054ef
 8005284:	080054ef 	.word	0x080054ef
 8005288:	080054ef 	.word	0x080054ef
 800528c:	080052dd 	.word	0x080052dd
 8005290:	080054ef 	.word	0x080054ef
 8005294:	080054ef 	.word	0x080054ef
 8005298:	080054ef 	.word	0x080054ef
 800529c:	080054ef 	.word	0x080054ef
 80052a0:	080054ef 	.word	0x080054ef
 80052a4:	080054ef 	.word	0x080054ef
 80052a8:	080054ef 	.word	0x080054ef
 80052ac:	080052e3 	.word	0x080052e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052b0:	4b94      	ldr	r3, [pc, #592]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0320 	and.w	r3, r3, #32
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d009      	beq.n	80052d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052bc:	4b91      	ldr	r3, [pc, #580]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	08db      	lsrs	r3, r3, #3
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	4a90      	ldr	r2, [pc, #576]	@ (8005508 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052c8:	fa22 f303 	lsr.w	r3, r2, r3
 80052cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80052ce:	e111      	b.n	80054f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80052d0:	4b8d      	ldr	r3, [pc, #564]	@ (8005508 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052d2:	61bb      	str	r3, [r7, #24]
      break;
 80052d4:	e10e      	b.n	80054f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80052d6:	4b8d      	ldr	r3, [pc, #564]	@ (800550c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052d8:	61bb      	str	r3, [r7, #24]
      break;
 80052da:	e10b      	b.n	80054f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80052dc:	4b8c      	ldr	r3, [pc, #560]	@ (8005510 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80052de:	61bb      	str	r3, [r7, #24]
      break;
 80052e0:	e108      	b.n	80054f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052e2:	4b88      	ldr	r3, [pc, #544]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80052ec:	4b85      	ldr	r3, [pc, #532]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f0:	091b      	lsrs	r3, r3, #4
 80052f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80052f8:	4b82      	ldr	r3, [pc, #520]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005302:	4b80      	ldr	r3, [pc, #512]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005306:	08db      	lsrs	r3, r3, #3
 8005308:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	fb02 f303 	mul.w	r3, r2, r3
 8005312:	ee07 3a90 	vmov	s15, r3
 8005316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800531a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 80e1 	beq.w	80054e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2b02      	cmp	r3, #2
 800532a:	f000 8083 	beq.w	8005434 <HAL_RCC_GetSysClockFreq+0x204>
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b02      	cmp	r3, #2
 8005332:	f200 80a1 	bhi.w	8005478 <HAL_RCC_GetSysClockFreq+0x248>
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <HAL_RCC_GetSysClockFreq+0x114>
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d056      	beq.n	80053f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005342:	e099      	b.n	8005478 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005344:	4b6f      	ldr	r3, [pc, #444]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0320 	and.w	r3, r3, #32
 800534c:	2b00      	cmp	r3, #0
 800534e:	d02d      	beq.n	80053ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005350:	4b6c      	ldr	r3, [pc, #432]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	08db      	lsrs	r3, r3, #3
 8005356:	f003 0303 	and.w	r3, r3, #3
 800535a:	4a6b      	ldr	r2, [pc, #428]	@ (8005508 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800535c:	fa22 f303 	lsr.w	r3, r2, r3
 8005360:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	ee07 3a90 	vmov	s15, r3
 8005368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	ee07 3a90 	vmov	s15, r3
 8005372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800537a:	4b62      	ldr	r3, [pc, #392]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800537c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005382:	ee07 3a90 	vmov	s15, r3
 8005386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800538a:	ed97 6a02 	vldr	s12, [r7, #8]
 800538e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005514 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800539a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800539e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80053aa:	e087      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	ee07 3a90 	vmov	s15, r3
 80053b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005518 <HAL_RCC_GetSysClockFreq+0x2e8>
 80053ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053be:	4b51      	ldr	r3, [pc, #324]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80053d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005514 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053ee:	e065      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	ee07 3a90 	vmov	s15, r3
 80053f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800551c <HAL_RCC_GetSysClockFreq+0x2ec>
 80053fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005402:	4b40      	ldr	r3, [pc, #256]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005412:	ed97 6a02 	vldr	s12, [r7, #8]
 8005416:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005514 <HAL_RCC_GetSysClockFreq+0x2e4>
 800541a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800541e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800542a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800542e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005432:	e043      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	ee07 3a90 	vmov	s15, r3
 800543a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800543e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005520 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005446:	4b2f      	ldr	r3, [pc, #188]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800544a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800544e:	ee07 3a90 	vmov	s15, r3
 8005452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005456:	ed97 6a02 	vldr	s12, [r7, #8]
 800545a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005514 <HAL_RCC_GetSysClockFreq+0x2e4>
 800545e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800546a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800546e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005472:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005476:	e021      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	ee07 3a90 	vmov	s15, r3
 800547e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005482:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800551c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800548a:	4b1e      	ldr	r3, [pc, #120]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800548c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005492:	ee07 3a90 	vmov	s15, r3
 8005496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800549a:	ed97 6a02 	vldr	s12, [r7, #8]
 800549e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005514 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80054bc:	4b11      	ldr	r3, [pc, #68]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c0:	0a5b      	lsrs	r3, r3, #9
 80054c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054c6:	3301      	adds	r3, #1
 80054c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	ee07 3a90 	vmov	s15, r3
 80054d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80054d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054e0:	ee17 3a90 	vmov	r3, s15
 80054e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80054e6:	e005      	b.n	80054f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80054e8:	2300      	movs	r3, #0
 80054ea:	61bb      	str	r3, [r7, #24]
      break;
 80054ec:	e002      	b.n	80054f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80054ee:	4b07      	ldr	r3, [pc, #28]	@ (800550c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054f0:	61bb      	str	r3, [r7, #24]
      break;
 80054f2:	bf00      	nop
  }

  return sysclockfreq;
 80054f4:	69bb      	ldr	r3, [r7, #24]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3724      	adds	r7, #36	@ 0x24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	58024400 	.word	0x58024400
 8005508:	03d09000 	.word	0x03d09000
 800550c:	003d0900 	.word	0x003d0900
 8005510:	007a1200 	.word	0x007a1200
 8005514:	46000000 	.word	0x46000000
 8005518:	4c742400 	.word	0x4c742400
 800551c:	4a742400 	.word	0x4a742400
 8005520:	4af42400 	.word	0x4af42400

08005524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800552a:	f7ff fe81 	bl	8005230 <HAL_RCC_GetSysClockFreq>
 800552e:	4602      	mov	r2, r0
 8005530:	4b10      	ldr	r3, [pc, #64]	@ (8005574 <HAL_RCC_GetHCLKFreq+0x50>)
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	0a1b      	lsrs	r3, r3, #8
 8005536:	f003 030f 	and.w	r3, r3, #15
 800553a:	490f      	ldr	r1, [pc, #60]	@ (8005578 <HAL_RCC_GetHCLKFreq+0x54>)
 800553c:	5ccb      	ldrb	r3, [r1, r3]
 800553e:	f003 031f 	and.w	r3, r3, #31
 8005542:	fa22 f303 	lsr.w	r3, r2, r3
 8005546:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005548:	4b0a      	ldr	r3, [pc, #40]	@ (8005574 <HAL_RCC_GetHCLKFreq+0x50>)
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	4a09      	ldr	r2, [pc, #36]	@ (8005578 <HAL_RCC_GetHCLKFreq+0x54>)
 8005552:	5cd3      	ldrb	r3, [r2, r3]
 8005554:	f003 031f 	and.w	r3, r3, #31
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	fa22 f303 	lsr.w	r3, r2, r3
 800555e:	4a07      	ldr	r2, [pc, #28]	@ (800557c <HAL_RCC_GetHCLKFreq+0x58>)
 8005560:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005562:	4a07      	ldr	r2, [pc, #28]	@ (8005580 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005568:	4b04      	ldr	r3, [pc, #16]	@ (800557c <HAL_RCC_GetHCLKFreq+0x58>)
 800556a:	681b      	ldr	r3, [r3, #0]
}
 800556c:	4618      	mov	r0, r3
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	58024400 	.word	0x58024400
 8005578:	0800d91c 	.word	0x0800d91c
 800557c:	24000108 	.word	0x24000108
 8005580:	24000104 	.word	0x24000104

08005584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005588:	f7ff ffcc 	bl	8005524 <HAL_RCC_GetHCLKFreq>
 800558c:	4602      	mov	r2, r0
 800558e:	4b06      	ldr	r3, [pc, #24]	@ (80055a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	091b      	lsrs	r3, r3, #4
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	4904      	ldr	r1, [pc, #16]	@ (80055ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800559a:	5ccb      	ldrb	r3, [r1, r3]
 800559c:	f003 031f 	and.w	r3, r3, #31
 80055a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	58024400 	.word	0x58024400
 80055ac:	0800d91c 	.word	0x0800d91c

080055b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80055b4:	f7ff ffb6 	bl	8005524 <HAL_RCC_GetHCLKFreq>
 80055b8:	4602      	mov	r2, r0
 80055ba:	4b06      	ldr	r3, [pc, #24]	@ (80055d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	0a1b      	lsrs	r3, r3, #8
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	4904      	ldr	r1, [pc, #16]	@ (80055d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055c6:	5ccb      	ldrb	r3, [r1, r3]
 80055c8:	f003 031f 	and.w	r3, r3, #31
 80055cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	58024400 	.word	0x58024400
 80055d8:	0800d91c 	.word	0x0800d91c

080055dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	223f      	movs	r2, #63	@ 0x3f
 80055ea:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005658 <HAL_RCC_GetClockConfig+0x7c>)
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f003 0207 	and.w	r2, r3, #7
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80055f8:	4b17      	ldr	r3, [pc, #92]	@ (8005658 <HAL_RCC_GetClockConfig+0x7c>)
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005604:	4b14      	ldr	r3, [pc, #80]	@ (8005658 <HAL_RCC_GetClockConfig+0x7c>)
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	f003 020f 	and.w	r2, r3, #15
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005610:	4b11      	ldr	r3, [pc, #68]	@ (8005658 <HAL_RCC_GetClockConfig+0x7c>)
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800561c:	4b0e      	ldr	r3, [pc, #56]	@ (8005658 <HAL_RCC_GetClockConfig+0x7c>)
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005628:	4b0b      	ldr	r3, [pc, #44]	@ (8005658 <HAL_RCC_GetClockConfig+0x7c>)
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005634:	4b08      	ldr	r3, [pc, #32]	@ (8005658 <HAL_RCC_GetClockConfig+0x7c>)
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005640:	4b06      	ldr	r3, [pc, #24]	@ (800565c <HAL_RCC_GetClockConfig+0x80>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 020f 	and.w	r2, r3, #15
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	601a      	str	r2, [r3, #0]
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	58024400 	.word	0x58024400
 800565c:	52002000 	.word	0x52002000

08005660 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005664:	b0c6      	sub	sp, #280	@ 0x118
 8005666:	af00      	add	r7, sp, #0
 8005668:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800566c:	2300      	movs	r3, #0
 800566e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005672:	2300      	movs	r3, #0
 8005674:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005680:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005684:	2500      	movs	r5, #0
 8005686:	ea54 0305 	orrs.w	r3, r4, r5
 800568a:	d049      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800568c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005690:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005692:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005696:	d02f      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005698:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800569c:	d828      	bhi.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800569e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056a2:	d01a      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80056a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056a8:	d822      	bhi.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80056ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056b2:	d007      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80056b4:	e01c      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056b6:	4bab      	ldr	r3, [pc, #684]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ba:	4aaa      	ldr	r2, [pc, #680]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80056c2:	e01a      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c8:	3308      	adds	r3, #8
 80056ca:	2102      	movs	r1, #2
 80056cc:	4618      	mov	r0, r3
 80056ce:	f001 fc25 	bl	8006f1c <RCCEx_PLL2_Config>
 80056d2:	4603      	mov	r3, r0
 80056d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80056d8:	e00f      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056de:	3328      	adds	r3, #40	@ 0x28
 80056e0:	2102      	movs	r1, #2
 80056e2:	4618      	mov	r0, r3
 80056e4:	f001 fccc 	bl	8007080 <RCCEx_PLL3_Config>
 80056e8:	4603      	mov	r3, r0
 80056ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80056ee:	e004      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80056f6:	e000      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80056f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10a      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005702:	4b98      	ldr	r3, [pc, #608]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005706:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800570a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800570e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005710:	4a94      	ldr	r2, [pc, #592]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005712:	430b      	orrs	r3, r1
 8005714:	6513      	str	r3, [r2, #80]	@ 0x50
 8005716:	e003      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005718:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800571c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005728:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800572c:	f04f 0900 	mov.w	r9, #0
 8005730:	ea58 0309 	orrs.w	r3, r8, r9
 8005734:	d047      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800573a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800573c:	2b04      	cmp	r3, #4
 800573e:	d82a      	bhi.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005740:	a201      	add	r2, pc, #4	@ (adr r2, 8005748 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005746:	bf00      	nop
 8005748:	0800575d 	.word	0x0800575d
 800574c:	0800576b 	.word	0x0800576b
 8005750:	08005781 	.word	0x08005781
 8005754:	0800579f 	.word	0x0800579f
 8005758:	0800579f 	.word	0x0800579f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800575c:	4b81      	ldr	r3, [pc, #516]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800575e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005760:	4a80      	ldr	r2, [pc, #512]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005762:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005766:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005768:	e01a      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800576a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800576e:	3308      	adds	r3, #8
 8005770:	2100      	movs	r1, #0
 8005772:	4618      	mov	r0, r3
 8005774:	f001 fbd2 	bl	8006f1c <RCCEx_PLL2_Config>
 8005778:	4603      	mov	r3, r0
 800577a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800577e:	e00f      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005784:	3328      	adds	r3, #40	@ 0x28
 8005786:	2100      	movs	r1, #0
 8005788:	4618      	mov	r0, r3
 800578a:	f001 fc79 	bl	8007080 <RCCEx_PLL3_Config>
 800578e:	4603      	mov	r3, r0
 8005790:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005794:	e004      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800579c:	e000      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800579e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10a      	bne.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057a8:	4b6e      	ldr	r3, [pc, #440]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ac:	f023 0107 	bic.w	r1, r3, #7
 80057b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b6:	4a6b      	ldr	r2, [pc, #428]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057b8:	430b      	orrs	r3, r1
 80057ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80057bc:	e003      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80057c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ce:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80057d2:	f04f 0b00 	mov.w	fp, #0
 80057d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80057da:	d05b      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80057dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80057e4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80057e8:	d03b      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80057ea:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80057ee:	d834      	bhi.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80057f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057f4:	d037      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80057f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057fa:	d82e      	bhi.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80057fc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005800:	d033      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005802:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005806:	d828      	bhi.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005808:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800580c:	d01a      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800580e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005812:	d822      	bhi.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005818:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800581c:	d007      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800581e:	e01c      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005820:	4b50      	ldr	r3, [pc, #320]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005824:	4a4f      	ldr	r2, [pc, #316]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005826:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800582a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800582c:	e01e      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800582e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005832:	3308      	adds	r3, #8
 8005834:	2100      	movs	r1, #0
 8005836:	4618      	mov	r0, r3
 8005838:	f001 fb70 	bl	8006f1c <RCCEx_PLL2_Config>
 800583c:	4603      	mov	r3, r0
 800583e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005842:	e013      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005848:	3328      	adds	r3, #40	@ 0x28
 800584a:	2100      	movs	r1, #0
 800584c:	4618      	mov	r0, r3
 800584e:	f001 fc17 	bl	8007080 <RCCEx_PLL3_Config>
 8005852:	4603      	mov	r3, r0
 8005854:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005858:	e008      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005860:	e004      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005862:	bf00      	nop
 8005864:	e002      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005866:	bf00      	nop
 8005868:	e000      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800586a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800586c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10b      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005874:	4b3b      	ldr	r3, [pc, #236]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005878:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800587c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005880:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005884:	4a37      	ldr	r2, [pc, #220]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005886:	430b      	orrs	r3, r1
 8005888:	6593      	str	r3, [r2, #88]	@ 0x58
 800588a:	e003      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800588c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005890:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80058a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80058a4:	2300      	movs	r3, #0
 80058a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80058aa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80058ae:	460b      	mov	r3, r1
 80058b0:	4313      	orrs	r3, r2
 80058b2:	d05d      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80058b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80058bc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80058c0:	d03b      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80058c2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80058c6:	d834      	bhi.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80058c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058cc:	d037      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80058ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058d2:	d82e      	bhi.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80058d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058d8:	d033      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80058da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058de:	d828      	bhi.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80058e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058e4:	d01a      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80058e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058ea:	d822      	bhi.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80058f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058f4:	d007      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80058f6:	e01c      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058fc:	4a19      	ldr	r2, [pc, #100]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005902:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005904:	e01e      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800590a:	3308      	adds	r3, #8
 800590c:	2100      	movs	r1, #0
 800590e:	4618      	mov	r0, r3
 8005910:	f001 fb04 	bl	8006f1c <RCCEx_PLL2_Config>
 8005914:	4603      	mov	r3, r0
 8005916:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800591a:	e013      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800591c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005920:	3328      	adds	r3, #40	@ 0x28
 8005922:	2100      	movs	r1, #0
 8005924:	4618      	mov	r0, r3
 8005926:	f001 fbab 	bl	8007080 <RCCEx_PLL3_Config>
 800592a:	4603      	mov	r3, r0
 800592c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005930:	e008      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005938:	e004      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800593a:	bf00      	nop
 800593c:	e002      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800593e:	bf00      	nop
 8005940:	e000      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005942:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005944:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10d      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800594c:	4b05      	ldr	r3, [pc, #20]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800594e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005950:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005958:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800595c:	4a01      	ldr	r2, [pc, #4]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800595e:	430b      	orrs	r3, r1
 8005960:	6593      	str	r3, [r2, #88]	@ 0x58
 8005962:	e005      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005964:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005968:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800596c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005978:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800597c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005980:	2300      	movs	r3, #0
 8005982:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005986:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800598a:	460b      	mov	r3, r1
 800598c:	4313      	orrs	r3, r2
 800598e:	d03a      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005996:	2b30      	cmp	r3, #48	@ 0x30
 8005998:	d01f      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800599a:	2b30      	cmp	r3, #48	@ 0x30
 800599c:	d819      	bhi.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800599e:	2b20      	cmp	r3, #32
 80059a0:	d00c      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80059a2:	2b20      	cmp	r3, #32
 80059a4:	d815      	bhi.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d019      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80059aa:	2b10      	cmp	r3, #16
 80059ac:	d111      	bne.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059ae:	4baa      	ldr	r3, [pc, #680]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b2:	4aa9      	ldr	r2, [pc, #676]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80059ba:	e011      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059c0:	3308      	adds	r3, #8
 80059c2:	2102      	movs	r1, #2
 80059c4:	4618      	mov	r0, r3
 80059c6:	f001 faa9 	bl	8006f1c <RCCEx_PLL2_Config>
 80059ca:	4603      	mov	r3, r0
 80059cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80059d0:	e006      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80059d8:	e002      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80059da:	bf00      	nop
 80059dc:	e000      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80059de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80059e8:	4b9b      	ldr	r3, [pc, #620]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80059f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059f6:	4a98      	ldr	r2, [pc, #608]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059f8:	430b      	orrs	r3, r1
 80059fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059fc:	e003      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005a12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a16:	2300      	movs	r3, #0
 8005a18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005a1c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005a20:	460b      	mov	r3, r1
 8005a22:	4313      	orrs	r3, r2
 8005a24:	d051      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a30:	d035      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005a32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a36:	d82e      	bhi.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005a38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a3c:	d031      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005a3e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a42:	d828      	bhi.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005a44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a48:	d01a      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005a4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a4e:	d822      	bhi.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005a54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a58:	d007      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005a5a:	e01c      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a5c:	4b7e      	ldr	r3, [pc, #504]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a60:	4a7d      	ldr	r2, [pc, #500]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a68:	e01c      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a6e:	3308      	adds	r3, #8
 8005a70:	2100      	movs	r1, #0
 8005a72:	4618      	mov	r0, r3
 8005a74:	f001 fa52 	bl	8006f1c <RCCEx_PLL2_Config>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a7e:	e011      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a84:	3328      	adds	r3, #40	@ 0x28
 8005a86:	2100      	movs	r1, #0
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f001 faf9 	bl	8007080 <RCCEx_PLL3_Config>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a94:	e006      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005a9c:	e002      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005a9e:	bf00      	nop
 8005aa0:	e000      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005aa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10a      	bne.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005aac:	4b6a      	ldr	r3, [pc, #424]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ab0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aba:	4a67      	ldr	r2, [pc, #412]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005abc:	430b      	orrs	r3, r1
 8005abe:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ac0:	e003      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ac6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005ad6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ada:	2300      	movs	r3, #0
 8005adc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ae0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	d053      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005af0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005af4:	d033      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005af6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005afa:	d82c      	bhi.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005afc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b00:	d02f      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005b02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b06:	d826      	bhi.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005b08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b0c:	d02b      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005b0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b12:	d820      	bhi.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005b14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b18:	d012      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005b1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b1e:	d81a      	bhi.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d022      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b28:	d115      	bne.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b2e:	3308      	adds	r3, #8
 8005b30:	2101      	movs	r1, #1
 8005b32:	4618      	mov	r0, r3
 8005b34:	f001 f9f2 	bl	8006f1c <RCCEx_PLL2_Config>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b3e:	e015      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b44:	3328      	adds	r3, #40	@ 0x28
 8005b46:	2101      	movs	r1, #1
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f001 fa99 	bl	8007080 <RCCEx_PLL3_Config>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b54:	e00a      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b5c:	e006      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005b5e:	bf00      	nop
 8005b60:	e004      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005b62:	bf00      	nop
 8005b64:	e002      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005b66:	bf00      	nop
 8005b68:	e000      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005b6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10a      	bne.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005b74:	4b38      	ldr	r3, [pc, #224]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b78:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b82:	4a35      	ldr	r2, [pc, #212]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b84:	430b      	orrs	r3, r1
 8005b86:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b88:	e003      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005b9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005ba8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005bac:	460b      	mov	r3, r1
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	d058      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005bba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bbe:	d033      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005bc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bc4:	d82c      	bhi.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bca:	d02f      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bd0:	d826      	bhi.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005bd2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005bd6:	d02b      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005bd8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005bdc:	d820      	bhi.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005bde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005be2:	d012      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005be4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005be8:	d81a      	bhi.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d022      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005bee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bf2:	d115      	bne.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bf8:	3308      	adds	r3, #8
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f001 f98d 	bl	8006f1c <RCCEx_PLL2_Config>
 8005c02:	4603      	mov	r3, r0
 8005c04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c08:	e015      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c0e:	3328      	adds	r3, #40	@ 0x28
 8005c10:	2101      	movs	r1, #1
 8005c12:	4618      	mov	r0, r3
 8005c14:	f001 fa34 	bl	8007080 <RCCEx_PLL3_Config>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c1e:	e00a      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c26:	e006      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005c28:	bf00      	nop
 8005c2a:	e004      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005c2c:	bf00      	nop
 8005c2e:	e002      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005c30:	bf00      	nop
 8005c32:	e000      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10e      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005c3e:	4b06      	ldr	r3, [pc, #24]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c42:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005c4e:	4a02      	ldr	r2, [pc, #8]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c50:	430b      	orrs	r3, r1
 8005c52:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c54:	e006      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005c56:	bf00      	nop
 8005c58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005c70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c74:	2300      	movs	r3, #0
 8005c76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005c7a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4313      	orrs	r3, r2
 8005c82:	d037      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c8e:	d00e      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005c90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c94:	d816      	bhi.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d018      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005c9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c9e:	d111      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ca0:	4bc4      	ldr	r3, [pc, #784]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca4:	4ac3      	ldr	r2, [pc, #780]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ca6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005caa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005cac:	e00f      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb2:	3308      	adds	r3, #8
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f001 f930 	bl	8006f1c <RCCEx_PLL2_Config>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005cc2:	e004      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005cca:	e000      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10a      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005cd6:	4bb7      	ldr	r3, [pc, #732]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cda:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ce4:	4ab3      	ldr	r2, [pc, #716]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ce6:	430b      	orrs	r3, r1
 8005ce8:	6513      	str	r3, [r2, #80]	@ 0x50
 8005cea:	e003      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cf0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005d00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d04:	2300      	movs	r3, #0
 8005d06:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d0a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4313      	orrs	r3, r2
 8005d12:	d039      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d81c      	bhi.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d24 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d24:	08005d61 	.word	0x08005d61
 8005d28:	08005d35 	.word	0x08005d35
 8005d2c:	08005d43 	.word	0x08005d43
 8005d30:	08005d61 	.word	0x08005d61
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d34:	4b9f      	ldr	r3, [pc, #636]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d38:	4a9e      	ldr	r2, [pc, #632]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d40:	e00f      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d46:	3308      	adds	r3, #8
 8005d48:	2102      	movs	r1, #2
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f001 f8e6 	bl	8006f1c <RCCEx_PLL2_Config>
 8005d50:	4603      	mov	r3, r0
 8005d52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d56:	e004      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d5e:	e000      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005d60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10a      	bne.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005d6a:	4b92      	ldr	r3, [pc, #584]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d6e:	f023 0103 	bic.w	r1, r3, #3
 8005d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d78:	4a8e      	ldr	r2, [pc, #568]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d7a:	430b      	orrs	r3, r1
 8005d7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d7e:	e003      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d90:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005d94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d9e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005da2:	460b      	mov	r3, r1
 8005da4:	4313      	orrs	r3, r2
 8005da6:	f000 8099 	beq.w	8005edc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005daa:	4b83      	ldr	r3, [pc, #524]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a82      	ldr	r2, [pc, #520]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005db4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005db6:	f7fb ff59 	bl	8001c6c <HAL_GetTick>
 8005dba:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dbe:	e00b      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dc0:	f7fb ff54 	bl	8001c6c <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b64      	cmp	r3, #100	@ 0x64
 8005dce:	d903      	bls.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005dd6:	e005      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dd8:	4b77      	ldr	r3, [pc, #476]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d0ed      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005de4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d173      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005dec:	4b71      	ldr	r3, [pc, #452]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005dee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005df8:	4053      	eors	r3, r2
 8005dfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d015      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e02:	4b6c      	ldr	r3, [pc, #432]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e0a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e0e:	4b69      	ldr	r3, [pc, #420]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e12:	4a68      	ldr	r2, [pc, #416]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e18:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e1a:	4b66      	ldr	r3, [pc, #408]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e1e:	4a65      	ldr	r2, [pc, #404]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e24:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e26:	4a63      	ldr	r2, [pc, #396]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e2c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005e36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e3a:	d118      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e3c:	f7fb ff16 	bl	8001c6c <HAL_GetTick>
 8005e40:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e44:	e00d      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e46:	f7fb ff11 	bl	8001c6c <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005e50:	1ad2      	subs	r2, r2, r3
 8005e52:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d903      	bls.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8005e60:	e005      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e62:	4b54      	ldr	r3, [pc, #336]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0eb      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005e6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d129      	bne.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005e7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e86:	d10e      	bne.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005e88:	4b4a      	ldr	r3, [pc, #296]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005e98:	091a      	lsrs	r2, r3, #4
 8005e9a:	4b48      	ldr	r3, [pc, #288]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	4a45      	ldr	r2, [pc, #276]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ea0:	430b      	orrs	r3, r1
 8005ea2:	6113      	str	r3, [r2, #16]
 8005ea4:	e005      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005ea6:	4b43      	ldr	r3, [pc, #268]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	4a42      	ldr	r2, [pc, #264]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005eac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005eb0:	6113      	str	r3, [r2, #16]
 8005eb2:	4b40      	ldr	r3, [pc, #256]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005eb4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ec2:	4a3c      	ldr	r2, [pc, #240]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ec4:	430b      	orrs	r3, r1
 8005ec6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ec8:	e008      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005eca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ece:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8005ed2:	e003      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ed8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	f002 0301 	and.w	r3, r2, #1
 8005ee8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005eec:	2300      	movs	r3, #0
 8005eee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005ef2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	f000 808f 	beq.w	800601c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f04:	2b28      	cmp	r3, #40	@ 0x28
 8005f06:	d871      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005f08:	a201      	add	r2, pc, #4	@ (adr r2, 8005f10 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0e:	bf00      	nop
 8005f10:	08005ff5 	.word	0x08005ff5
 8005f14:	08005fed 	.word	0x08005fed
 8005f18:	08005fed 	.word	0x08005fed
 8005f1c:	08005fed 	.word	0x08005fed
 8005f20:	08005fed 	.word	0x08005fed
 8005f24:	08005fed 	.word	0x08005fed
 8005f28:	08005fed 	.word	0x08005fed
 8005f2c:	08005fed 	.word	0x08005fed
 8005f30:	08005fc1 	.word	0x08005fc1
 8005f34:	08005fed 	.word	0x08005fed
 8005f38:	08005fed 	.word	0x08005fed
 8005f3c:	08005fed 	.word	0x08005fed
 8005f40:	08005fed 	.word	0x08005fed
 8005f44:	08005fed 	.word	0x08005fed
 8005f48:	08005fed 	.word	0x08005fed
 8005f4c:	08005fed 	.word	0x08005fed
 8005f50:	08005fd7 	.word	0x08005fd7
 8005f54:	08005fed 	.word	0x08005fed
 8005f58:	08005fed 	.word	0x08005fed
 8005f5c:	08005fed 	.word	0x08005fed
 8005f60:	08005fed 	.word	0x08005fed
 8005f64:	08005fed 	.word	0x08005fed
 8005f68:	08005fed 	.word	0x08005fed
 8005f6c:	08005fed 	.word	0x08005fed
 8005f70:	08005ff5 	.word	0x08005ff5
 8005f74:	08005fed 	.word	0x08005fed
 8005f78:	08005fed 	.word	0x08005fed
 8005f7c:	08005fed 	.word	0x08005fed
 8005f80:	08005fed 	.word	0x08005fed
 8005f84:	08005fed 	.word	0x08005fed
 8005f88:	08005fed 	.word	0x08005fed
 8005f8c:	08005fed 	.word	0x08005fed
 8005f90:	08005ff5 	.word	0x08005ff5
 8005f94:	08005fed 	.word	0x08005fed
 8005f98:	08005fed 	.word	0x08005fed
 8005f9c:	08005fed 	.word	0x08005fed
 8005fa0:	08005fed 	.word	0x08005fed
 8005fa4:	08005fed 	.word	0x08005fed
 8005fa8:	08005fed 	.word	0x08005fed
 8005fac:	08005fed 	.word	0x08005fed
 8005fb0:	08005ff5 	.word	0x08005ff5
 8005fb4:	58024400 	.word	0x58024400
 8005fb8:	58024800 	.word	0x58024800
 8005fbc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc4:	3308      	adds	r3, #8
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f000 ffa7 	bl	8006f1c <RCCEx_PLL2_Config>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005fd4:	e00f      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fda:	3328      	adds	r3, #40	@ 0x28
 8005fdc:	2101      	movs	r1, #1
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f001 f84e 	bl	8007080 <RCCEx_PLL3_Config>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005fea:	e004      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ff2:	e000      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ff6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10a      	bne.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005ffe:	4bbf      	ldr	r3, [pc, #764]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006002:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800600a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800600c:	4abb      	ldr	r2, [pc, #748]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800600e:	430b      	orrs	r3, r1
 8006010:	6553      	str	r3, [r2, #84]	@ 0x54
 8006012:	e003      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006014:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006018:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800601c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006024:	f002 0302 	and.w	r3, r2, #2
 8006028:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800602c:	2300      	movs	r3, #0
 800602e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006032:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006036:	460b      	mov	r3, r1
 8006038:	4313      	orrs	r3, r2
 800603a:	d041      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800603c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006042:	2b05      	cmp	r3, #5
 8006044:	d824      	bhi.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006046:	a201      	add	r2, pc, #4	@ (adr r2, 800604c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604c:	08006099 	.word	0x08006099
 8006050:	08006065 	.word	0x08006065
 8006054:	0800607b 	.word	0x0800607b
 8006058:	08006099 	.word	0x08006099
 800605c:	08006099 	.word	0x08006099
 8006060:	08006099 	.word	0x08006099
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006068:	3308      	adds	r3, #8
 800606a:	2101      	movs	r1, #1
 800606c:	4618      	mov	r0, r3
 800606e:	f000 ff55 	bl	8006f1c <RCCEx_PLL2_Config>
 8006072:	4603      	mov	r3, r0
 8006074:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006078:	e00f      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800607a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800607e:	3328      	adds	r3, #40	@ 0x28
 8006080:	2101      	movs	r1, #1
 8006082:	4618      	mov	r0, r3
 8006084:	f000 fffc 	bl	8007080 <RCCEx_PLL3_Config>
 8006088:	4603      	mov	r3, r0
 800608a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800608e:	e004      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006096:	e000      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800609a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10a      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80060a2:	4b96      	ldr	r3, [pc, #600]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80060a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060a6:	f023 0107 	bic.w	r1, r3, #7
 80060aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060b0:	4a92      	ldr	r2, [pc, #584]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80060b2:	430b      	orrs	r3, r1
 80060b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80060b6:	e003      	b.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c8:	f002 0304 	and.w	r3, r2, #4
 80060cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80060d0:	2300      	movs	r3, #0
 80060d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060d6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80060da:	460b      	mov	r3, r1
 80060dc:	4313      	orrs	r3, r2
 80060de:	d044      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80060e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e8:	2b05      	cmp	r3, #5
 80060ea:	d825      	bhi.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80060ec:	a201      	add	r2, pc, #4	@ (adr r2, 80060f4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80060ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f2:	bf00      	nop
 80060f4:	08006141 	.word	0x08006141
 80060f8:	0800610d 	.word	0x0800610d
 80060fc:	08006123 	.word	0x08006123
 8006100:	08006141 	.word	0x08006141
 8006104:	08006141 	.word	0x08006141
 8006108:	08006141 	.word	0x08006141
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800610c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006110:	3308      	adds	r3, #8
 8006112:	2101      	movs	r1, #1
 8006114:	4618      	mov	r0, r3
 8006116:	f000 ff01 	bl	8006f1c <RCCEx_PLL2_Config>
 800611a:	4603      	mov	r3, r0
 800611c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006120:	e00f      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006126:	3328      	adds	r3, #40	@ 0x28
 8006128:	2101      	movs	r1, #1
 800612a:	4618      	mov	r0, r3
 800612c:	f000 ffa8 	bl	8007080 <RCCEx_PLL3_Config>
 8006130:	4603      	mov	r3, r0
 8006132:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006136:	e004      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800613e:	e000      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006142:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10b      	bne.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800614a:	4b6c      	ldr	r3, [pc, #432]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800614c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800614e:	f023 0107 	bic.w	r1, r3, #7
 8006152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800615a:	4a68      	ldr	r2, [pc, #416]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800615c:	430b      	orrs	r3, r1
 800615e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006160:	e003      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006162:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006166:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800616a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006172:	f002 0320 	and.w	r3, r2, #32
 8006176:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800617a:	2300      	movs	r3, #0
 800617c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006180:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006184:	460b      	mov	r3, r1
 8006186:	4313      	orrs	r3, r2
 8006188:	d055      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800618a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800618e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006192:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006196:	d033      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006198:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800619c:	d82c      	bhi.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800619e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a2:	d02f      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80061a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a8:	d826      	bhi.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80061aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061ae:	d02b      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80061b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061b4:	d820      	bhi.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80061b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061ba:	d012      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80061bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061c0:	d81a      	bhi.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d022      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80061c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061ca:	d115      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061d0:	3308      	adds	r3, #8
 80061d2:	2100      	movs	r1, #0
 80061d4:	4618      	mov	r0, r3
 80061d6:	f000 fea1 	bl	8006f1c <RCCEx_PLL2_Config>
 80061da:	4603      	mov	r3, r0
 80061dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80061e0:	e015      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e6:	3328      	adds	r3, #40	@ 0x28
 80061e8:	2102      	movs	r1, #2
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 ff48 	bl	8007080 <RCCEx_PLL3_Config>
 80061f0:	4603      	mov	r3, r0
 80061f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80061f6:	e00a      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061fe:	e006      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006200:	bf00      	nop
 8006202:	e004      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006204:	bf00      	nop
 8006206:	e002      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006208:	bf00      	nop
 800620a:	e000      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800620c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800620e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10b      	bne.n	800622e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006216:	4b39      	ldr	r3, [pc, #228]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800621a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800621e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006222:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006226:	4a35      	ldr	r2, [pc, #212]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006228:	430b      	orrs	r3, r1
 800622a:	6553      	str	r3, [r2, #84]	@ 0x54
 800622c:	e003      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800622e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006232:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006242:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006246:	2300      	movs	r3, #0
 8006248:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800624c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006250:	460b      	mov	r3, r1
 8006252:	4313      	orrs	r3, r2
 8006254:	d058      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800625a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800625e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006262:	d033      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006264:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006268:	d82c      	bhi.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800626a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800626e:	d02f      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006270:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006274:	d826      	bhi.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006276:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800627a:	d02b      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800627c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006280:	d820      	bhi.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006282:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006286:	d012      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006288:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800628c:	d81a      	bhi.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800628e:	2b00      	cmp	r3, #0
 8006290:	d022      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006292:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006296:	d115      	bne.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800629c:	3308      	adds	r3, #8
 800629e:	2100      	movs	r1, #0
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 fe3b 	bl	8006f1c <RCCEx_PLL2_Config>
 80062a6:	4603      	mov	r3, r0
 80062a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80062ac:	e015      	b.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b2:	3328      	adds	r3, #40	@ 0x28
 80062b4:	2102      	movs	r1, #2
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 fee2 	bl	8007080 <RCCEx_PLL3_Config>
 80062bc:	4603      	mov	r3, r0
 80062be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80062c2:	e00a      	b.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062ca:	e006      	b.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80062cc:	bf00      	nop
 80062ce:	e004      	b.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80062d0:	bf00      	nop
 80062d2:	e002      	b.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80062d4:	bf00      	nop
 80062d6:	e000      	b.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80062d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10e      	bne.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062e2:	4b06      	ldr	r3, [pc, #24]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80062e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80062ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062f2:	4a02      	ldr	r2, [pc, #8]	@ (80062fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80062f4:	430b      	orrs	r3, r1
 80062f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80062f8:	e006      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80062fa:	bf00      	nop
 80062fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006300:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006304:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006314:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006318:	2300      	movs	r3, #0
 800631a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800631e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006322:	460b      	mov	r3, r1
 8006324:	4313      	orrs	r3, r2
 8006326:	d055      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800632c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006330:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006334:	d033      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006336:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800633a:	d82c      	bhi.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800633c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006340:	d02f      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006342:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006346:	d826      	bhi.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006348:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800634c:	d02b      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800634e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006352:	d820      	bhi.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006354:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006358:	d012      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800635a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800635e:	d81a      	bhi.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006360:	2b00      	cmp	r3, #0
 8006362:	d022      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006364:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006368:	d115      	bne.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800636a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800636e:	3308      	adds	r3, #8
 8006370:	2100      	movs	r1, #0
 8006372:	4618      	mov	r0, r3
 8006374:	f000 fdd2 	bl	8006f1c <RCCEx_PLL2_Config>
 8006378:	4603      	mov	r3, r0
 800637a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800637e:	e015      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006384:	3328      	adds	r3, #40	@ 0x28
 8006386:	2102      	movs	r1, #2
 8006388:	4618      	mov	r0, r3
 800638a:	f000 fe79 	bl	8007080 <RCCEx_PLL3_Config>
 800638e:	4603      	mov	r3, r0
 8006390:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006394:	e00a      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800639c:	e006      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800639e:	bf00      	nop
 80063a0:	e004      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80063a2:	bf00      	nop
 80063a4:	e002      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80063a6:	bf00      	nop
 80063a8:	e000      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80063aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10b      	bne.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80063b4:	4ba0      	ldr	r3, [pc, #640]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80063b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80063bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063c4:	4a9c      	ldr	r2, [pc, #624]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80063c6:	430b      	orrs	r3, r1
 80063c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80063ca:	e003      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80063d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063dc:	f002 0308 	and.w	r3, r2, #8
 80063e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80063e4:	2300      	movs	r3, #0
 80063e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80063ea:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80063ee:	460b      	mov	r3, r1
 80063f0:	4313      	orrs	r3, r2
 80063f2:	d01e      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80063f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006400:	d10c      	bne.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006406:	3328      	adds	r3, #40	@ 0x28
 8006408:	2102      	movs	r1, #2
 800640a:	4618      	mov	r0, r3
 800640c:	f000 fe38 	bl	8007080 <RCCEx_PLL3_Config>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800641c:	4b86      	ldr	r3, [pc, #536]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800641e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006420:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006428:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800642c:	4a82      	ldr	r2, [pc, #520]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800642e:	430b      	orrs	r3, r1
 8006430:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643a:	f002 0310 	and.w	r3, r2, #16
 800643e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006442:	2300      	movs	r3, #0
 8006444:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006448:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800644c:	460b      	mov	r3, r1
 800644e:	4313      	orrs	r3, r2
 8006450:	d01e      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800645a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800645e:	d10c      	bne.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006464:	3328      	adds	r3, #40	@ 0x28
 8006466:	2102      	movs	r1, #2
 8006468:	4618      	mov	r0, r3
 800646a:	f000 fe09 	bl	8007080 <RCCEx_PLL3_Config>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800647a:	4b6f      	ldr	r3, [pc, #444]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800647c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800647e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006486:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800648a:	4a6b      	ldr	r2, [pc, #428]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800648c:	430b      	orrs	r3, r1
 800648e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006498:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800649c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800649e:	2300      	movs	r3, #0
 80064a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80064a2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80064a6:	460b      	mov	r3, r1
 80064a8:	4313      	orrs	r3, r2
 80064aa:	d03e      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80064ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80064b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064b8:	d022      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80064ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064be:	d81b      	bhi.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80064c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064c8:	d00b      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80064ca:	e015      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d0:	3308      	adds	r3, #8
 80064d2:	2100      	movs	r1, #0
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 fd21 	bl	8006f1c <RCCEx_PLL2_Config>
 80064da:	4603      	mov	r3, r0
 80064dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80064e0:	e00f      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e6:	3328      	adds	r3, #40	@ 0x28
 80064e8:	2102      	movs	r1, #2
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 fdc8 	bl	8007080 <RCCEx_PLL3_Config>
 80064f0:	4603      	mov	r3, r0
 80064f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80064f6:	e004      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064fe:	e000      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006502:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10b      	bne.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800650a:	4b4b      	ldr	r3, [pc, #300]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800650c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800650e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006516:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800651a:	4a47      	ldr	r2, [pc, #284]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800651c:	430b      	orrs	r3, r1
 800651e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006520:	e003      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006522:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006526:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800652a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800652e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006532:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006536:	673b      	str	r3, [r7, #112]	@ 0x70
 8006538:	2300      	movs	r3, #0
 800653a:	677b      	str	r3, [r7, #116]	@ 0x74
 800653c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006540:	460b      	mov	r3, r1
 8006542:	4313      	orrs	r3, r2
 8006544:	d03b      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800654a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800654e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006552:	d01f      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006554:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006558:	d818      	bhi.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800655a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800655e:	d003      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006560:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006564:	d007      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006566:	e011      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006568:	4b33      	ldr	r3, [pc, #204]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800656a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800656c:	4a32      	ldr	r2, [pc, #200]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800656e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006572:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006574:	e00f      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800657a:	3328      	adds	r3, #40	@ 0x28
 800657c:	2101      	movs	r1, #1
 800657e:	4618      	mov	r0, r3
 8006580:	f000 fd7e 	bl	8007080 <RCCEx_PLL3_Config>
 8006584:	4603      	mov	r3, r0
 8006586:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800658a:	e004      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006592:	e000      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006596:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10b      	bne.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800659e:	4b26      	ldr	r3, [pc, #152]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80065a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80065a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065ae:	4a22      	ldr	r2, [pc, #136]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80065b0:	430b      	orrs	r3, r1
 80065b2:	6553      	str	r3, [r2, #84]	@ 0x54
 80065b4:	e003      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80065be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80065ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065cc:	2300      	movs	r3, #0
 80065ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80065d0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80065d4:	460b      	mov	r3, r1
 80065d6:	4313      	orrs	r3, r2
 80065d8:	d034      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80065da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80065e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065e8:	d007      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80065ea:	e011      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065ec:	4b12      	ldr	r3, [pc, #72]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80065ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f0:	4a11      	ldr	r2, [pc, #68]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80065f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80065f8:	e00e      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065fe:	3308      	adds	r3, #8
 8006600:	2102      	movs	r1, #2
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fc8a 	bl	8006f1c <RCCEx_PLL2_Config>
 8006608:	4603      	mov	r3, r0
 800660a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800660e:	e003      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006616:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006618:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10d      	bne.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006620:	4b05      	ldr	r3, [pc, #20]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006624:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800662c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800662e:	4a02      	ldr	r2, [pc, #8]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006630:	430b      	orrs	r3, r1
 8006632:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006634:	e006      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006636:	bf00      	nop
 8006638:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006640:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006650:	663b      	str	r3, [r7, #96]	@ 0x60
 8006652:	2300      	movs	r3, #0
 8006654:	667b      	str	r3, [r7, #100]	@ 0x64
 8006656:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800665a:	460b      	mov	r3, r1
 800665c:	4313      	orrs	r3, r2
 800665e:	d00c      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006664:	3328      	adds	r3, #40	@ 0x28
 8006666:	2102      	movs	r1, #2
 8006668:	4618      	mov	r0, r3
 800666a:	f000 fd09 	bl	8007080 <RCCEx_PLL3_Config>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800667a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006686:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006688:	2300      	movs	r3, #0
 800668a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800668c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006690:	460b      	mov	r3, r1
 8006692:	4313      	orrs	r3, r2
 8006694:	d036      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800669a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800669c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066a0:	d018      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80066a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066a6:	d811      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80066a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066ac:	d014      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80066ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066b2:	d80b      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d011      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80066b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066bc:	d106      	bne.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066be:	4bb7      	ldr	r3, [pc, #732]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c2:	4ab6      	ldr	r2, [pc, #728]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80066ca:	e008      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066d2:	e004      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80066d4:	bf00      	nop
 80066d6:	e002      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80066d8:	bf00      	nop
 80066da:	e000      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80066dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10a      	bne.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066e6:	4bad      	ldr	r3, [pc, #692]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80066ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066f4:	4aa9      	ldr	r2, [pc, #676]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066f6:	430b      	orrs	r3, r1
 80066f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80066fa:	e003      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006700:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006710:	653b      	str	r3, [r7, #80]	@ 0x50
 8006712:	2300      	movs	r3, #0
 8006714:	657b      	str	r3, [r7, #84]	@ 0x54
 8006716:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800671a:	460b      	mov	r3, r1
 800671c:	4313      	orrs	r3, r2
 800671e:	d009      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006720:	4b9e      	ldr	r3, [pc, #632]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006724:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800672c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800672e:	4a9b      	ldr	r2, [pc, #620]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006730:	430b      	orrs	r3, r1
 8006732:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006740:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006742:	2300      	movs	r3, #0
 8006744:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006746:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800674a:	460b      	mov	r3, r1
 800674c:	4313      	orrs	r3, r2
 800674e:	d009      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006750:	4b92      	ldr	r3, [pc, #584]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006754:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800675c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800675e:	4a8f      	ldr	r2, [pc, #572]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006760:	430b      	orrs	r3, r1
 8006762:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006770:	643b      	str	r3, [r7, #64]	@ 0x40
 8006772:	2300      	movs	r3, #0
 8006774:	647b      	str	r3, [r7, #68]	@ 0x44
 8006776:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800677a:	460b      	mov	r3, r1
 800677c:	4313      	orrs	r3, r2
 800677e:	d00e      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006780:	4b86      	ldr	r3, [pc, #536]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	4a85      	ldr	r2, [pc, #532]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006786:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800678a:	6113      	str	r3, [r2, #16]
 800678c:	4b83      	ldr	r3, [pc, #524]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800678e:	6919      	ldr	r1, [r3, #16]
 8006790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006794:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006798:	4a80      	ldr	r2, [pc, #512]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800679a:	430b      	orrs	r3, r1
 800679c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800679e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80067aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067ac:	2300      	movs	r3, #0
 80067ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067b0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80067b4:	460b      	mov	r3, r1
 80067b6:	4313      	orrs	r3, r2
 80067b8:	d009      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80067ba:	4b78      	ldr	r3, [pc, #480]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80067bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80067c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c8:	4a74      	ldr	r2, [pc, #464]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80067ca:	430b      	orrs	r3, r1
 80067cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80067ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80067da:	633b      	str	r3, [r7, #48]	@ 0x30
 80067dc:	2300      	movs	r3, #0
 80067de:	637b      	str	r3, [r7, #52]	@ 0x34
 80067e0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80067e4:	460b      	mov	r3, r1
 80067e6:	4313      	orrs	r3, r2
 80067e8:	d00a      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80067ea:	4b6c      	ldr	r3, [pc, #432]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80067ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ee:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80067f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067fa:	4a68      	ldr	r2, [pc, #416]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80067fc:	430b      	orrs	r3, r1
 80067fe:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006808:	2100      	movs	r1, #0
 800680a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006812:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006816:	460b      	mov	r3, r1
 8006818:	4313      	orrs	r3, r2
 800681a:	d011      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800681c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006820:	3308      	adds	r3, #8
 8006822:	2100      	movs	r1, #0
 8006824:	4618      	mov	r0, r3
 8006826:	f000 fb79 	bl	8006f1c <RCCEx_PLL2_Config>
 800682a:	4603      	mov	r3, r0
 800682c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006830:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006834:	2b00      	cmp	r3, #0
 8006836:	d003      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006838:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800683c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006848:	2100      	movs	r1, #0
 800684a:	6239      	str	r1, [r7, #32]
 800684c:	f003 0302 	and.w	r3, r3, #2
 8006850:	627b      	str	r3, [r7, #36]	@ 0x24
 8006852:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006856:	460b      	mov	r3, r1
 8006858:	4313      	orrs	r3, r2
 800685a:	d011      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800685c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006860:	3308      	adds	r3, #8
 8006862:	2101      	movs	r1, #1
 8006864:	4618      	mov	r0, r3
 8006866:	f000 fb59 	bl	8006f1c <RCCEx_PLL2_Config>
 800686a:	4603      	mov	r3, r0
 800686c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006870:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006874:	2b00      	cmp	r3, #0
 8006876:	d003      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006878:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800687c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006888:	2100      	movs	r1, #0
 800688a:	61b9      	str	r1, [r7, #24]
 800688c:	f003 0304 	and.w	r3, r3, #4
 8006890:	61fb      	str	r3, [r7, #28]
 8006892:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006896:	460b      	mov	r3, r1
 8006898:	4313      	orrs	r3, r2
 800689a:	d011      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800689c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a0:	3308      	adds	r3, #8
 80068a2:	2102      	movs	r1, #2
 80068a4:	4618      	mov	r0, r3
 80068a6:	f000 fb39 	bl	8006f1c <RCCEx_PLL2_Config>
 80068aa:	4603      	mov	r3, r0
 80068ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80068b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d003      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80068c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c8:	2100      	movs	r1, #0
 80068ca:	6139      	str	r1, [r7, #16]
 80068cc:	f003 0308 	and.w	r3, r3, #8
 80068d0:	617b      	str	r3, [r7, #20]
 80068d2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80068d6:	460b      	mov	r3, r1
 80068d8:	4313      	orrs	r3, r2
 80068da:	d011      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e0:	3328      	adds	r3, #40	@ 0x28
 80068e2:	2100      	movs	r1, #0
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 fbcb 	bl	8007080 <RCCEx_PLL3_Config>
 80068ea:	4603      	mov	r3, r0
 80068ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80068f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d003      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006908:	2100      	movs	r1, #0
 800690a:	60b9      	str	r1, [r7, #8]
 800690c:	f003 0310 	and.w	r3, r3, #16
 8006910:	60fb      	str	r3, [r7, #12]
 8006912:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006916:	460b      	mov	r3, r1
 8006918:	4313      	orrs	r3, r2
 800691a:	d011      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800691c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006920:	3328      	adds	r3, #40	@ 0x28
 8006922:	2101      	movs	r1, #1
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fbab 	bl	8007080 <RCCEx_PLL3_Config>
 800692a:	4603      	mov	r3, r0
 800692c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006930:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006934:	2b00      	cmp	r3, #0
 8006936:	d003      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006938:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800693c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006948:	2100      	movs	r1, #0
 800694a:	6039      	str	r1, [r7, #0]
 800694c:	f003 0320 	and.w	r3, r3, #32
 8006950:	607b      	str	r3, [r7, #4]
 8006952:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006956:	460b      	mov	r3, r1
 8006958:	4313      	orrs	r3, r2
 800695a:	d011      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800695c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006960:	3328      	adds	r3, #40	@ 0x28
 8006962:	2102      	movs	r1, #2
 8006964:	4618      	mov	r0, r3
 8006966:	f000 fb8b 	bl	8007080 <RCCEx_PLL3_Config>
 800696a:	4603      	mov	r3, r0
 800696c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006970:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006978:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800697c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006980:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006984:	2b00      	cmp	r3, #0
 8006986:	d101      	bne.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006988:	2300      	movs	r3, #0
 800698a:	e000      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
}
 800698e:	4618      	mov	r0, r3
 8006990:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006994:	46bd      	mov	sp, r7
 8006996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800699a:	bf00      	nop
 800699c:	58024400 	.word	0x58024400

080069a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80069a4:	f7fe fdbe 	bl	8005524 <HAL_RCC_GetHCLKFreq>
 80069a8:	4602      	mov	r2, r0
 80069aa:	4b06      	ldr	r3, [pc, #24]	@ (80069c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	091b      	lsrs	r3, r3, #4
 80069b0:	f003 0307 	and.w	r3, r3, #7
 80069b4:	4904      	ldr	r1, [pc, #16]	@ (80069c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80069b6:	5ccb      	ldrb	r3, [r1, r3]
 80069b8:	f003 031f 	and.w	r3, r3, #31
 80069bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	58024400 	.word	0x58024400
 80069c8:	0800d91c 	.word	0x0800d91c

080069cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b089      	sub	sp, #36	@ 0x24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069d4:	4ba1      	ldr	r3, [pc, #644]	@ (8006c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d8:	f003 0303 	and.w	r3, r3, #3
 80069dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80069de:	4b9f      	ldr	r3, [pc, #636]	@ (8006c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e2:	0b1b      	lsrs	r3, r3, #12
 80069e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80069ea:	4b9c      	ldr	r3, [pc, #624]	@ (8006c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ee:	091b      	lsrs	r3, r3, #4
 80069f0:	f003 0301 	and.w	r3, r3, #1
 80069f4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80069f6:	4b99      	ldr	r3, [pc, #612]	@ (8006c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069fa:	08db      	lsrs	r3, r3, #3
 80069fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	fb02 f303 	mul.w	r3, r2, r3
 8006a06:	ee07 3a90 	vmov	s15, r3
 8006a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 8111 	beq.w	8006c3c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	f000 8083 	beq.w	8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	f200 80a1 	bhi.w	8006b6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d003      	beq.n	8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d056      	beq.n	8006ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006a36:	e099      	b.n	8006b6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a38:	4b88      	ldr	r3, [pc, #544]	@ (8006c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0320 	and.w	r3, r3, #32
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d02d      	beq.n	8006aa0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a44:	4b85      	ldr	r3, [pc, #532]	@ (8006c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	08db      	lsrs	r3, r3, #3
 8006a4a:	f003 0303 	and.w	r3, r3, #3
 8006a4e:	4a84      	ldr	r2, [pc, #528]	@ (8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006a50:	fa22 f303 	lsr.w	r3, r2, r3
 8006a54:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	ee07 3a90 	vmov	s15, r3
 8006a5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	ee07 3a90 	vmov	s15, r3
 8006a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a6e:	4b7b      	ldr	r3, [pc, #492]	@ (8006c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a76:	ee07 3a90 	vmov	s15, r3
 8006a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a82:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006c64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006a9e:	e087      	b.n	8006bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	ee07 3a90 	vmov	s15, r3
 8006aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aaa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006c68 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ab2:	4b6a      	ldr	r3, [pc, #424]	@ (8006c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aba:	ee07 3a90 	vmov	s15, r3
 8006abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ac6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006c64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ae2:	e065      	b.n	8006bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	ee07 3a90 	vmov	s15, r3
 8006aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006af6:	4b59      	ldr	r3, [pc, #356]	@ (8006c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afe:	ee07 3a90 	vmov	s15, r3
 8006b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b0a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006c64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b26:	e043      	b.n	8006bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	ee07 3a90 	vmov	s15, r3
 8006b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b32:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b3a:	4b48      	ldr	r3, [pc, #288]	@ (8006c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b42:	ee07 3a90 	vmov	s15, r3
 8006b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b4e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006c64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b6a:	e021      	b.n	8006bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	ee07 3a90 	vmov	s15, r3
 8006b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b76:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b7e:	4b37      	ldr	r3, [pc, #220]	@ (8006c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b86:	ee07 3a90 	vmov	s15, r3
 8006b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b92:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006c64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8006c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb4:	0a5b      	lsrs	r3, r3, #9
 8006bb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bba:	ee07 3a90 	vmov	s15, r3
 8006bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bca:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bd6:	ee17 2a90 	vmov	r2, s15
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006bde:	4b1f      	ldr	r3, [pc, #124]	@ (8006c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be2:	0c1b      	lsrs	r3, r3, #16
 8006be4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006be8:	ee07 3a90 	vmov	s15, r3
 8006bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bf8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c04:	ee17 2a90 	vmov	r2, s15
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006c0c:	4b13      	ldr	r3, [pc, #76]	@ (8006c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c10:	0e1b      	lsrs	r3, r3, #24
 8006c12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c16:	ee07 3a90 	vmov	s15, r3
 8006c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c26:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c32:	ee17 2a90 	vmov	r2, s15
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c3a:	e008      	b.n	8006c4e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	609a      	str	r2, [r3, #8]
}
 8006c4e:	bf00      	nop
 8006c50:	3724      	adds	r7, #36	@ 0x24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	58024400 	.word	0x58024400
 8006c60:	03d09000 	.word	0x03d09000
 8006c64:	46000000 	.word	0x46000000
 8006c68:	4c742400 	.word	0x4c742400
 8006c6c:	4a742400 	.word	0x4a742400
 8006c70:	4af42400 	.word	0x4af42400

08006c74 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b089      	sub	sp, #36	@ 0x24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c7c:	4ba1      	ldr	r3, [pc, #644]	@ (8006f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c80:	f003 0303 	and.w	r3, r3, #3
 8006c84:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006c86:	4b9f      	ldr	r3, [pc, #636]	@ (8006f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c8a:	0d1b      	lsrs	r3, r3, #20
 8006c8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c90:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006c92:	4b9c      	ldr	r3, [pc, #624]	@ (8006f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c96:	0a1b      	lsrs	r3, r3, #8
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006c9e:	4b99      	ldr	r3, [pc, #612]	@ (8006f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ca2:	08db      	lsrs	r3, r3, #3
 8006ca4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	fb02 f303 	mul.w	r3, r2, r3
 8006cae:	ee07 3a90 	vmov	s15, r3
 8006cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 8111 	beq.w	8006ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	f000 8083 	beq.w	8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	f200 80a1 	bhi.w	8006e14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d003      	beq.n	8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d056      	beq.n	8006d8c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006cde:	e099      	b.n	8006e14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ce0:	4b88      	ldr	r3, [pc, #544]	@ (8006f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0320 	and.w	r3, r3, #32
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d02d      	beq.n	8006d48 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cec:	4b85      	ldr	r3, [pc, #532]	@ (8006f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	08db      	lsrs	r3, r3, #3
 8006cf2:	f003 0303 	and.w	r3, r3, #3
 8006cf6:	4a84      	ldr	r2, [pc, #528]	@ (8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cfc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	ee07 3a90 	vmov	s15, r3
 8006d04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	ee07 3a90 	vmov	s15, r3
 8006d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d16:	4b7b      	ldr	r3, [pc, #492]	@ (8006f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d1e:	ee07 3a90 	vmov	s15, r3
 8006d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d2a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006f0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d46:	e087      	b.n	8006e58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	ee07 3a90 	vmov	s15, r3
 8006d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d52:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006f10 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d5a:	4b6a      	ldr	r3, [pc, #424]	@ (8006f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d62:	ee07 3a90 	vmov	s15, r3
 8006d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d6e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006f0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d8a:	e065      	b.n	8006e58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	ee07 3a90 	vmov	s15, r3
 8006d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d96:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006f14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d9e:	4b59      	ldr	r3, [pc, #356]	@ (8006f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006da6:	ee07 3a90 	vmov	s15, r3
 8006daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8006db2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006f0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dce:	e043      	b.n	8006e58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	ee07 3a90 	vmov	s15, r3
 8006dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dda:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006f18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006de2:	4b48      	ldr	r3, [pc, #288]	@ (8006f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dea:	ee07 3a90 	vmov	s15, r3
 8006dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006df6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006f0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e12:	e021      	b.n	8006e58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	ee07 3a90 	vmov	s15, r3
 8006e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e1e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006f14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e26:	4b37      	ldr	r3, [pc, #220]	@ (8006f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e2e:	ee07 3a90 	vmov	s15, r3
 8006e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e36:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e3a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006f0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e56:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006e58:	4b2a      	ldr	r3, [pc, #168]	@ (8006f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e5c:	0a5b      	lsrs	r3, r3, #9
 8006e5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e62:	ee07 3a90 	vmov	s15, r3
 8006e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e72:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e7e:	ee17 2a90 	vmov	r2, s15
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006e86:	4b1f      	ldr	r3, [pc, #124]	@ (8006f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8a:	0c1b      	lsrs	r3, r3, #16
 8006e8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e90:	ee07 3a90 	vmov	s15, r3
 8006e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ea0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ea8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eac:	ee17 2a90 	vmov	r2, s15
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006eb4:	4b13      	ldr	r3, [pc, #76]	@ (8006f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb8:	0e1b      	lsrs	r3, r3, #24
 8006eba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006eca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ece:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ed6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eda:	ee17 2a90 	vmov	r2, s15
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006ee2:	e008      	b.n	8006ef6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	609a      	str	r2, [r3, #8]
}
 8006ef6:	bf00      	nop
 8006ef8:	3724      	adds	r7, #36	@ 0x24
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	58024400 	.word	0x58024400
 8006f08:	03d09000 	.word	0x03d09000
 8006f0c:	46000000 	.word	0x46000000
 8006f10:	4c742400 	.word	0x4c742400
 8006f14:	4a742400 	.word	0x4a742400
 8006f18:	4af42400 	.word	0x4af42400

08006f1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f2a:	4b53      	ldr	r3, [pc, #332]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 8006f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f2e:	f003 0303 	and.w	r3, r3, #3
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	d101      	bne.n	8006f3a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e099      	b.n	800706e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006f3a:	4b4f      	ldr	r3, [pc, #316]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a4e      	ldr	r2, [pc, #312]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 8006f40:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f46:	f7fa fe91 	bl	8001c6c <HAL_GetTick>
 8006f4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f4c:	e008      	b.n	8006f60 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f4e:	f7fa fe8d 	bl	8001c6c <HAL_GetTick>
 8006f52:	4602      	mov	r2, r0
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d901      	bls.n	8006f60 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e086      	b.n	800706e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f60:	4b45      	ldr	r3, [pc, #276]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1f0      	bne.n	8006f4e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006f6c:	4b42      	ldr	r3, [pc, #264]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 8006f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f70:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	031b      	lsls	r3, r3, #12
 8006f7a:	493f      	ldr	r1, [pc, #252]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	3b01      	subs	r3, #1
 8006f86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	025b      	lsls	r3, r3, #9
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	431a      	orrs	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	041b      	lsls	r3, r3, #16
 8006f9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	061b      	lsls	r3, r3, #24
 8006fac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006fb0:	4931      	ldr	r1, [pc, #196]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006fb6:	4b30      	ldr	r3, [pc, #192]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 8006fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	492d      	ldr	r1, [pc, #180]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 8006fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fcc:	f023 0220 	bic.w	r2, r3, #32
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	4928      	ldr	r1, [pc, #160]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006fda:	4b27      	ldr	r3, [pc, #156]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 8006fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fde:	4a26      	ldr	r2, [pc, #152]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 8006fe0:	f023 0310 	bic.w	r3, r3, #16
 8006fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006fe6:	4b24      	ldr	r3, [pc, #144]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 8006fe8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fea:	4b24      	ldr	r3, [pc, #144]	@ (800707c <RCCEx_PLL2_Config+0x160>)
 8006fec:	4013      	ands	r3, r2
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	69d2      	ldr	r2, [r2, #28]
 8006ff2:	00d2      	lsls	r2, r2, #3
 8006ff4:	4920      	ldr	r1, [pc, #128]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 8006ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 8007000:	f043 0310 	orr.w	r3, r3, #16
 8007004:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d106      	bne.n	800701a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800700c:	4b1a      	ldr	r3, [pc, #104]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 800700e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007010:	4a19      	ldr	r2, [pc, #100]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 8007012:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007016:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007018:	e00f      	b.n	800703a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d106      	bne.n	800702e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007020:	4b15      	ldr	r3, [pc, #84]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 8007022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007024:	4a14      	ldr	r2, [pc, #80]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 8007026:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800702a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800702c:	e005      	b.n	800703a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800702e:	4b12      	ldr	r3, [pc, #72]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 8007030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007032:	4a11      	ldr	r2, [pc, #68]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 8007034:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007038:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800703a:	4b0f      	ldr	r3, [pc, #60]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a0e      	ldr	r2, [pc, #56]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 8007040:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007044:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007046:	f7fa fe11 	bl	8001c6c <HAL_GetTick>
 800704a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800704c:	e008      	b.n	8007060 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800704e:	f7fa fe0d 	bl	8001c6c <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	2b02      	cmp	r3, #2
 800705a:	d901      	bls.n	8007060 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e006      	b.n	800706e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007060:	4b05      	ldr	r3, [pc, #20]	@ (8007078 <RCCEx_PLL2_Config+0x15c>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d0f0      	beq.n	800704e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800706c:	7bfb      	ldrb	r3, [r7, #15]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	58024400 	.word	0x58024400
 800707c:	ffff0007 	.word	0xffff0007

08007080 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800708e:	4b53      	ldr	r3, [pc, #332]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 8007090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007092:	f003 0303 	and.w	r3, r3, #3
 8007096:	2b03      	cmp	r3, #3
 8007098:	d101      	bne.n	800709e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e099      	b.n	80071d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800709e:	4b4f      	ldr	r3, [pc, #316]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a4e      	ldr	r2, [pc, #312]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 80070a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070aa:	f7fa fddf 	bl	8001c6c <HAL_GetTick>
 80070ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070b0:	e008      	b.n	80070c4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80070b2:	f7fa fddb 	bl	8001c6c <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d901      	bls.n	80070c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e086      	b.n	80071d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070c4:	4b45      	ldr	r3, [pc, #276]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1f0      	bne.n	80070b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80070d0:	4b42      	ldr	r3, [pc, #264]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 80070d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	051b      	lsls	r3, r3, #20
 80070de:	493f      	ldr	r1, [pc, #252]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 80070e0:	4313      	orrs	r3, r2
 80070e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	3b01      	subs	r3, #1
 80070ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	3b01      	subs	r3, #1
 80070f4:	025b      	lsls	r3, r3, #9
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	431a      	orrs	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	3b01      	subs	r3, #1
 8007100:	041b      	lsls	r3, r3, #16
 8007102:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007106:	431a      	orrs	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	3b01      	subs	r3, #1
 800710e:	061b      	lsls	r3, r3, #24
 8007110:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007114:	4931      	ldr	r1, [pc, #196]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 8007116:	4313      	orrs	r3, r2
 8007118:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800711a:	4b30      	ldr	r3, [pc, #192]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 800711c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800711e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	492d      	ldr	r1, [pc, #180]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 8007128:	4313      	orrs	r3, r2
 800712a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800712c:	4b2b      	ldr	r3, [pc, #172]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 800712e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007130:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	4928      	ldr	r1, [pc, #160]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 800713a:	4313      	orrs	r3, r2
 800713c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800713e:	4b27      	ldr	r3, [pc, #156]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 8007140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007142:	4a26      	ldr	r2, [pc, #152]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 8007144:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007148:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800714a:	4b24      	ldr	r3, [pc, #144]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 800714c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800714e:	4b24      	ldr	r3, [pc, #144]	@ (80071e0 <RCCEx_PLL3_Config+0x160>)
 8007150:	4013      	ands	r3, r2
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	69d2      	ldr	r2, [r2, #28]
 8007156:	00d2      	lsls	r2, r2, #3
 8007158:	4920      	ldr	r1, [pc, #128]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 800715a:	4313      	orrs	r3, r2
 800715c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800715e:	4b1f      	ldr	r3, [pc, #124]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 8007160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007162:	4a1e      	ldr	r2, [pc, #120]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 8007164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007168:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d106      	bne.n	800717e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007170:	4b1a      	ldr	r3, [pc, #104]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 8007172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007174:	4a19      	ldr	r2, [pc, #100]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 8007176:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800717a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800717c:	e00f      	b.n	800719e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d106      	bne.n	8007192 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007184:	4b15      	ldr	r3, [pc, #84]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 8007186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007188:	4a14      	ldr	r2, [pc, #80]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 800718a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800718e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007190:	e005      	b.n	800719e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007192:	4b12      	ldr	r3, [pc, #72]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 8007194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007196:	4a11      	ldr	r2, [pc, #68]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 8007198:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800719c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800719e:	4b0f      	ldr	r3, [pc, #60]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a0e      	ldr	r2, [pc, #56]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 80071a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071aa:	f7fa fd5f 	bl	8001c6c <HAL_GetTick>
 80071ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071b0:	e008      	b.n	80071c4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80071b2:	f7fa fd5b 	bl	8001c6c <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d901      	bls.n	80071c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e006      	b.n	80071d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071c4:	4b05      	ldr	r3, [pc, #20]	@ (80071dc <RCCEx_PLL3_Config+0x15c>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d0f0      	beq.n	80071b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	58024400 	.word	0x58024400
 80071e0:	ffff0007 	.word	0xffff0007

080071e4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e10f      	b.n	8007416 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a87      	ldr	r2, [pc, #540]	@ (8007420 <HAL_SPI_Init+0x23c>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d00f      	beq.n	8007226 <HAL_SPI_Init+0x42>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a86      	ldr	r2, [pc, #536]	@ (8007424 <HAL_SPI_Init+0x240>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d00a      	beq.n	8007226 <HAL_SPI_Init+0x42>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a84      	ldr	r2, [pc, #528]	@ (8007428 <HAL_SPI_Init+0x244>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d005      	beq.n	8007226 <HAL_SPI_Init+0x42>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	2b0f      	cmp	r3, #15
 8007220:	d901      	bls.n	8007226 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e0f7      	b.n	8007416 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f001 fa7c 	bl	8008724 <SPI_GetPacketSize>
 800722c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a7b      	ldr	r2, [pc, #492]	@ (8007420 <HAL_SPI_Init+0x23c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d00c      	beq.n	8007252 <HAL_SPI_Init+0x6e>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a79      	ldr	r2, [pc, #484]	@ (8007424 <HAL_SPI_Init+0x240>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d007      	beq.n	8007252 <HAL_SPI_Init+0x6e>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a78      	ldr	r2, [pc, #480]	@ (8007428 <HAL_SPI_Init+0x244>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d002      	beq.n	8007252 <HAL_SPI_Init+0x6e>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b08      	cmp	r3, #8
 8007250:	d811      	bhi.n	8007276 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007256:	4a72      	ldr	r2, [pc, #456]	@ (8007420 <HAL_SPI_Init+0x23c>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d009      	beq.n	8007270 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a70      	ldr	r2, [pc, #448]	@ (8007424 <HAL_SPI_Init+0x240>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d004      	beq.n	8007270 <HAL_SPI_Init+0x8c>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a6f      	ldr	r2, [pc, #444]	@ (8007428 <HAL_SPI_Init+0x244>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d104      	bne.n	800727a <HAL_SPI_Init+0x96>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2b10      	cmp	r3, #16
 8007274:	d901      	bls.n	800727a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e0cd      	b.n	8007416 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d106      	bne.n	8007294 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7f9 ffea 	bl	8001268 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2202      	movs	r2, #2
 8007298:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0201 	bic.w	r2, r2, #1
 80072aa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80072b6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072c0:	d119      	bne.n	80072f6 <HAL_SPI_Init+0x112>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072ca:	d103      	bne.n	80072d4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d008      	beq.n	80072e6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10c      	bne.n	80072f6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80072e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072e4:	d107      	bne.n	80072f6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80072f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00f      	beq.n	8007322 <HAL_SPI_Init+0x13e>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	2b06      	cmp	r3, #6
 8007308:	d90b      	bls.n	8007322 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	430a      	orrs	r2, r1
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	e007      	b.n	8007332 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007330:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	69da      	ldr	r2, [r3, #28]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733a:	431a      	orrs	r2, r3
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	431a      	orrs	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007344:	ea42 0103 	orr.w	r1, r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	68da      	ldr	r2, [r3, #12]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	430a      	orrs	r2, r1
 8007352:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735c:	431a      	orrs	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007362:	431a      	orrs	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	431a      	orrs	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	431a      	orrs	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	431a      	orrs	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	431a      	orrs	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	431a      	orrs	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007386:	431a      	orrs	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	431a      	orrs	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007392:	ea42 0103 	orr.w	r1, r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	430a      	orrs	r2, r1
 80073a0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d113      	bne.n	80073d2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073bc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80073d0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f022 0201 	bic.w	r2, r2, #1
 80073e0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00a      	beq.n	8007404 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	430a      	orrs	r2, r1
 8007402:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	40013000 	.word	0x40013000
 8007424:	40003800 	.word	0x40003800
 8007428:	40003c00 	.word	0x40003c00

0800742c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b088      	sub	sp, #32
 8007430:	af02      	add	r7, sp, #8
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	603b      	str	r3, [r7, #0]
 8007438:	4613      	mov	r3, r2
 800743a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	3320      	adds	r3, #32
 8007442:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007444:	f7fa fc12 	bl	8001c6c <HAL_GetTick>
 8007448:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b01      	cmp	r3, #1
 8007454:	d001      	beq.n	800745a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007456:	2302      	movs	r3, #2
 8007458:	e1d1      	b.n	80077fe <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d002      	beq.n	8007466 <HAL_SPI_Transmit+0x3a>
 8007460:	88fb      	ldrh	r3, [r7, #6]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e1c9      	b.n	80077fe <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007470:	2b01      	cmp	r3, #1
 8007472:	d101      	bne.n	8007478 <HAL_SPI_Transmit+0x4c>
 8007474:	2302      	movs	r3, #2
 8007476:	e1c2      	b.n	80077fe <HAL_SPI_Transmit+0x3d2>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2203      	movs	r2, #3
 8007484:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	88fa      	ldrh	r2, [r7, #6]
 800749a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	88fa      	ldrh	r2, [r7, #6]
 80074a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80074d0:	d108      	bne.n	80074e4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074e0:	601a      	str	r2, [r3, #0]
 80074e2:	e009      	b.n	80074f8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80074f6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	4b96      	ldr	r3, [pc, #600]	@ (8007758 <HAL_SPI_Transmit+0x32c>)
 8007500:	4013      	ands	r3, r2
 8007502:	88f9      	ldrh	r1, [r7, #6]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	6812      	ldr	r2, [r2, #0]
 8007508:	430b      	orrs	r3, r1
 800750a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f042 0201 	orr.w	r2, r2, #1
 800751a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007524:	d107      	bne.n	8007536 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007534:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	2b0f      	cmp	r3, #15
 800753c:	d947      	bls.n	80075ce <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800753e:	e03f      	b.n	80075c0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	f003 0302 	and.w	r3, r3, #2
 800754a:	2b02      	cmp	r3, #2
 800754c:	d114      	bne.n	8007578 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	6812      	ldr	r2, [r2, #0]
 8007558:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800755e:	1d1a      	adds	r2, r3, #4
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800756a:	b29b      	uxth	r3, r3
 800756c:	3b01      	subs	r3, #1
 800756e:	b29a      	uxth	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007576:	e023      	b.n	80075c0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007578:	f7fa fb78 	bl	8001c6c <HAL_GetTick>
 800757c:	4602      	mov	r2, r0
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	683a      	ldr	r2, [r7, #0]
 8007584:	429a      	cmp	r2, r3
 8007586:	d803      	bhi.n	8007590 <HAL_SPI_Transmit+0x164>
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758e:	d102      	bne.n	8007596 <HAL_SPI_Transmit+0x16a>
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d114      	bne.n	80075c0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f000 fff6 	bl	8008588 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	e11e      	b.n	80077fe <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1b9      	bne.n	8007540 <HAL_SPI_Transmit+0x114>
 80075cc:	e0f1      	b.n	80077b2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	2b07      	cmp	r3, #7
 80075d4:	f240 80e6 	bls.w	80077a4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80075d8:	e05d      	b.n	8007696 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	695b      	ldr	r3, [r3, #20]
 80075e0:	f003 0302 	and.w	r3, r3, #2
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d132      	bne.n	800764e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d918      	bls.n	8007626 <HAL_SPI_Transmit+0x1fa>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d014      	beq.n	8007626 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6812      	ldr	r2, [r2, #0]
 8007606:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800760c:	1d1a      	adds	r2, r3, #4
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007618:	b29b      	uxth	r3, r3
 800761a:	3b02      	subs	r3, #2
 800761c:	b29a      	uxth	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007624:	e037      	b.n	8007696 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800762a:	881a      	ldrh	r2, [r3, #0]
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007634:	1c9a      	adds	r2, r3, #2
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007640:	b29b      	uxth	r3, r3
 8007642:	3b01      	subs	r3, #1
 8007644:	b29a      	uxth	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800764c:	e023      	b.n	8007696 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800764e:	f7fa fb0d 	bl	8001c6c <HAL_GetTick>
 8007652:	4602      	mov	r2, r0
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	683a      	ldr	r2, [r7, #0]
 800765a:	429a      	cmp	r2, r3
 800765c:	d803      	bhi.n	8007666 <HAL_SPI_Transmit+0x23a>
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007664:	d102      	bne.n	800766c <HAL_SPI_Transmit+0x240>
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d114      	bne.n	8007696 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f000 ff8b 	bl	8008588 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007678:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e0b3      	b.n	80077fe <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800769c:	b29b      	uxth	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d19b      	bne.n	80075da <HAL_SPI_Transmit+0x1ae>
 80076a2:	e086      	b.n	80077b2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	f003 0302 	and.w	r3, r3, #2
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d154      	bne.n	800775c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d918      	bls.n	80076f0 <HAL_SPI_Transmit+0x2c4>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076c2:	2b40      	cmp	r3, #64	@ 0x40
 80076c4:	d914      	bls.n	80076f0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	6812      	ldr	r2, [r2, #0]
 80076d0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076d6:	1d1a      	adds	r2, r3, #4
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	3b04      	subs	r3, #4
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80076ee:	e059      	b.n	80077a4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d917      	bls.n	800772c <HAL_SPI_Transmit+0x300>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007700:	2b00      	cmp	r3, #0
 8007702:	d013      	beq.n	800772c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007708:	881a      	ldrh	r2, [r3, #0]
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007712:	1c9a      	adds	r2, r3, #2
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800771e:	b29b      	uxth	r3, r3
 8007720:	3b02      	subs	r3, #2
 8007722:	b29a      	uxth	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800772a:	e03b      	b.n	80077a4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3320      	adds	r3, #32
 8007736:	7812      	ldrb	r2, [r2, #0]
 8007738:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800773e:	1c5a      	adds	r2, r3, #1
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800774a:	b29b      	uxth	r3, r3
 800774c:	3b01      	subs	r3, #1
 800774e:	b29a      	uxth	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007756:	e025      	b.n	80077a4 <HAL_SPI_Transmit+0x378>
 8007758:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800775c:	f7fa fa86 	bl	8001c6c <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	429a      	cmp	r2, r3
 800776a:	d803      	bhi.n	8007774 <HAL_SPI_Transmit+0x348>
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007772:	d102      	bne.n	800777a <HAL_SPI_Transmit+0x34e>
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d114      	bne.n	80077a4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f000 ff04 	bl	8008588 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007786:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e02c      	b.n	80077fe <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f47f af79 	bne.w	80076a4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	2200      	movs	r2, #0
 80077ba:	2108      	movs	r1, #8
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f000 ff83 	bl	80086c8 <SPI_WaitOnFlagUntilTimeout>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d007      	beq.n	80077d8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077ce:	f043 0220 	orr.w	r2, r3, #32
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 fed5 	bl	8008588 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e000      	b.n	80077fe <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80077fc:	2300      	movs	r3, #0
  }
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3718      	adds	r7, #24
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop

08007808 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b088      	sub	sp, #32
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	603b      	str	r3, [r7, #0]
 8007814:	4613      	mov	r3, r2
 8007816:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800781c:	095b      	lsrs	r3, r3, #5
 800781e:	b29b      	uxth	r3, r3
 8007820:	3301      	adds	r3, #1
 8007822:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3330      	adds	r3, #48	@ 0x30
 800782a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800782c:	f7fa fa1e 	bl	8001c6c <HAL_GetTick>
 8007830:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b01      	cmp	r3, #1
 800783c:	d001      	beq.n	8007842 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800783e:	2302      	movs	r3, #2
 8007840:	e250      	b.n	8007ce4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d002      	beq.n	800784e <HAL_SPI_Receive+0x46>
 8007848:	88fb      	ldrh	r3, [r7, #6]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e248      	b.n	8007ce4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007858:	2b01      	cmp	r3, #1
 800785a:	d101      	bne.n	8007860 <HAL_SPI_Receive+0x58>
 800785c:	2302      	movs	r3, #2
 800785e:	e241      	b.n	8007ce4 <HAL_SPI_Receive+0x4dc>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2204      	movs	r2, #4
 800786c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	88fa      	ldrh	r2, [r7, #6]
 8007882:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	88fa      	ldrh	r2, [r7, #6]
 800788a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80078b8:	d108      	bne.n	80078cc <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	e009      	b.n	80078e0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80078de:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	4b95      	ldr	r3, [pc, #596]	@ (8007b3c <HAL_SPI_Receive+0x334>)
 80078e8:	4013      	ands	r3, r2
 80078ea:	88f9      	ldrh	r1, [r7, #6]
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	6812      	ldr	r2, [r2, #0]
 80078f0:	430b      	orrs	r3, r1
 80078f2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f042 0201 	orr.w	r2, r2, #1
 8007902:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800790c:	d107      	bne.n	800791e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800791c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	2b0f      	cmp	r3, #15
 8007924:	d96c      	bls.n	8007a00 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007926:	e064      	b.n	80079f2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	2b01      	cmp	r3, #1
 800793c:	d114      	bne.n	8007968 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007946:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007948:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800794e:	1d1a      	adds	r2, r3, #4
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800795a:	b29b      	uxth	r3, r3
 800795c:	3b01      	subs	r3, #1
 800795e:	b29a      	uxth	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007966:	e044      	b.n	80079f2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800796e:	b29b      	uxth	r3, r3
 8007970:	8bfa      	ldrh	r2, [r7, #30]
 8007972:	429a      	cmp	r2, r3
 8007974:	d919      	bls.n	80079aa <HAL_SPI_Receive+0x1a2>
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d014      	beq.n	80079aa <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007988:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800798a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007990:	1d1a      	adds	r2, r3, #4
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800799c:	b29b      	uxth	r3, r3
 800799e:	3b01      	subs	r3, #1
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80079a8:	e023      	b.n	80079f2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079aa:	f7fa f95f 	bl	8001c6c <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d803      	bhi.n	80079c2 <HAL_SPI_Receive+0x1ba>
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c0:	d102      	bne.n	80079c8 <HAL_SPI_Receive+0x1c0>
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d114      	bne.n	80079f2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f000 fddd 	bl	8008588 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e178      	b.n	8007ce4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d194      	bne.n	8007928 <HAL_SPI_Receive+0x120>
 80079fe:	e15e      	b.n	8007cbe <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	2b07      	cmp	r3, #7
 8007a06:	f240 8153 	bls.w	8007cb0 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007a0a:	e08f      	b.n	8007b2c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d114      	bne.n	8007a4c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a26:	69ba      	ldr	r2, [r7, #24]
 8007a28:	8812      	ldrh	r2, [r2, #0]
 8007a2a:	b292      	uxth	r2, r2
 8007a2c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a32:	1c9a      	adds	r2, r3, #2
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	3b01      	subs	r3, #1
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007a4a:	e06f      	b.n	8007b2c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	8bfa      	ldrh	r2, [r7, #30]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d924      	bls.n	8007aa4 <HAL_SPI_Receive+0x29c>
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d01f      	beq.n	8007aa4 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a68:	69ba      	ldr	r2, [r7, #24]
 8007a6a:	8812      	ldrh	r2, [r2, #0]
 8007a6c:	b292      	uxth	r2, r2
 8007a6e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a74:	1c9a      	adds	r2, r3, #2
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a7e:	69ba      	ldr	r2, [r7, #24]
 8007a80:	8812      	ldrh	r2, [r2, #0]
 8007a82:	b292      	uxth	r2, r2
 8007a84:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a8a:	1c9a      	adds	r2, r3, #2
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	3b02      	subs	r3, #2
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007aa2:	e043      	b.n	8007b2c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d119      	bne.n	8007ae4 <HAL_SPI_Receive+0x2dc>
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d014      	beq.n	8007ae4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	8812      	ldrh	r2, [r2, #0]
 8007ac2:	b292      	uxth	r2, r2
 8007ac4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007aca:	1c9a      	adds	r2, r3, #2
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007ae2:	e023      	b.n	8007b2c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ae4:	f7fa f8c2 	bl	8001c6c <HAL_GetTick>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d803      	bhi.n	8007afc <HAL_SPI_Receive+0x2f4>
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afa:	d102      	bne.n	8007b02 <HAL_SPI_Receive+0x2fa>
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d114      	bne.n	8007b2c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f000 fd40 	bl	8008588 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b0e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e0db      	b.n	8007ce4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f47f af69 	bne.w	8007a0c <HAL_SPI_Receive+0x204>
 8007b3a:	e0c0      	b.n	8007cbe <HAL_SPI_Receive+0x4b6>
 8007b3c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d117      	bne.n	8007b86 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b62:	7812      	ldrb	r2, [r2, #0]
 8007b64:	b2d2      	uxtb	r2, r2
 8007b66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b6c:	1c5a      	adds	r2, r3, #1
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b84:	e094      	b.n	8007cb0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	8bfa      	ldrh	r2, [r7, #30]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d946      	bls.n	8007c22 <HAL_SPI_Receive+0x41a>
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d041      	beq.n	8007c22 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007baa:	7812      	ldrb	r2, [r2, #0]
 8007bac:	b2d2      	uxtb	r2, r2
 8007bae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bb4:	1c5a      	adds	r2, r3, #1
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bc6:	7812      	ldrb	r2, [r2, #0]
 8007bc8:	b2d2      	uxtb	r2, r2
 8007bca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bd0:	1c5a      	adds	r2, r3, #1
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007be2:	7812      	ldrb	r2, [r2, #0]
 8007be4:	b2d2      	uxtb	r2, r2
 8007be6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bec:	1c5a      	adds	r2, r3, #1
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bfe:	7812      	ldrb	r2, [r2, #0]
 8007c00:	b2d2      	uxtb	r2, r2
 8007c02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c08:	1c5a      	adds	r2, r3, #1
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	3b04      	subs	r3, #4
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007c20:	e046      	b.n	8007cb0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d81c      	bhi.n	8007c68 <HAL_SPI_Receive+0x460>
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d017      	beq.n	8007c68 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c44:	7812      	ldrb	r2, [r2, #0]
 8007c46:	b2d2      	uxtb	r2, r2
 8007c48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c4e:	1c5a      	adds	r2, r3, #1
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007c66:	e023      	b.n	8007cb0 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c68:	f7fa f800 	bl	8001c6c <HAL_GetTick>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d803      	bhi.n	8007c80 <HAL_SPI_Receive+0x478>
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7e:	d102      	bne.n	8007c86 <HAL_SPI_Receive+0x47e>
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d114      	bne.n	8007cb0 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f000 fc7e 	bl	8008588 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e019      	b.n	8007ce4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f47f af41 	bne.w	8007b40 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f000 fc62 	bl	8008588 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e000      	b.n	8007ce4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8007ce2:	2300      	movs	r3, #0
  }
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3720      	adds	r7, #32
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <HAL_SPI_TransmitReceive_IT>:
  * @param  Size   : amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b087      	sub	sp, #28
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
 8007cf8:	807b      	strh	r3, [r7, #2]
  uint32_t tmp_TxXferCount;
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3320      	adds	r3, #32
 8007d00:	613b      	str	r3, [r7, #16]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d001      	beq.n	8007d12 <HAL_SPI_TransmitReceive_IT+0x26>
  {
    return HAL_BUSY;
 8007d0e:	2302      	movs	r3, #2
 8007d10:	e0e9      	b.n	8007ee6 <HAL_SPI_TransmitReceive_IT+0x1fa>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d005      	beq.n	8007d24 <HAL_SPI_TransmitReceive_IT+0x38>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d002      	beq.n	8007d24 <HAL_SPI_TransmitReceive_IT+0x38>
 8007d1e:	887b      	ldrh	r3, [r7, #2]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d101      	bne.n	8007d28 <HAL_SPI_TransmitReceive_IT+0x3c>
  {
    return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e0de      	b.n	8007ee6 <HAL_SPI_TransmitReceive_IT+0x1fa>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d101      	bne.n	8007d36 <HAL_SPI_TransmitReceive_IT+0x4a>
 8007d32:	2302      	movs	r3, #2
 8007d34:	e0d7      	b.n	8007ee6 <HAL_SPI_TransmitReceive_IT+0x1fa>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2205      	movs	r2, #5
 8007d42:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	887a      	ldrh	r2, [r7, #2]
 8007d58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	887a      	ldrh	r2, [r7, #2]
 8007d60:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	887a      	ldrh	r2, [r7, #2]
 8007d6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	887a      	ldrh	r2, [r7, #2]
 8007d76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  tmp_TxXferCount   = hspi->TxXferCount;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	617b      	str	r3, [r7, #20]
  hspi->Reload.pTxBuffPtr  = NULL;
  hspi->Reload.TxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	2b0f      	cmp	r3, #15
 8007d8a:	d906      	bls.n	8007d9a <HAL_SPI_TransmitReceive_IT+0xae>
  {
    hspi->TxISR     = SPI_TxISR_32BIT;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4a59      	ldr	r2, [pc, #356]	@ (8007ef4 <HAL_SPI_TransmitReceive_IT+0x208>)
 8007d90:	675a      	str	r2, [r3, #116]	@ 0x74
    hspi->RxISR     = SPI_RxISR_32BIT;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	4a58      	ldr	r2, [pc, #352]	@ (8007ef8 <HAL_SPI_TransmitReceive_IT+0x20c>)
 8007d96:	671a      	str	r2, [r3, #112]	@ 0x70
 8007d98:	e010      	b.n	8007dbc <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	2b07      	cmp	r3, #7
 8007da0:	d906      	bls.n	8007db0 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_RxISR_16BIT;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	4a55      	ldr	r2, [pc, #340]	@ (8007efc <HAL_SPI_TransmitReceive_IT+0x210>)
 8007da6:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->TxISR     = SPI_TxISR_16BIT;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	4a55      	ldr	r2, [pc, #340]	@ (8007f00 <HAL_SPI_TransmitReceive_IT+0x214>)
 8007dac:	675a      	str	r2, [r3, #116]	@ 0x74
 8007dae:	e005      	b.n	8007dbc <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_RxISR_8BIT;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	4a54      	ldr	r2, [pc, #336]	@ (8007f04 <HAL_SPI_TransmitReceive_IT+0x218>)
 8007db4:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->TxISR     = SPI_TxISR_8BIT;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	4a53      	ldr	r2, [pc, #332]	@ (8007f08 <HAL_SPI_TransmitReceive_IT+0x21c>)
 8007dba:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68da      	ldr	r2, [r3, #12]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8007dca:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685a      	ldr	r2, [r3, #4]
 8007dd2:	4b4e      	ldr	r3, [pc, #312]	@ (8007f0c <HAL_SPI_TransmitReceive_IT+0x220>)
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	8879      	ldrh	r1, [r7, #2]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	6812      	ldr	r2, [r2, #0]
 8007ddc:	430b      	orrs	r3, r1
 8007dde:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f042 0201 	orr.w	r2, r2, #1
 8007dee:	601a      	str	r2, [r3, #0]

  /* Fill in the TxFIFO */
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 8007df0:	e054      	b.n	8007e9c <HAL_SPI_TransmitReceive_IT+0x1b0>
  {
    /* Transmit data in 32 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	2b0f      	cmp	r3, #15
 8007df8:	d919      	bls.n	8007e2e <HAL_SPI_TransmitReceive_IT+0x142>
    {
      *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	6812      	ldr	r2, [r2, #0]
 8007e04:	621a      	str	r2, [r3, #32]
      hspi->pTxBuffPtr += sizeof(uint32_t);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e0a:	1d1a      	adds	r2, r3, #4
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	617b      	str	r3, [r7, #20]
 8007e2c:	e036      	b.n	8007e9c <HAL_SPI_TransmitReceive_IT+0x1b0>
    }
    /* Transmit data in 16 Bit mode */
    else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	2b07      	cmp	r3, #7
 8007e34:	d918      	bls.n	8007e68 <HAL_SPI_TransmitReceive_IT+0x17c>
    {
#if defined (__GNUC__)
      *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e3a:	881a      	ldrh	r2, [r3, #0]
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	801a      	strh	r2, [r3, #0]
#else
      *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e44:	1c9a      	adds	r2, r3, #2
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	3b01      	subs	r3, #1
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	617b      	str	r3, [r7, #20]
 8007e66:	e019      	b.n	8007e9c <HAL_SPI_TransmitReceive_IT+0x1b0>
    }
    /* Transmit data in 8 Bit mode */
    else
    {
      *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	3320      	adds	r3, #32
 8007e72:	7812      	ldrb	r2, [r2, #0]
 8007e74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e7a:	1c5a      	adds	r2, r3, #1
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	f003 0302 	and.w	r3, r3, #2
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d102      	bne.n	8007eb0 <HAL_SPI_TransmitReceive_IT+0x1c4>
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1a0      	bne.n	8007df2 <HAL_SPI_TransmitReceive_IT+0x106>
    }
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, DXP, UDR, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR |
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6919      	ldr	r1, [r3, #16]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	f240 736c 	movw	r3, #1900	@ 0x76c
 8007ec6:	430b      	orrs	r3, r1
 8007ec8:	6113      	str	r3, [r2, #16]
                             SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ed2:	d107      	bne.n	8007ee4 <HAL_SPI_TransmitReceive_IT+0x1f8>
  {
    /* Start Master transfer */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ee2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	371c      	adds	r7, #28
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	0800852f 	.word	0x0800852f
 8007ef8:	0800841f 	.word	0x0800841f
 8007efc:	080083bf 	.word	0x080083bf
 8007f00:	080084d1 	.word	0x080084d1
 8007f04:	08008361 	.word	0x08008361
 8007f08:	08008477 	.word	0x08008477
 8007f0c:	ffff0000 	.word	0xffff0000

08007f10 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b08a      	sub	sp, #40	@ 0x28
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	695b      	ldr	r3, [r3, #20]
 8007f26:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007f28:	6a3a      	ldr	r2, [r7, #32]
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007f42:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3330      	adds	r3, #48	@ 0x30
 8007f4a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d010      	beq.n	8007f78 <HAL_SPI_IRQHandler+0x68>
 8007f56:	6a3b      	ldr	r3, [r7, #32]
 8007f58:	f003 0308 	and.w	r3, r3, #8
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00b      	beq.n	8007f78 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	699a      	ldr	r2, [r3, #24]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f6e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f9c3 	bl	80082fc <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8007f76:	e192      	b.n	800829e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d113      	bne.n	8007faa <HAL_SPI_IRQHandler+0x9a>
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	f003 0320 	and.w	r3, r3, #32
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d10e      	bne.n	8007faa <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d009      	beq.n	8007faa <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	4798      	blx	r3
    handled = 1UL;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10f      	bne.n	8007fd4 <HAL_SPI_IRQHandler+0xc4>
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00a      	beq.n	8007fd4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d105      	bne.n	8007fd4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	4798      	blx	r3
    handled = 1UL;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	f003 0320 	and.w	r3, r3, #32
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10f      	bne.n	8007ffe <HAL_SPI_IRQHandler+0xee>
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	f003 0302 	and.w	r3, r3, #2
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00a      	beq.n	8007ffe <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d105      	bne.n	8007ffe <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	4798      	blx	r3
    handled = 1UL;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008000:	2b00      	cmp	r3, #0
 8008002:	f040 8147 	bne.w	8008294 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	f003 0308 	and.w	r3, r3, #8
 800800c:	2b00      	cmp	r3, #0
 800800e:	f000 808b 	beq.w	8008128 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	699a      	ldr	r2, [r3, #24]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f042 0208 	orr.w	r2, r2, #8
 8008020:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	699a      	ldr	r2, [r3, #24]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f042 0210 	orr.w	r2, r2, #16
 8008030:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	699a      	ldr	r2, [r3, #24]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008040:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	691a      	ldr	r2, [r3, #16]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f022 0208 	bic.w	r2, r2, #8
 8008050:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d13d      	bne.n	80080dc <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008060:	e036      	b.n	80080d0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	2b0f      	cmp	r3, #15
 8008068:	d90b      	bls.n	8008082 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008072:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008074:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800807a:	1d1a      	adds	r2, r3, #4
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	665a      	str	r2, [r3, #100]	@ 0x64
 8008080:	e01d      	b.n	80080be <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	2b07      	cmp	r3, #7
 8008088:	d90b      	bls.n	80080a2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	8812      	ldrh	r2, [r2, #0]
 8008092:	b292      	uxth	r2, r2
 8008094:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800809a:	1c9a      	adds	r2, r3, #2
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	665a      	str	r2, [r3, #100]	@ 0x64
 80080a0:	e00d      	b.n	80080be <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080ae:	7812      	ldrb	r2, [r2, #0]
 80080b0:	b2d2      	uxtb	r2, r2
 80080b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080b8:	1c5a      	adds	r2, r3, #1
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	3b01      	subs	r3, #1
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1c2      	bne.n	8008062 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 fa53 	bl	8008588 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d003      	beq.n	80080fc <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f8f7 	bl	80082e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80080fa:	e0d0      	b.n	800829e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80080fc:	7cfb      	ldrb	r3, [r7, #19]
 80080fe:	2b05      	cmp	r3, #5
 8008100:	d103      	bne.n	800810a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f8e6 	bl	80082d4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008108:	e0c6      	b.n	8008298 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800810a:	7cfb      	ldrb	r3, [r7, #19]
 800810c:	2b04      	cmp	r3, #4
 800810e:	d103      	bne.n	8008118 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f8d5 	bl	80082c0 <HAL_SPI_RxCpltCallback>
    return;
 8008116:	e0bf      	b.n	8008298 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008118:	7cfb      	ldrb	r3, [r7, #19]
 800811a:	2b03      	cmp	r3, #3
 800811c:	f040 80bc 	bne.w	8008298 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f8c3 	bl	80082ac <HAL_SPI_TxCpltCallback>
    return;
 8008126:	e0b7      	b.n	8008298 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 80b5 	beq.w	800829e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00f      	beq.n	800815e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008144:	f043 0204 	orr.w	r2, r3, #4
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	699a      	ldr	r2, [r3, #24]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800815c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00f      	beq.n	8008188 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800816e:	f043 0201 	orr.w	r2, r3, #1
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	699a      	ldr	r2, [r3, #24]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008186:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00f      	beq.n	80081b2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008198:	f043 0208 	orr.w	r2, r3, #8
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	699a      	ldr	r2, [r3, #24]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80081b0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	f003 0320 	and.w	r3, r3, #32
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00f      	beq.n	80081dc <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	699a      	ldr	r2, [r3, #24]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f042 0220 	orr.w	r2, r2, #32
 80081da:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d05a      	beq.n	800829c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f022 0201 	bic.w	r2, r2, #1
 80081f4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6919      	ldr	r1, [r3, #16]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	4b28      	ldr	r3, [pc, #160]	@ (80082a4 <HAL_SPI_IRQHandler+0x394>)
 8008202:	400b      	ands	r3, r1
 8008204:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800820c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008210:	d138      	bne.n	8008284 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	689a      	ldr	r2, [r3, #8]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008220:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008226:	2b00      	cmp	r3, #0
 8008228:	d013      	beq.n	8008252 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800822e:	4a1e      	ldr	r2, [pc, #120]	@ (80082a8 <HAL_SPI_IRQHandler+0x398>)
 8008230:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008236:	4618      	mov	r0, r3
 8008238:	f7fa fc9e 	bl	8002b78 <HAL_DMA_Abort_IT>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d007      	beq.n	8008252 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008248:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008256:	2b00      	cmp	r3, #0
 8008258:	d020      	beq.n	800829c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800825e:	4a12      	ldr	r2, [pc, #72]	@ (80082a8 <HAL_SPI_IRQHandler+0x398>)
 8008260:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008266:	4618      	mov	r0, r3
 8008268:	f7fa fc86 	bl	8002b78 <HAL_DMA_Abort_IT>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d014      	beq.n	800829c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008278:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008282:	e00b      	b.n	800829c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f82b 	bl	80082e8 <HAL_SPI_ErrorCallback>
    return;
 8008292:	e003      	b.n	800829c <HAL_SPI_IRQHandler+0x38c>
    return;
 8008294:	bf00      	nop
 8008296:	e002      	b.n	800829e <HAL_SPI_IRQHandler+0x38e>
    return;
 8008298:	bf00      	nop
 800829a:	e000      	b.n	800829e <HAL_SPI_IRQHandler+0x38e>
    return;
 800829c:	bf00      	nop
  }
}
 800829e:	3728      	adds	r7, #40	@ 0x28
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	fffffc94 	.word	0xfffffc94
 80082a8:	0800832d 	.word	0x0800832d

080082ac <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80082b4:	bf00      	nop
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800831e:	b2db      	uxtb	r3, r3
}
 8008320:	4618      	mov	r0, r3
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008338:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f7ff ffc8 	bl	80082e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008358:	bf00      	nop
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008374:	7812      	ldrb	r2, [r2, #0]
 8008376:	b2d2      	uxtb	r2, r2
 8008378:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800838a:	b29b      	uxth	r3, r3
 800838c:	3b01      	subs	r3, #1
 800838e:	b29a      	uxth	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800839c:	b29b      	uxth	r3, r3
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d107      	bne.n	80083b2 <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	691a      	ldr	r2, [r3, #16]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f022 0201 	bic.w	r2, r2, #1
 80083b0:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80083b2:	bf00      	nop
 80083b4:	370c      	adds	r7, #12
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 80083be:	b480      	push	{r7}
 80083c0:	b085      	sub	sp, #20
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	3330      	adds	r3, #48	@ 0x30
 80083cc:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	8812      	ldrh	r2, [r2, #0]
 80083d6:	b292      	uxth	r2, r2
 80083d8:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083de:	1c9a      	adds	r2, r3, #2
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	3b01      	subs	r3, #1
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d107      	bne.n	8008412 <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	691a      	ldr	r2, [r3, #16]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f022 0201 	bic.w	r2, r2, #1
 8008410:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8008412:	bf00      	nop
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 800841e:	b480      	push	{r7}
 8008420:	b083      	sub	sp, #12
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800842e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008430:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008436:	1d1a      	adds	r2, r3, #4
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008442:	b29b      	uxth	r3, r3
 8008444:	3b01      	subs	r3, #1
 8008446:	b29a      	uxth	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008454:	b29b      	uxth	r3, r3
 8008456:	2b00      	cmp	r3, #0
 8008458:	d107      	bne.n	800846a <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	691a      	ldr	r2, [r3, #16]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f022 0201 	bic.w	r2, r2, #1
 8008468:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800846a:	bf00      	nop
 800846c:	370c      	adds	r7, #12
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr

08008476 <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8008476:	b480      	push	{r7}
 8008478:	b083      	sub	sp, #12
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((const uint8_t *)hspi->pTxBuffPtr);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	3320      	adds	r3, #32
 8008488:	7812      	ldrb	r2, [r2, #0]
 800848a:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008490:	1c5a      	adds	r2, r3, #1
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800849c:	b29b      	uxth	r3, r3
 800849e:	3b01      	subs	r3, #1
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d107      	bne.n	80084c4 <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	691a      	ldr	r2, [r3, #16]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f022 0202 	bic.w	r2, r2, #2
 80084c2:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	3320      	adds	r3, #32
 80084de:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084e4:	881a      	ldrh	r2, [r3, #0]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084ee:	1c9a      	adds	r2, r3, #2
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	3b01      	subs	r3, #1
 80084fe:	b29a      	uxth	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800850c:	b29b      	uxth	r3, r3
 800850e:	2b00      	cmp	r3, #0
 8008510:	d107      	bne.n	8008522 <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	691a      	ldr	r2, [r3, #16]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f022 0202 	bic.w	r2, r2, #2
 8008520:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8008522:	bf00      	nop
 8008524:	3714      	adds	r7, #20
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 800852e:	b480      	push	{r7}
 8008530:	b083      	sub	sp, #12
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	6812      	ldr	r2, [r2, #0]
 8008540:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008546:	1d1a      	adds	r2, r3, #4
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008552:	b29b      	uxth	r3, r3
 8008554:	3b01      	subs	r3, #1
 8008556:	b29a      	uxth	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008564:	b29b      	uxth	r3, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d107      	bne.n	800857a <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	691a      	ldr	r2, [r3, #16]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f022 0202 	bic.w	r2, r2, #2
 8008578:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800857a:	bf00      	nop
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
	...

08008588 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	699a      	ldr	r2, [r3, #24]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f042 0208 	orr.w	r2, r2, #8
 80085a6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	699a      	ldr	r2, [r3, #24]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f042 0210 	orr.w	r2, r2, #16
 80085b6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f022 0201 	bic.w	r2, r2, #1
 80085c6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6919      	ldr	r1, [r3, #16]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	4b3c      	ldr	r3, [pc, #240]	@ (80086c4 <SPI_CloseTransfer+0x13c>)
 80085d4:	400b      	ands	r3, r1
 80085d6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	689a      	ldr	r2, [r3, #8]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80085e6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	2b04      	cmp	r3, #4
 80085f2:	d014      	beq.n	800861e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f003 0320 	and.w	r3, r3, #32
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00f      	beq.n	800861e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008604:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	699a      	ldr	r2, [r3, #24]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f042 0220 	orr.w	r2, r2, #32
 800861c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b03      	cmp	r3, #3
 8008628:	d014      	beq.n	8008654 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00f      	beq.n	8008654 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800863a:	f043 0204 	orr.w	r2, r3, #4
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	699a      	ldr	r2, [r3, #24]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008652:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00f      	beq.n	800867e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008664:	f043 0201 	orr.w	r2, r3, #1
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	699a      	ldr	r2, [r3, #24]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800867c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00f      	beq.n	80086a8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800868e:	f043 0208 	orr.w	r2, r3, #8
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	699a      	ldr	r2, [r3, #24]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80086a6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80086b8:	bf00      	nop
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr
 80086c4:	fffffc90 	.word	0xfffffc90

080086c8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	603b      	str	r3, [r7, #0]
 80086d4:	4613      	mov	r3, r2
 80086d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80086d8:	e010      	b.n	80086fc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086da:	f7f9 fac7 	bl	8001c6c <HAL_GetTick>
 80086de:	4602      	mov	r2, r0
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d803      	bhi.n	80086f2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f0:	d102      	bne.n	80086f8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d101      	bne.n	80086fc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80086f8:	2303      	movs	r3, #3
 80086fa:	e00f      	b.n	800871c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	695a      	ldr	r2, [r3, #20]
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	4013      	ands	r3, r2
 8008706:	68ba      	ldr	r2, [r7, #8]
 8008708:	429a      	cmp	r2, r3
 800870a:	bf0c      	ite	eq
 800870c:	2301      	moveq	r3, #1
 800870e:	2300      	movne	r3, #0
 8008710:	b2db      	uxtb	r3, r3
 8008712:	461a      	mov	r2, r3
 8008714:	79fb      	ldrb	r3, [r7, #7]
 8008716:	429a      	cmp	r2, r3
 8008718:	d0df      	beq.n	80086da <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008730:	095b      	lsrs	r3, r3, #5
 8008732:	3301      	adds	r3, #1
 8008734:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	3301      	adds	r3, #1
 800873c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	3307      	adds	r3, #7
 8008742:	08db      	lsrs	r3, r3, #3
 8008744:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	fb02 f303 	mul.w	r3, r2, r3
}
 800874e:	4618      	mov	r0, r3
 8008750:	3714      	adds	r7, #20
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b082      	sub	sp, #8
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d101      	bne.n	800876c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	e049      	b.n	8008800 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008772:	b2db      	uxtb	r3, r3
 8008774:	2b00      	cmp	r3, #0
 8008776:	d106      	bne.n	8008786 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f841 	bl	8008808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2202      	movs	r2, #2
 800878a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	3304      	adds	r3, #4
 8008796:	4619      	mov	r1, r3
 8008798:	4610      	mov	r0, r2
 800879a:	f000 f9f5 	bl	8008b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2201      	movs	r2, #1
 80087f2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2201      	movs	r2, #1
 80087fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008810:	bf00      	nop
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b01      	cmp	r3, #1
 800882e:	d001      	beq.n	8008834 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	e05e      	b.n	80088f2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2202      	movs	r2, #2
 8008838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	68da      	ldr	r2, [r3, #12]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f042 0201 	orr.w	r2, r2, #1
 800884a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a2b      	ldr	r2, [pc, #172]	@ (8008900 <HAL_TIM_Base_Start_IT+0xe4>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d02c      	beq.n	80088b0 <HAL_TIM_Base_Start_IT+0x94>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800885e:	d027      	beq.n	80088b0 <HAL_TIM_Base_Start_IT+0x94>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a27      	ldr	r2, [pc, #156]	@ (8008904 <HAL_TIM_Base_Start_IT+0xe8>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d022      	beq.n	80088b0 <HAL_TIM_Base_Start_IT+0x94>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a26      	ldr	r2, [pc, #152]	@ (8008908 <HAL_TIM_Base_Start_IT+0xec>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d01d      	beq.n	80088b0 <HAL_TIM_Base_Start_IT+0x94>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a24      	ldr	r2, [pc, #144]	@ (800890c <HAL_TIM_Base_Start_IT+0xf0>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d018      	beq.n	80088b0 <HAL_TIM_Base_Start_IT+0x94>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a23      	ldr	r2, [pc, #140]	@ (8008910 <HAL_TIM_Base_Start_IT+0xf4>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d013      	beq.n	80088b0 <HAL_TIM_Base_Start_IT+0x94>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a21      	ldr	r2, [pc, #132]	@ (8008914 <HAL_TIM_Base_Start_IT+0xf8>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d00e      	beq.n	80088b0 <HAL_TIM_Base_Start_IT+0x94>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a20      	ldr	r2, [pc, #128]	@ (8008918 <HAL_TIM_Base_Start_IT+0xfc>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d009      	beq.n	80088b0 <HAL_TIM_Base_Start_IT+0x94>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a1e      	ldr	r2, [pc, #120]	@ (800891c <HAL_TIM_Base_Start_IT+0x100>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d004      	beq.n	80088b0 <HAL_TIM_Base_Start_IT+0x94>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a1d      	ldr	r2, [pc, #116]	@ (8008920 <HAL_TIM_Base_Start_IT+0x104>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d115      	bne.n	80088dc <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	689a      	ldr	r2, [r3, #8]
 80088b6:	4b1b      	ldr	r3, [pc, #108]	@ (8008924 <HAL_TIM_Base_Start_IT+0x108>)
 80088b8:	4013      	ands	r3, r2
 80088ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2b06      	cmp	r3, #6
 80088c0:	d015      	beq.n	80088ee <HAL_TIM_Base_Start_IT+0xd2>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088c8:	d011      	beq.n	80088ee <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f042 0201 	orr.w	r2, r2, #1
 80088d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088da:	e008      	b.n	80088ee <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f042 0201 	orr.w	r2, r2, #1
 80088ea:	601a      	str	r2, [r3, #0]
 80088ec:	e000      	b.n	80088f0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3714      	adds	r7, #20
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	40010000 	.word	0x40010000
 8008904:	40000400 	.word	0x40000400
 8008908:	40000800 	.word	0x40000800
 800890c:	40000c00 	.word	0x40000c00
 8008910:	40010400 	.word	0x40010400
 8008914:	40001800 	.word	0x40001800
 8008918:	40014000 	.word	0x40014000
 800891c:	4000e000 	.word	0x4000e000
 8008920:	4000e400 	.word	0x4000e400
 8008924:	00010007 	.word	0x00010007

08008928 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	f003 0302 	and.w	r3, r3, #2
 8008946:	2b00      	cmp	r3, #0
 8008948:	d020      	beq.n	800898c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f003 0302 	and.w	r3, r3, #2
 8008950:	2b00      	cmp	r3, #0
 8008952:	d01b      	beq.n	800898c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f06f 0202 	mvn.w	r2, #2
 800895c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	f003 0303 	and.w	r3, r3, #3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d003      	beq.n	800897a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f8e9 	bl	8008b4a <HAL_TIM_IC_CaptureCallback>
 8008978:	e005      	b.n	8008986 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f8db 	bl	8008b36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f8ec 	bl	8008b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	f003 0304 	and.w	r3, r3, #4
 8008992:	2b00      	cmp	r3, #0
 8008994:	d020      	beq.n	80089d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f003 0304 	and.w	r3, r3, #4
 800899c:	2b00      	cmp	r3, #0
 800899e:	d01b      	beq.n	80089d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f06f 0204 	mvn.w	r2, #4
 80089a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2202      	movs	r2, #2
 80089ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d003      	beq.n	80089c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 f8c3 	bl	8008b4a <HAL_TIM_IC_CaptureCallback>
 80089c4:	e005      	b.n	80089d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 f8b5 	bl	8008b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 f8c6 	bl	8008b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	f003 0308 	and.w	r3, r3, #8
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d020      	beq.n	8008a24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f003 0308 	and.w	r3, r3, #8
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d01b      	beq.n	8008a24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f06f 0208 	mvn.w	r2, #8
 80089f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2204      	movs	r2, #4
 80089fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	69db      	ldr	r3, [r3, #28]
 8008a02:	f003 0303 	and.w	r3, r3, #3
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d003      	beq.n	8008a12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f89d 	bl	8008b4a <HAL_TIM_IC_CaptureCallback>
 8008a10:	e005      	b.n	8008a1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f88f 	bl	8008b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 f8a0 	bl	8008b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	f003 0310 	and.w	r3, r3, #16
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d020      	beq.n	8008a70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f003 0310 	and.w	r3, r3, #16
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d01b      	beq.n	8008a70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f06f 0210 	mvn.w	r2, #16
 8008a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2208      	movs	r2, #8
 8008a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	69db      	ldr	r3, [r3, #28]
 8008a4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d003      	beq.n	8008a5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f877 	bl	8008b4a <HAL_TIM_IC_CaptureCallback>
 8008a5c:	e005      	b.n	8008a6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f869 	bl	8008b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f87a 	bl	8008b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00c      	beq.n	8008a94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d007      	beq.n	8008a94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f06f 0201 	mvn.w	r2, #1
 8008a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7f8 f834 	bl	8000afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d104      	bne.n	8008aa8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00c      	beq.n	8008ac2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d007      	beq.n	8008ac2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f91f 	bl	8008d00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d00c      	beq.n	8008ae6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d007      	beq.n	8008ae6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f917 	bl	8008d14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00c      	beq.n	8008b0a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d007      	beq.n	8008b0a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f834 	bl	8008b72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	f003 0320 	and.w	r3, r3, #32
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00c      	beq.n	8008b2e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f003 0320 	and.w	r3, r3, #32
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d007      	beq.n	8008b2e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f06f 0220 	mvn.w	r2, #32
 8008b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f8df 	bl	8008cec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b2e:	bf00      	nop
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b36:	b480      	push	{r7}
 8008b38:	b083      	sub	sp, #12
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b3e:	bf00      	nop
 8008b40:	370c      	adds	r7, #12
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b083      	sub	sp, #12
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b52:	bf00      	nop
 8008b54:	370c      	adds	r7, #12
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b083      	sub	sp, #12
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b66:	bf00      	nop
 8008b68:	370c      	adds	r7, #12
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b72:	b480      	push	{r7}
 8008b74:	b083      	sub	sp, #12
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b7a:	bf00      	nop
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
	...

08008b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a4a      	ldr	r2, [pc, #296]	@ (8008cc4 <TIM_Base_SetConfig+0x13c>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d013      	beq.n	8008bc8 <TIM_Base_SetConfig+0x40>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ba6:	d00f      	beq.n	8008bc8 <TIM_Base_SetConfig+0x40>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4a47      	ldr	r2, [pc, #284]	@ (8008cc8 <TIM_Base_SetConfig+0x140>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d00b      	beq.n	8008bc8 <TIM_Base_SetConfig+0x40>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a46      	ldr	r2, [pc, #280]	@ (8008ccc <TIM_Base_SetConfig+0x144>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d007      	beq.n	8008bc8 <TIM_Base_SetConfig+0x40>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a45      	ldr	r2, [pc, #276]	@ (8008cd0 <TIM_Base_SetConfig+0x148>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d003      	beq.n	8008bc8 <TIM_Base_SetConfig+0x40>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4a44      	ldr	r2, [pc, #272]	@ (8008cd4 <TIM_Base_SetConfig+0x14c>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d108      	bne.n	8008bda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a39      	ldr	r2, [pc, #228]	@ (8008cc4 <TIM_Base_SetConfig+0x13c>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d027      	beq.n	8008c32 <TIM_Base_SetConfig+0xaa>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008be8:	d023      	beq.n	8008c32 <TIM_Base_SetConfig+0xaa>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a36      	ldr	r2, [pc, #216]	@ (8008cc8 <TIM_Base_SetConfig+0x140>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d01f      	beq.n	8008c32 <TIM_Base_SetConfig+0xaa>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a35      	ldr	r2, [pc, #212]	@ (8008ccc <TIM_Base_SetConfig+0x144>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d01b      	beq.n	8008c32 <TIM_Base_SetConfig+0xaa>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a34      	ldr	r2, [pc, #208]	@ (8008cd0 <TIM_Base_SetConfig+0x148>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d017      	beq.n	8008c32 <TIM_Base_SetConfig+0xaa>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a33      	ldr	r2, [pc, #204]	@ (8008cd4 <TIM_Base_SetConfig+0x14c>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d013      	beq.n	8008c32 <TIM_Base_SetConfig+0xaa>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a32      	ldr	r2, [pc, #200]	@ (8008cd8 <TIM_Base_SetConfig+0x150>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d00f      	beq.n	8008c32 <TIM_Base_SetConfig+0xaa>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a31      	ldr	r2, [pc, #196]	@ (8008cdc <TIM_Base_SetConfig+0x154>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d00b      	beq.n	8008c32 <TIM_Base_SetConfig+0xaa>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a30      	ldr	r2, [pc, #192]	@ (8008ce0 <TIM_Base_SetConfig+0x158>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d007      	beq.n	8008c32 <TIM_Base_SetConfig+0xaa>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a2f      	ldr	r2, [pc, #188]	@ (8008ce4 <TIM_Base_SetConfig+0x15c>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d003      	beq.n	8008c32 <TIM_Base_SetConfig+0xaa>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a2e      	ldr	r2, [pc, #184]	@ (8008ce8 <TIM_Base_SetConfig+0x160>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d108      	bne.n	8008c44 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	689a      	ldr	r2, [r3, #8]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a16      	ldr	r2, [pc, #88]	@ (8008cc4 <TIM_Base_SetConfig+0x13c>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d00f      	beq.n	8008c90 <TIM_Base_SetConfig+0x108>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a18      	ldr	r2, [pc, #96]	@ (8008cd4 <TIM_Base_SetConfig+0x14c>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d00b      	beq.n	8008c90 <TIM_Base_SetConfig+0x108>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a17      	ldr	r2, [pc, #92]	@ (8008cd8 <TIM_Base_SetConfig+0x150>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d007      	beq.n	8008c90 <TIM_Base_SetConfig+0x108>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a16      	ldr	r2, [pc, #88]	@ (8008cdc <TIM_Base_SetConfig+0x154>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d003      	beq.n	8008c90 <TIM_Base_SetConfig+0x108>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a15      	ldr	r2, [pc, #84]	@ (8008ce0 <TIM_Base_SetConfig+0x158>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d103      	bne.n	8008c98 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	691a      	ldr	r2, [r3, #16]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d105      	bne.n	8008cb6 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	f023 0201 	bic.w	r2, r3, #1
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	611a      	str	r2, [r3, #16]
  }
}
 8008cb6:	bf00      	nop
 8008cb8:	3714      	adds	r7, #20
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	40010000 	.word	0x40010000
 8008cc8:	40000400 	.word	0x40000400
 8008ccc:	40000800 	.word	0x40000800
 8008cd0:	40000c00 	.word	0x40000c00
 8008cd4:	40010400 	.word	0x40010400
 8008cd8:	40014000 	.word	0x40014000
 8008cdc:	40014400 	.word	0x40014400
 8008ce0:	40014800 	.word	0x40014800
 8008ce4:	4000e000 	.word	0x4000e000
 8008ce8:	4000e400 	.word	0x4000e400

08008cec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008cf4:	bf00      	nop
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d101      	bne.n	8008d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	e042      	b.n	8008dc0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d106      	bne.n	8008d52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f7f8 fea1 	bl	8001a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2224      	movs	r2, #36	@ 0x24
 8008d56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f022 0201 	bic.w	r2, r2, #1
 8008d68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d002      	beq.n	8008d78 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f001 fafc 	bl	800a370 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fc8d 	bl	8009698 <UART_SetConfig>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d101      	bne.n	8008d88 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	e01b      	b.n	8008dc0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	685a      	ldr	r2, [r3, #4]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	689a      	ldr	r2, [r3, #8]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008da6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f042 0201 	orr.w	r2, r2, #1
 8008db6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f001 fb7b 	bl	800a4b4 <UART_CheckIdleState>
 8008dbe:	4603      	mov	r3, r0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b08a      	sub	sp, #40	@ 0x28
 8008dcc:	af02      	add	r7, sp, #8
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	603b      	str	r3, [r7, #0]
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dde:	2b20      	cmp	r3, #32
 8008de0:	d17b      	bne.n	8008eda <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d002      	beq.n	8008dee <HAL_UART_Transmit+0x26>
 8008de8:	88fb      	ldrh	r3, [r7, #6]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e074      	b.n	8008edc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2221      	movs	r2, #33	@ 0x21
 8008dfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e02:	f7f8 ff33 	bl	8001c6c <HAL_GetTick>
 8008e06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	88fa      	ldrh	r2, [r7, #6]
 8008e0c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	88fa      	ldrh	r2, [r7, #6]
 8008e14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e20:	d108      	bne.n	8008e34 <HAL_UART_Transmit+0x6c>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d104      	bne.n	8008e34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	61bb      	str	r3, [r7, #24]
 8008e32:	e003      	b.n	8008e3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008e3c:	e030      	b.n	8008ea0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	2200      	movs	r2, #0
 8008e46:	2180      	movs	r1, #128	@ 0x80
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f001 fbdd 	bl	800a608 <UART_WaitOnFlagUntilTimeout>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d005      	beq.n	8008e60 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2220      	movs	r2, #32
 8008e58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e03d      	b.n	8008edc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10b      	bne.n	8008e7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	881b      	ldrh	r3, [r3, #0]
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e74:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	3302      	adds	r3, #2
 8008e7a:	61bb      	str	r3, [r7, #24]
 8008e7c:	e007      	b.n	8008e8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	781a      	ldrb	r2, [r3, #0]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	3b01      	subs	r3, #1
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1c8      	bne.n	8008e3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	9300      	str	r3, [sp, #0]
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	2140      	movs	r1, #64	@ 0x40
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f001 fba6 	bl	800a608 <UART_WaitOnFlagUntilTimeout>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d005      	beq.n	8008ece <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2220      	movs	r2, #32
 8008ec6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	e006      	b.n	8008edc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2220      	movs	r2, #32
 8008ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	e000      	b.n	8008edc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008eda:	2302      	movs	r3, #2
  }
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3720      	adds	r7, #32
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b0ba      	sub	sp, #232	@ 0xe8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	69db      	ldr	r3, [r3, #28]
 8008ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008f0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008f0e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008f12:	4013      	ands	r3, r2
 8008f14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008f18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d11b      	bne.n	8008f58 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f24:	f003 0320 	and.w	r3, r3, #32
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d015      	beq.n	8008f58 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f30:	f003 0320 	and.w	r3, r3, #32
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d105      	bne.n	8008f44 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d009      	beq.n	8008f58 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f000 8377 	beq.w	800963c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	4798      	blx	r3
      }
      return;
 8008f56:	e371      	b.n	800963c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008f58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 8123 	beq.w	80091a8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008f62:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008f66:	4b8d      	ldr	r3, [pc, #564]	@ (800919c <HAL_UART_IRQHandler+0x2b8>)
 8008f68:	4013      	ands	r3, r2
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d106      	bne.n	8008f7c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008f6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008f72:	4b8b      	ldr	r3, [pc, #556]	@ (80091a0 <HAL_UART_IRQHandler+0x2bc>)
 8008f74:	4013      	ands	r3, r2
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	f000 8116 	beq.w	80091a8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f80:	f003 0301 	and.w	r3, r3, #1
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d011      	beq.n	8008fac <HAL_UART_IRQHandler+0xc8>
 8008f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00b      	beq.n	8008fac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fa2:	f043 0201 	orr.w	r2, r3, #1
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fb0:	f003 0302 	and.w	r3, r3, #2
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d011      	beq.n	8008fdc <HAL_UART_IRQHandler+0xf8>
 8008fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00b      	beq.n	8008fdc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2202      	movs	r2, #2
 8008fca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fd2:	f043 0204 	orr.w	r2, r3, #4
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fe0:	f003 0304 	and.w	r3, r3, #4
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d011      	beq.n	800900c <HAL_UART_IRQHandler+0x128>
 8008fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fec:	f003 0301 	and.w	r3, r3, #1
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00b      	beq.n	800900c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2204      	movs	r2, #4
 8008ffa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009002:	f043 0202 	orr.w	r2, r3, #2
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800900c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009010:	f003 0308 	and.w	r3, r3, #8
 8009014:	2b00      	cmp	r3, #0
 8009016:	d017      	beq.n	8009048 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800901c:	f003 0320 	and.w	r3, r3, #32
 8009020:	2b00      	cmp	r3, #0
 8009022:	d105      	bne.n	8009030 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009024:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009028:	4b5c      	ldr	r3, [pc, #368]	@ (800919c <HAL_UART_IRQHandler+0x2b8>)
 800902a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00b      	beq.n	8009048 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2208      	movs	r2, #8
 8009036:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800903e:	f043 0208 	orr.w	r2, r3, #8
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800904c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009050:	2b00      	cmp	r3, #0
 8009052:	d012      	beq.n	800907a <HAL_UART_IRQHandler+0x196>
 8009054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009058:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00c      	beq.n	800907a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009068:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009070:	f043 0220 	orr.w	r2, r3, #32
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009080:	2b00      	cmp	r3, #0
 8009082:	f000 82dd 	beq.w	8009640 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800908a:	f003 0320 	and.w	r3, r3, #32
 800908e:	2b00      	cmp	r3, #0
 8009090:	d013      	beq.n	80090ba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009096:	f003 0320 	and.w	r3, r3, #32
 800909a:	2b00      	cmp	r3, #0
 800909c:	d105      	bne.n	80090aa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800909e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d007      	beq.n	80090ba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d003      	beq.n	80090ba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090ce:	2b40      	cmp	r3, #64	@ 0x40
 80090d0:	d005      	beq.n	80090de <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80090d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80090d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d054      	beq.n	8009188 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f001 fb00 	bl	800a6e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090ee:	2b40      	cmp	r3, #64	@ 0x40
 80090f0:	d146      	bne.n	8009180 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	3308      	adds	r3, #8
 80090f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009100:	e853 3f00 	ldrex	r3, [r3]
 8009104:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009108:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800910c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009110:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	3308      	adds	r3, #8
 800911a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800911e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009122:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009126:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800912a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800912e:	e841 2300 	strex	r3, r2, [r1]
 8009132:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1d9      	bne.n	80090f2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009144:	2b00      	cmp	r3, #0
 8009146:	d017      	beq.n	8009178 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800914e:	4a15      	ldr	r2, [pc, #84]	@ (80091a4 <HAL_UART_IRQHandler+0x2c0>)
 8009150:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009158:	4618      	mov	r0, r3
 800915a:	f7f9 fd0d 	bl	8002b78 <HAL_DMA_Abort_IT>
 800915e:	4603      	mov	r3, r0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d019      	beq.n	8009198 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800916a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009172:	4610      	mov	r0, r2
 8009174:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009176:	e00f      	b.n	8009198 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fa77 	bl	800966c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800917e:	e00b      	b.n	8009198 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 fa73 	bl	800966c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009186:	e007      	b.n	8009198 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fa6f 	bl	800966c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009196:	e253      	b.n	8009640 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009198:	bf00      	nop
    return;
 800919a:	e251      	b.n	8009640 <HAL_UART_IRQHandler+0x75c>
 800919c:	10000001 	.word	0x10000001
 80091a0:	04000120 	.word	0x04000120
 80091a4:	0800a7b1 	.word	0x0800a7b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	f040 81e7 	bne.w	8009580 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80091b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091b6:	f003 0310 	and.w	r3, r3, #16
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f000 81e0 	beq.w	8009580 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80091c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091c4:	f003 0310 	and.w	r3, r3, #16
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f000 81d9 	beq.w	8009580 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2210      	movs	r2, #16
 80091d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091e0:	2b40      	cmp	r3, #64	@ 0x40
 80091e2:	f040 8151 	bne.w	8009488 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a96      	ldr	r2, [pc, #600]	@ (8009448 <HAL_UART_IRQHandler+0x564>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d068      	beq.n	80092c6 <HAL_UART_IRQHandler+0x3e2>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a93      	ldr	r2, [pc, #588]	@ (800944c <HAL_UART_IRQHandler+0x568>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d061      	beq.n	80092c6 <HAL_UART_IRQHandler+0x3e2>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a91      	ldr	r2, [pc, #580]	@ (8009450 <HAL_UART_IRQHandler+0x56c>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d05a      	beq.n	80092c6 <HAL_UART_IRQHandler+0x3e2>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a8e      	ldr	r2, [pc, #568]	@ (8009454 <HAL_UART_IRQHandler+0x570>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d053      	beq.n	80092c6 <HAL_UART_IRQHandler+0x3e2>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a8c      	ldr	r2, [pc, #560]	@ (8009458 <HAL_UART_IRQHandler+0x574>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d04c      	beq.n	80092c6 <HAL_UART_IRQHandler+0x3e2>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a89      	ldr	r2, [pc, #548]	@ (800945c <HAL_UART_IRQHandler+0x578>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d045      	beq.n	80092c6 <HAL_UART_IRQHandler+0x3e2>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a87      	ldr	r2, [pc, #540]	@ (8009460 <HAL_UART_IRQHandler+0x57c>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d03e      	beq.n	80092c6 <HAL_UART_IRQHandler+0x3e2>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a84      	ldr	r2, [pc, #528]	@ (8009464 <HAL_UART_IRQHandler+0x580>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d037      	beq.n	80092c6 <HAL_UART_IRQHandler+0x3e2>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a82      	ldr	r2, [pc, #520]	@ (8009468 <HAL_UART_IRQHandler+0x584>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d030      	beq.n	80092c6 <HAL_UART_IRQHandler+0x3e2>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a7f      	ldr	r2, [pc, #508]	@ (800946c <HAL_UART_IRQHandler+0x588>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d029      	beq.n	80092c6 <HAL_UART_IRQHandler+0x3e2>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a7d      	ldr	r2, [pc, #500]	@ (8009470 <HAL_UART_IRQHandler+0x58c>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d022      	beq.n	80092c6 <HAL_UART_IRQHandler+0x3e2>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a7a      	ldr	r2, [pc, #488]	@ (8009474 <HAL_UART_IRQHandler+0x590>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d01b      	beq.n	80092c6 <HAL_UART_IRQHandler+0x3e2>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a78      	ldr	r2, [pc, #480]	@ (8009478 <HAL_UART_IRQHandler+0x594>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d014      	beq.n	80092c6 <HAL_UART_IRQHandler+0x3e2>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a75      	ldr	r2, [pc, #468]	@ (800947c <HAL_UART_IRQHandler+0x598>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d00d      	beq.n	80092c6 <HAL_UART_IRQHandler+0x3e2>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a73      	ldr	r2, [pc, #460]	@ (8009480 <HAL_UART_IRQHandler+0x59c>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d006      	beq.n	80092c6 <HAL_UART_IRQHandler+0x3e2>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a70      	ldr	r2, [pc, #448]	@ (8009484 <HAL_UART_IRQHandler+0x5a0>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d106      	bne.n	80092d4 <HAL_UART_IRQHandler+0x3f0>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	e005      	b.n	80092e0 <HAL_UART_IRQHandler+0x3fc>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	b29b      	uxth	r3, r3
 80092e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80092e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f000 81ab 	beq.w	8009644 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80092f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80092f8:	429a      	cmp	r2, r3
 80092fa:	f080 81a3 	bcs.w	8009644 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009304:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800930e:	69db      	ldr	r3, [r3, #28]
 8009310:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009314:	f000 8087 	beq.w	8009426 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009320:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009324:	e853 3f00 	ldrex	r3, [r3]
 8009328:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800932c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009334:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	461a      	mov	r2, r3
 800933e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009342:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009346:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800934e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009352:	e841 2300 	strex	r3, r2, [r1]
 8009356:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800935a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1da      	bne.n	8009318 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	3308      	adds	r3, #8
 8009368:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800936c:	e853 3f00 	ldrex	r3, [r3]
 8009370:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009372:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009374:	f023 0301 	bic.w	r3, r3, #1
 8009378:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3308      	adds	r3, #8
 8009382:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009386:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800938a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800938e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009392:	e841 2300 	strex	r3, r2, [r1]
 8009396:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009398:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800939a:	2b00      	cmp	r3, #0
 800939c:	d1e1      	bne.n	8009362 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	3308      	adds	r3, #8
 80093a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80093a8:	e853 3f00 	ldrex	r3, [r3]
 80093ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80093ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	3308      	adds	r3, #8
 80093be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80093c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80093c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80093c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80093ca:	e841 2300 	strex	r3, r2, [r1]
 80093ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80093d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1e3      	bne.n	800939e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2220      	movs	r2, #32
 80093da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093ec:	e853 3f00 	ldrex	r3, [r3]
 80093f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80093f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093f4:	f023 0310 	bic.w	r3, r3, #16
 80093f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	461a      	mov	r2, r3
 8009402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009406:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009408:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800940c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800940e:	e841 2300 	strex	r3, r2, [r1]
 8009412:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009414:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1e4      	bne.n	80093e4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009420:	4618      	mov	r0, r3
 8009422:	f7f9 f88b 	bl	800253c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2202      	movs	r2, #2
 800942a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009438:	b29b      	uxth	r3, r3
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	b29b      	uxth	r3, r3
 800943e:	4619      	mov	r1, r3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 f91d 	bl	8009680 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009446:	e0fd      	b.n	8009644 <HAL_UART_IRQHandler+0x760>
 8009448:	40020010 	.word	0x40020010
 800944c:	40020028 	.word	0x40020028
 8009450:	40020040 	.word	0x40020040
 8009454:	40020058 	.word	0x40020058
 8009458:	40020070 	.word	0x40020070
 800945c:	40020088 	.word	0x40020088
 8009460:	400200a0 	.word	0x400200a0
 8009464:	400200b8 	.word	0x400200b8
 8009468:	40020410 	.word	0x40020410
 800946c:	40020428 	.word	0x40020428
 8009470:	40020440 	.word	0x40020440
 8009474:	40020458 	.word	0x40020458
 8009478:	40020470 	.word	0x40020470
 800947c:	40020488 	.word	0x40020488
 8009480:	400204a0 	.word	0x400204a0
 8009484:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009494:	b29b      	uxth	r3, r3
 8009496:	1ad3      	subs	r3, r2, r3
 8009498:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f000 80cf 	beq.w	8009648 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80094aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f000 80ca 	beq.w	8009648 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094bc:	e853 3f00 	ldrex	r3, [r3]
 80094c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	461a      	mov	r2, r3
 80094d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80094d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80094d8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094de:	e841 2300 	strex	r3, r2, [r1]
 80094e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1e4      	bne.n	80094b4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	3308      	adds	r3, #8
 80094f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f4:	e853 3f00 	ldrex	r3, [r3]
 80094f8:	623b      	str	r3, [r7, #32]
   return(result);
 80094fa:	6a3a      	ldr	r2, [r7, #32]
 80094fc:	4b55      	ldr	r3, [pc, #340]	@ (8009654 <HAL_UART_IRQHandler+0x770>)
 80094fe:	4013      	ands	r3, r2
 8009500:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	3308      	adds	r3, #8
 800950a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800950e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009510:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009512:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009516:	e841 2300 	strex	r3, r2, [r1]
 800951a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800951c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1e3      	bne.n	80094ea <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2220      	movs	r2, #32
 8009526:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	e853 3f00 	ldrex	r3, [r3]
 8009542:	60fb      	str	r3, [r7, #12]
   return(result);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f023 0310 	bic.w	r3, r3, #16
 800954a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009558:	61fb      	str	r3, [r7, #28]
 800955a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955c:	69b9      	ldr	r1, [r7, #24]
 800955e:	69fa      	ldr	r2, [r7, #28]
 8009560:	e841 2300 	strex	r3, r2, [r1]
 8009564:	617b      	str	r3, [r7, #20]
   return(result);
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1e4      	bne.n	8009536 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2202      	movs	r2, #2
 8009570:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009572:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009576:	4619      	mov	r1, r3
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 f881 	bl	8009680 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800957e:	e063      	b.n	8009648 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009584:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00e      	beq.n	80095aa <HAL_UART_IRQHandler+0x6c6>
 800958c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009590:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009594:	2b00      	cmp	r3, #0
 8009596:	d008      	beq.n	80095aa <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80095a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f001 f945 	bl	800a832 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095a8:	e051      	b.n	800964e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80095aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d014      	beq.n	80095e0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80095b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d105      	bne.n	80095ce <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80095c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d008      	beq.n	80095e0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d03a      	beq.n	800964c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	4798      	blx	r3
    }
    return;
 80095de:	e035      	b.n	800964c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80095e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d009      	beq.n	8009600 <HAL_UART_IRQHandler+0x71c>
 80095ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d003      	beq.n	8009600 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f001 f8ef 	bl	800a7dc <UART_EndTransmit_IT>
    return;
 80095fe:	e026      	b.n	800964e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009604:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009608:	2b00      	cmp	r3, #0
 800960a:	d009      	beq.n	8009620 <HAL_UART_IRQHandler+0x73c>
 800960c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009610:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d003      	beq.n	8009620 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f001 f91e 	bl	800a85a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800961e:	e016      	b.n	800964e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009624:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d010      	beq.n	800964e <HAL_UART_IRQHandler+0x76a>
 800962c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009630:	2b00      	cmp	r3, #0
 8009632:	da0c      	bge.n	800964e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f001 f906 	bl	800a846 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800963a:	e008      	b.n	800964e <HAL_UART_IRQHandler+0x76a>
      return;
 800963c:	bf00      	nop
 800963e:	e006      	b.n	800964e <HAL_UART_IRQHandler+0x76a>
    return;
 8009640:	bf00      	nop
 8009642:	e004      	b.n	800964e <HAL_UART_IRQHandler+0x76a>
      return;
 8009644:	bf00      	nop
 8009646:	e002      	b.n	800964e <HAL_UART_IRQHandler+0x76a>
      return;
 8009648:	bf00      	nop
 800964a:	e000      	b.n	800964e <HAL_UART_IRQHandler+0x76a>
    return;
 800964c:	bf00      	nop
  }
}
 800964e:	37e8      	adds	r7, #232	@ 0xe8
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	effffffe 	.word	0xeffffffe

08009658 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	460b      	mov	r3, r1
 800968a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800968c:	bf00      	nop
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800969c:	b092      	sub	sp, #72	@ 0x48
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80096a2:	2300      	movs	r3, #0
 80096a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	689a      	ldr	r2, [r3, #8]
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	691b      	ldr	r3, [r3, #16]
 80096b0:	431a      	orrs	r2, r3
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	695b      	ldr	r3, [r3, #20]
 80096b6:	431a      	orrs	r2, r3
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	69db      	ldr	r3, [r3, #28]
 80096bc:	4313      	orrs	r3, r2
 80096be:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	4bbe      	ldr	r3, [pc, #760]	@ (80099c0 <UART_SetConfig+0x328>)
 80096c8:	4013      	ands	r3, r2
 80096ca:	697a      	ldr	r2, [r7, #20]
 80096cc:	6812      	ldr	r2, [r2, #0]
 80096ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80096d0:	430b      	orrs	r3, r1
 80096d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	68da      	ldr	r2, [r3, #12]
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	430a      	orrs	r2, r1
 80096e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	699b      	ldr	r3, [r3, #24]
 80096ee:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4ab3      	ldr	r2, [pc, #716]	@ (80099c4 <UART_SetConfig+0x32c>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d004      	beq.n	8009704 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	6a1b      	ldr	r3, [r3, #32]
 80096fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009700:	4313      	orrs	r3, r2
 8009702:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	689a      	ldr	r2, [r3, #8]
 800970a:	4baf      	ldr	r3, [pc, #700]	@ (80099c8 <UART_SetConfig+0x330>)
 800970c:	4013      	ands	r3, r2
 800970e:	697a      	ldr	r2, [r7, #20]
 8009710:	6812      	ldr	r2, [r2, #0]
 8009712:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009714:	430b      	orrs	r3, r1
 8009716:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800971e:	f023 010f 	bic.w	r1, r3, #15
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	430a      	orrs	r2, r1
 800972c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4aa6      	ldr	r2, [pc, #664]	@ (80099cc <UART_SetConfig+0x334>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d177      	bne.n	8009828 <UART_SetConfig+0x190>
 8009738:	4ba5      	ldr	r3, [pc, #660]	@ (80099d0 <UART_SetConfig+0x338>)
 800973a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800973c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009740:	2b28      	cmp	r3, #40	@ 0x28
 8009742:	d86d      	bhi.n	8009820 <UART_SetConfig+0x188>
 8009744:	a201      	add	r2, pc, #4	@ (adr r2, 800974c <UART_SetConfig+0xb4>)
 8009746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974a:	bf00      	nop
 800974c:	080097f1 	.word	0x080097f1
 8009750:	08009821 	.word	0x08009821
 8009754:	08009821 	.word	0x08009821
 8009758:	08009821 	.word	0x08009821
 800975c:	08009821 	.word	0x08009821
 8009760:	08009821 	.word	0x08009821
 8009764:	08009821 	.word	0x08009821
 8009768:	08009821 	.word	0x08009821
 800976c:	080097f9 	.word	0x080097f9
 8009770:	08009821 	.word	0x08009821
 8009774:	08009821 	.word	0x08009821
 8009778:	08009821 	.word	0x08009821
 800977c:	08009821 	.word	0x08009821
 8009780:	08009821 	.word	0x08009821
 8009784:	08009821 	.word	0x08009821
 8009788:	08009821 	.word	0x08009821
 800978c:	08009801 	.word	0x08009801
 8009790:	08009821 	.word	0x08009821
 8009794:	08009821 	.word	0x08009821
 8009798:	08009821 	.word	0x08009821
 800979c:	08009821 	.word	0x08009821
 80097a0:	08009821 	.word	0x08009821
 80097a4:	08009821 	.word	0x08009821
 80097a8:	08009821 	.word	0x08009821
 80097ac:	08009809 	.word	0x08009809
 80097b0:	08009821 	.word	0x08009821
 80097b4:	08009821 	.word	0x08009821
 80097b8:	08009821 	.word	0x08009821
 80097bc:	08009821 	.word	0x08009821
 80097c0:	08009821 	.word	0x08009821
 80097c4:	08009821 	.word	0x08009821
 80097c8:	08009821 	.word	0x08009821
 80097cc:	08009811 	.word	0x08009811
 80097d0:	08009821 	.word	0x08009821
 80097d4:	08009821 	.word	0x08009821
 80097d8:	08009821 	.word	0x08009821
 80097dc:	08009821 	.word	0x08009821
 80097e0:	08009821 	.word	0x08009821
 80097e4:	08009821 	.word	0x08009821
 80097e8:	08009821 	.word	0x08009821
 80097ec:	08009819 	.word	0x08009819
 80097f0:	2301      	movs	r3, #1
 80097f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097f6:	e326      	b.n	8009e46 <UART_SetConfig+0x7ae>
 80097f8:	2304      	movs	r3, #4
 80097fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097fe:	e322      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009800:	2308      	movs	r3, #8
 8009802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009806:	e31e      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009808:	2310      	movs	r3, #16
 800980a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800980e:	e31a      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009810:	2320      	movs	r3, #32
 8009812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009816:	e316      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009818:	2340      	movs	r3, #64	@ 0x40
 800981a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800981e:	e312      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009820:	2380      	movs	r3, #128	@ 0x80
 8009822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009826:	e30e      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a69      	ldr	r2, [pc, #420]	@ (80099d4 <UART_SetConfig+0x33c>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d130      	bne.n	8009894 <UART_SetConfig+0x1fc>
 8009832:	4b67      	ldr	r3, [pc, #412]	@ (80099d0 <UART_SetConfig+0x338>)
 8009834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009836:	f003 0307 	and.w	r3, r3, #7
 800983a:	2b05      	cmp	r3, #5
 800983c:	d826      	bhi.n	800988c <UART_SetConfig+0x1f4>
 800983e:	a201      	add	r2, pc, #4	@ (adr r2, 8009844 <UART_SetConfig+0x1ac>)
 8009840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009844:	0800985d 	.word	0x0800985d
 8009848:	08009865 	.word	0x08009865
 800984c:	0800986d 	.word	0x0800986d
 8009850:	08009875 	.word	0x08009875
 8009854:	0800987d 	.word	0x0800987d
 8009858:	08009885 	.word	0x08009885
 800985c:	2300      	movs	r3, #0
 800985e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009862:	e2f0      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009864:	2304      	movs	r3, #4
 8009866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800986a:	e2ec      	b.n	8009e46 <UART_SetConfig+0x7ae>
 800986c:	2308      	movs	r3, #8
 800986e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009872:	e2e8      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009874:	2310      	movs	r3, #16
 8009876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800987a:	e2e4      	b.n	8009e46 <UART_SetConfig+0x7ae>
 800987c:	2320      	movs	r3, #32
 800987e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009882:	e2e0      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009884:	2340      	movs	r3, #64	@ 0x40
 8009886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800988a:	e2dc      	b.n	8009e46 <UART_SetConfig+0x7ae>
 800988c:	2380      	movs	r3, #128	@ 0x80
 800988e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009892:	e2d8      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a4f      	ldr	r2, [pc, #316]	@ (80099d8 <UART_SetConfig+0x340>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d130      	bne.n	8009900 <UART_SetConfig+0x268>
 800989e:	4b4c      	ldr	r3, [pc, #304]	@ (80099d0 <UART_SetConfig+0x338>)
 80098a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098a2:	f003 0307 	and.w	r3, r3, #7
 80098a6:	2b05      	cmp	r3, #5
 80098a8:	d826      	bhi.n	80098f8 <UART_SetConfig+0x260>
 80098aa:	a201      	add	r2, pc, #4	@ (adr r2, 80098b0 <UART_SetConfig+0x218>)
 80098ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b0:	080098c9 	.word	0x080098c9
 80098b4:	080098d1 	.word	0x080098d1
 80098b8:	080098d9 	.word	0x080098d9
 80098bc:	080098e1 	.word	0x080098e1
 80098c0:	080098e9 	.word	0x080098e9
 80098c4:	080098f1 	.word	0x080098f1
 80098c8:	2300      	movs	r3, #0
 80098ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ce:	e2ba      	b.n	8009e46 <UART_SetConfig+0x7ae>
 80098d0:	2304      	movs	r3, #4
 80098d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098d6:	e2b6      	b.n	8009e46 <UART_SetConfig+0x7ae>
 80098d8:	2308      	movs	r3, #8
 80098da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098de:	e2b2      	b.n	8009e46 <UART_SetConfig+0x7ae>
 80098e0:	2310      	movs	r3, #16
 80098e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098e6:	e2ae      	b.n	8009e46 <UART_SetConfig+0x7ae>
 80098e8:	2320      	movs	r3, #32
 80098ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ee:	e2aa      	b.n	8009e46 <UART_SetConfig+0x7ae>
 80098f0:	2340      	movs	r3, #64	@ 0x40
 80098f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098f6:	e2a6      	b.n	8009e46 <UART_SetConfig+0x7ae>
 80098f8:	2380      	movs	r3, #128	@ 0x80
 80098fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098fe:	e2a2      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a35      	ldr	r2, [pc, #212]	@ (80099dc <UART_SetConfig+0x344>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d130      	bne.n	800996c <UART_SetConfig+0x2d4>
 800990a:	4b31      	ldr	r3, [pc, #196]	@ (80099d0 <UART_SetConfig+0x338>)
 800990c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800990e:	f003 0307 	and.w	r3, r3, #7
 8009912:	2b05      	cmp	r3, #5
 8009914:	d826      	bhi.n	8009964 <UART_SetConfig+0x2cc>
 8009916:	a201      	add	r2, pc, #4	@ (adr r2, 800991c <UART_SetConfig+0x284>)
 8009918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991c:	08009935 	.word	0x08009935
 8009920:	0800993d 	.word	0x0800993d
 8009924:	08009945 	.word	0x08009945
 8009928:	0800994d 	.word	0x0800994d
 800992c:	08009955 	.word	0x08009955
 8009930:	0800995d 	.word	0x0800995d
 8009934:	2300      	movs	r3, #0
 8009936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800993a:	e284      	b.n	8009e46 <UART_SetConfig+0x7ae>
 800993c:	2304      	movs	r3, #4
 800993e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009942:	e280      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009944:	2308      	movs	r3, #8
 8009946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800994a:	e27c      	b.n	8009e46 <UART_SetConfig+0x7ae>
 800994c:	2310      	movs	r3, #16
 800994e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009952:	e278      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009954:	2320      	movs	r3, #32
 8009956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800995a:	e274      	b.n	8009e46 <UART_SetConfig+0x7ae>
 800995c:	2340      	movs	r3, #64	@ 0x40
 800995e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009962:	e270      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009964:	2380      	movs	r3, #128	@ 0x80
 8009966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800996a:	e26c      	b.n	8009e46 <UART_SetConfig+0x7ae>
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a1b      	ldr	r2, [pc, #108]	@ (80099e0 <UART_SetConfig+0x348>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d142      	bne.n	80099fc <UART_SetConfig+0x364>
 8009976:	4b16      	ldr	r3, [pc, #88]	@ (80099d0 <UART_SetConfig+0x338>)
 8009978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800997a:	f003 0307 	and.w	r3, r3, #7
 800997e:	2b05      	cmp	r3, #5
 8009980:	d838      	bhi.n	80099f4 <UART_SetConfig+0x35c>
 8009982:	a201      	add	r2, pc, #4	@ (adr r2, 8009988 <UART_SetConfig+0x2f0>)
 8009984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009988:	080099a1 	.word	0x080099a1
 800998c:	080099a9 	.word	0x080099a9
 8009990:	080099b1 	.word	0x080099b1
 8009994:	080099b9 	.word	0x080099b9
 8009998:	080099e5 	.word	0x080099e5
 800999c:	080099ed 	.word	0x080099ed
 80099a0:	2300      	movs	r3, #0
 80099a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099a6:	e24e      	b.n	8009e46 <UART_SetConfig+0x7ae>
 80099a8:	2304      	movs	r3, #4
 80099aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ae:	e24a      	b.n	8009e46 <UART_SetConfig+0x7ae>
 80099b0:	2308      	movs	r3, #8
 80099b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099b6:	e246      	b.n	8009e46 <UART_SetConfig+0x7ae>
 80099b8:	2310      	movs	r3, #16
 80099ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099be:	e242      	b.n	8009e46 <UART_SetConfig+0x7ae>
 80099c0:	cfff69f3 	.word	0xcfff69f3
 80099c4:	58000c00 	.word	0x58000c00
 80099c8:	11fff4ff 	.word	0x11fff4ff
 80099cc:	40011000 	.word	0x40011000
 80099d0:	58024400 	.word	0x58024400
 80099d4:	40004400 	.word	0x40004400
 80099d8:	40004800 	.word	0x40004800
 80099dc:	40004c00 	.word	0x40004c00
 80099e0:	40005000 	.word	0x40005000
 80099e4:	2320      	movs	r3, #32
 80099e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ea:	e22c      	b.n	8009e46 <UART_SetConfig+0x7ae>
 80099ec:	2340      	movs	r3, #64	@ 0x40
 80099ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099f2:	e228      	b.n	8009e46 <UART_SetConfig+0x7ae>
 80099f4:	2380      	movs	r3, #128	@ 0x80
 80099f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099fa:	e224      	b.n	8009e46 <UART_SetConfig+0x7ae>
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4ab1      	ldr	r2, [pc, #708]	@ (8009cc8 <UART_SetConfig+0x630>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d176      	bne.n	8009af4 <UART_SetConfig+0x45c>
 8009a06:	4bb1      	ldr	r3, [pc, #708]	@ (8009ccc <UART_SetConfig+0x634>)
 8009a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009a0e:	2b28      	cmp	r3, #40	@ 0x28
 8009a10:	d86c      	bhi.n	8009aec <UART_SetConfig+0x454>
 8009a12:	a201      	add	r2, pc, #4	@ (adr r2, 8009a18 <UART_SetConfig+0x380>)
 8009a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a18:	08009abd 	.word	0x08009abd
 8009a1c:	08009aed 	.word	0x08009aed
 8009a20:	08009aed 	.word	0x08009aed
 8009a24:	08009aed 	.word	0x08009aed
 8009a28:	08009aed 	.word	0x08009aed
 8009a2c:	08009aed 	.word	0x08009aed
 8009a30:	08009aed 	.word	0x08009aed
 8009a34:	08009aed 	.word	0x08009aed
 8009a38:	08009ac5 	.word	0x08009ac5
 8009a3c:	08009aed 	.word	0x08009aed
 8009a40:	08009aed 	.word	0x08009aed
 8009a44:	08009aed 	.word	0x08009aed
 8009a48:	08009aed 	.word	0x08009aed
 8009a4c:	08009aed 	.word	0x08009aed
 8009a50:	08009aed 	.word	0x08009aed
 8009a54:	08009aed 	.word	0x08009aed
 8009a58:	08009acd 	.word	0x08009acd
 8009a5c:	08009aed 	.word	0x08009aed
 8009a60:	08009aed 	.word	0x08009aed
 8009a64:	08009aed 	.word	0x08009aed
 8009a68:	08009aed 	.word	0x08009aed
 8009a6c:	08009aed 	.word	0x08009aed
 8009a70:	08009aed 	.word	0x08009aed
 8009a74:	08009aed 	.word	0x08009aed
 8009a78:	08009ad5 	.word	0x08009ad5
 8009a7c:	08009aed 	.word	0x08009aed
 8009a80:	08009aed 	.word	0x08009aed
 8009a84:	08009aed 	.word	0x08009aed
 8009a88:	08009aed 	.word	0x08009aed
 8009a8c:	08009aed 	.word	0x08009aed
 8009a90:	08009aed 	.word	0x08009aed
 8009a94:	08009aed 	.word	0x08009aed
 8009a98:	08009add 	.word	0x08009add
 8009a9c:	08009aed 	.word	0x08009aed
 8009aa0:	08009aed 	.word	0x08009aed
 8009aa4:	08009aed 	.word	0x08009aed
 8009aa8:	08009aed 	.word	0x08009aed
 8009aac:	08009aed 	.word	0x08009aed
 8009ab0:	08009aed 	.word	0x08009aed
 8009ab4:	08009aed 	.word	0x08009aed
 8009ab8:	08009ae5 	.word	0x08009ae5
 8009abc:	2301      	movs	r3, #1
 8009abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ac2:	e1c0      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009ac4:	2304      	movs	r3, #4
 8009ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aca:	e1bc      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009acc:	2308      	movs	r3, #8
 8009ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ad2:	e1b8      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009ad4:	2310      	movs	r3, #16
 8009ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ada:	e1b4      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009adc:	2320      	movs	r3, #32
 8009ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ae2:	e1b0      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009ae4:	2340      	movs	r3, #64	@ 0x40
 8009ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aea:	e1ac      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009aec:	2380      	movs	r3, #128	@ 0x80
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009af2:	e1a8      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a75      	ldr	r2, [pc, #468]	@ (8009cd0 <UART_SetConfig+0x638>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d130      	bne.n	8009b60 <UART_SetConfig+0x4c8>
 8009afe:	4b73      	ldr	r3, [pc, #460]	@ (8009ccc <UART_SetConfig+0x634>)
 8009b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b02:	f003 0307 	and.w	r3, r3, #7
 8009b06:	2b05      	cmp	r3, #5
 8009b08:	d826      	bhi.n	8009b58 <UART_SetConfig+0x4c0>
 8009b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b10 <UART_SetConfig+0x478>)
 8009b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b10:	08009b29 	.word	0x08009b29
 8009b14:	08009b31 	.word	0x08009b31
 8009b18:	08009b39 	.word	0x08009b39
 8009b1c:	08009b41 	.word	0x08009b41
 8009b20:	08009b49 	.word	0x08009b49
 8009b24:	08009b51 	.word	0x08009b51
 8009b28:	2300      	movs	r3, #0
 8009b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b2e:	e18a      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009b30:	2304      	movs	r3, #4
 8009b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b36:	e186      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009b38:	2308      	movs	r3, #8
 8009b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b3e:	e182      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009b40:	2310      	movs	r3, #16
 8009b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b46:	e17e      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009b48:	2320      	movs	r3, #32
 8009b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b4e:	e17a      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009b50:	2340      	movs	r3, #64	@ 0x40
 8009b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b56:	e176      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009b58:	2380      	movs	r3, #128	@ 0x80
 8009b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b5e:	e172      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a5b      	ldr	r2, [pc, #364]	@ (8009cd4 <UART_SetConfig+0x63c>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d130      	bne.n	8009bcc <UART_SetConfig+0x534>
 8009b6a:	4b58      	ldr	r3, [pc, #352]	@ (8009ccc <UART_SetConfig+0x634>)
 8009b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b6e:	f003 0307 	and.w	r3, r3, #7
 8009b72:	2b05      	cmp	r3, #5
 8009b74:	d826      	bhi.n	8009bc4 <UART_SetConfig+0x52c>
 8009b76:	a201      	add	r2, pc, #4	@ (adr r2, 8009b7c <UART_SetConfig+0x4e4>)
 8009b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b7c:	08009b95 	.word	0x08009b95
 8009b80:	08009b9d 	.word	0x08009b9d
 8009b84:	08009ba5 	.word	0x08009ba5
 8009b88:	08009bad 	.word	0x08009bad
 8009b8c:	08009bb5 	.word	0x08009bb5
 8009b90:	08009bbd 	.word	0x08009bbd
 8009b94:	2300      	movs	r3, #0
 8009b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b9a:	e154      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009b9c:	2304      	movs	r3, #4
 8009b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ba2:	e150      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009ba4:	2308      	movs	r3, #8
 8009ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009baa:	e14c      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009bac:	2310      	movs	r3, #16
 8009bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bb2:	e148      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009bb4:	2320      	movs	r3, #32
 8009bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bba:	e144      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009bbc:	2340      	movs	r3, #64	@ 0x40
 8009bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bc2:	e140      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009bc4:	2380      	movs	r3, #128	@ 0x80
 8009bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bca:	e13c      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a41      	ldr	r2, [pc, #260]	@ (8009cd8 <UART_SetConfig+0x640>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	f040 8082 	bne.w	8009cdc <UART_SetConfig+0x644>
 8009bd8:	4b3c      	ldr	r3, [pc, #240]	@ (8009ccc <UART_SetConfig+0x634>)
 8009bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bdc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009be0:	2b28      	cmp	r3, #40	@ 0x28
 8009be2:	d86d      	bhi.n	8009cc0 <UART_SetConfig+0x628>
 8009be4:	a201      	add	r2, pc, #4	@ (adr r2, 8009bec <UART_SetConfig+0x554>)
 8009be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bea:	bf00      	nop
 8009bec:	08009c91 	.word	0x08009c91
 8009bf0:	08009cc1 	.word	0x08009cc1
 8009bf4:	08009cc1 	.word	0x08009cc1
 8009bf8:	08009cc1 	.word	0x08009cc1
 8009bfc:	08009cc1 	.word	0x08009cc1
 8009c00:	08009cc1 	.word	0x08009cc1
 8009c04:	08009cc1 	.word	0x08009cc1
 8009c08:	08009cc1 	.word	0x08009cc1
 8009c0c:	08009c99 	.word	0x08009c99
 8009c10:	08009cc1 	.word	0x08009cc1
 8009c14:	08009cc1 	.word	0x08009cc1
 8009c18:	08009cc1 	.word	0x08009cc1
 8009c1c:	08009cc1 	.word	0x08009cc1
 8009c20:	08009cc1 	.word	0x08009cc1
 8009c24:	08009cc1 	.word	0x08009cc1
 8009c28:	08009cc1 	.word	0x08009cc1
 8009c2c:	08009ca1 	.word	0x08009ca1
 8009c30:	08009cc1 	.word	0x08009cc1
 8009c34:	08009cc1 	.word	0x08009cc1
 8009c38:	08009cc1 	.word	0x08009cc1
 8009c3c:	08009cc1 	.word	0x08009cc1
 8009c40:	08009cc1 	.word	0x08009cc1
 8009c44:	08009cc1 	.word	0x08009cc1
 8009c48:	08009cc1 	.word	0x08009cc1
 8009c4c:	08009ca9 	.word	0x08009ca9
 8009c50:	08009cc1 	.word	0x08009cc1
 8009c54:	08009cc1 	.word	0x08009cc1
 8009c58:	08009cc1 	.word	0x08009cc1
 8009c5c:	08009cc1 	.word	0x08009cc1
 8009c60:	08009cc1 	.word	0x08009cc1
 8009c64:	08009cc1 	.word	0x08009cc1
 8009c68:	08009cc1 	.word	0x08009cc1
 8009c6c:	08009cb1 	.word	0x08009cb1
 8009c70:	08009cc1 	.word	0x08009cc1
 8009c74:	08009cc1 	.word	0x08009cc1
 8009c78:	08009cc1 	.word	0x08009cc1
 8009c7c:	08009cc1 	.word	0x08009cc1
 8009c80:	08009cc1 	.word	0x08009cc1
 8009c84:	08009cc1 	.word	0x08009cc1
 8009c88:	08009cc1 	.word	0x08009cc1
 8009c8c:	08009cb9 	.word	0x08009cb9
 8009c90:	2301      	movs	r3, #1
 8009c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c96:	e0d6      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009c98:	2304      	movs	r3, #4
 8009c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c9e:	e0d2      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009ca0:	2308      	movs	r3, #8
 8009ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ca6:	e0ce      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009ca8:	2310      	movs	r3, #16
 8009caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cae:	e0ca      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009cb0:	2320      	movs	r3, #32
 8009cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cb6:	e0c6      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009cb8:	2340      	movs	r3, #64	@ 0x40
 8009cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cbe:	e0c2      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009cc0:	2380      	movs	r3, #128	@ 0x80
 8009cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cc6:	e0be      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009cc8:	40011400 	.word	0x40011400
 8009ccc:	58024400 	.word	0x58024400
 8009cd0:	40007800 	.word	0x40007800
 8009cd4:	40007c00 	.word	0x40007c00
 8009cd8:	40011800 	.word	0x40011800
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4aad      	ldr	r2, [pc, #692]	@ (8009f98 <UART_SetConfig+0x900>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d176      	bne.n	8009dd4 <UART_SetConfig+0x73c>
 8009ce6:	4bad      	ldr	r3, [pc, #692]	@ (8009f9c <UART_SetConfig+0x904>)
 8009ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009cee:	2b28      	cmp	r3, #40	@ 0x28
 8009cf0:	d86c      	bhi.n	8009dcc <UART_SetConfig+0x734>
 8009cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8009cf8 <UART_SetConfig+0x660>)
 8009cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf8:	08009d9d 	.word	0x08009d9d
 8009cfc:	08009dcd 	.word	0x08009dcd
 8009d00:	08009dcd 	.word	0x08009dcd
 8009d04:	08009dcd 	.word	0x08009dcd
 8009d08:	08009dcd 	.word	0x08009dcd
 8009d0c:	08009dcd 	.word	0x08009dcd
 8009d10:	08009dcd 	.word	0x08009dcd
 8009d14:	08009dcd 	.word	0x08009dcd
 8009d18:	08009da5 	.word	0x08009da5
 8009d1c:	08009dcd 	.word	0x08009dcd
 8009d20:	08009dcd 	.word	0x08009dcd
 8009d24:	08009dcd 	.word	0x08009dcd
 8009d28:	08009dcd 	.word	0x08009dcd
 8009d2c:	08009dcd 	.word	0x08009dcd
 8009d30:	08009dcd 	.word	0x08009dcd
 8009d34:	08009dcd 	.word	0x08009dcd
 8009d38:	08009dad 	.word	0x08009dad
 8009d3c:	08009dcd 	.word	0x08009dcd
 8009d40:	08009dcd 	.word	0x08009dcd
 8009d44:	08009dcd 	.word	0x08009dcd
 8009d48:	08009dcd 	.word	0x08009dcd
 8009d4c:	08009dcd 	.word	0x08009dcd
 8009d50:	08009dcd 	.word	0x08009dcd
 8009d54:	08009dcd 	.word	0x08009dcd
 8009d58:	08009db5 	.word	0x08009db5
 8009d5c:	08009dcd 	.word	0x08009dcd
 8009d60:	08009dcd 	.word	0x08009dcd
 8009d64:	08009dcd 	.word	0x08009dcd
 8009d68:	08009dcd 	.word	0x08009dcd
 8009d6c:	08009dcd 	.word	0x08009dcd
 8009d70:	08009dcd 	.word	0x08009dcd
 8009d74:	08009dcd 	.word	0x08009dcd
 8009d78:	08009dbd 	.word	0x08009dbd
 8009d7c:	08009dcd 	.word	0x08009dcd
 8009d80:	08009dcd 	.word	0x08009dcd
 8009d84:	08009dcd 	.word	0x08009dcd
 8009d88:	08009dcd 	.word	0x08009dcd
 8009d8c:	08009dcd 	.word	0x08009dcd
 8009d90:	08009dcd 	.word	0x08009dcd
 8009d94:	08009dcd 	.word	0x08009dcd
 8009d98:	08009dc5 	.word	0x08009dc5
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009da2:	e050      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009da4:	2304      	movs	r3, #4
 8009da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009daa:	e04c      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009dac:	2308      	movs	r3, #8
 8009dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009db2:	e048      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009db4:	2310      	movs	r3, #16
 8009db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dba:	e044      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009dbc:	2320      	movs	r3, #32
 8009dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dc2:	e040      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009dc4:	2340      	movs	r3, #64	@ 0x40
 8009dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dca:	e03c      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009dcc:	2380      	movs	r3, #128	@ 0x80
 8009dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dd2:	e038      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a71      	ldr	r2, [pc, #452]	@ (8009fa0 <UART_SetConfig+0x908>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d130      	bne.n	8009e40 <UART_SetConfig+0x7a8>
 8009dde:	4b6f      	ldr	r3, [pc, #444]	@ (8009f9c <UART_SetConfig+0x904>)
 8009de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009de2:	f003 0307 	and.w	r3, r3, #7
 8009de6:	2b05      	cmp	r3, #5
 8009de8:	d826      	bhi.n	8009e38 <UART_SetConfig+0x7a0>
 8009dea:	a201      	add	r2, pc, #4	@ (adr r2, 8009df0 <UART_SetConfig+0x758>)
 8009dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df0:	08009e09 	.word	0x08009e09
 8009df4:	08009e11 	.word	0x08009e11
 8009df8:	08009e19 	.word	0x08009e19
 8009dfc:	08009e21 	.word	0x08009e21
 8009e00:	08009e29 	.word	0x08009e29
 8009e04:	08009e31 	.word	0x08009e31
 8009e08:	2302      	movs	r3, #2
 8009e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e0e:	e01a      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009e10:	2304      	movs	r3, #4
 8009e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e16:	e016      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009e18:	2308      	movs	r3, #8
 8009e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e1e:	e012      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009e20:	2310      	movs	r3, #16
 8009e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e26:	e00e      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009e28:	2320      	movs	r3, #32
 8009e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e2e:	e00a      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009e30:	2340      	movs	r3, #64	@ 0x40
 8009e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e36:	e006      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009e38:	2380      	movs	r3, #128	@ 0x80
 8009e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e3e:	e002      	b.n	8009e46 <UART_SetConfig+0x7ae>
 8009e40:	2380      	movs	r3, #128	@ 0x80
 8009e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a55      	ldr	r2, [pc, #340]	@ (8009fa0 <UART_SetConfig+0x908>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	f040 80f8 	bne.w	800a042 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e52:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009e56:	2b20      	cmp	r3, #32
 8009e58:	dc46      	bgt.n	8009ee8 <UART_SetConfig+0x850>
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	db75      	blt.n	8009f4a <UART_SetConfig+0x8b2>
 8009e5e:	3b02      	subs	r3, #2
 8009e60:	2b1e      	cmp	r3, #30
 8009e62:	d872      	bhi.n	8009f4a <UART_SetConfig+0x8b2>
 8009e64:	a201      	add	r2, pc, #4	@ (adr r2, 8009e6c <UART_SetConfig+0x7d4>)
 8009e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e6a:	bf00      	nop
 8009e6c:	08009eef 	.word	0x08009eef
 8009e70:	08009f4b 	.word	0x08009f4b
 8009e74:	08009ef7 	.word	0x08009ef7
 8009e78:	08009f4b 	.word	0x08009f4b
 8009e7c:	08009f4b 	.word	0x08009f4b
 8009e80:	08009f4b 	.word	0x08009f4b
 8009e84:	08009f07 	.word	0x08009f07
 8009e88:	08009f4b 	.word	0x08009f4b
 8009e8c:	08009f4b 	.word	0x08009f4b
 8009e90:	08009f4b 	.word	0x08009f4b
 8009e94:	08009f4b 	.word	0x08009f4b
 8009e98:	08009f4b 	.word	0x08009f4b
 8009e9c:	08009f4b 	.word	0x08009f4b
 8009ea0:	08009f4b 	.word	0x08009f4b
 8009ea4:	08009f17 	.word	0x08009f17
 8009ea8:	08009f4b 	.word	0x08009f4b
 8009eac:	08009f4b 	.word	0x08009f4b
 8009eb0:	08009f4b 	.word	0x08009f4b
 8009eb4:	08009f4b 	.word	0x08009f4b
 8009eb8:	08009f4b 	.word	0x08009f4b
 8009ebc:	08009f4b 	.word	0x08009f4b
 8009ec0:	08009f4b 	.word	0x08009f4b
 8009ec4:	08009f4b 	.word	0x08009f4b
 8009ec8:	08009f4b 	.word	0x08009f4b
 8009ecc:	08009f4b 	.word	0x08009f4b
 8009ed0:	08009f4b 	.word	0x08009f4b
 8009ed4:	08009f4b 	.word	0x08009f4b
 8009ed8:	08009f4b 	.word	0x08009f4b
 8009edc:	08009f4b 	.word	0x08009f4b
 8009ee0:	08009f4b 	.word	0x08009f4b
 8009ee4:	08009f3d 	.word	0x08009f3d
 8009ee8:	2b40      	cmp	r3, #64	@ 0x40
 8009eea:	d02a      	beq.n	8009f42 <UART_SetConfig+0x8aa>
 8009eec:	e02d      	b.n	8009f4a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009eee:	f7fc fd57 	bl	80069a0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009ef2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ef4:	e02f      	b.n	8009f56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7fc fd66 	bl	80069cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f04:	e027      	b.n	8009f56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f06:	f107 0318 	add.w	r3, r7, #24
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fc feb2 	bl	8006c74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f14:	e01f      	b.n	8009f56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f16:	4b21      	ldr	r3, [pc, #132]	@ (8009f9c <UART_SetConfig+0x904>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f003 0320 	and.w	r3, r3, #32
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d009      	beq.n	8009f36 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f22:	4b1e      	ldr	r3, [pc, #120]	@ (8009f9c <UART_SetConfig+0x904>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	08db      	lsrs	r3, r3, #3
 8009f28:	f003 0303 	and.w	r3, r3, #3
 8009f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8009fa4 <UART_SetConfig+0x90c>)
 8009f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8009f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f34:	e00f      	b.n	8009f56 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009f36:	4b1b      	ldr	r3, [pc, #108]	@ (8009fa4 <UART_SetConfig+0x90c>)
 8009f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f3a:	e00c      	b.n	8009f56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8009fa8 <UART_SetConfig+0x910>)
 8009f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f40:	e009      	b.n	8009f56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f48:	e005      	b.n	8009f56 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009f54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	f000 81ee 	beq.w	800a33a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f62:	4a12      	ldr	r2, [pc, #72]	@ (8009fac <UART_SetConfig+0x914>)
 8009f64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f68:	461a      	mov	r2, r3
 8009f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f70:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	685a      	ldr	r2, [r3, #4]
 8009f76:	4613      	mov	r3, r2
 8009f78:	005b      	lsls	r3, r3, #1
 8009f7a:	4413      	add	r3, r2
 8009f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d305      	bcc.n	8009f8e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d910      	bls.n	8009fb0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009f94:	e1d1      	b.n	800a33a <UART_SetConfig+0xca2>
 8009f96:	bf00      	nop
 8009f98:	40011c00 	.word	0x40011c00
 8009f9c:	58024400 	.word	0x58024400
 8009fa0:	58000c00 	.word	0x58000c00
 8009fa4:	03d09000 	.word	0x03d09000
 8009fa8:	003d0900 	.word	0x003d0900
 8009fac:	0800d934 	.word	0x0800d934
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	60bb      	str	r3, [r7, #8]
 8009fb6:	60fa      	str	r2, [r7, #12]
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fbc:	4ac0      	ldr	r2, [pc, #768]	@ (800a2c0 <UART_SetConfig+0xc28>)
 8009fbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	603b      	str	r3, [r7, #0]
 8009fc8:	607a      	str	r2, [r7, #4]
 8009fca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009fd2:	f7f6 f9f5 	bl	80003c0 <__aeabi_uldivmod>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	460b      	mov	r3, r1
 8009fda:	4610      	mov	r0, r2
 8009fdc:	4619      	mov	r1, r3
 8009fde:	f04f 0200 	mov.w	r2, #0
 8009fe2:	f04f 0300 	mov.w	r3, #0
 8009fe6:	020b      	lsls	r3, r1, #8
 8009fe8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009fec:	0202      	lsls	r2, r0, #8
 8009fee:	6979      	ldr	r1, [r7, #20]
 8009ff0:	6849      	ldr	r1, [r1, #4]
 8009ff2:	0849      	lsrs	r1, r1, #1
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	460c      	mov	r4, r1
 8009ff8:	4605      	mov	r5, r0
 8009ffa:	eb12 0804 	adds.w	r8, r2, r4
 8009ffe:	eb43 0905 	adc.w	r9, r3, r5
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	469a      	mov	sl, r3
 800a00a:	4693      	mov	fp, r2
 800a00c:	4652      	mov	r2, sl
 800a00e:	465b      	mov	r3, fp
 800a010:	4640      	mov	r0, r8
 800a012:	4649      	mov	r1, r9
 800a014:	f7f6 f9d4 	bl	80003c0 <__aeabi_uldivmod>
 800a018:	4602      	mov	r2, r0
 800a01a:	460b      	mov	r3, r1
 800a01c:	4613      	mov	r3, r2
 800a01e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a022:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a026:	d308      	bcc.n	800a03a <UART_SetConfig+0x9a2>
 800a028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a02e:	d204      	bcs.n	800a03a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a036:	60da      	str	r2, [r3, #12]
 800a038:	e17f      	b.n	800a33a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a040:	e17b      	b.n	800a33a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	69db      	ldr	r3, [r3, #28]
 800a046:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a04a:	f040 80bd 	bne.w	800a1c8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a04e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a052:	2b20      	cmp	r3, #32
 800a054:	dc48      	bgt.n	800a0e8 <UART_SetConfig+0xa50>
 800a056:	2b00      	cmp	r3, #0
 800a058:	db7b      	blt.n	800a152 <UART_SetConfig+0xaba>
 800a05a:	2b20      	cmp	r3, #32
 800a05c:	d879      	bhi.n	800a152 <UART_SetConfig+0xaba>
 800a05e:	a201      	add	r2, pc, #4	@ (adr r2, 800a064 <UART_SetConfig+0x9cc>)
 800a060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a064:	0800a0ef 	.word	0x0800a0ef
 800a068:	0800a0f7 	.word	0x0800a0f7
 800a06c:	0800a153 	.word	0x0800a153
 800a070:	0800a153 	.word	0x0800a153
 800a074:	0800a0ff 	.word	0x0800a0ff
 800a078:	0800a153 	.word	0x0800a153
 800a07c:	0800a153 	.word	0x0800a153
 800a080:	0800a153 	.word	0x0800a153
 800a084:	0800a10f 	.word	0x0800a10f
 800a088:	0800a153 	.word	0x0800a153
 800a08c:	0800a153 	.word	0x0800a153
 800a090:	0800a153 	.word	0x0800a153
 800a094:	0800a153 	.word	0x0800a153
 800a098:	0800a153 	.word	0x0800a153
 800a09c:	0800a153 	.word	0x0800a153
 800a0a0:	0800a153 	.word	0x0800a153
 800a0a4:	0800a11f 	.word	0x0800a11f
 800a0a8:	0800a153 	.word	0x0800a153
 800a0ac:	0800a153 	.word	0x0800a153
 800a0b0:	0800a153 	.word	0x0800a153
 800a0b4:	0800a153 	.word	0x0800a153
 800a0b8:	0800a153 	.word	0x0800a153
 800a0bc:	0800a153 	.word	0x0800a153
 800a0c0:	0800a153 	.word	0x0800a153
 800a0c4:	0800a153 	.word	0x0800a153
 800a0c8:	0800a153 	.word	0x0800a153
 800a0cc:	0800a153 	.word	0x0800a153
 800a0d0:	0800a153 	.word	0x0800a153
 800a0d4:	0800a153 	.word	0x0800a153
 800a0d8:	0800a153 	.word	0x0800a153
 800a0dc:	0800a153 	.word	0x0800a153
 800a0e0:	0800a153 	.word	0x0800a153
 800a0e4:	0800a145 	.word	0x0800a145
 800a0e8:	2b40      	cmp	r3, #64	@ 0x40
 800a0ea:	d02e      	beq.n	800a14a <UART_SetConfig+0xab2>
 800a0ec:	e031      	b.n	800a152 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0ee:	f7fb fa49 	bl	8005584 <HAL_RCC_GetPCLK1Freq>
 800a0f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a0f4:	e033      	b.n	800a15e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0f6:	f7fb fa5b 	bl	80055b0 <HAL_RCC_GetPCLK2Freq>
 800a0fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a0fc:	e02f      	b.n	800a15e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a102:	4618      	mov	r0, r3
 800a104:	f7fc fc62 	bl	80069cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a10a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a10c:	e027      	b.n	800a15e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a10e:	f107 0318 	add.w	r3, r7, #24
 800a112:	4618      	mov	r0, r3
 800a114:	f7fc fdae 	bl	8006c74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a11c:	e01f      	b.n	800a15e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a11e:	4b69      	ldr	r3, [pc, #420]	@ (800a2c4 <UART_SetConfig+0xc2c>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f003 0320 	and.w	r3, r3, #32
 800a126:	2b00      	cmp	r3, #0
 800a128:	d009      	beq.n	800a13e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a12a:	4b66      	ldr	r3, [pc, #408]	@ (800a2c4 <UART_SetConfig+0xc2c>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	08db      	lsrs	r3, r3, #3
 800a130:	f003 0303 	and.w	r3, r3, #3
 800a134:	4a64      	ldr	r2, [pc, #400]	@ (800a2c8 <UART_SetConfig+0xc30>)
 800a136:	fa22 f303 	lsr.w	r3, r2, r3
 800a13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a13c:	e00f      	b.n	800a15e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a13e:	4b62      	ldr	r3, [pc, #392]	@ (800a2c8 <UART_SetConfig+0xc30>)
 800a140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a142:	e00c      	b.n	800a15e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a144:	4b61      	ldr	r3, [pc, #388]	@ (800a2cc <UART_SetConfig+0xc34>)
 800a146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a148:	e009      	b.n	800a15e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a14a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a150:	e005      	b.n	800a15e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a152:	2300      	movs	r3, #0
 800a154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a15c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a15e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a160:	2b00      	cmp	r3, #0
 800a162:	f000 80ea 	beq.w	800a33a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a16a:	4a55      	ldr	r2, [pc, #340]	@ (800a2c0 <UART_SetConfig+0xc28>)
 800a16c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a170:	461a      	mov	r2, r3
 800a172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a174:	fbb3 f3f2 	udiv	r3, r3, r2
 800a178:	005a      	lsls	r2, r3, #1
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	085b      	lsrs	r3, r3, #1
 800a180:	441a      	add	r2, r3
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	fbb2 f3f3 	udiv	r3, r2, r3
 800a18a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a18e:	2b0f      	cmp	r3, #15
 800a190:	d916      	bls.n	800a1c0 <UART_SetConfig+0xb28>
 800a192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a198:	d212      	bcs.n	800a1c0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	f023 030f 	bic.w	r3, r3, #15
 800a1a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a6:	085b      	lsrs	r3, r3, #1
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	f003 0307 	and.w	r3, r3, #7
 800a1ae:	b29a      	uxth	r2, r3
 800a1b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a1bc:	60da      	str	r2, [r3, #12]
 800a1be:	e0bc      	b.n	800a33a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a1c6:	e0b8      	b.n	800a33a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a1c8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a1cc:	2b20      	cmp	r3, #32
 800a1ce:	dc4b      	bgt.n	800a268 <UART_SetConfig+0xbd0>
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f2c0 8087 	blt.w	800a2e4 <UART_SetConfig+0xc4c>
 800a1d6:	2b20      	cmp	r3, #32
 800a1d8:	f200 8084 	bhi.w	800a2e4 <UART_SetConfig+0xc4c>
 800a1dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a1e4 <UART_SetConfig+0xb4c>)
 800a1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e2:	bf00      	nop
 800a1e4:	0800a26f 	.word	0x0800a26f
 800a1e8:	0800a277 	.word	0x0800a277
 800a1ec:	0800a2e5 	.word	0x0800a2e5
 800a1f0:	0800a2e5 	.word	0x0800a2e5
 800a1f4:	0800a27f 	.word	0x0800a27f
 800a1f8:	0800a2e5 	.word	0x0800a2e5
 800a1fc:	0800a2e5 	.word	0x0800a2e5
 800a200:	0800a2e5 	.word	0x0800a2e5
 800a204:	0800a28f 	.word	0x0800a28f
 800a208:	0800a2e5 	.word	0x0800a2e5
 800a20c:	0800a2e5 	.word	0x0800a2e5
 800a210:	0800a2e5 	.word	0x0800a2e5
 800a214:	0800a2e5 	.word	0x0800a2e5
 800a218:	0800a2e5 	.word	0x0800a2e5
 800a21c:	0800a2e5 	.word	0x0800a2e5
 800a220:	0800a2e5 	.word	0x0800a2e5
 800a224:	0800a29f 	.word	0x0800a29f
 800a228:	0800a2e5 	.word	0x0800a2e5
 800a22c:	0800a2e5 	.word	0x0800a2e5
 800a230:	0800a2e5 	.word	0x0800a2e5
 800a234:	0800a2e5 	.word	0x0800a2e5
 800a238:	0800a2e5 	.word	0x0800a2e5
 800a23c:	0800a2e5 	.word	0x0800a2e5
 800a240:	0800a2e5 	.word	0x0800a2e5
 800a244:	0800a2e5 	.word	0x0800a2e5
 800a248:	0800a2e5 	.word	0x0800a2e5
 800a24c:	0800a2e5 	.word	0x0800a2e5
 800a250:	0800a2e5 	.word	0x0800a2e5
 800a254:	0800a2e5 	.word	0x0800a2e5
 800a258:	0800a2e5 	.word	0x0800a2e5
 800a25c:	0800a2e5 	.word	0x0800a2e5
 800a260:	0800a2e5 	.word	0x0800a2e5
 800a264:	0800a2d7 	.word	0x0800a2d7
 800a268:	2b40      	cmp	r3, #64	@ 0x40
 800a26a:	d037      	beq.n	800a2dc <UART_SetConfig+0xc44>
 800a26c:	e03a      	b.n	800a2e4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a26e:	f7fb f989 	bl	8005584 <HAL_RCC_GetPCLK1Freq>
 800a272:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a274:	e03c      	b.n	800a2f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a276:	f7fb f99b 	bl	80055b0 <HAL_RCC_GetPCLK2Freq>
 800a27a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a27c:	e038      	b.n	800a2f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a27e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a282:	4618      	mov	r0, r3
 800a284:	f7fc fba2 	bl	80069cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a28a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a28c:	e030      	b.n	800a2f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a28e:	f107 0318 	add.w	r3, r7, #24
 800a292:	4618      	mov	r0, r3
 800a294:	f7fc fcee 	bl	8006c74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a29c:	e028      	b.n	800a2f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a29e:	4b09      	ldr	r3, [pc, #36]	@ (800a2c4 <UART_SetConfig+0xc2c>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f003 0320 	and.w	r3, r3, #32
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d012      	beq.n	800a2d0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2aa:	4b06      	ldr	r3, [pc, #24]	@ (800a2c4 <UART_SetConfig+0xc2c>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	08db      	lsrs	r3, r3, #3
 800a2b0:	f003 0303 	and.w	r3, r3, #3
 800a2b4:	4a04      	ldr	r2, [pc, #16]	@ (800a2c8 <UART_SetConfig+0xc30>)
 800a2b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a2ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2bc:	e018      	b.n	800a2f0 <UART_SetConfig+0xc58>
 800a2be:	bf00      	nop
 800a2c0:	0800d934 	.word	0x0800d934
 800a2c4:	58024400 	.word	0x58024400
 800a2c8:	03d09000 	.word	0x03d09000
 800a2cc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a2d0:	4b24      	ldr	r3, [pc, #144]	@ (800a364 <UART_SetConfig+0xccc>)
 800a2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2d4:	e00c      	b.n	800a2f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2d6:	4b24      	ldr	r3, [pc, #144]	@ (800a368 <UART_SetConfig+0xcd0>)
 800a2d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2da:	e009      	b.n	800a2f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2e2:	e005      	b.n	800a2f0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a2ee:	bf00      	nop
    }

    if (pclk != 0U)
 800a2f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d021      	beq.n	800a33a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2fa:	4a1c      	ldr	r2, [pc, #112]	@ (800a36c <UART_SetConfig+0xcd4>)
 800a2fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a300:	461a      	mov	r2, r3
 800a302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a304:	fbb3 f2f2 	udiv	r2, r3, r2
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	085b      	lsrs	r3, r3, #1
 800a30e:	441a      	add	r2, r3
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	fbb2 f3f3 	udiv	r3, r2, r3
 800a318:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a31c:	2b0f      	cmp	r3, #15
 800a31e:	d909      	bls.n	800a334 <UART_SetConfig+0xc9c>
 800a320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a322:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a326:	d205      	bcs.n	800a334 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	60da      	str	r2, [r3, #12]
 800a332:	e002      	b.n	800a33a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a334:	2301      	movs	r3, #1
 800a336:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	2201      	movs	r2, #1
 800a33e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	2201      	movs	r2, #1
 800a346:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	2200      	movs	r2, #0
 800a34e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	2200      	movs	r2, #0
 800a354:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a356:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3748      	adds	r7, #72	@ 0x48
 800a35e:	46bd      	mov	sp, r7
 800a360:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a364:	03d09000 	.word	0x03d09000
 800a368:	003d0900 	.word	0x003d0900
 800a36c:	0800d934 	.word	0x0800d934

0800a370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a37c:	f003 0308 	and.w	r3, r3, #8
 800a380:	2b00      	cmp	r3, #0
 800a382:	d00a      	beq.n	800a39a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	430a      	orrs	r2, r1
 800a398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a39e:	f003 0301 	and.w	r3, r3, #1
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00a      	beq.n	800a3bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	430a      	orrs	r2, r1
 800a3ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3c0:	f003 0302 	and.w	r3, r3, #2
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00a      	beq.n	800a3de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	430a      	orrs	r2, r1
 800a3dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3e2:	f003 0304 	and.w	r3, r3, #4
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00a      	beq.n	800a400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	430a      	orrs	r2, r1
 800a3fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a404:	f003 0310 	and.w	r3, r3, #16
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00a      	beq.n	800a422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	430a      	orrs	r2, r1
 800a420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a426:	f003 0320 	and.w	r3, r3, #32
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00a      	beq.n	800a444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	430a      	orrs	r2, r1
 800a442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d01a      	beq.n	800a486 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	430a      	orrs	r2, r1
 800a464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a46a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a46e:	d10a      	bne.n	800a486 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	430a      	orrs	r2, r1
 800a484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a48a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00a      	beq.n	800a4a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	430a      	orrs	r2, r1
 800a4a6:	605a      	str	r2, [r3, #4]
  }
}
 800a4a8:	bf00      	nop
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b098      	sub	sp, #96	@ 0x60
 800a4b8:	af02      	add	r7, sp, #8
 800a4ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4c4:	f7f7 fbd2 	bl	8001c6c <HAL_GetTick>
 800a4c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 0308 	and.w	r3, r3, #8
 800a4d4:	2b08      	cmp	r3, #8
 800a4d6:	d12f      	bne.n	800a538 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 f88e 	bl	800a608 <UART_WaitOnFlagUntilTimeout>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d022      	beq.n	800a538 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4fa:	e853 3f00 	ldrex	r3, [r3]
 800a4fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a502:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a506:	653b      	str	r3, [r7, #80]	@ 0x50
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	461a      	mov	r2, r3
 800a50e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a510:	647b      	str	r3, [r7, #68]	@ 0x44
 800a512:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a514:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a516:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a518:	e841 2300 	strex	r3, r2, [r1]
 800a51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a51e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a520:	2b00      	cmp	r3, #0
 800a522:	d1e6      	bne.n	800a4f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2220      	movs	r2, #32
 800a528:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a534:	2303      	movs	r3, #3
 800a536:	e063      	b.n	800a600 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f003 0304 	and.w	r3, r3, #4
 800a542:	2b04      	cmp	r3, #4
 800a544:	d149      	bne.n	800a5da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a546:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a54a:	9300      	str	r3, [sp, #0]
 800a54c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a54e:	2200      	movs	r2, #0
 800a550:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 f857 	bl	800a608 <UART_WaitOnFlagUntilTimeout>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d03c      	beq.n	800a5da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a568:	e853 3f00 	ldrex	r3, [r3]
 800a56c:	623b      	str	r3, [r7, #32]
   return(result);
 800a56e:	6a3b      	ldr	r3, [r7, #32]
 800a570:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a574:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	461a      	mov	r2, r3
 800a57c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a57e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a580:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a582:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a584:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a586:	e841 2300 	strex	r3, r2, [r1]
 800a58a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a58c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d1e6      	bne.n	800a560 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	3308      	adds	r3, #8
 800a598:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	e853 3f00 	ldrex	r3, [r3]
 800a5a0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f023 0301 	bic.w	r3, r3, #1
 800a5a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	3308      	adds	r3, #8
 800a5b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5b2:	61fa      	str	r2, [r7, #28]
 800a5b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b6:	69b9      	ldr	r1, [r7, #24]
 800a5b8:	69fa      	ldr	r2, [r7, #28]
 800a5ba:	e841 2300 	strex	r3, r2, [r1]
 800a5be:	617b      	str	r3, [r7, #20]
   return(result);
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d1e5      	bne.n	800a592 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2220      	movs	r2, #32
 800a5ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5d6:	2303      	movs	r3, #3
 800a5d8:	e012      	b.n	800a600 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2220      	movs	r2, #32
 800a5de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2220      	movs	r2, #32
 800a5e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5fe:	2300      	movs	r3, #0
}
 800a600:	4618      	mov	r0, r3
 800a602:	3758      	adds	r7, #88	@ 0x58
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	603b      	str	r3, [r7, #0]
 800a614:	4613      	mov	r3, r2
 800a616:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a618:	e04f      	b.n	800a6ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a620:	d04b      	beq.n	800a6ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a622:	f7f7 fb23 	bl	8001c6c <HAL_GetTick>
 800a626:	4602      	mov	r2, r0
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	69ba      	ldr	r2, [r7, #24]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d302      	bcc.n	800a638 <UART_WaitOnFlagUntilTimeout+0x30>
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d101      	bne.n	800a63c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a638:	2303      	movs	r3, #3
 800a63a:	e04e      	b.n	800a6da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f003 0304 	and.w	r3, r3, #4
 800a646:	2b00      	cmp	r3, #0
 800a648:	d037      	beq.n	800a6ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	2b80      	cmp	r3, #128	@ 0x80
 800a64e:	d034      	beq.n	800a6ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	2b40      	cmp	r3, #64	@ 0x40
 800a654:	d031      	beq.n	800a6ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	69db      	ldr	r3, [r3, #28]
 800a65c:	f003 0308 	and.w	r3, r3, #8
 800a660:	2b08      	cmp	r3, #8
 800a662:	d110      	bne.n	800a686 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2208      	movs	r2, #8
 800a66a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a66c:	68f8      	ldr	r0, [r7, #12]
 800a66e:	f000 f839 	bl	800a6e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2208      	movs	r2, #8
 800a676:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	e029      	b.n	800a6da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	69db      	ldr	r3, [r3, #28]
 800a68c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a690:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a694:	d111      	bne.n	800a6ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a69e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	f000 f81f 	bl	800a6e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2220      	movs	r2, #32
 800a6aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a6b6:	2303      	movs	r3, #3
 800a6b8:	e00f      	b.n	800a6da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	69da      	ldr	r2, [r3, #28]
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	4013      	ands	r3, r2
 800a6c4:	68ba      	ldr	r2, [r7, #8]
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	bf0c      	ite	eq
 800a6ca:	2301      	moveq	r3, #1
 800a6cc:	2300      	movne	r3, #0
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	79fb      	ldrb	r3, [r7, #7]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d0a0      	beq.n	800a61a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
	...

0800a6e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b095      	sub	sp, #84	@ 0x54
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6f4:	e853 3f00 	ldrex	r3, [r3]
 800a6f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a700:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	461a      	mov	r2, r3
 800a708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a70a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a70c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a710:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a712:	e841 2300 	strex	r3, r2, [r1]
 800a716:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d1e6      	bne.n	800a6ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	3308      	adds	r3, #8
 800a724:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a726:	6a3b      	ldr	r3, [r7, #32]
 800a728:	e853 3f00 	ldrex	r3, [r3]
 800a72c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a72e:	69fa      	ldr	r2, [r7, #28]
 800a730:	4b1e      	ldr	r3, [pc, #120]	@ (800a7ac <UART_EndRxTransfer+0xc8>)
 800a732:	4013      	ands	r3, r2
 800a734:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	3308      	adds	r3, #8
 800a73c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a73e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a740:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a742:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a744:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a746:	e841 2300 	strex	r3, r2, [r1]
 800a74a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d1e5      	bne.n	800a71e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a756:	2b01      	cmp	r3, #1
 800a758:	d118      	bne.n	800a78c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	e853 3f00 	ldrex	r3, [r3]
 800a766:	60bb      	str	r3, [r7, #8]
   return(result);
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	f023 0310 	bic.w	r3, r3, #16
 800a76e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	461a      	mov	r2, r3
 800a776:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a778:	61bb      	str	r3, [r7, #24]
 800a77a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77c:	6979      	ldr	r1, [r7, #20]
 800a77e:	69ba      	ldr	r2, [r7, #24]
 800a780:	e841 2300 	strex	r3, r2, [r1]
 800a784:	613b      	str	r3, [r7, #16]
   return(result);
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d1e6      	bne.n	800a75a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2220      	movs	r2, #32
 800a790:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a7a0:	bf00      	nop
 800a7a2:	3754      	adds	r7, #84	@ 0x54
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr
 800a7ac:	effffffe 	.word	0xeffffffe

0800a7b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7ce:	68f8      	ldr	r0, [r7, #12]
 800a7d0:	f7fe ff4c 	bl	800966c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7d4:	bf00      	nop
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b088      	sub	sp, #32
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	e853 3f00 	ldrex	r3, [r3]
 800a7f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7f8:	61fb      	str	r3, [r7, #28]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	461a      	mov	r2, r3
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	61bb      	str	r3, [r7, #24]
 800a804:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a806:	6979      	ldr	r1, [r7, #20]
 800a808:	69ba      	ldr	r2, [r7, #24]
 800a80a:	e841 2300 	strex	r3, r2, [r1]
 800a80e:	613b      	str	r3, [r7, #16]
   return(result);
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d1e6      	bne.n	800a7e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2220      	movs	r2, #32
 800a81a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2200      	movs	r2, #0
 800a822:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f7fe ff17 	bl	8009658 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a82a:	bf00      	nop
 800a82c:	3720      	adds	r7, #32
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}

0800a832 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a832:	b480      	push	{r7}
 800a834:	b083      	sub	sp, #12
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a83a:	bf00      	nop
 800a83c:	370c      	adds	r7, #12
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr

0800a846 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a846:	b480      	push	{r7}
 800a848:	b083      	sub	sp, #12
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a84e:	bf00      	nop
 800a850:	370c      	adds	r7, #12
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a85a:	b480      	push	{r7}
 800a85c:	b083      	sub	sp, #12
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a862:	bf00      	nop
 800a864:	370c      	adds	r7, #12
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr

0800a86e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a86e:	b480      	push	{r7}
 800a870:	b085      	sub	sp, #20
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d101      	bne.n	800a884 <HAL_UARTEx_DisableFifoMode+0x16>
 800a880:	2302      	movs	r3, #2
 800a882:	e027      	b.n	800a8d4 <HAL_UARTEx_DisableFifoMode+0x66>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2201      	movs	r2, #1
 800a888:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2224      	movs	r2, #36	@ 0x24
 800a890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f022 0201 	bic.w	r2, r2, #1
 800a8aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a8b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2220      	movs	r2, #32
 800a8c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3714      	adds	r7, #20
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d101      	bne.n	800a8f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a8f4:	2302      	movs	r3, #2
 800a8f6:	e02d      	b.n	800a954 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2224      	movs	r2, #36	@ 0x24
 800a904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f022 0201 	bic.w	r2, r2, #1
 800a91e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	683a      	ldr	r2, [r7, #0]
 800a930:	430a      	orrs	r2, r1
 800a932:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 f84f 	bl	800a9d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	68fa      	ldr	r2, [r7, #12]
 800a940:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2220      	movs	r2, #32
 800a946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d101      	bne.n	800a974 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a970:	2302      	movs	r3, #2
 800a972:	e02d      	b.n	800a9d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2201      	movs	r2, #1
 800a978:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2224      	movs	r2, #36	@ 0x24
 800a980:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f022 0201 	bic.w	r2, r2, #1
 800a99a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	689b      	ldr	r3, [r3, #8]
 800a9a2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	683a      	ldr	r2, [r7, #0]
 800a9ac:	430a      	orrs	r2, r1
 800a9ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 f811 	bl	800a9d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	68fa      	ldr	r2, [r7, #12]
 800a9bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2220      	movs	r2, #32
 800a9c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a9ce:	2300      	movs	r3, #0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3710      	adds	r7, #16
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b085      	sub	sp, #20
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d108      	bne.n	800a9fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a9f8:	e031      	b.n	800aa5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a9fa:	2310      	movs	r3, #16
 800a9fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a9fe:	2310      	movs	r3, #16
 800aa00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	0e5b      	lsrs	r3, r3, #25
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	f003 0307 	and.w	r3, r3, #7
 800aa10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	689b      	ldr	r3, [r3, #8]
 800aa18:	0f5b      	lsrs	r3, r3, #29
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	f003 0307 	and.w	r3, r3, #7
 800aa20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa22:	7bbb      	ldrb	r3, [r7, #14]
 800aa24:	7b3a      	ldrb	r2, [r7, #12]
 800aa26:	4911      	ldr	r1, [pc, #68]	@ (800aa6c <UARTEx_SetNbDataToProcess+0x94>)
 800aa28:	5c8a      	ldrb	r2, [r1, r2]
 800aa2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa2e:	7b3a      	ldrb	r2, [r7, #12]
 800aa30:	490f      	ldr	r1, [pc, #60]	@ (800aa70 <UARTEx_SetNbDataToProcess+0x98>)
 800aa32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa34:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa40:	7bfb      	ldrb	r3, [r7, #15]
 800aa42:	7b7a      	ldrb	r2, [r7, #13]
 800aa44:	4909      	ldr	r1, [pc, #36]	@ (800aa6c <UARTEx_SetNbDataToProcess+0x94>)
 800aa46:	5c8a      	ldrb	r2, [r1, r2]
 800aa48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa4c:	7b7a      	ldrb	r2, [r7, #13]
 800aa4e:	4908      	ldr	r1, [pc, #32]	@ (800aa70 <UARTEx_SetNbDataToProcess+0x98>)
 800aa50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa52:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa56:	b29a      	uxth	r2, r3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aa5e:	bf00      	nop
 800aa60:	3714      	adds	r7, #20
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	0800d94c 	.word	0x0800d94c
 800aa70:	0800d954 	.word	0x0800d954

0800aa74 <malloc>:
 800aa74:	4b02      	ldr	r3, [pc, #8]	@ (800aa80 <malloc+0xc>)
 800aa76:	4601      	mov	r1, r0
 800aa78:	6818      	ldr	r0, [r3, #0]
 800aa7a:	f000 b825 	b.w	800aac8 <_malloc_r>
 800aa7e:	bf00      	nop
 800aa80:	24000120 	.word	0x24000120

0800aa84 <sbrk_aligned>:
 800aa84:	b570      	push	{r4, r5, r6, lr}
 800aa86:	4e0f      	ldr	r6, [pc, #60]	@ (800aac4 <sbrk_aligned+0x40>)
 800aa88:	460c      	mov	r4, r1
 800aa8a:	6831      	ldr	r1, [r6, #0]
 800aa8c:	4605      	mov	r5, r0
 800aa8e:	b911      	cbnz	r1, 800aa96 <sbrk_aligned+0x12>
 800aa90:	f000 ff76 	bl	800b980 <_sbrk_r>
 800aa94:	6030      	str	r0, [r6, #0]
 800aa96:	4621      	mov	r1, r4
 800aa98:	4628      	mov	r0, r5
 800aa9a:	f000 ff71 	bl	800b980 <_sbrk_r>
 800aa9e:	1c43      	adds	r3, r0, #1
 800aaa0:	d103      	bne.n	800aaaa <sbrk_aligned+0x26>
 800aaa2:	f04f 34ff 	mov.w	r4, #4294967295
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	bd70      	pop	{r4, r5, r6, pc}
 800aaaa:	1cc4      	adds	r4, r0, #3
 800aaac:	f024 0403 	bic.w	r4, r4, #3
 800aab0:	42a0      	cmp	r0, r4
 800aab2:	d0f8      	beq.n	800aaa6 <sbrk_aligned+0x22>
 800aab4:	1a21      	subs	r1, r4, r0
 800aab6:	4628      	mov	r0, r5
 800aab8:	f000 ff62 	bl	800b980 <_sbrk_r>
 800aabc:	3001      	adds	r0, #1
 800aabe:	d1f2      	bne.n	800aaa6 <sbrk_aligned+0x22>
 800aac0:	e7ef      	b.n	800aaa2 <sbrk_aligned+0x1e>
 800aac2:	bf00      	nop
 800aac4:	24000570 	.word	0x24000570

0800aac8 <_malloc_r>:
 800aac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aacc:	1ccd      	adds	r5, r1, #3
 800aace:	f025 0503 	bic.w	r5, r5, #3
 800aad2:	3508      	adds	r5, #8
 800aad4:	2d0c      	cmp	r5, #12
 800aad6:	bf38      	it	cc
 800aad8:	250c      	movcc	r5, #12
 800aada:	2d00      	cmp	r5, #0
 800aadc:	4606      	mov	r6, r0
 800aade:	db01      	blt.n	800aae4 <_malloc_r+0x1c>
 800aae0:	42a9      	cmp	r1, r5
 800aae2:	d904      	bls.n	800aaee <_malloc_r+0x26>
 800aae4:	230c      	movs	r3, #12
 800aae6:	6033      	str	r3, [r6, #0]
 800aae8:	2000      	movs	r0, #0
 800aaea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800abc4 <_malloc_r+0xfc>
 800aaf2:	f000 f869 	bl	800abc8 <__malloc_lock>
 800aaf6:	f8d8 3000 	ldr.w	r3, [r8]
 800aafa:	461c      	mov	r4, r3
 800aafc:	bb44      	cbnz	r4, 800ab50 <_malloc_r+0x88>
 800aafe:	4629      	mov	r1, r5
 800ab00:	4630      	mov	r0, r6
 800ab02:	f7ff ffbf 	bl	800aa84 <sbrk_aligned>
 800ab06:	1c43      	adds	r3, r0, #1
 800ab08:	4604      	mov	r4, r0
 800ab0a:	d158      	bne.n	800abbe <_malloc_r+0xf6>
 800ab0c:	f8d8 4000 	ldr.w	r4, [r8]
 800ab10:	4627      	mov	r7, r4
 800ab12:	2f00      	cmp	r7, #0
 800ab14:	d143      	bne.n	800ab9e <_malloc_r+0xd6>
 800ab16:	2c00      	cmp	r4, #0
 800ab18:	d04b      	beq.n	800abb2 <_malloc_r+0xea>
 800ab1a:	6823      	ldr	r3, [r4, #0]
 800ab1c:	4639      	mov	r1, r7
 800ab1e:	4630      	mov	r0, r6
 800ab20:	eb04 0903 	add.w	r9, r4, r3
 800ab24:	f000 ff2c 	bl	800b980 <_sbrk_r>
 800ab28:	4581      	cmp	r9, r0
 800ab2a:	d142      	bne.n	800abb2 <_malloc_r+0xea>
 800ab2c:	6821      	ldr	r1, [r4, #0]
 800ab2e:	1a6d      	subs	r5, r5, r1
 800ab30:	4629      	mov	r1, r5
 800ab32:	4630      	mov	r0, r6
 800ab34:	f7ff ffa6 	bl	800aa84 <sbrk_aligned>
 800ab38:	3001      	adds	r0, #1
 800ab3a:	d03a      	beq.n	800abb2 <_malloc_r+0xea>
 800ab3c:	6823      	ldr	r3, [r4, #0]
 800ab3e:	442b      	add	r3, r5
 800ab40:	6023      	str	r3, [r4, #0]
 800ab42:	f8d8 3000 	ldr.w	r3, [r8]
 800ab46:	685a      	ldr	r2, [r3, #4]
 800ab48:	bb62      	cbnz	r2, 800aba4 <_malloc_r+0xdc>
 800ab4a:	f8c8 7000 	str.w	r7, [r8]
 800ab4e:	e00f      	b.n	800ab70 <_malloc_r+0xa8>
 800ab50:	6822      	ldr	r2, [r4, #0]
 800ab52:	1b52      	subs	r2, r2, r5
 800ab54:	d420      	bmi.n	800ab98 <_malloc_r+0xd0>
 800ab56:	2a0b      	cmp	r2, #11
 800ab58:	d917      	bls.n	800ab8a <_malloc_r+0xc2>
 800ab5a:	1961      	adds	r1, r4, r5
 800ab5c:	42a3      	cmp	r3, r4
 800ab5e:	6025      	str	r5, [r4, #0]
 800ab60:	bf18      	it	ne
 800ab62:	6059      	strne	r1, [r3, #4]
 800ab64:	6863      	ldr	r3, [r4, #4]
 800ab66:	bf08      	it	eq
 800ab68:	f8c8 1000 	streq.w	r1, [r8]
 800ab6c:	5162      	str	r2, [r4, r5]
 800ab6e:	604b      	str	r3, [r1, #4]
 800ab70:	4630      	mov	r0, r6
 800ab72:	f000 f82f 	bl	800abd4 <__malloc_unlock>
 800ab76:	f104 000b 	add.w	r0, r4, #11
 800ab7a:	1d23      	adds	r3, r4, #4
 800ab7c:	f020 0007 	bic.w	r0, r0, #7
 800ab80:	1ac2      	subs	r2, r0, r3
 800ab82:	bf1c      	itt	ne
 800ab84:	1a1b      	subne	r3, r3, r0
 800ab86:	50a3      	strne	r3, [r4, r2]
 800ab88:	e7af      	b.n	800aaea <_malloc_r+0x22>
 800ab8a:	6862      	ldr	r2, [r4, #4]
 800ab8c:	42a3      	cmp	r3, r4
 800ab8e:	bf0c      	ite	eq
 800ab90:	f8c8 2000 	streq.w	r2, [r8]
 800ab94:	605a      	strne	r2, [r3, #4]
 800ab96:	e7eb      	b.n	800ab70 <_malloc_r+0xa8>
 800ab98:	4623      	mov	r3, r4
 800ab9a:	6864      	ldr	r4, [r4, #4]
 800ab9c:	e7ae      	b.n	800aafc <_malloc_r+0x34>
 800ab9e:	463c      	mov	r4, r7
 800aba0:	687f      	ldr	r7, [r7, #4]
 800aba2:	e7b6      	b.n	800ab12 <_malloc_r+0x4a>
 800aba4:	461a      	mov	r2, r3
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	42a3      	cmp	r3, r4
 800abaa:	d1fb      	bne.n	800aba4 <_malloc_r+0xdc>
 800abac:	2300      	movs	r3, #0
 800abae:	6053      	str	r3, [r2, #4]
 800abb0:	e7de      	b.n	800ab70 <_malloc_r+0xa8>
 800abb2:	230c      	movs	r3, #12
 800abb4:	6033      	str	r3, [r6, #0]
 800abb6:	4630      	mov	r0, r6
 800abb8:	f000 f80c 	bl	800abd4 <__malloc_unlock>
 800abbc:	e794      	b.n	800aae8 <_malloc_r+0x20>
 800abbe:	6005      	str	r5, [r0, #0]
 800abc0:	e7d6      	b.n	800ab70 <_malloc_r+0xa8>
 800abc2:	bf00      	nop
 800abc4:	24000574 	.word	0x24000574

0800abc8 <__malloc_lock>:
 800abc8:	4801      	ldr	r0, [pc, #4]	@ (800abd0 <__malloc_lock+0x8>)
 800abca:	f000 bf26 	b.w	800ba1a <__retarget_lock_acquire_recursive>
 800abce:	bf00      	nop
 800abd0:	240006b8 	.word	0x240006b8

0800abd4 <__malloc_unlock>:
 800abd4:	4801      	ldr	r0, [pc, #4]	@ (800abdc <__malloc_unlock+0x8>)
 800abd6:	f000 bf21 	b.w	800ba1c <__retarget_lock_release_recursive>
 800abda:	bf00      	nop
 800abdc:	240006b8 	.word	0x240006b8

0800abe0 <__cvt>:
 800abe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abe2:	ed2d 8b02 	vpush	{d8}
 800abe6:	eeb0 8b40 	vmov.f64	d8, d0
 800abea:	b085      	sub	sp, #20
 800abec:	4617      	mov	r7, r2
 800abee:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800abf0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800abf2:	ee18 2a90 	vmov	r2, s17
 800abf6:	f025 0520 	bic.w	r5, r5, #32
 800abfa:	2a00      	cmp	r2, #0
 800abfc:	bfb6      	itet	lt
 800abfe:	222d      	movlt	r2, #45	@ 0x2d
 800ac00:	2200      	movge	r2, #0
 800ac02:	eeb1 8b40 	vneglt.f64	d8, d0
 800ac06:	2d46      	cmp	r5, #70	@ 0x46
 800ac08:	460c      	mov	r4, r1
 800ac0a:	701a      	strb	r2, [r3, #0]
 800ac0c:	d004      	beq.n	800ac18 <__cvt+0x38>
 800ac0e:	2d45      	cmp	r5, #69	@ 0x45
 800ac10:	d100      	bne.n	800ac14 <__cvt+0x34>
 800ac12:	3401      	adds	r4, #1
 800ac14:	2102      	movs	r1, #2
 800ac16:	e000      	b.n	800ac1a <__cvt+0x3a>
 800ac18:	2103      	movs	r1, #3
 800ac1a:	ab03      	add	r3, sp, #12
 800ac1c:	9301      	str	r3, [sp, #4]
 800ac1e:	ab02      	add	r3, sp, #8
 800ac20:	9300      	str	r3, [sp, #0]
 800ac22:	4622      	mov	r2, r4
 800ac24:	4633      	mov	r3, r6
 800ac26:	eeb0 0b48 	vmov.f64	d0, d8
 800ac2a:	f000 ff81 	bl	800bb30 <_dtoa_r>
 800ac2e:	2d47      	cmp	r5, #71	@ 0x47
 800ac30:	d114      	bne.n	800ac5c <__cvt+0x7c>
 800ac32:	07fb      	lsls	r3, r7, #31
 800ac34:	d50a      	bpl.n	800ac4c <__cvt+0x6c>
 800ac36:	1902      	adds	r2, r0, r4
 800ac38:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ac3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac40:	bf08      	it	eq
 800ac42:	9203      	streq	r2, [sp, #12]
 800ac44:	2130      	movs	r1, #48	@ 0x30
 800ac46:	9b03      	ldr	r3, [sp, #12]
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d319      	bcc.n	800ac80 <__cvt+0xa0>
 800ac4c:	9b03      	ldr	r3, [sp, #12]
 800ac4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac50:	1a1b      	subs	r3, r3, r0
 800ac52:	6013      	str	r3, [r2, #0]
 800ac54:	b005      	add	sp, #20
 800ac56:	ecbd 8b02 	vpop	{d8}
 800ac5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac5c:	2d46      	cmp	r5, #70	@ 0x46
 800ac5e:	eb00 0204 	add.w	r2, r0, r4
 800ac62:	d1e9      	bne.n	800ac38 <__cvt+0x58>
 800ac64:	7803      	ldrb	r3, [r0, #0]
 800ac66:	2b30      	cmp	r3, #48	@ 0x30
 800ac68:	d107      	bne.n	800ac7a <__cvt+0x9a>
 800ac6a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ac6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac72:	bf1c      	itt	ne
 800ac74:	f1c4 0401 	rsbne	r4, r4, #1
 800ac78:	6034      	strne	r4, [r6, #0]
 800ac7a:	6833      	ldr	r3, [r6, #0]
 800ac7c:	441a      	add	r2, r3
 800ac7e:	e7db      	b.n	800ac38 <__cvt+0x58>
 800ac80:	1c5c      	adds	r4, r3, #1
 800ac82:	9403      	str	r4, [sp, #12]
 800ac84:	7019      	strb	r1, [r3, #0]
 800ac86:	e7de      	b.n	800ac46 <__cvt+0x66>

0800ac88 <__exponent>:
 800ac88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac8a:	2900      	cmp	r1, #0
 800ac8c:	bfba      	itte	lt
 800ac8e:	4249      	neglt	r1, r1
 800ac90:	232d      	movlt	r3, #45	@ 0x2d
 800ac92:	232b      	movge	r3, #43	@ 0x2b
 800ac94:	2909      	cmp	r1, #9
 800ac96:	7002      	strb	r2, [r0, #0]
 800ac98:	7043      	strb	r3, [r0, #1]
 800ac9a:	dd29      	ble.n	800acf0 <__exponent+0x68>
 800ac9c:	f10d 0307 	add.w	r3, sp, #7
 800aca0:	461d      	mov	r5, r3
 800aca2:	270a      	movs	r7, #10
 800aca4:	461a      	mov	r2, r3
 800aca6:	fbb1 f6f7 	udiv	r6, r1, r7
 800acaa:	fb07 1416 	mls	r4, r7, r6, r1
 800acae:	3430      	adds	r4, #48	@ 0x30
 800acb0:	f802 4c01 	strb.w	r4, [r2, #-1]
 800acb4:	460c      	mov	r4, r1
 800acb6:	2c63      	cmp	r4, #99	@ 0x63
 800acb8:	f103 33ff 	add.w	r3, r3, #4294967295
 800acbc:	4631      	mov	r1, r6
 800acbe:	dcf1      	bgt.n	800aca4 <__exponent+0x1c>
 800acc0:	3130      	adds	r1, #48	@ 0x30
 800acc2:	1e94      	subs	r4, r2, #2
 800acc4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800acc8:	1c41      	adds	r1, r0, #1
 800acca:	4623      	mov	r3, r4
 800accc:	42ab      	cmp	r3, r5
 800acce:	d30a      	bcc.n	800ace6 <__exponent+0x5e>
 800acd0:	f10d 0309 	add.w	r3, sp, #9
 800acd4:	1a9b      	subs	r3, r3, r2
 800acd6:	42ac      	cmp	r4, r5
 800acd8:	bf88      	it	hi
 800acda:	2300      	movhi	r3, #0
 800acdc:	3302      	adds	r3, #2
 800acde:	4403      	add	r3, r0
 800ace0:	1a18      	subs	r0, r3, r0
 800ace2:	b003      	add	sp, #12
 800ace4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ace6:	f813 6b01 	ldrb.w	r6, [r3], #1
 800acea:	f801 6f01 	strb.w	r6, [r1, #1]!
 800acee:	e7ed      	b.n	800accc <__exponent+0x44>
 800acf0:	2330      	movs	r3, #48	@ 0x30
 800acf2:	3130      	adds	r1, #48	@ 0x30
 800acf4:	7083      	strb	r3, [r0, #2]
 800acf6:	70c1      	strb	r1, [r0, #3]
 800acf8:	1d03      	adds	r3, r0, #4
 800acfa:	e7f1      	b.n	800ace0 <__exponent+0x58>
 800acfc:	0000      	movs	r0, r0
	...

0800ad00 <_printf_float>:
 800ad00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad04:	b08d      	sub	sp, #52	@ 0x34
 800ad06:	460c      	mov	r4, r1
 800ad08:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ad0c:	4616      	mov	r6, r2
 800ad0e:	461f      	mov	r7, r3
 800ad10:	4605      	mov	r5, r0
 800ad12:	f000 fdfd 	bl	800b910 <_localeconv_r>
 800ad16:	f8d0 b000 	ldr.w	fp, [r0]
 800ad1a:	4658      	mov	r0, fp
 800ad1c:	f7f5 fb48 	bl	80003b0 <strlen>
 800ad20:	2300      	movs	r3, #0
 800ad22:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad24:	f8d8 3000 	ldr.w	r3, [r8]
 800ad28:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ad2c:	6822      	ldr	r2, [r4, #0]
 800ad2e:	9005      	str	r0, [sp, #20]
 800ad30:	3307      	adds	r3, #7
 800ad32:	f023 0307 	bic.w	r3, r3, #7
 800ad36:	f103 0108 	add.w	r1, r3, #8
 800ad3a:	f8c8 1000 	str.w	r1, [r8]
 800ad3e:	ed93 0b00 	vldr	d0, [r3]
 800ad42:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800afa0 <_printf_float+0x2a0>
 800ad46:	eeb0 7bc0 	vabs.f64	d7, d0
 800ad4a:	eeb4 7b46 	vcmp.f64	d7, d6
 800ad4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad52:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800ad56:	dd24      	ble.n	800ada2 <_printf_float+0xa2>
 800ad58:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ad5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad60:	d502      	bpl.n	800ad68 <_printf_float+0x68>
 800ad62:	232d      	movs	r3, #45	@ 0x2d
 800ad64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad68:	498f      	ldr	r1, [pc, #572]	@ (800afa8 <_printf_float+0x2a8>)
 800ad6a:	4b90      	ldr	r3, [pc, #576]	@ (800afac <_printf_float+0x2ac>)
 800ad6c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800ad70:	bf94      	ite	ls
 800ad72:	4688      	movls	r8, r1
 800ad74:	4698      	movhi	r8, r3
 800ad76:	f022 0204 	bic.w	r2, r2, #4
 800ad7a:	2303      	movs	r3, #3
 800ad7c:	6123      	str	r3, [r4, #16]
 800ad7e:	6022      	str	r2, [r4, #0]
 800ad80:	f04f 0a00 	mov.w	sl, #0
 800ad84:	9700      	str	r7, [sp, #0]
 800ad86:	4633      	mov	r3, r6
 800ad88:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ad8a:	4621      	mov	r1, r4
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	f000 f9d1 	bl	800b134 <_printf_common>
 800ad92:	3001      	adds	r0, #1
 800ad94:	f040 8089 	bne.w	800aeaa <_printf_float+0x1aa>
 800ad98:	f04f 30ff 	mov.w	r0, #4294967295
 800ad9c:	b00d      	add	sp, #52	@ 0x34
 800ad9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada2:	eeb4 0b40 	vcmp.f64	d0, d0
 800ada6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adaa:	d709      	bvc.n	800adc0 <_printf_float+0xc0>
 800adac:	ee10 3a90 	vmov	r3, s1
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	bfbc      	itt	lt
 800adb4:	232d      	movlt	r3, #45	@ 0x2d
 800adb6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800adba:	497d      	ldr	r1, [pc, #500]	@ (800afb0 <_printf_float+0x2b0>)
 800adbc:	4b7d      	ldr	r3, [pc, #500]	@ (800afb4 <_printf_float+0x2b4>)
 800adbe:	e7d5      	b.n	800ad6c <_printf_float+0x6c>
 800adc0:	6863      	ldr	r3, [r4, #4]
 800adc2:	1c59      	adds	r1, r3, #1
 800adc4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800adc8:	d139      	bne.n	800ae3e <_printf_float+0x13e>
 800adca:	2306      	movs	r3, #6
 800adcc:	6063      	str	r3, [r4, #4]
 800adce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800add2:	2300      	movs	r3, #0
 800add4:	6022      	str	r2, [r4, #0]
 800add6:	9303      	str	r3, [sp, #12]
 800add8:	ab0a      	add	r3, sp, #40	@ 0x28
 800adda:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800adde:	ab09      	add	r3, sp, #36	@ 0x24
 800ade0:	9300      	str	r3, [sp, #0]
 800ade2:	6861      	ldr	r1, [r4, #4]
 800ade4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ade8:	4628      	mov	r0, r5
 800adea:	f7ff fef9 	bl	800abe0 <__cvt>
 800adee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800adf2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800adf4:	4680      	mov	r8, r0
 800adf6:	d129      	bne.n	800ae4c <_printf_float+0x14c>
 800adf8:	1cc8      	adds	r0, r1, #3
 800adfa:	db02      	blt.n	800ae02 <_printf_float+0x102>
 800adfc:	6863      	ldr	r3, [r4, #4]
 800adfe:	4299      	cmp	r1, r3
 800ae00:	dd41      	ble.n	800ae86 <_printf_float+0x186>
 800ae02:	f1a9 0902 	sub.w	r9, r9, #2
 800ae06:	fa5f f989 	uxtb.w	r9, r9
 800ae0a:	3901      	subs	r1, #1
 800ae0c:	464a      	mov	r2, r9
 800ae0e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ae12:	9109      	str	r1, [sp, #36]	@ 0x24
 800ae14:	f7ff ff38 	bl	800ac88 <__exponent>
 800ae18:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ae1a:	1813      	adds	r3, r2, r0
 800ae1c:	2a01      	cmp	r2, #1
 800ae1e:	4682      	mov	sl, r0
 800ae20:	6123      	str	r3, [r4, #16]
 800ae22:	dc02      	bgt.n	800ae2a <_printf_float+0x12a>
 800ae24:	6822      	ldr	r2, [r4, #0]
 800ae26:	07d2      	lsls	r2, r2, #31
 800ae28:	d501      	bpl.n	800ae2e <_printf_float+0x12e>
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	6123      	str	r3, [r4, #16]
 800ae2e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d0a6      	beq.n	800ad84 <_printf_float+0x84>
 800ae36:	232d      	movs	r3, #45	@ 0x2d
 800ae38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae3c:	e7a2      	b.n	800ad84 <_printf_float+0x84>
 800ae3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ae42:	d1c4      	bne.n	800adce <_printf_float+0xce>
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d1c2      	bne.n	800adce <_printf_float+0xce>
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e7bf      	b.n	800adcc <_printf_float+0xcc>
 800ae4c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800ae50:	d9db      	bls.n	800ae0a <_printf_float+0x10a>
 800ae52:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800ae56:	d118      	bne.n	800ae8a <_printf_float+0x18a>
 800ae58:	2900      	cmp	r1, #0
 800ae5a:	6863      	ldr	r3, [r4, #4]
 800ae5c:	dd0b      	ble.n	800ae76 <_printf_float+0x176>
 800ae5e:	6121      	str	r1, [r4, #16]
 800ae60:	b913      	cbnz	r3, 800ae68 <_printf_float+0x168>
 800ae62:	6822      	ldr	r2, [r4, #0]
 800ae64:	07d0      	lsls	r0, r2, #31
 800ae66:	d502      	bpl.n	800ae6e <_printf_float+0x16e>
 800ae68:	3301      	adds	r3, #1
 800ae6a:	440b      	add	r3, r1
 800ae6c:	6123      	str	r3, [r4, #16]
 800ae6e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ae70:	f04f 0a00 	mov.w	sl, #0
 800ae74:	e7db      	b.n	800ae2e <_printf_float+0x12e>
 800ae76:	b913      	cbnz	r3, 800ae7e <_printf_float+0x17e>
 800ae78:	6822      	ldr	r2, [r4, #0]
 800ae7a:	07d2      	lsls	r2, r2, #31
 800ae7c:	d501      	bpl.n	800ae82 <_printf_float+0x182>
 800ae7e:	3302      	adds	r3, #2
 800ae80:	e7f4      	b.n	800ae6c <_printf_float+0x16c>
 800ae82:	2301      	movs	r3, #1
 800ae84:	e7f2      	b.n	800ae6c <_printf_float+0x16c>
 800ae86:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800ae8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae8c:	4299      	cmp	r1, r3
 800ae8e:	db05      	blt.n	800ae9c <_printf_float+0x19c>
 800ae90:	6823      	ldr	r3, [r4, #0]
 800ae92:	6121      	str	r1, [r4, #16]
 800ae94:	07d8      	lsls	r0, r3, #31
 800ae96:	d5ea      	bpl.n	800ae6e <_printf_float+0x16e>
 800ae98:	1c4b      	adds	r3, r1, #1
 800ae9a:	e7e7      	b.n	800ae6c <_printf_float+0x16c>
 800ae9c:	2900      	cmp	r1, #0
 800ae9e:	bfd4      	ite	le
 800aea0:	f1c1 0202 	rsble	r2, r1, #2
 800aea4:	2201      	movgt	r2, #1
 800aea6:	4413      	add	r3, r2
 800aea8:	e7e0      	b.n	800ae6c <_printf_float+0x16c>
 800aeaa:	6823      	ldr	r3, [r4, #0]
 800aeac:	055a      	lsls	r2, r3, #21
 800aeae:	d407      	bmi.n	800aec0 <_printf_float+0x1c0>
 800aeb0:	6923      	ldr	r3, [r4, #16]
 800aeb2:	4642      	mov	r2, r8
 800aeb4:	4631      	mov	r1, r6
 800aeb6:	4628      	mov	r0, r5
 800aeb8:	47b8      	blx	r7
 800aeba:	3001      	adds	r0, #1
 800aebc:	d12a      	bne.n	800af14 <_printf_float+0x214>
 800aebe:	e76b      	b.n	800ad98 <_printf_float+0x98>
 800aec0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800aec4:	f240 80e0 	bls.w	800b088 <_printf_float+0x388>
 800aec8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800aecc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aed4:	d133      	bne.n	800af3e <_printf_float+0x23e>
 800aed6:	4a38      	ldr	r2, [pc, #224]	@ (800afb8 <_printf_float+0x2b8>)
 800aed8:	2301      	movs	r3, #1
 800aeda:	4631      	mov	r1, r6
 800aedc:	4628      	mov	r0, r5
 800aede:	47b8      	blx	r7
 800aee0:	3001      	adds	r0, #1
 800aee2:	f43f af59 	beq.w	800ad98 <_printf_float+0x98>
 800aee6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800aeea:	4543      	cmp	r3, r8
 800aeec:	db02      	blt.n	800aef4 <_printf_float+0x1f4>
 800aeee:	6823      	ldr	r3, [r4, #0]
 800aef0:	07d8      	lsls	r0, r3, #31
 800aef2:	d50f      	bpl.n	800af14 <_printf_float+0x214>
 800aef4:	9b05      	ldr	r3, [sp, #20]
 800aef6:	465a      	mov	r2, fp
 800aef8:	4631      	mov	r1, r6
 800aefa:	4628      	mov	r0, r5
 800aefc:	47b8      	blx	r7
 800aefe:	3001      	adds	r0, #1
 800af00:	f43f af4a 	beq.w	800ad98 <_printf_float+0x98>
 800af04:	f04f 0900 	mov.w	r9, #0
 800af08:	f108 38ff 	add.w	r8, r8, #4294967295
 800af0c:	f104 0a1a 	add.w	sl, r4, #26
 800af10:	45c8      	cmp	r8, r9
 800af12:	dc09      	bgt.n	800af28 <_printf_float+0x228>
 800af14:	6823      	ldr	r3, [r4, #0]
 800af16:	079b      	lsls	r3, r3, #30
 800af18:	f100 8107 	bmi.w	800b12a <_printf_float+0x42a>
 800af1c:	68e0      	ldr	r0, [r4, #12]
 800af1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af20:	4298      	cmp	r0, r3
 800af22:	bfb8      	it	lt
 800af24:	4618      	movlt	r0, r3
 800af26:	e739      	b.n	800ad9c <_printf_float+0x9c>
 800af28:	2301      	movs	r3, #1
 800af2a:	4652      	mov	r2, sl
 800af2c:	4631      	mov	r1, r6
 800af2e:	4628      	mov	r0, r5
 800af30:	47b8      	blx	r7
 800af32:	3001      	adds	r0, #1
 800af34:	f43f af30 	beq.w	800ad98 <_printf_float+0x98>
 800af38:	f109 0901 	add.w	r9, r9, #1
 800af3c:	e7e8      	b.n	800af10 <_printf_float+0x210>
 800af3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af40:	2b00      	cmp	r3, #0
 800af42:	dc3b      	bgt.n	800afbc <_printf_float+0x2bc>
 800af44:	4a1c      	ldr	r2, [pc, #112]	@ (800afb8 <_printf_float+0x2b8>)
 800af46:	2301      	movs	r3, #1
 800af48:	4631      	mov	r1, r6
 800af4a:	4628      	mov	r0, r5
 800af4c:	47b8      	blx	r7
 800af4e:	3001      	adds	r0, #1
 800af50:	f43f af22 	beq.w	800ad98 <_printf_float+0x98>
 800af54:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800af58:	ea59 0303 	orrs.w	r3, r9, r3
 800af5c:	d102      	bne.n	800af64 <_printf_float+0x264>
 800af5e:	6823      	ldr	r3, [r4, #0]
 800af60:	07d9      	lsls	r1, r3, #31
 800af62:	d5d7      	bpl.n	800af14 <_printf_float+0x214>
 800af64:	9b05      	ldr	r3, [sp, #20]
 800af66:	465a      	mov	r2, fp
 800af68:	4631      	mov	r1, r6
 800af6a:	4628      	mov	r0, r5
 800af6c:	47b8      	blx	r7
 800af6e:	3001      	adds	r0, #1
 800af70:	f43f af12 	beq.w	800ad98 <_printf_float+0x98>
 800af74:	f04f 0a00 	mov.w	sl, #0
 800af78:	f104 0b1a 	add.w	fp, r4, #26
 800af7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af7e:	425b      	negs	r3, r3
 800af80:	4553      	cmp	r3, sl
 800af82:	dc01      	bgt.n	800af88 <_printf_float+0x288>
 800af84:	464b      	mov	r3, r9
 800af86:	e794      	b.n	800aeb2 <_printf_float+0x1b2>
 800af88:	2301      	movs	r3, #1
 800af8a:	465a      	mov	r2, fp
 800af8c:	4631      	mov	r1, r6
 800af8e:	4628      	mov	r0, r5
 800af90:	47b8      	blx	r7
 800af92:	3001      	adds	r0, #1
 800af94:	f43f af00 	beq.w	800ad98 <_printf_float+0x98>
 800af98:	f10a 0a01 	add.w	sl, sl, #1
 800af9c:	e7ee      	b.n	800af7c <_printf_float+0x27c>
 800af9e:	bf00      	nop
 800afa0:	ffffffff 	.word	0xffffffff
 800afa4:	7fefffff 	.word	0x7fefffff
 800afa8:	0800d95c 	.word	0x0800d95c
 800afac:	0800d960 	.word	0x0800d960
 800afb0:	0800d964 	.word	0x0800d964
 800afb4:	0800d968 	.word	0x0800d968
 800afb8:	0800d96c 	.word	0x0800d96c
 800afbc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800afbe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800afc2:	4553      	cmp	r3, sl
 800afc4:	bfa8      	it	ge
 800afc6:	4653      	movge	r3, sl
 800afc8:	2b00      	cmp	r3, #0
 800afca:	4699      	mov	r9, r3
 800afcc:	dc37      	bgt.n	800b03e <_printf_float+0x33e>
 800afce:	2300      	movs	r3, #0
 800afd0:	9307      	str	r3, [sp, #28]
 800afd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afd6:	f104 021a 	add.w	r2, r4, #26
 800afda:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800afdc:	9907      	ldr	r1, [sp, #28]
 800afde:	9306      	str	r3, [sp, #24]
 800afe0:	eba3 0309 	sub.w	r3, r3, r9
 800afe4:	428b      	cmp	r3, r1
 800afe6:	dc31      	bgt.n	800b04c <_printf_float+0x34c>
 800afe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afea:	459a      	cmp	sl, r3
 800afec:	dc3b      	bgt.n	800b066 <_printf_float+0x366>
 800afee:	6823      	ldr	r3, [r4, #0]
 800aff0:	07da      	lsls	r2, r3, #31
 800aff2:	d438      	bmi.n	800b066 <_printf_float+0x366>
 800aff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aff6:	ebaa 0903 	sub.w	r9, sl, r3
 800affa:	9b06      	ldr	r3, [sp, #24]
 800affc:	ebaa 0303 	sub.w	r3, sl, r3
 800b000:	4599      	cmp	r9, r3
 800b002:	bfa8      	it	ge
 800b004:	4699      	movge	r9, r3
 800b006:	f1b9 0f00 	cmp.w	r9, #0
 800b00a:	dc34      	bgt.n	800b076 <_printf_float+0x376>
 800b00c:	f04f 0800 	mov.w	r8, #0
 800b010:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b014:	f104 0b1a 	add.w	fp, r4, #26
 800b018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b01a:	ebaa 0303 	sub.w	r3, sl, r3
 800b01e:	eba3 0309 	sub.w	r3, r3, r9
 800b022:	4543      	cmp	r3, r8
 800b024:	f77f af76 	ble.w	800af14 <_printf_float+0x214>
 800b028:	2301      	movs	r3, #1
 800b02a:	465a      	mov	r2, fp
 800b02c:	4631      	mov	r1, r6
 800b02e:	4628      	mov	r0, r5
 800b030:	47b8      	blx	r7
 800b032:	3001      	adds	r0, #1
 800b034:	f43f aeb0 	beq.w	800ad98 <_printf_float+0x98>
 800b038:	f108 0801 	add.w	r8, r8, #1
 800b03c:	e7ec      	b.n	800b018 <_printf_float+0x318>
 800b03e:	4642      	mov	r2, r8
 800b040:	4631      	mov	r1, r6
 800b042:	4628      	mov	r0, r5
 800b044:	47b8      	blx	r7
 800b046:	3001      	adds	r0, #1
 800b048:	d1c1      	bne.n	800afce <_printf_float+0x2ce>
 800b04a:	e6a5      	b.n	800ad98 <_printf_float+0x98>
 800b04c:	2301      	movs	r3, #1
 800b04e:	4631      	mov	r1, r6
 800b050:	4628      	mov	r0, r5
 800b052:	9206      	str	r2, [sp, #24]
 800b054:	47b8      	blx	r7
 800b056:	3001      	adds	r0, #1
 800b058:	f43f ae9e 	beq.w	800ad98 <_printf_float+0x98>
 800b05c:	9b07      	ldr	r3, [sp, #28]
 800b05e:	9a06      	ldr	r2, [sp, #24]
 800b060:	3301      	adds	r3, #1
 800b062:	9307      	str	r3, [sp, #28]
 800b064:	e7b9      	b.n	800afda <_printf_float+0x2da>
 800b066:	9b05      	ldr	r3, [sp, #20]
 800b068:	465a      	mov	r2, fp
 800b06a:	4631      	mov	r1, r6
 800b06c:	4628      	mov	r0, r5
 800b06e:	47b8      	blx	r7
 800b070:	3001      	adds	r0, #1
 800b072:	d1bf      	bne.n	800aff4 <_printf_float+0x2f4>
 800b074:	e690      	b.n	800ad98 <_printf_float+0x98>
 800b076:	9a06      	ldr	r2, [sp, #24]
 800b078:	464b      	mov	r3, r9
 800b07a:	4442      	add	r2, r8
 800b07c:	4631      	mov	r1, r6
 800b07e:	4628      	mov	r0, r5
 800b080:	47b8      	blx	r7
 800b082:	3001      	adds	r0, #1
 800b084:	d1c2      	bne.n	800b00c <_printf_float+0x30c>
 800b086:	e687      	b.n	800ad98 <_printf_float+0x98>
 800b088:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800b08c:	f1b9 0f01 	cmp.w	r9, #1
 800b090:	dc01      	bgt.n	800b096 <_printf_float+0x396>
 800b092:	07db      	lsls	r3, r3, #31
 800b094:	d536      	bpl.n	800b104 <_printf_float+0x404>
 800b096:	2301      	movs	r3, #1
 800b098:	4642      	mov	r2, r8
 800b09a:	4631      	mov	r1, r6
 800b09c:	4628      	mov	r0, r5
 800b09e:	47b8      	blx	r7
 800b0a0:	3001      	adds	r0, #1
 800b0a2:	f43f ae79 	beq.w	800ad98 <_printf_float+0x98>
 800b0a6:	9b05      	ldr	r3, [sp, #20]
 800b0a8:	465a      	mov	r2, fp
 800b0aa:	4631      	mov	r1, r6
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	47b8      	blx	r7
 800b0b0:	3001      	adds	r0, #1
 800b0b2:	f43f ae71 	beq.w	800ad98 <_printf_float+0x98>
 800b0b6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b0ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b0be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0c2:	f109 39ff 	add.w	r9, r9, #4294967295
 800b0c6:	d018      	beq.n	800b0fa <_printf_float+0x3fa>
 800b0c8:	464b      	mov	r3, r9
 800b0ca:	f108 0201 	add.w	r2, r8, #1
 800b0ce:	4631      	mov	r1, r6
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	47b8      	blx	r7
 800b0d4:	3001      	adds	r0, #1
 800b0d6:	d10c      	bne.n	800b0f2 <_printf_float+0x3f2>
 800b0d8:	e65e      	b.n	800ad98 <_printf_float+0x98>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	465a      	mov	r2, fp
 800b0de:	4631      	mov	r1, r6
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	47b8      	blx	r7
 800b0e4:	3001      	adds	r0, #1
 800b0e6:	f43f ae57 	beq.w	800ad98 <_printf_float+0x98>
 800b0ea:	f108 0801 	add.w	r8, r8, #1
 800b0ee:	45c8      	cmp	r8, r9
 800b0f0:	dbf3      	blt.n	800b0da <_printf_float+0x3da>
 800b0f2:	4653      	mov	r3, sl
 800b0f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b0f8:	e6dc      	b.n	800aeb4 <_printf_float+0x1b4>
 800b0fa:	f04f 0800 	mov.w	r8, #0
 800b0fe:	f104 0b1a 	add.w	fp, r4, #26
 800b102:	e7f4      	b.n	800b0ee <_printf_float+0x3ee>
 800b104:	2301      	movs	r3, #1
 800b106:	4642      	mov	r2, r8
 800b108:	e7e1      	b.n	800b0ce <_printf_float+0x3ce>
 800b10a:	2301      	movs	r3, #1
 800b10c:	464a      	mov	r2, r9
 800b10e:	4631      	mov	r1, r6
 800b110:	4628      	mov	r0, r5
 800b112:	47b8      	blx	r7
 800b114:	3001      	adds	r0, #1
 800b116:	f43f ae3f 	beq.w	800ad98 <_printf_float+0x98>
 800b11a:	f108 0801 	add.w	r8, r8, #1
 800b11e:	68e3      	ldr	r3, [r4, #12]
 800b120:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b122:	1a5b      	subs	r3, r3, r1
 800b124:	4543      	cmp	r3, r8
 800b126:	dcf0      	bgt.n	800b10a <_printf_float+0x40a>
 800b128:	e6f8      	b.n	800af1c <_printf_float+0x21c>
 800b12a:	f04f 0800 	mov.w	r8, #0
 800b12e:	f104 0919 	add.w	r9, r4, #25
 800b132:	e7f4      	b.n	800b11e <_printf_float+0x41e>

0800b134 <_printf_common>:
 800b134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b138:	4616      	mov	r6, r2
 800b13a:	4698      	mov	r8, r3
 800b13c:	688a      	ldr	r2, [r1, #8]
 800b13e:	690b      	ldr	r3, [r1, #16]
 800b140:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b144:	4293      	cmp	r3, r2
 800b146:	bfb8      	it	lt
 800b148:	4613      	movlt	r3, r2
 800b14a:	6033      	str	r3, [r6, #0]
 800b14c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b150:	4607      	mov	r7, r0
 800b152:	460c      	mov	r4, r1
 800b154:	b10a      	cbz	r2, 800b15a <_printf_common+0x26>
 800b156:	3301      	adds	r3, #1
 800b158:	6033      	str	r3, [r6, #0]
 800b15a:	6823      	ldr	r3, [r4, #0]
 800b15c:	0699      	lsls	r1, r3, #26
 800b15e:	bf42      	ittt	mi
 800b160:	6833      	ldrmi	r3, [r6, #0]
 800b162:	3302      	addmi	r3, #2
 800b164:	6033      	strmi	r3, [r6, #0]
 800b166:	6825      	ldr	r5, [r4, #0]
 800b168:	f015 0506 	ands.w	r5, r5, #6
 800b16c:	d106      	bne.n	800b17c <_printf_common+0x48>
 800b16e:	f104 0a19 	add.w	sl, r4, #25
 800b172:	68e3      	ldr	r3, [r4, #12]
 800b174:	6832      	ldr	r2, [r6, #0]
 800b176:	1a9b      	subs	r3, r3, r2
 800b178:	42ab      	cmp	r3, r5
 800b17a:	dc26      	bgt.n	800b1ca <_printf_common+0x96>
 800b17c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b180:	6822      	ldr	r2, [r4, #0]
 800b182:	3b00      	subs	r3, #0
 800b184:	bf18      	it	ne
 800b186:	2301      	movne	r3, #1
 800b188:	0692      	lsls	r2, r2, #26
 800b18a:	d42b      	bmi.n	800b1e4 <_printf_common+0xb0>
 800b18c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b190:	4641      	mov	r1, r8
 800b192:	4638      	mov	r0, r7
 800b194:	47c8      	blx	r9
 800b196:	3001      	adds	r0, #1
 800b198:	d01e      	beq.n	800b1d8 <_printf_common+0xa4>
 800b19a:	6823      	ldr	r3, [r4, #0]
 800b19c:	6922      	ldr	r2, [r4, #16]
 800b19e:	f003 0306 	and.w	r3, r3, #6
 800b1a2:	2b04      	cmp	r3, #4
 800b1a4:	bf02      	ittt	eq
 800b1a6:	68e5      	ldreq	r5, [r4, #12]
 800b1a8:	6833      	ldreq	r3, [r6, #0]
 800b1aa:	1aed      	subeq	r5, r5, r3
 800b1ac:	68a3      	ldr	r3, [r4, #8]
 800b1ae:	bf0c      	ite	eq
 800b1b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1b4:	2500      	movne	r5, #0
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	bfc4      	itt	gt
 800b1ba:	1a9b      	subgt	r3, r3, r2
 800b1bc:	18ed      	addgt	r5, r5, r3
 800b1be:	2600      	movs	r6, #0
 800b1c0:	341a      	adds	r4, #26
 800b1c2:	42b5      	cmp	r5, r6
 800b1c4:	d11a      	bne.n	800b1fc <_printf_common+0xc8>
 800b1c6:	2000      	movs	r0, #0
 800b1c8:	e008      	b.n	800b1dc <_printf_common+0xa8>
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	4652      	mov	r2, sl
 800b1ce:	4641      	mov	r1, r8
 800b1d0:	4638      	mov	r0, r7
 800b1d2:	47c8      	blx	r9
 800b1d4:	3001      	adds	r0, #1
 800b1d6:	d103      	bne.n	800b1e0 <_printf_common+0xac>
 800b1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1e0:	3501      	adds	r5, #1
 800b1e2:	e7c6      	b.n	800b172 <_printf_common+0x3e>
 800b1e4:	18e1      	adds	r1, r4, r3
 800b1e6:	1c5a      	adds	r2, r3, #1
 800b1e8:	2030      	movs	r0, #48	@ 0x30
 800b1ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b1ee:	4422      	add	r2, r4
 800b1f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b1f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b1f8:	3302      	adds	r3, #2
 800b1fa:	e7c7      	b.n	800b18c <_printf_common+0x58>
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	4622      	mov	r2, r4
 800b200:	4641      	mov	r1, r8
 800b202:	4638      	mov	r0, r7
 800b204:	47c8      	blx	r9
 800b206:	3001      	adds	r0, #1
 800b208:	d0e6      	beq.n	800b1d8 <_printf_common+0xa4>
 800b20a:	3601      	adds	r6, #1
 800b20c:	e7d9      	b.n	800b1c2 <_printf_common+0x8e>
	...

0800b210 <_printf_i>:
 800b210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b214:	7e0f      	ldrb	r7, [r1, #24]
 800b216:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b218:	2f78      	cmp	r7, #120	@ 0x78
 800b21a:	4691      	mov	r9, r2
 800b21c:	4680      	mov	r8, r0
 800b21e:	460c      	mov	r4, r1
 800b220:	469a      	mov	sl, r3
 800b222:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b226:	d807      	bhi.n	800b238 <_printf_i+0x28>
 800b228:	2f62      	cmp	r7, #98	@ 0x62
 800b22a:	d80a      	bhi.n	800b242 <_printf_i+0x32>
 800b22c:	2f00      	cmp	r7, #0
 800b22e:	f000 80d2 	beq.w	800b3d6 <_printf_i+0x1c6>
 800b232:	2f58      	cmp	r7, #88	@ 0x58
 800b234:	f000 80b9 	beq.w	800b3aa <_printf_i+0x19a>
 800b238:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b23c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b240:	e03a      	b.n	800b2b8 <_printf_i+0xa8>
 800b242:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b246:	2b15      	cmp	r3, #21
 800b248:	d8f6      	bhi.n	800b238 <_printf_i+0x28>
 800b24a:	a101      	add	r1, pc, #4	@ (adr r1, 800b250 <_printf_i+0x40>)
 800b24c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b250:	0800b2a9 	.word	0x0800b2a9
 800b254:	0800b2bd 	.word	0x0800b2bd
 800b258:	0800b239 	.word	0x0800b239
 800b25c:	0800b239 	.word	0x0800b239
 800b260:	0800b239 	.word	0x0800b239
 800b264:	0800b239 	.word	0x0800b239
 800b268:	0800b2bd 	.word	0x0800b2bd
 800b26c:	0800b239 	.word	0x0800b239
 800b270:	0800b239 	.word	0x0800b239
 800b274:	0800b239 	.word	0x0800b239
 800b278:	0800b239 	.word	0x0800b239
 800b27c:	0800b3bd 	.word	0x0800b3bd
 800b280:	0800b2e7 	.word	0x0800b2e7
 800b284:	0800b377 	.word	0x0800b377
 800b288:	0800b239 	.word	0x0800b239
 800b28c:	0800b239 	.word	0x0800b239
 800b290:	0800b3df 	.word	0x0800b3df
 800b294:	0800b239 	.word	0x0800b239
 800b298:	0800b2e7 	.word	0x0800b2e7
 800b29c:	0800b239 	.word	0x0800b239
 800b2a0:	0800b239 	.word	0x0800b239
 800b2a4:	0800b37f 	.word	0x0800b37f
 800b2a8:	6833      	ldr	r3, [r6, #0]
 800b2aa:	1d1a      	adds	r2, r3, #4
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	6032      	str	r2, [r6, #0]
 800b2b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b2b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	e09d      	b.n	800b3f8 <_printf_i+0x1e8>
 800b2bc:	6833      	ldr	r3, [r6, #0]
 800b2be:	6820      	ldr	r0, [r4, #0]
 800b2c0:	1d19      	adds	r1, r3, #4
 800b2c2:	6031      	str	r1, [r6, #0]
 800b2c4:	0606      	lsls	r6, r0, #24
 800b2c6:	d501      	bpl.n	800b2cc <_printf_i+0xbc>
 800b2c8:	681d      	ldr	r5, [r3, #0]
 800b2ca:	e003      	b.n	800b2d4 <_printf_i+0xc4>
 800b2cc:	0645      	lsls	r5, r0, #25
 800b2ce:	d5fb      	bpl.n	800b2c8 <_printf_i+0xb8>
 800b2d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b2d4:	2d00      	cmp	r5, #0
 800b2d6:	da03      	bge.n	800b2e0 <_printf_i+0xd0>
 800b2d8:	232d      	movs	r3, #45	@ 0x2d
 800b2da:	426d      	negs	r5, r5
 800b2dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2e0:	4859      	ldr	r0, [pc, #356]	@ (800b448 <_printf_i+0x238>)
 800b2e2:	230a      	movs	r3, #10
 800b2e4:	e011      	b.n	800b30a <_printf_i+0xfa>
 800b2e6:	6821      	ldr	r1, [r4, #0]
 800b2e8:	6833      	ldr	r3, [r6, #0]
 800b2ea:	0608      	lsls	r0, r1, #24
 800b2ec:	f853 5b04 	ldr.w	r5, [r3], #4
 800b2f0:	d402      	bmi.n	800b2f8 <_printf_i+0xe8>
 800b2f2:	0649      	lsls	r1, r1, #25
 800b2f4:	bf48      	it	mi
 800b2f6:	b2ad      	uxthmi	r5, r5
 800b2f8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b2fa:	4853      	ldr	r0, [pc, #332]	@ (800b448 <_printf_i+0x238>)
 800b2fc:	6033      	str	r3, [r6, #0]
 800b2fe:	bf14      	ite	ne
 800b300:	230a      	movne	r3, #10
 800b302:	2308      	moveq	r3, #8
 800b304:	2100      	movs	r1, #0
 800b306:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b30a:	6866      	ldr	r6, [r4, #4]
 800b30c:	60a6      	str	r6, [r4, #8]
 800b30e:	2e00      	cmp	r6, #0
 800b310:	bfa2      	ittt	ge
 800b312:	6821      	ldrge	r1, [r4, #0]
 800b314:	f021 0104 	bicge.w	r1, r1, #4
 800b318:	6021      	strge	r1, [r4, #0]
 800b31a:	b90d      	cbnz	r5, 800b320 <_printf_i+0x110>
 800b31c:	2e00      	cmp	r6, #0
 800b31e:	d04b      	beq.n	800b3b8 <_printf_i+0x1a8>
 800b320:	4616      	mov	r6, r2
 800b322:	fbb5 f1f3 	udiv	r1, r5, r3
 800b326:	fb03 5711 	mls	r7, r3, r1, r5
 800b32a:	5dc7      	ldrb	r7, [r0, r7]
 800b32c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b330:	462f      	mov	r7, r5
 800b332:	42bb      	cmp	r3, r7
 800b334:	460d      	mov	r5, r1
 800b336:	d9f4      	bls.n	800b322 <_printf_i+0x112>
 800b338:	2b08      	cmp	r3, #8
 800b33a:	d10b      	bne.n	800b354 <_printf_i+0x144>
 800b33c:	6823      	ldr	r3, [r4, #0]
 800b33e:	07df      	lsls	r7, r3, #31
 800b340:	d508      	bpl.n	800b354 <_printf_i+0x144>
 800b342:	6923      	ldr	r3, [r4, #16]
 800b344:	6861      	ldr	r1, [r4, #4]
 800b346:	4299      	cmp	r1, r3
 800b348:	bfde      	ittt	le
 800b34a:	2330      	movle	r3, #48	@ 0x30
 800b34c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b350:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b354:	1b92      	subs	r2, r2, r6
 800b356:	6122      	str	r2, [r4, #16]
 800b358:	f8cd a000 	str.w	sl, [sp]
 800b35c:	464b      	mov	r3, r9
 800b35e:	aa03      	add	r2, sp, #12
 800b360:	4621      	mov	r1, r4
 800b362:	4640      	mov	r0, r8
 800b364:	f7ff fee6 	bl	800b134 <_printf_common>
 800b368:	3001      	adds	r0, #1
 800b36a:	d14a      	bne.n	800b402 <_printf_i+0x1f2>
 800b36c:	f04f 30ff 	mov.w	r0, #4294967295
 800b370:	b004      	add	sp, #16
 800b372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b376:	6823      	ldr	r3, [r4, #0]
 800b378:	f043 0320 	orr.w	r3, r3, #32
 800b37c:	6023      	str	r3, [r4, #0]
 800b37e:	4833      	ldr	r0, [pc, #204]	@ (800b44c <_printf_i+0x23c>)
 800b380:	2778      	movs	r7, #120	@ 0x78
 800b382:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b386:	6823      	ldr	r3, [r4, #0]
 800b388:	6831      	ldr	r1, [r6, #0]
 800b38a:	061f      	lsls	r7, r3, #24
 800b38c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b390:	d402      	bmi.n	800b398 <_printf_i+0x188>
 800b392:	065f      	lsls	r7, r3, #25
 800b394:	bf48      	it	mi
 800b396:	b2ad      	uxthmi	r5, r5
 800b398:	6031      	str	r1, [r6, #0]
 800b39a:	07d9      	lsls	r1, r3, #31
 800b39c:	bf44      	itt	mi
 800b39e:	f043 0320 	orrmi.w	r3, r3, #32
 800b3a2:	6023      	strmi	r3, [r4, #0]
 800b3a4:	b11d      	cbz	r5, 800b3ae <_printf_i+0x19e>
 800b3a6:	2310      	movs	r3, #16
 800b3a8:	e7ac      	b.n	800b304 <_printf_i+0xf4>
 800b3aa:	4827      	ldr	r0, [pc, #156]	@ (800b448 <_printf_i+0x238>)
 800b3ac:	e7e9      	b.n	800b382 <_printf_i+0x172>
 800b3ae:	6823      	ldr	r3, [r4, #0]
 800b3b0:	f023 0320 	bic.w	r3, r3, #32
 800b3b4:	6023      	str	r3, [r4, #0]
 800b3b6:	e7f6      	b.n	800b3a6 <_printf_i+0x196>
 800b3b8:	4616      	mov	r6, r2
 800b3ba:	e7bd      	b.n	800b338 <_printf_i+0x128>
 800b3bc:	6833      	ldr	r3, [r6, #0]
 800b3be:	6825      	ldr	r5, [r4, #0]
 800b3c0:	6961      	ldr	r1, [r4, #20]
 800b3c2:	1d18      	adds	r0, r3, #4
 800b3c4:	6030      	str	r0, [r6, #0]
 800b3c6:	062e      	lsls	r6, r5, #24
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	d501      	bpl.n	800b3d0 <_printf_i+0x1c0>
 800b3cc:	6019      	str	r1, [r3, #0]
 800b3ce:	e002      	b.n	800b3d6 <_printf_i+0x1c6>
 800b3d0:	0668      	lsls	r0, r5, #25
 800b3d2:	d5fb      	bpl.n	800b3cc <_printf_i+0x1bc>
 800b3d4:	8019      	strh	r1, [r3, #0]
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	6123      	str	r3, [r4, #16]
 800b3da:	4616      	mov	r6, r2
 800b3dc:	e7bc      	b.n	800b358 <_printf_i+0x148>
 800b3de:	6833      	ldr	r3, [r6, #0]
 800b3e0:	1d1a      	adds	r2, r3, #4
 800b3e2:	6032      	str	r2, [r6, #0]
 800b3e4:	681e      	ldr	r6, [r3, #0]
 800b3e6:	6862      	ldr	r2, [r4, #4]
 800b3e8:	2100      	movs	r1, #0
 800b3ea:	4630      	mov	r0, r6
 800b3ec:	f7f4 ff90 	bl	8000310 <memchr>
 800b3f0:	b108      	cbz	r0, 800b3f6 <_printf_i+0x1e6>
 800b3f2:	1b80      	subs	r0, r0, r6
 800b3f4:	6060      	str	r0, [r4, #4]
 800b3f6:	6863      	ldr	r3, [r4, #4]
 800b3f8:	6123      	str	r3, [r4, #16]
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b400:	e7aa      	b.n	800b358 <_printf_i+0x148>
 800b402:	6923      	ldr	r3, [r4, #16]
 800b404:	4632      	mov	r2, r6
 800b406:	4649      	mov	r1, r9
 800b408:	4640      	mov	r0, r8
 800b40a:	47d0      	blx	sl
 800b40c:	3001      	adds	r0, #1
 800b40e:	d0ad      	beq.n	800b36c <_printf_i+0x15c>
 800b410:	6823      	ldr	r3, [r4, #0]
 800b412:	079b      	lsls	r3, r3, #30
 800b414:	d413      	bmi.n	800b43e <_printf_i+0x22e>
 800b416:	68e0      	ldr	r0, [r4, #12]
 800b418:	9b03      	ldr	r3, [sp, #12]
 800b41a:	4298      	cmp	r0, r3
 800b41c:	bfb8      	it	lt
 800b41e:	4618      	movlt	r0, r3
 800b420:	e7a6      	b.n	800b370 <_printf_i+0x160>
 800b422:	2301      	movs	r3, #1
 800b424:	4632      	mov	r2, r6
 800b426:	4649      	mov	r1, r9
 800b428:	4640      	mov	r0, r8
 800b42a:	47d0      	blx	sl
 800b42c:	3001      	adds	r0, #1
 800b42e:	d09d      	beq.n	800b36c <_printf_i+0x15c>
 800b430:	3501      	adds	r5, #1
 800b432:	68e3      	ldr	r3, [r4, #12]
 800b434:	9903      	ldr	r1, [sp, #12]
 800b436:	1a5b      	subs	r3, r3, r1
 800b438:	42ab      	cmp	r3, r5
 800b43a:	dcf2      	bgt.n	800b422 <_printf_i+0x212>
 800b43c:	e7eb      	b.n	800b416 <_printf_i+0x206>
 800b43e:	2500      	movs	r5, #0
 800b440:	f104 0619 	add.w	r6, r4, #25
 800b444:	e7f5      	b.n	800b432 <_printf_i+0x222>
 800b446:	bf00      	nop
 800b448:	0800d96e 	.word	0x0800d96e
 800b44c:	0800d97f 	.word	0x0800d97f

0800b450 <std>:
 800b450:	2300      	movs	r3, #0
 800b452:	b510      	push	{r4, lr}
 800b454:	4604      	mov	r4, r0
 800b456:	e9c0 3300 	strd	r3, r3, [r0]
 800b45a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b45e:	6083      	str	r3, [r0, #8]
 800b460:	8181      	strh	r1, [r0, #12]
 800b462:	6643      	str	r3, [r0, #100]	@ 0x64
 800b464:	81c2      	strh	r2, [r0, #14]
 800b466:	6183      	str	r3, [r0, #24]
 800b468:	4619      	mov	r1, r3
 800b46a:	2208      	movs	r2, #8
 800b46c:	305c      	adds	r0, #92	@ 0x5c
 800b46e:	f000 fa47 	bl	800b900 <memset>
 800b472:	4b0d      	ldr	r3, [pc, #52]	@ (800b4a8 <std+0x58>)
 800b474:	6263      	str	r3, [r4, #36]	@ 0x24
 800b476:	4b0d      	ldr	r3, [pc, #52]	@ (800b4ac <std+0x5c>)
 800b478:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b47a:	4b0d      	ldr	r3, [pc, #52]	@ (800b4b0 <std+0x60>)
 800b47c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b47e:	4b0d      	ldr	r3, [pc, #52]	@ (800b4b4 <std+0x64>)
 800b480:	6323      	str	r3, [r4, #48]	@ 0x30
 800b482:	4b0d      	ldr	r3, [pc, #52]	@ (800b4b8 <std+0x68>)
 800b484:	6224      	str	r4, [r4, #32]
 800b486:	429c      	cmp	r4, r3
 800b488:	d006      	beq.n	800b498 <std+0x48>
 800b48a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b48e:	4294      	cmp	r4, r2
 800b490:	d002      	beq.n	800b498 <std+0x48>
 800b492:	33d0      	adds	r3, #208	@ 0xd0
 800b494:	429c      	cmp	r4, r3
 800b496:	d105      	bne.n	800b4a4 <std+0x54>
 800b498:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b49c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4a0:	f000 baba 	b.w	800ba18 <__retarget_lock_init_recursive>
 800b4a4:	bd10      	pop	{r4, pc}
 800b4a6:	bf00      	nop
 800b4a8:	0800b71d 	.word	0x0800b71d
 800b4ac:	0800b73f 	.word	0x0800b73f
 800b4b0:	0800b777 	.word	0x0800b777
 800b4b4:	0800b79b 	.word	0x0800b79b
 800b4b8:	24000578 	.word	0x24000578

0800b4bc <stdio_exit_handler>:
 800b4bc:	4a02      	ldr	r2, [pc, #8]	@ (800b4c8 <stdio_exit_handler+0xc>)
 800b4be:	4903      	ldr	r1, [pc, #12]	@ (800b4cc <stdio_exit_handler+0x10>)
 800b4c0:	4803      	ldr	r0, [pc, #12]	@ (800b4d0 <stdio_exit_handler+0x14>)
 800b4c2:	f000 b869 	b.w	800b598 <_fwalk_sglue>
 800b4c6:	bf00      	nop
 800b4c8:	24000114 	.word	0x24000114
 800b4cc:	0800d3b1 	.word	0x0800d3b1
 800b4d0:	24000124 	.word	0x24000124

0800b4d4 <cleanup_stdio>:
 800b4d4:	6841      	ldr	r1, [r0, #4]
 800b4d6:	4b0c      	ldr	r3, [pc, #48]	@ (800b508 <cleanup_stdio+0x34>)
 800b4d8:	4299      	cmp	r1, r3
 800b4da:	b510      	push	{r4, lr}
 800b4dc:	4604      	mov	r4, r0
 800b4de:	d001      	beq.n	800b4e4 <cleanup_stdio+0x10>
 800b4e0:	f001 ff66 	bl	800d3b0 <_fflush_r>
 800b4e4:	68a1      	ldr	r1, [r4, #8]
 800b4e6:	4b09      	ldr	r3, [pc, #36]	@ (800b50c <cleanup_stdio+0x38>)
 800b4e8:	4299      	cmp	r1, r3
 800b4ea:	d002      	beq.n	800b4f2 <cleanup_stdio+0x1e>
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f001 ff5f 	bl	800d3b0 <_fflush_r>
 800b4f2:	68e1      	ldr	r1, [r4, #12]
 800b4f4:	4b06      	ldr	r3, [pc, #24]	@ (800b510 <cleanup_stdio+0x3c>)
 800b4f6:	4299      	cmp	r1, r3
 800b4f8:	d004      	beq.n	800b504 <cleanup_stdio+0x30>
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b500:	f001 bf56 	b.w	800d3b0 <_fflush_r>
 800b504:	bd10      	pop	{r4, pc}
 800b506:	bf00      	nop
 800b508:	24000578 	.word	0x24000578
 800b50c:	240005e0 	.word	0x240005e0
 800b510:	24000648 	.word	0x24000648

0800b514 <global_stdio_init.part.0>:
 800b514:	b510      	push	{r4, lr}
 800b516:	4b0b      	ldr	r3, [pc, #44]	@ (800b544 <global_stdio_init.part.0+0x30>)
 800b518:	4c0b      	ldr	r4, [pc, #44]	@ (800b548 <global_stdio_init.part.0+0x34>)
 800b51a:	4a0c      	ldr	r2, [pc, #48]	@ (800b54c <global_stdio_init.part.0+0x38>)
 800b51c:	601a      	str	r2, [r3, #0]
 800b51e:	4620      	mov	r0, r4
 800b520:	2200      	movs	r2, #0
 800b522:	2104      	movs	r1, #4
 800b524:	f7ff ff94 	bl	800b450 <std>
 800b528:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b52c:	2201      	movs	r2, #1
 800b52e:	2109      	movs	r1, #9
 800b530:	f7ff ff8e 	bl	800b450 <std>
 800b534:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b538:	2202      	movs	r2, #2
 800b53a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b53e:	2112      	movs	r1, #18
 800b540:	f7ff bf86 	b.w	800b450 <std>
 800b544:	240006b0 	.word	0x240006b0
 800b548:	24000578 	.word	0x24000578
 800b54c:	0800b4bd 	.word	0x0800b4bd

0800b550 <__sfp_lock_acquire>:
 800b550:	4801      	ldr	r0, [pc, #4]	@ (800b558 <__sfp_lock_acquire+0x8>)
 800b552:	f000 ba62 	b.w	800ba1a <__retarget_lock_acquire_recursive>
 800b556:	bf00      	nop
 800b558:	240006b9 	.word	0x240006b9

0800b55c <__sfp_lock_release>:
 800b55c:	4801      	ldr	r0, [pc, #4]	@ (800b564 <__sfp_lock_release+0x8>)
 800b55e:	f000 ba5d 	b.w	800ba1c <__retarget_lock_release_recursive>
 800b562:	bf00      	nop
 800b564:	240006b9 	.word	0x240006b9

0800b568 <__sinit>:
 800b568:	b510      	push	{r4, lr}
 800b56a:	4604      	mov	r4, r0
 800b56c:	f7ff fff0 	bl	800b550 <__sfp_lock_acquire>
 800b570:	6a23      	ldr	r3, [r4, #32]
 800b572:	b11b      	cbz	r3, 800b57c <__sinit+0x14>
 800b574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b578:	f7ff bff0 	b.w	800b55c <__sfp_lock_release>
 800b57c:	4b04      	ldr	r3, [pc, #16]	@ (800b590 <__sinit+0x28>)
 800b57e:	6223      	str	r3, [r4, #32]
 800b580:	4b04      	ldr	r3, [pc, #16]	@ (800b594 <__sinit+0x2c>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d1f5      	bne.n	800b574 <__sinit+0xc>
 800b588:	f7ff ffc4 	bl	800b514 <global_stdio_init.part.0>
 800b58c:	e7f2      	b.n	800b574 <__sinit+0xc>
 800b58e:	bf00      	nop
 800b590:	0800b4d5 	.word	0x0800b4d5
 800b594:	240006b0 	.word	0x240006b0

0800b598 <_fwalk_sglue>:
 800b598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b59c:	4607      	mov	r7, r0
 800b59e:	4688      	mov	r8, r1
 800b5a0:	4614      	mov	r4, r2
 800b5a2:	2600      	movs	r6, #0
 800b5a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5a8:	f1b9 0901 	subs.w	r9, r9, #1
 800b5ac:	d505      	bpl.n	800b5ba <_fwalk_sglue+0x22>
 800b5ae:	6824      	ldr	r4, [r4, #0]
 800b5b0:	2c00      	cmp	r4, #0
 800b5b2:	d1f7      	bne.n	800b5a4 <_fwalk_sglue+0xc>
 800b5b4:	4630      	mov	r0, r6
 800b5b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ba:	89ab      	ldrh	r3, [r5, #12]
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d907      	bls.n	800b5d0 <_fwalk_sglue+0x38>
 800b5c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	d003      	beq.n	800b5d0 <_fwalk_sglue+0x38>
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	4638      	mov	r0, r7
 800b5cc:	47c0      	blx	r8
 800b5ce:	4306      	orrs	r6, r0
 800b5d0:	3568      	adds	r5, #104	@ 0x68
 800b5d2:	e7e9      	b.n	800b5a8 <_fwalk_sglue+0x10>

0800b5d4 <iprintf>:
 800b5d4:	b40f      	push	{r0, r1, r2, r3}
 800b5d6:	b507      	push	{r0, r1, r2, lr}
 800b5d8:	4906      	ldr	r1, [pc, #24]	@ (800b5f4 <iprintf+0x20>)
 800b5da:	ab04      	add	r3, sp, #16
 800b5dc:	6808      	ldr	r0, [r1, #0]
 800b5de:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5e2:	6881      	ldr	r1, [r0, #8]
 800b5e4:	9301      	str	r3, [sp, #4]
 800b5e6:	f001 fd47 	bl	800d078 <_vfiprintf_r>
 800b5ea:	b003      	add	sp, #12
 800b5ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5f0:	b004      	add	sp, #16
 800b5f2:	4770      	bx	lr
 800b5f4:	24000120 	.word	0x24000120

0800b5f8 <_puts_r>:
 800b5f8:	6a03      	ldr	r3, [r0, #32]
 800b5fa:	b570      	push	{r4, r5, r6, lr}
 800b5fc:	6884      	ldr	r4, [r0, #8]
 800b5fe:	4605      	mov	r5, r0
 800b600:	460e      	mov	r6, r1
 800b602:	b90b      	cbnz	r3, 800b608 <_puts_r+0x10>
 800b604:	f7ff ffb0 	bl	800b568 <__sinit>
 800b608:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b60a:	07db      	lsls	r3, r3, #31
 800b60c:	d405      	bmi.n	800b61a <_puts_r+0x22>
 800b60e:	89a3      	ldrh	r3, [r4, #12]
 800b610:	0598      	lsls	r0, r3, #22
 800b612:	d402      	bmi.n	800b61a <_puts_r+0x22>
 800b614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b616:	f000 fa00 	bl	800ba1a <__retarget_lock_acquire_recursive>
 800b61a:	89a3      	ldrh	r3, [r4, #12]
 800b61c:	0719      	lsls	r1, r3, #28
 800b61e:	d502      	bpl.n	800b626 <_puts_r+0x2e>
 800b620:	6923      	ldr	r3, [r4, #16]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d135      	bne.n	800b692 <_puts_r+0x9a>
 800b626:	4621      	mov	r1, r4
 800b628:	4628      	mov	r0, r5
 800b62a:	f000 f8f9 	bl	800b820 <__swsetup_r>
 800b62e:	b380      	cbz	r0, 800b692 <_puts_r+0x9a>
 800b630:	f04f 35ff 	mov.w	r5, #4294967295
 800b634:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b636:	07da      	lsls	r2, r3, #31
 800b638:	d405      	bmi.n	800b646 <_puts_r+0x4e>
 800b63a:	89a3      	ldrh	r3, [r4, #12]
 800b63c:	059b      	lsls	r3, r3, #22
 800b63e:	d402      	bmi.n	800b646 <_puts_r+0x4e>
 800b640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b642:	f000 f9eb 	bl	800ba1c <__retarget_lock_release_recursive>
 800b646:	4628      	mov	r0, r5
 800b648:	bd70      	pop	{r4, r5, r6, pc}
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	da04      	bge.n	800b658 <_puts_r+0x60>
 800b64e:	69a2      	ldr	r2, [r4, #24]
 800b650:	429a      	cmp	r2, r3
 800b652:	dc17      	bgt.n	800b684 <_puts_r+0x8c>
 800b654:	290a      	cmp	r1, #10
 800b656:	d015      	beq.n	800b684 <_puts_r+0x8c>
 800b658:	6823      	ldr	r3, [r4, #0]
 800b65a:	1c5a      	adds	r2, r3, #1
 800b65c:	6022      	str	r2, [r4, #0]
 800b65e:	7019      	strb	r1, [r3, #0]
 800b660:	68a3      	ldr	r3, [r4, #8]
 800b662:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b666:	3b01      	subs	r3, #1
 800b668:	60a3      	str	r3, [r4, #8]
 800b66a:	2900      	cmp	r1, #0
 800b66c:	d1ed      	bne.n	800b64a <_puts_r+0x52>
 800b66e:	2b00      	cmp	r3, #0
 800b670:	da11      	bge.n	800b696 <_puts_r+0x9e>
 800b672:	4622      	mov	r2, r4
 800b674:	210a      	movs	r1, #10
 800b676:	4628      	mov	r0, r5
 800b678:	f000 f893 	bl	800b7a2 <__swbuf_r>
 800b67c:	3001      	adds	r0, #1
 800b67e:	d0d7      	beq.n	800b630 <_puts_r+0x38>
 800b680:	250a      	movs	r5, #10
 800b682:	e7d7      	b.n	800b634 <_puts_r+0x3c>
 800b684:	4622      	mov	r2, r4
 800b686:	4628      	mov	r0, r5
 800b688:	f000 f88b 	bl	800b7a2 <__swbuf_r>
 800b68c:	3001      	adds	r0, #1
 800b68e:	d1e7      	bne.n	800b660 <_puts_r+0x68>
 800b690:	e7ce      	b.n	800b630 <_puts_r+0x38>
 800b692:	3e01      	subs	r6, #1
 800b694:	e7e4      	b.n	800b660 <_puts_r+0x68>
 800b696:	6823      	ldr	r3, [r4, #0]
 800b698:	1c5a      	adds	r2, r3, #1
 800b69a:	6022      	str	r2, [r4, #0]
 800b69c:	220a      	movs	r2, #10
 800b69e:	701a      	strb	r2, [r3, #0]
 800b6a0:	e7ee      	b.n	800b680 <_puts_r+0x88>
	...

0800b6a4 <puts>:
 800b6a4:	4b02      	ldr	r3, [pc, #8]	@ (800b6b0 <puts+0xc>)
 800b6a6:	4601      	mov	r1, r0
 800b6a8:	6818      	ldr	r0, [r3, #0]
 800b6aa:	f7ff bfa5 	b.w	800b5f8 <_puts_r>
 800b6ae:	bf00      	nop
 800b6b0:	24000120 	.word	0x24000120

0800b6b4 <sniprintf>:
 800b6b4:	b40c      	push	{r2, r3}
 800b6b6:	b530      	push	{r4, r5, lr}
 800b6b8:	4b17      	ldr	r3, [pc, #92]	@ (800b718 <sniprintf+0x64>)
 800b6ba:	1e0c      	subs	r4, r1, #0
 800b6bc:	681d      	ldr	r5, [r3, #0]
 800b6be:	b09d      	sub	sp, #116	@ 0x74
 800b6c0:	da08      	bge.n	800b6d4 <sniprintf+0x20>
 800b6c2:	238b      	movs	r3, #139	@ 0x8b
 800b6c4:	602b      	str	r3, [r5, #0]
 800b6c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ca:	b01d      	add	sp, #116	@ 0x74
 800b6cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6d0:	b002      	add	sp, #8
 800b6d2:	4770      	bx	lr
 800b6d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b6d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b6dc:	bf14      	ite	ne
 800b6de:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b6e2:	4623      	moveq	r3, r4
 800b6e4:	9304      	str	r3, [sp, #16]
 800b6e6:	9307      	str	r3, [sp, #28]
 800b6e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b6ec:	9002      	str	r0, [sp, #8]
 800b6ee:	9006      	str	r0, [sp, #24]
 800b6f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b6f4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b6f6:	ab21      	add	r3, sp, #132	@ 0x84
 800b6f8:	a902      	add	r1, sp, #8
 800b6fa:	4628      	mov	r0, r5
 800b6fc:	9301      	str	r3, [sp, #4]
 800b6fe:	f001 fb95 	bl	800ce2c <_svfiprintf_r>
 800b702:	1c43      	adds	r3, r0, #1
 800b704:	bfbc      	itt	lt
 800b706:	238b      	movlt	r3, #139	@ 0x8b
 800b708:	602b      	strlt	r3, [r5, #0]
 800b70a:	2c00      	cmp	r4, #0
 800b70c:	d0dd      	beq.n	800b6ca <sniprintf+0x16>
 800b70e:	9b02      	ldr	r3, [sp, #8]
 800b710:	2200      	movs	r2, #0
 800b712:	701a      	strb	r2, [r3, #0]
 800b714:	e7d9      	b.n	800b6ca <sniprintf+0x16>
 800b716:	bf00      	nop
 800b718:	24000120 	.word	0x24000120

0800b71c <__sread>:
 800b71c:	b510      	push	{r4, lr}
 800b71e:	460c      	mov	r4, r1
 800b720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b724:	f000 f91a 	bl	800b95c <_read_r>
 800b728:	2800      	cmp	r0, #0
 800b72a:	bfab      	itete	ge
 800b72c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b72e:	89a3      	ldrhlt	r3, [r4, #12]
 800b730:	181b      	addge	r3, r3, r0
 800b732:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b736:	bfac      	ite	ge
 800b738:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b73a:	81a3      	strhlt	r3, [r4, #12]
 800b73c:	bd10      	pop	{r4, pc}

0800b73e <__swrite>:
 800b73e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b742:	461f      	mov	r7, r3
 800b744:	898b      	ldrh	r3, [r1, #12]
 800b746:	05db      	lsls	r3, r3, #23
 800b748:	4605      	mov	r5, r0
 800b74a:	460c      	mov	r4, r1
 800b74c:	4616      	mov	r6, r2
 800b74e:	d505      	bpl.n	800b75c <__swrite+0x1e>
 800b750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b754:	2302      	movs	r3, #2
 800b756:	2200      	movs	r2, #0
 800b758:	f000 f8ee 	bl	800b938 <_lseek_r>
 800b75c:	89a3      	ldrh	r3, [r4, #12]
 800b75e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b762:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b766:	81a3      	strh	r3, [r4, #12]
 800b768:	4632      	mov	r2, r6
 800b76a:	463b      	mov	r3, r7
 800b76c:	4628      	mov	r0, r5
 800b76e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b772:	f000 b915 	b.w	800b9a0 <_write_r>

0800b776 <__sseek>:
 800b776:	b510      	push	{r4, lr}
 800b778:	460c      	mov	r4, r1
 800b77a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b77e:	f000 f8db 	bl	800b938 <_lseek_r>
 800b782:	1c43      	adds	r3, r0, #1
 800b784:	89a3      	ldrh	r3, [r4, #12]
 800b786:	bf15      	itete	ne
 800b788:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b78a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b78e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b792:	81a3      	strheq	r3, [r4, #12]
 800b794:	bf18      	it	ne
 800b796:	81a3      	strhne	r3, [r4, #12]
 800b798:	bd10      	pop	{r4, pc}

0800b79a <__sclose>:
 800b79a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b79e:	f000 b8bb 	b.w	800b918 <_close_r>

0800b7a2 <__swbuf_r>:
 800b7a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7a4:	460e      	mov	r6, r1
 800b7a6:	4614      	mov	r4, r2
 800b7a8:	4605      	mov	r5, r0
 800b7aa:	b118      	cbz	r0, 800b7b4 <__swbuf_r+0x12>
 800b7ac:	6a03      	ldr	r3, [r0, #32]
 800b7ae:	b90b      	cbnz	r3, 800b7b4 <__swbuf_r+0x12>
 800b7b0:	f7ff feda 	bl	800b568 <__sinit>
 800b7b4:	69a3      	ldr	r3, [r4, #24]
 800b7b6:	60a3      	str	r3, [r4, #8]
 800b7b8:	89a3      	ldrh	r3, [r4, #12]
 800b7ba:	071a      	lsls	r2, r3, #28
 800b7bc:	d501      	bpl.n	800b7c2 <__swbuf_r+0x20>
 800b7be:	6923      	ldr	r3, [r4, #16]
 800b7c0:	b943      	cbnz	r3, 800b7d4 <__swbuf_r+0x32>
 800b7c2:	4621      	mov	r1, r4
 800b7c4:	4628      	mov	r0, r5
 800b7c6:	f000 f82b 	bl	800b820 <__swsetup_r>
 800b7ca:	b118      	cbz	r0, 800b7d4 <__swbuf_r+0x32>
 800b7cc:	f04f 37ff 	mov.w	r7, #4294967295
 800b7d0:	4638      	mov	r0, r7
 800b7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7d4:	6823      	ldr	r3, [r4, #0]
 800b7d6:	6922      	ldr	r2, [r4, #16]
 800b7d8:	1a98      	subs	r0, r3, r2
 800b7da:	6963      	ldr	r3, [r4, #20]
 800b7dc:	b2f6      	uxtb	r6, r6
 800b7de:	4283      	cmp	r3, r0
 800b7e0:	4637      	mov	r7, r6
 800b7e2:	dc05      	bgt.n	800b7f0 <__swbuf_r+0x4e>
 800b7e4:	4621      	mov	r1, r4
 800b7e6:	4628      	mov	r0, r5
 800b7e8:	f001 fde2 	bl	800d3b0 <_fflush_r>
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	d1ed      	bne.n	800b7cc <__swbuf_r+0x2a>
 800b7f0:	68a3      	ldr	r3, [r4, #8]
 800b7f2:	3b01      	subs	r3, #1
 800b7f4:	60a3      	str	r3, [r4, #8]
 800b7f6:	6823      	ldr	r3, [r4, #0]
 800b7f8:	1c5a      	adds	r2, r3, #1
 800b7fa:	6022      	str	r2, [r4, #0]
 800b7fc:	701e      	strb	r6, [r3, #0]
 800b7fe:	6962      	ldr	r2, [r4, #20]
 800b800:	1c43      	adds	r3, r0, #1
 800b802:	429a      	cmp	r2, r3
 800b804:	d004      	beq.n	800b810 <__swbuf_r+0x6e>
 800b806:	89a3      	ldrh	r3, [r4, #12]
 800b808:	07db      	lsls	r3, r3, #31
 800b80a:	d5e1      	bpl.n	800b7d0 <__swbuf_r+0x2e>
 800b80c:	2e0a      	cmp	r6, #10
 800b80e:	d1df      	bne.n	800b7d0 <__swbuf_r+0x2e>
 800b810:	4621      	mov	r1, r4
 800b812:	4628      	mov	r0, r5
 800b814:	f001 fdcc 	bl	800d3b0 <_fflush_r>
 800b818:	2800      	cmp	r0, #0
 800b81a:	d0d9      	beq.n	800b7d0 <__swbuf_r+0x2e>
 800b81c:	e7d6      	b.n	800b7cc <__swbuf_r+0x2a>
	...

0800b820 <__swsetup_r>:
 800b820:	b538      	push	{r3, r4, r5, lr}
 800b822:	4b29      	ldr	r3, [pc, #164]	@ (800b8c8 <__swsetup_r+0xa8>)
 800b824:	4605      	mov	r5, r0
 800b826:	6818      	ldr	r0, [r3, #0]
 800b828:	460c      	mov	r4, r1
 800b82a:	b118      	cbz	r0, 800b834 <__swsetup_r+0x14>
 800b82c:	6a03      	ldr	r3, [r0, #32]
 800b82e:	b90b      	cbnz	r3, 800b834 <__swsetup_r+0x14>
 800b830:	f7ff fe9a 	bl	800b568 <__sinit>
 800b834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b838:	0719      	lsls	r1, r3, #28
 800b83a:	d422      	bmi.n	800b882 <__swsetup_r+0x62>
 800b83c:	06da      	lsls	r2, r3, #27
 800b83e:	d407      	bmi.n	800b850 <__swsetup_r+0x30>
 800b840:	2209      	movs	r2, #9
 800b842:	602a      	str	r2, [r5, #0]
 800b844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b848:	81a3      	strh	r3, [r4, #12]
 800b84a:	f04f 30ff 	mov.w	r0, #4294967295
 800b84e:	e033      	b.n	800b8b8 <__swsetup_r+0x98>
 800b850:	0758      	lsls	r0, r3, #29
 800b852:	d512      	bpl.n	800b87a <__swsetup_r+0x5a>
 800b854:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b856:	b141      	cbz	r1, 800b86a <__swsetup_r+0x4a>
 800b858:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b85c:	4299      	cmp	r1, r3
 800b85e:	d002      	beq.n	800b866 <__swsetup_r+0x46>
 800b860:	4628      	mov	r0, r5
 800b862:	f000 febb 	bl	800c5dc <_free_r>
 800b866:	2300      	movs	r3, #0
 800b868:	6363      	str	r3, [r4, #52]	@ 0x34
 800b86a:	89a3      	ldrh	r3, [r4, #12]
 800b86c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b870:	81a3      	strh	r3, [r4, #12]
 800b872:	2300      	movs	r3, #0
 800b874:	6063      	str	r3, [r4, #4]
 800b876:	6923      	ldr	r3, [r4, #16]
 800b878:	6023      	str	r3, [r4, #0]
 800b87a:	89a3      	ldrh	r3, [r4, #12]
 800b87c:	f043 0308 	orr.w	r3, r3, #8
 800b880:	81a3      	strh	r3, [r4, #12]
 800b882:	6923      	ldr	r3, [r4, #16]
 800b884:	b94b      	cbnz	r3, 800b89a <__swsetup_r+0x7a>
 800b886:	89a3      	ldrh	r3, [r4, #12]
 800b888:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b88c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b890:	d003      	beq.n	800b89a <__swsetup_r+0x7a>
 800b892:	4621      	mov	r1, r4
 800b894:	4628      	mov	r0, r5
 800b896:	f001 fdd9 	bl	800d44c <__smakebuf_r>
 800b89a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b89e:	f013 0201 	ands.w	r2, r3, #1
 800b8a2:	d00a      	beq.n	800b8ba <__swsetup_r+0x9a>
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	60a2      	str	r2, [r4, #8]
 800b8a8:	6962      	ldr	r2, [r4, #20]
 800b8aa:	4252      	negs	r2, r2
 800b8ac:	61a2      	str	r2, [r4, #24]
 800b8ae:	6922      	ldr	r2, [r4, #16]
 800b8b0:	b942      	cbnz	r2, 800b8c4 <__swsetup_r+0xa4>
 800b8b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b8b6:	d1c5      	bne.n	800b844 <__swsetup_r+0x24>
 800b8b8:	bd38      	pop	{r3, r4, r5, pc}
 800b8ba:	0799      	lsls	r1, r3, #30
 800b8bc:	bf58      	it	pl
 800b8be:	6962      	ldrpl	r2, [r4, #20]
 800b8c0:	60a2      	str	r2, [r4, #8]
 800b8c2:	e7f4      	b.n	800b8ae <__swsetup_r+0x8e>
 800b8c4:	2000      	movs	r0, #0
 800b8c6:	e7f7      	b.n	800b8b8 <__swsetup_r+0x98>
 800b8c8:	24000120 	.word	0x24000120

0800b8cc <memmove>:
 800b8cc:	4288      	cmp	r0, r1
 800b8ce:	b510      	push	{r4, lr}
 800b8d0:	eb01 0402 	add.w	r4, r1, r2
 800b8d4:	d902      	bls.n	800b8dc <memmove+0x10>
 800b8d6:	4284      	cmp	r4, r0
 800b8d8:	4623      	mov	r3, r4
 800b8da:	d807      	bhi.n	800b8ec <memmove+0x20>
 800b8dc:	1e43      	subs	r3, r0, #1
 800b8de:	42a1      	cmp	r1, r4
 800b8e0:	d008      	beq.n	800b8f4 <memmove+0x28>
 800b8e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8ea:	e7f8      	b.n	800b8de <memmove+0x12>
 800b8ec:	4402      	add	r2, r0
 800b8ee:	4601      	mov	r1, r0
 800b8f0:	428a      	cmp	r2, r1
 800b8f2:	d100      	bne.n	800b8f6 <memmove+0x2a>
 800b8f4:	bd10      	pop	{r4, pc}
 800b8f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b8fe:	e7f7      	b.n	800b8f0 <memmove+0x24>

0800b900 <memset>:
 800b900:	4402      	add	r2, r0
 800b902:	4603      	mov	r3, r0
 800b904:	4293      	cmp	r3, r2
 800b906:	d100      	bne.n	800b90a <memset+0xa>
 800b908:	4770      	bx	lr
 800b90a:	f803 1b01 	strb.w	r1, [r3], #1
 800b90e:	e7f9      	b.n	800b904 <memset+0x4>

0800b910 <_localeconv_r>:
 800b910:	4800      	ldr	r0, [pc, #0]	@ (800b914 <_localeconv_r+0x4>)
 800b912:	4770      	bx	lr
 800b914:	24000260 	.word	0x24000260

0800b918 <_close_r>:
 800b918:	b538      	push	{r3, r4, r5, lr}
 800b91a:	4d06      	ldr	r5, [pc, #24]	@ (800b934 <_close_r+0x1c>)
 800b91c:	2300      	movs	r3, #0
 800b91e:	4604      	mov	r4, r0
 800b920:	4608      	mov	r0, r1
 800b922:	602b      	str	r3, [r5, #0]
 800b924:	f7f5 ff88 	bl	8001838 <_close>
 800b928:	1c43      	adds	r3, r0, #1
 800b92a:	d102      	bne.n	800b932 <_close_r+0x1a>
 800b92c:	682b      	ldr	r3, [r5, #0]
 800b92e:	b103      	cbz	r3, 800b932 <_close_r+0x1a>
 800b930:	6023      	str	r3, [r4, #0]
 800b932:	bd38      	pop	{r3, r4, r5, pc}
 800b934:	240006b4 	.word	0x240006b4

0800b938 <_lseek_r>:
 800b938:	b538      	push	{r3, r4, r5, lr}
 800b93a:	4d07      	ldr	r5, [pc, #28]	@ (800b958 <_lseek_r+0x20>)
 800b93c:	4604      	mov	r4, r0
 800b93e:	4608      	mov	r0, r1
 800b940:	4611      	mov	r1, r2
 800b942:	2200      	movs	r2, #0
 800b944:	602a      	str	r2, [r5, #0]
 800b946:	461a      	mov	r2, r3
 800b948:	f7f5 ff9d 	bl	8001886 <_lseek>
 800b94c:	1c43      	adds	r3, r0, #1
 800b94e:	d102      	bne.n	800b956 <_lseek_r+0x1e>
 800b950:	682b      	ldr	r3, [r5, #0]
 800b952:	b103      	cbz	r3, 800b956 <_lseek_r+0x1e>
 800b954:	6023      	str	r3, [r4, #0]
 800b956:	bd38      	pop	{r3, r4, r5, pc}
 800b958:	240006b4 	.word	0x240006b4

0800b95c <_read_r>:
 800b95c:	b538      	push	{r3, r4, r5, lr}
 800b95e:	4d07      	ldr	r5, [pc, #28]	@ (800b97c <_read_r+0x20>)
 800b960:	4604      	mov	r4, r0
 800b962:	4608      	mov	r0, r1
 800b964:	4611      	mov	r1, r2
 800b966:	2200      	movs	r2, #0
 800b968:	602a      	str	r2, [r5, #0]
 800b96a:	461a      	mov	r2, r3
 800b96c:	f7f5 ff47 	bl	80017fe <_read>
 800b970:	1c43      	adds	r3, r0, #1
 800b972:	d102      	bne.n	800b97a <_read_r+0x1e>
 800b974:	682b      	ldr	r3, [r5, #0]
 800b976:	b103      	cbz	r3, 800b97a <_read_r+0x1e>
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	bd38      	pop	{r3, r4, r5, pc}
 800b97c:	240006b4 	.word	0x240006b4

0800b980 <_sbrk_r>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	4d06      	ldr	r5, [pc, #24]	@ (800b99c <_sbrk_r+0x1c>)
 800b984:	2300      	movs	r3, #0
 800b986:	4604      	mov	r4, r0
 800b988:	4608      	mov	r0, r1
 800b98a:	602b      	str	r3, [r5, #0]
 800b98c:	f7f5 ff88 	bl	80018a0 <_sbrk>
 800b990:	1c43      	adds	r3, r0, #1
 800b992:	d102      	bne.n	800b99a <_sbrk_r+0x1a>
 800b994:	682b      	ldr	r3, [r5, #0]
 800b996:	b103      	cbz	r3, 800b99a <_sbrk_r+0x1a>
 800b998:	6023      	str	r3, [r4, #0]
 800b99a:	bd38      	pop	{r3, r4, r5, pc}
 800b99c:	240006b4 	.word	0x240006b4

0800b9a0 <_write_r>:
 800b9a0:	b538      	push	{r3, r4, r5, lr}
 800b9a2:	4d07      	ldr	r5, [pc, #28]	@ (800b9c0 <_write_r+0x20>)
 800b9a4:	4604      	mov	r4, r0
 800b9a6:	4608      	mov	r0, r1
 800b9a8:	4611      	mov	r1, r2
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	602a      	str	r2, [r5, #0]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	f7f4 ffc8 	bl	8000944 <_write>
 800b9b4:	1c43      	adds	r3, r0, #1
 800b9b6:	d102      	bne.n	800b9be <_write_r+0x1e>
 800b9b8:	682b      	ldr	r3, [r5, #0]
 800b9ba:	b103      	cbz	r3, 800b9be <_write_r+0x1e>
 800b9bc:	6023      	str	r3, [r4, #0]
 800b9be:	bd38      	pop	{r3, r4, r5, pc}
 800b9c0:	240006b4 	.word	0x240006b4

0800b9c4 <__errno>:
 800b9c4:	4b01      	ldr	r3, [pc, #4]	@ (800b9cc <__errno+0x8>)
 800b9c6:	6818      	ldr	r0, [r3, #0]
 800b9c8:	4770      	bx	lr
 800b9ca:	bf00      	nop
 800b9cc:	24000120 	.word	0x24000120

0800b9d0 <__libc_init_array>:
 800b9d0:	b570      	push	{r4, r5, r6, lr}
 800b9d2:	4d0d      	ldr	r5, [pc, #52]	@ (800ba08 <__libc_init_array+0x38>)
 800b9d4:	4c0d      	ldr	r4, [pc, #52]	@ (800ba0c <__libc_init_array+0x3c>)
 800b9d6:	1b64      	subs	r4, r4, r5
 800b9d8:	10a4      	asrs	r4, r4, #2
 800b9da:	2600      	movs	r6, #0
 800b9dc:	42a6      	cmp	r6, r4
 800b9de:	d109      	bne.n	800b9f4 <__libc_init_array+0x24>
 800b9e0:	4d0b      	ldr	r5, [pc, #44]	@ (800ba10 <__libc_init_array+0x40>)
 800b9e2:	4c0c      	ldr	r4, [pc, #48]	@ (800ba14 <__libc_init_array+0x44>)
 800b9e4:	f001 fe84 	bl	800d6f0 <_init>
 800b9e8:	1b64      	subs	r4, r4, r5
 800b9ea:	10a4      	asrs	r4, r4, #2
 800b9ec:	2600      	movs	r6, #0
 800b9ee:	42a6      	cmp	r6, r4
 800b9f0:	d105      	bne.n	800b9fe <__libc_init_array+0x2e>
 800b9f2:	bd70      	pop	{r4, r5, r6, pc}
 800b9f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9f8:	4798      	blx	r3
 800b9fa:	3601      	adds	r6, #1
 800b9fc:	e7ee      	b.n	800b9dc <__libc_init_array+0xc>
 800b9fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba02:	4798      	blx	r3
 800ba04:	3601      	adds	r6, #1
 800ba06:	e7f2      	b.n	800b9ee <__libc_init_array+0x1e>
 800ba08:	0800dcd8 	.word	0x0800dcd8
 800ba0c:	0800dcd8 	.word	0x0800dcd8
 800ba10:	0800dcd8 	.word	0x0800dcd8
 800ba14:	0800dcdc 	.word	0x0800dcdc

0800ba18 <__retarget_lock_init_recursive>:
 800ba18:	4770      	bx	lr

0800ba1a <__retarget_lock_acquire_recursive>:
 800ba1a:	4770      	bx	lr

0800ba1c <__retarget_lock_release_recursive>:
 800ba1c:	4770      	bx	lr

0800ba1e <quorem>:
 800ba1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba22:	6903      	ldr	r3, [r0, #16]
 800ba24:	690c      	ldr	r4, [r1, #16]
 800ba26:	42a3      	cmp	r3, r4
 800ba28:	4607      	mov	r7, r0
 800ba2a:	db7e      	blt.n	800bb2a <quorem+0x10c>
 800ba2c:	3c01      	subs	r4, #1
 800ba2e:	f101 0814 	add.w	r8, r1, #20
 800ba32:	00a3      	lsls	r3, r4, #2
 800ba34:	f100 0514 	add.w	r5, r0, #20
 800ba38:	9300      	str	r3, [sp, #0]
 800ba3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba3e:	9301      	str	r3, [sp, #4]
 800ba40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ba44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba48:	3301      	adds	r3, #1
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ba50:	fbb2 f6f3 	udiv	r6, r2, r3
 800ba54:	d32e      	bcc.n	800bab4 <quorem+0x96>
 800ba56:	f04f 0a00 	mov.w	sl, #0
 800ba5a:	46c4      	mov	ip, r8
 800ba5c:	46ae      	mov	lr, r5
 800ba5e:	46d3      	mov	fp, sl
 800ba60:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ba64:	b298      	uxth	r0, r3
 800ba66:	fb06 a000 	mla	r0, r6, r0, sl
 800ba6a:	0c02      	lsrs	r2, r0, #16
 800ba6c:	0c1b      	lsrs	r3, r3, #16
 800ba6e:	fb06 2303 	mla	r3, r6, r3, r2
 800ba72:	f8de 2000 	ldr.w	r2, [lr]
 800ba76:	b280      	uxth	r0, r0
 800ba78:	b292      	uxth	r2, r2
 800ba7a:	1a12      	subs	r2, r2, r0
 800ba7c:	445a      	add	r2, fp
 800ba7e:	f8de 0000 	ldr.w	r0, [lr]
 800ba82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ba8c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ba90:	b292      	uxth	r2, r2
 800ba92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ba96:	45e1      	cmp	r9, ip
 800ba98:	f84e 2b04 	str.w	r2, [lr], #4
 800ba9c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800baa0:	d2de      	bcs.n	800ba60 <quorem+0x42>
 800baa2:	9b00      	ldr	r3, [sp, #0]
 800baa4:	58eb      	ldr	r3, [r5, r3]
 800baa6:	b92b      	cbnz	r3, 800bab4 <quorem+0x96>
 800baa8:	9b01      	ldr	r3, [sp, #4]
 800baaa:	3b04      	subs	r3, #4
 800baac:	429d      	cmp	r5, r3
 800baae:	461a      	mov	r2, r3
 800bab0:	d32f      	bcc.n	800bb12 <quorem+0xf4>
 800bab2:	613c      	str	r4, [r7, #16]
 800bab4:	4638      	mov	r0, r7
 800bab6:	f001 f855 	bl	800cb64 <__mcmp>
 800baba:	2800      	cmp	r0, #0
 800babc:	db25      	blt.n	800bb0a <quorem+0xec>
 800babe:	4629      	mov	r1, r5
 800bac0:	2000      	movs	r0, #0
 800bac2:	f858 2b04 	ldr.w	r2, [r8], #4
 800bac6:	f8d1 c000 	ldr.w	ip, [r1]
 800baca:	fa1f fe82 	uxth.w	lr, r2
 800bace:	fa1f f38c 	uxth.w	r3, ip
 800bad2:	eba3 030e 	sub.w	r3, r3, lr
 800bad6:	4403      	add	r3, r0
 800bad8:	0c12      	lsrs	r2, r2, #16
 800bada:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bade:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bae8:	45c1      	cmp	r9, r8
 800baea:	f841 3b04 	str.w	r3, [r1], #4
 800baee:	ea4f 4022 	mov.w	r0, r2, asr #16
 800baf2:	d2e6      	bcs.n	800bac2 <quorem+0xa4>
 800baf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800baf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bafc:	b922      	cbnz	r2, 800bb08 <quorem+0xea>
 800bafe:	3b04      	subs	r3, #4
 800bb00:	429d      	cmp	r5, r3
 800bb02:	461a      	mov	r2, r3
 800bb04:	d30b      	bcc.n	800bb1e <quorem+0x100>
 800bb06:	613c      	str	r4, [r7, #16]
 800bb08:	3601      	adds	r6, #1
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	b003      	add	sp, #12
 800bb0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb12:	6812      	ldr	r2, [r2, #0]
 800bb14:	3b04      	subs	r3, #4
 800bb16:	2a00      	cmp	r2, #0
 800bb18:	d1cb      	bne.n	800bab2 <quorem+0x94>
 800bb1a:	3c01      	subs	r4, #1
 800bb1c:	e7c6      	b.n	800baac <quorem+0x8e>
 800bb1e:	6812      	ldr	r2, [r2, #0]
 800bb20:	3b04      	subs	r3, #4
 800bb22:	2a00      	cmp	r2, #0
 800bb24:	d1ef      	bne.n	800bb06 <quorem+0xe8>
 800bb26:	3c01      	subs	r4, #1
 800bb28:	e7ea      	b.n	800bb00 <quorem+0xe2>
 800bb2a:	2000      	movs	r0, #0
 800bb2c:	e7ee      	b.n	800bb0c <quorem+0xee>
	...

0800bb30 <_dtoa_r>:
 800bb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb34:	ed2d 8b02 	vpush	{d8}
 800bb38:	69c7      	ldr	r7, [r0, #28]
 800bb3a:	b091      	sub	sp, #68	@ 0x44
 800bb3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bb40:	ec55 4b10 	vmov	r4, r5, d0
 800bb44:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800bb46:	9107      	str	r1, [sp, #28]
 800bb48:	4681      	mov	r9, r0
 800bb4a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb4c:	930d      	str	r3, [sp, #52]	@ 0x34
 800bb4e:	b97f      	cbnz	r7, 800bb70 <_dtoa_r+0x40>
 800bb50:	2010      	movs	r0, #16
 800bb52:	f7fe ff8f 	bl	800aa74 <malloc>
 800bb56:	4602      	mov	r2, r0
 800bb58:	f8c9 001c 	str.w	r0, [r9, #28]
 800bb5c:	b920      	cbnz	r0, 800bb68 <_dtoa_r+0x38>
 800bb5e:	4ba0      	ldr	r3, [pc, #640]	@ (800bde0 <_dtoa_r+0x2b0>)
 800bb60:	21ef      	movs	r1, #239	@ 0xef
 800bb62:	48a0      	ldr	r0, [pc, #640]	@ (800bde4 <_dtoa_r+0x2b4>)
 800bb64:	f001 fcde 	bl	800d524 <__assert_func>
 800bb68:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bb6c:	6007      	str	r7, [r0, #0]
 800bb6e:	60c7      	str	r7, [r0, #12]
 800bb70:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bb74:	6819      	ldr	r1, [r3, #0]
 800bb76:	b159      	cbz	r1, 800bb90 <_dtoa_r+0x60>
 800bb78:	685a      	ldr	r2, [r3, #4]
 800bb7a:	604a      	str	r2, [r1, #4]
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	4093      	lsls	r3, r2
 800bb80:	608b      	str	r3, [r1, #8]
 800bb82:	4648      	mov	r0, r9
 800bb84:	f000 fdb4 	bl	800c6f0 <_Bfree>
 800bb88:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	601a      	str	r2, [r3, #0]
 800bb90:	1e2b      	subs	r3, r5, #0
 800bb92:	bfbb      	ittet	lt
 800bb94:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bb98:	9303      	strlt	r3, [sp, #12]
 800bb9a:	2300      	movge	r3, #0
 800bb9c:	2201      	movlt	r2, #1
 800bb9e:	bfac      	ite	ge
 800bba0:	6033      	strge	r3, [r6, #0]
 800bba2:	6032      	strlt	r2, [r6, #0]
 800bba4:	4b90      	ldr	r3, [pc, #576]	@ (800bde8 <_dtoa_r+0x2b8>)
 800bba6:	9e03      	ldr	r6, [sp, #12]
 800bba8:	43b3      	bics	r3, r6
 800bbaa:	d110      	bne.n	800bbce <_dtoa_r+0x9e>
 800bbac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bbae:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bbb2:	6013      	str	r3, [r2, #0]
 800bbb4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800bbb8:	4323      	orrs	r3, r4
 800bbba:	f000 84de 	beq.w	800c57a <_dtoa_r+0xa4a>
 800bbbe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bbc0:	4f8a      	ldr	r7, [pc, #552]	@ (800bdec <_dtoa_r+0x2bc>)
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	f000 84e0 	beq.w	800c588 <_dtoa_r+0xa58>
 800bbc8:	1cfb      	adds	r3, r7, #3
 800bbca:	f000 bcdb 	b.w	800c584 <_dtoa_r+0xa54>
 800bbce:	ed9d 8b02 	vldr	d8, [sp, #8]
 800bbd2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bbd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbda:	d10a      	bne.n	800bbf2 <_dtoa_r+0xc2>
 800bbdc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bbde:	2301      	movs	r3, #1
 800bbe0:	6013      	str	r3, [r2, #0]
 800bbe2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bbe4:	b113      	cbz	r3, 800bbec <_dtoa_r+0xbc>
 800bbe6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800bbe8:	4b81      	ldr	r3, [pc, #516]	@ (800bdf0 <_dtoa_r+0x2c0>)
 800bbea:	6013      	str	r3, [r2, #0]
 800bbec:	4f81      	ldr	r7, [pc, #516]	@ (800bdf4 <_dtoa_r+0x2c4>)
 800bbee:	f000 bccb 	b.w	800c588 <_dtoa_r+0xa58>
 800bbf2:	aa0e      	add	r2, sp, #56	@ 0x38
 800bbf4:	a90f      	add	r1, sp, #60	@ 0x3c
 800bbf6:	4648      	mov	r0, r9
 800bbf8:	eeb0 0b48 	vmov.f64	d0, d8
 800bbfc:	f001 f862 	bl	800ccc4 <__d2b>
 800bc00:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800bc04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc06:	9001      	str	r0, [sp, #4]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d045      	beq.n	800bc98 <_dtoa_r+0x168>
 800bc0c:	eeb0 7b48 	vmov.f64	d7, d8
 800bc10:	ee18 1a90 	vmov	r1, s17
 800bc14:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800bc18:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800bc1c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800bc20:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800bc24:	2500      	movs	r5, #0
 800bc26:	ee07 1a90 	vmov	s15, r1
 800bc2a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800bc2e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800bdc8 <_dtoa_r+0x298>
 800bc32:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bc36:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800bdd0 <_dtoa_r+0x2a0>
 800bc3a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bc3e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800bdd8 <_dtoa_r+0x2a8>
 800bc42:	ee07 3a90 	vmov	s15, r3
 800bc46:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800bc4a:	eeb0 7b46 	vmov.f64	d7, d6
 800bc4e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800bc52:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800bc56:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bc5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc5e:	ee16 8a90 	vmov	r8, s13
 800bc62:	d508      	bpl.n	800bc76 <_dtoa_r+0x146>
 800bc64:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bc68:	eeb4 6b47 	vcmp.f64	d6, d7
 800bc6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc70:	bf18      	it	ne
 800bc72:	f108 38ff 	addne.w	r8, r8, #4294967295
 800bc76:	f1b8 0f16 	cmp.w	r8, #22
 800bc7a:	d82b      	bhi.n	800bcd4 <_dtoa_r+0x1a4>
 800bc7c:	495e      	ldr	r1, [pc, #376]	@ (800bdf8 <_dtoa_r+0x2c8>)
 800bc7e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800bc82:	ed91 7b00 	vldr	d7, [r1]
 800bc86:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800bc8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc8e:	d501      	bpl.n	800bc94 <_dtoa_r+0x164>
 800bc90:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc94:	2100      	movs	r1, #0
 800bc96:	e01e      	b.n	800bcd6 <_dtoa_r+0x1a6>
 800bc98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc9a:	4413      	add	r3, r2
 800bc9c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800bca0:	2920      	cmp	r1, #32
 800bca2:	bfc1      	itttt	gt
 800bca4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800bca8:	408e      	lslgt	r6, r1
 800bcaa:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800bcae:	fa24 f101 	lsrgt.w	r1, r4, r1
 800bcb2:	bfd6      	itet	le
 800bcb4:	f1c1 0120 	rsble	r1, r1, #32
 800bcb8:	4331      	orrgt	r1, r6
 800bcba:	fa04 f101 	lslle.w	r1, r4, r1
 800bcbe:	ee07 1a90 	vmov	s15, r1
 800bcc2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bcc6:	3b01      	subs	r3, #1
 800bcc8:	ee17 1a90 	vmov	r1, s15
 800bccc:	2501      	movs	r5, #1
 800bcce:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800bcd2:	e7a8      	b.n	800bc26 <_dtoa_r+0xf6>
 800bcd4:	2101      	movs	r1, #1
 800bcd6:	1ad2      	subs	r2, r2, r3
 800bcd8:	1e53      	subs	r3, r2, #1
 800bcda:	9306      	str	r3, [sp, #24]
 800bcdc:	bf45      	ittet	mi
 800bcde:	f1c2 0301 	rsbmi	r3, r2, #1
 800bce2:	9305      	strmi	r3, [sp, #20]
 800bce4:	2300      	movpl	r3, #0
 800bce6:	2300      	movmi	r3, #0
 800bce8:	bf4c      	ite	mi
 800bcea:	9306      	strmi	r3, [sp, #24]
 800bcec:	9305      	strpl	r3, [sp, #20]
 800bcee:	f1b8 0f00 	cmp.w	r8, #0
 800bcf2:	910c      	str	r1, [sp, #48]	@ 0x30
 800bcf4:	db18      	blt.n	800bd28 <_dtoa_r+0x1f8>
 800bcf6:	9b06      	ldr	r3, [sp, #24]
 800bcf8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800bcfc:	4443      	add	r3, r8
 800bcfe:	9306      	str	r3, [sp, #24]
 800bd00:	2300      	movs	r3, #0
 800bd02:	9a07      	ldr	r2, [sp, #28]
 800bd04:	2a09      	cmp	r2, #9
 800bd06:	d849      	bhi.n	800bd9c <_dtoa_r+0x26c>
 800bd08:	2a05      	cmp	r2, #5
 800bd0a:	bfc4      	itt	gt
 800bd0c:	3a04      	subgt	r2, #4
 800bd0e:	9207      	strgt	r2, [sp, #28]
 800bd10:	9a07      	ldr	r2, [sp, #28]
 800bd12:	f1a2 0202 	sub.w	r2, r2, #2
 800bd16:	bfcc      	ite	gt
 800bd18:	2400      	movgt	r4, #0
 800bd1a:	2401      	movle	r4, #1
 800bd1c:	2a03      	cmp	r2, #3
 800bd1e:	d848      	bhi.n	800bdb2 <_dtoa_r+0x282>
 800bd20:	e8df f002 	tbb	[pc, r2]
 800bd24:	3a2c2e0b 	.word	0x3a2c2e0b
 800bd28:	9b05      	ldr	r3, [sp, #20]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	eba3 0308 	sub.w	r3, r3, r8
 800bd30:	9305      	str	r3, [sp, #20]
 800bd32:	920a      	str	r2, [sp, #40]	@ 0x28
 800bd34:	f1c8 0300 	rsb	r3, r8, #0
 800bd38:	e7e3      	b.n	800bd02 <_dtoa_r+0x1d2>
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	9208      	str	r2, [sp, #32]
 800bd3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd40:	2a00      	cmp	r2, #0
 800bd42:	dc39      	bgt.n	800bdb8 <_dtoa_r+0x288>
 800bd44:	f04f 0b01 	mov.w	fp, #1
 800bd48:	46da      	mov	sl, fp
 800bd4a:	465a      	mov	r2, fp
 800bd4c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800bd50:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800bd54:	2100      	movs	r1, #0
 800bd56:	2004      	movs	r0, #4
 800bd58:	f100 0614 	add.w	r6, r0, #20
 800bd5c:	4296      	cmp	r6, r2
 800bd5e:	d930      	bls.n	800bdc2 <_dtoa_r+0x292>
 800bd60:	6079      	str	r1, [r7, #4]
 800bd62:	4648      	mov	r0, r9
 800bd64:	9304      	str	r3, [sp, #16]
 800bd66:	f000 fc83 	bl	800c670 <_Balloc>
 800bd6a:	9b04      	ldr	r3, [sp, #16]
 800bd6c:	4607      	mov	r7, r0
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	d146      	bne.n	800be00 <_dtoa_r+0x2d0>
 800bd72:	4b22      	ldr	r3, [pc, #136]	@ (800bdfc <_dtoa_r+0x2cc>)
 800bd74:	4602      	mov	r2, r0
 800bd76:	f240 11af 	movw	r1, #431	@ 0x1af
 800bd7a:	e6f2      	b.n	800bb62 <_dtoa_r+0x32>
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	e7dd      	b.n	800bd3c <_dtoa_r+0x20c>
 800bd80:	2200      	movs	r2, #0
 800bd82:	9208      	str	r2, [sp, #32]
 800bd84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd86:	eb08 0b02 	add.w	fp, r8, r2
 800bd8a:	f10b 0a01 	add.w	sl, fp, #1
 800bd8e:	4652      	mov	r2, sl
 800bd90:	2a01      	cmp	r2, #1
 800bd92:	bfb8      	it	lt
 800bd94:	2201      	movlt	r2, #1
 800bd96:	e7db      	b.n	800bd50 <_dtoa_r+0x220>
 800bd98:	2201      	movs	r2, #1
 800bd9a:	e7f2      	b.n	800bd82 <_dtoa_r+0x252>
 800bd9c:	2401      	movs	r4, #1
 800bd9e:	2200      	movs	r2, #0
 800bda0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800bda4:	f04f 3bff 	mov.w	fp, #4294967295
 800bda8:	2100      	movs	r1, #0
 800bdaa:	46da      	mov	sl, fp
 800bdac:	2212      	movs	r2, #18
 800bdae:	9109      	str	r1, [sp, #36]	@ 0x24
 800bdb0:	e7ce      	b.n	800bd50 <_dtoa_r+0x220>
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	9208      	str	r2, [sp, #32]
 800bdb6:	e7f5      	b.n	800bda4 <_dtoa_r+0x274>
 800bdb8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800bdbc:	46da      	mov	sl, fp
 800bdbe:	465a      	mov	r2, fp
 800bdc0:	e7c6      	b.n	800bd50 <_dtoa_r+0x220>
 800bdc2:	3101      	adds	r1, #1
 800bdc4:	0040      	lsls	r0, r0, #1
 800bdc6:	e7c7      	b.n	800bd58 <_dtoa_r+0x228>
 800bdc8:	636f4361 	.word	0x636f4361
 800bdcc:	3fd287a7 	.word	0x3fd287a7
 800bdd0:	8b60c8b3 	.word	0x8b60c8b3
 800bdd4:	3fc68a28 	.word	0x3fc68a28
 800bdd8:	509f79fb 	.word	0x509f79fb
 800bddc:	3fd34413 	.word	0x3fd34413
 800bde0:	0800d99d 	.word	0x0800d99d
 800bde4:	0800d9b4 	.word	0x0800d9b4
 800bde8:	7ff00000 	.word	0x7ff00000
 800bdec:	0800d999 	.word	0x0800d999
 800bdf0:	0800d96d 	.word	0x0800d96d
 800bdf4:	0800d96c 	.word	0x0800d96c
 800bdf8:	0800dab0 	.word	0x0800dab0
 800bdfc:	0800da0c 	.word	0x0800da0c
 800be00:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800be04:	f1ba 0f0e 	cmp.w	sl, #14
 800be08:	6010      	str	r0, [r2, #0]
 800be0a:	d86f      	bhi.n	800beec <_dtoa_r+0x3bc>
 800be0c:	2c00      	cmp	r4, #0
 800be0e:	d06d      	beq.n	800beec <_dtoa_r+0x3bc>
 800be10:	f1b8 0f00 	cmp.w	r8, #0
 800be14:	f340 80c2 	ble.w	800bf9c <_dtoa_r+0x46c>
 800be18:	4aca      	ldr	r2, [pc, #808]	@ (800c144 <_dtoa_r+0x614>)
 800be1a:	f008 010f 	and.w	r1, r8, #15
 800be1e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800be22:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800be26:	ed92 7b00 	vldr	d7, [r2]
 800be2a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800be2e:	f000 80a9 	beq.w	800bf84 <_dtoa_r+0x454>
 800be32:	4ac5      	ldr	r2, [pc, #788]	@ (800c148 <_dtoa_r+0x618>)
 800be34:	ed92 6b08 	vldr	d6, [r2, #32]
 800be38:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800be3c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800be40:	f001 010f 	and.w	r1, r1, #15
 800be44:	2203      	movs	r2, #3
 800be46:	48c0      	ldr	r0, [pc, #768]	@ (800c148 <_dtoa_r+0x618>)
 800be48:	2900      	cmp	r1, #0
 800be4a:	f040 809d 	bne.w	800bf88 <_dtoa_r+0x458>
 800be4e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800be52:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800be56:	ed8d 7b02 	vstr	d7, [sp, #8]
 800be5a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800be5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be60:	2900      	cmp	r1, #0
 800be62:	f000 80c1 	beq.w	800bfe8 <_dtoa_r+0x4b8>
 800be66:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800be6a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800be6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be72:	f140 80b9 	bpl.w	800bfe8 <_dtoa_r+0x4b8>
 800be76:	f1ba 0f00 	cmp.w	sl, #0
 800be7a:	f000 80b5 	beq.w	800bfe8 <_dtoa_r+0x4b8>
 800be7e:	f1bb 0f00 	cmp.w	fp, #0
 800be82:	dd31      	ble.n	800bee8 <_dtoa_r+0x3b8>
 800be84:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800be88:	ee27 7b06 	vmul.f64	d7, d7, d6
 800be8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800be90:	f108 31ff 	add.w	r1, r8, #4294967295
 800be94:	9104      	str	r1, [sp, #16]
 800be96:	3201      	adds	r2, #1
 800be98:	465c      	mov	r4, fp
 800be9a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800be9e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800bea2:	ee07 2a90 	vmov	s15, r2
 800bea6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800beaa:	eea7 5b06 	vfma.f64	d5, d7, d6
 800beae:	ee15 2a90 	vmov	r2, s11
 800beb2:	ec51 0b15 	vmov	r0, r1, d5
 800beb6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800beba:	2c00      	cmp	r4, #0
 800bebc:	f040 8098 	bne.w	800bff0 <_dtoa_r+0x4c0>
 800bec0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800bec4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bec8:	ec41 0b17 	vmov	d7, r0, r1
 800becc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bed4:	f300 8261 	bgt.w	800c39a <_dtoa_r+0x86a>
 800bed8:	eeb1 7b47 	vneg.f64	d7, d7
 800bedc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bee4:	f100 80f5 	bmi.w	800c0d2 <_dtoa_r+0x5a2>
 800bee8:	ed8d 8b02 	vstr	d8, [sp, #8]
 800beec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800beee:	2a00      	cmp	r2, #0
 800bef0:	f2c0 812c 	blt.w	800c14c <_dtoa_r+0x61c>
 800bef4:	f1b8 0f0e 	cmp.w	r8, #14
 800bef8:	f300 8128 	bgt.w	800c14c <_dtoa_r+0x61c>
 800befc:	4b91      	ldr	r3, [pc, #580]	@ (800c144 <_dtoa_r+0x614>)
 800befe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bf02:	ed93 6b00 	vldr	d6, [r3]
 800bf06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	da03      	bge.n	800bf14 <_dtoa_r+0x3e4>
 800bf0c:	f1ba 0f00 	cmp.w	sl, #0
 800bf10:	f340 80d2 	ble.w	800c0b8 <_dtoa_r+0x588>
 800bf14:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800bf18:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf1c:	463e      	mov	r6, r7
 800bf1e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800bf22:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800bf26:	ee15 3a10 	vmov	r3, s10
 800bf2a:	3330      	adds	r3, #48	@ 0x30
 800bf2c:	f806 3b01 	strb.w	r3, [r6], #1
 800bf30:	1bf3      	subs	r3, r6, r7
 800bf32:	459a      	cmp	sl, r3
 800bf34:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800bf38:	eea3 7b46 	vfms.f64	d7, d3, d6
 800bf3c:	f040 80f8 	bne.w	800c130 <_dtoa_r+0x600>
 800bf40:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bf44:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bf48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf4c:	f300 80dd 	bgt.w	800c10a <_dtoa_r+0x5da>
 800bf50:	eeb4 7b46 	vcmp.f64	d7, d6
 800bf54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf58:	d104      	bne.n	800bf64 <_dtoa_r+0x434>
 800bf5a:	ee15 3a10 	vmov	r3, s10
 800bf5e:	07db      	lsls	r3, r3, #31
 800bf60:	f100 80d3 	bmi.w	800c10a <_dtoa_r+0x5da>
 800bf64:	9901      	ldr	r1, [sp, #4]
 800bf66:	4648      	mov	r0, r9
 800bf68:	f000 fbc2 	bl	800c6f0 <_Bfree>
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bf70:	7033      	strb	r3, [r6, #0]
 800bf72:	f108 0301 	add.w	r3, r8, #1
 800bf76:	6013      	str	r3, [r2, #0]
 800bf78:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	f000 8304 	beq.w	800c588 <_dtoa_r+0xa58>
 800bf80:	601e      	str	r6, [r3, #0]
 800bf82:	e301      	b.n	800c588 <_dtoa_r+0xa58>
 800bf84:	2202      	movs	r2, #2
 800bf86:	e75e      	b.n	800be46 <_dtoa_r+0x316>
 800bf88:	07cc      	lsls	r4, r1, #31
 800bf8a:	d504      	bpl.n	800bf96 <_dtoa_r+0x466>
 800bf8c:	ed90 6b00 	vldr	d6, [r0]
 800bf90:	3201      	adds	r2, #1
 800bf92:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bf96:	1049      	asrs	r1, r1, #1
 800bf98:	3008      	adds	r0, #8
 800bf9a:	e755      	b.n	800be48 <_dtoa_r+0x318>
 800bf9c:	d022      	beq.n	800bfe4 <_dtoa_r+0x4b4>
 800bf9e:	f1c8 0100 	rsb	r1, r8, #0
 800bfa2:	4a68      	ldr	r2, [pc, #416]	@ (800c144 <_dtoa_r+0x614>)
 800bfa4:	f001 000f 	and.w	r0, r1, #15
 800bfa8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800bfac:	ed92 7b00 	vldr	d7, [r2]
 800bfb0:	ee28 7b07 	vmul.f64	d7, d8, d7
 800bfb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bfb8:	4863      	ldr	r0, [pc, #396]	@ (800c148 <_dtoa_r+0x618>)
 800bfba:	1109      	asrs	r1, r1, #4
 800bfbc:	2400      	movs	r4, #0
 800bfbe:	2202      	movs	r2, #2
 800bfc0:	b929      	cbnz	r1, 800bfce <_dtoa_r+0x49e>
 800bfc2:	2c00      	cmp	r4, #0
 800bfc4:	f43f af49 	beq.w	800be5a <_dtoa_r+0x32a>
 800bfc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bfcc:	e745      	b.n	800be5a <_dtoa_r+0x32a>
 800bfce:	07ce      	lsls	r6, r1, #31
 800bfd0:	d505      	bpl.n	800bfde <_dtoa_r+0x4ae>
 800bfd2:	ed90 6b00 	vldr	d6, [r0]
 800bfd6:	3201      	adds	r2, #1
 800bfd8:	2401      	movs	r4, #1
 800bfda:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bfde:	1049      	asrs	r1, r1, #1
 800bfe0:	3008      	adds	r0, #8
 800bfe2:	e7ed      	b.n	800bfc0 <_dtoa_r+0x490>
 800bfe4:	2202      	movs	r2, #2
 800bfe6:	e738      	b.n	800be5a <_dtoa_r+0x32a>
 800bfe8:	f8cd 8010 	str.w	r8, [sp, #16]
 800bfec:	4654      	mov	r4, sl
 800bfee:	e754      	b.n	800be9a <_dtoa_r+0x36a>
 800bff0:	4a54      	ldr	r2, [pc, #336]	@ (800c144 <_dtoa_r+0x614>)
 800bff2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800bff6:	ed12 4b02 	vldr	d4, [r2, #-8]
 800bffa:	9a08      	ldr	r2, [sp, #32]
 800bffc:	ec41 0b17 	vmov	d7, r0, r1
 800c000:	443c      	add	r4, r7
 800c002:	b34a      	cbz	r2, 800c058 <_dtoa_r+0x528>
 800c004:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800c008:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800c00c:	463e      	mov	r6, r7
 800c00e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c012:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c016:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c01a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c01e:	ee14 2a90 	vmov	r2, s9
 800c022:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c026:	3230      	adds	r2, #48	@ 0x30
 800c028:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c02c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c034:	f806 2b01 	strb.w	r2, [r6], #1
 800c038:	d438      	bmi.n	800c0ac <_dtoa_r+0x57c>
 800c03a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c03e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c046:	d462      	bmi.n	800c10e <_dtoa_r+0x5de>
 800c048:	42a6      	cmp	r6, r4
 800c04a:	f43f af4d 	beq.w	800bee8 <_dtoa_r+0x3b8>
 800c04e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c052:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c056:	e7e0      	b.n	800c01a <_dtoa_r+0x4ea>
 800c058:	4621      	mov	r1, r4
 800c05a:	463e      	mov	r6, r7
 800c05c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c060:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c064:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c068:	ee14 2a90 	vmov	r2, s9
 800c06c:	3230      	adds	r2, #48	@ 0x30
 800c06e:	f806 2b01 	strb.w	r2, [r6], #1
 800c072:	42a6      	cmp	r6, r4
 800c074:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c078:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c07c:	d119      	bne.n	800c0b2 <_dtoa_r+0x582>
 800c07e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800c082:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c086:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c08a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c08e:	dc3e      	bgt.n	800c10e <_dtoa_r+0x5de>
 800c090:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c094:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800c098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c09c:	f57f af24 	bpl.w	800bee8 <_dtoa_r+0x3b8>
 800c0a0:	460e      	mov	r6, r1
 800c0a2:	3901      	subs	r1, #1
 800c0a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c0a8:	2b30      	cmp	r3, #48	@ 0x30
 800c0aa:	d0f9      	beq.n	800c0a0 <_dtoa_r+0x570>
 800c0ac:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c0b0:	e758      	b.n	800bf64 <_dtoa_r+0x434>
 800c0b2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c0b6:	e7d5      	b.n	800c064 <_dtoa_r+0x534>
 800c0b8:	d10b      	bne.n	800c0d2 <_dtoa_r+0x5a2>
 800c0ba:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c0be:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c0c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c0c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c0ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0ce:	f2c0 8161 	blt.w	800c394 <_dtoa_r+0x864>
 800c0d2:	2400      	movs	r4, #0
 800c0d4:	4625      	mov	r5, r4
 800c0d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0d8:	43db      	mvns	r3, r3
 800c0da:	9304      	str	r3, [sp, #16]
 800c0dc:	463e      	mov	r6, r7
 800c0de:	f04f 0800 	mov.w	r8, #0
 800c0e2:	4621      	mov	r1, r4
 800c0e4:	4648      	mov	r0, r9
 800c0e6:	f000 fb03 	bl	800c6f0 <_Bfree>
 800c0ea:	2d00      	cmp	r5, #0
 800c0ec:	d0de      	beq.n	800c0ac <_dtoa_r+0x57c>
 800c0ee:	f1b8 0f00 	cmp.w	r8, #0
 800c0f2:	d005      	beq.n	800c100 <_dtoa_r+0x5d0>
 800c0f4:	45a8      	cmp	r8, r5
 800c0f6:	d003      	beq.n	800c100 <_dtoa_r+0x5d0>
 800c0f8:	4641      	mov	r1, r8
 800c0fa:	4648      	mov	r0, r9
 800c0fc:	f000 faf8 	bl	800c6f0 <_Bfree>
 800c100:	4629      	mov	r1, r5
 800c102:	4648      	mov	r0, r9
 800c104:	f000 faf4 	bl	800c6f0 <_Bfree>
 800c108:	e7d0      	b.n	800c0ac <_dtoa_r+0x57c>
 800c10a:	f8cd 8010 	str.w	r8, [sp, #16]
 800c10e:	4633      	mov	r3, r6
 800c110:	461e      	mov	r6, r3
 800c112:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c116:	2a39      	cmp	r2, #57	@ 0x39
 800c118:	d106      	bne.n	800c128 <_dtoa_r+0x5f8>
 800c11a:	429f      	cmp	r7, r3
 800c11c:	d1f8      	bne.n	800c110 <_dtoa_r+0x5e0>
 800c11e:	9a04      	ldr	r2, [sp, #16]
 800c120:	3201      	adds	r2, #1
 800c122:	9204      	str	r2, [sp, #16]
 800c124:	2230      	movs	r2, #48	@ 0x30
 800c126:	703a      	strb	r2, [r7, #0]
 800c128:	781a      	ldrb	r2, [r3, #0]
 800c12a:	3201      	adds	r2, #1
 800c12c:	701a      	strb	r2, [r3, #0]
 800c12e:	e7bd      	b.n	800c0ac <_dtoa_r+0x57c>
 800c130:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c134:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c13c:	f47f aeef 	bne.w	800bf1e <_dtoa_r+0x3ee>
 800c140:	e710      	b.n	800bf64 <_dtoa_r+0x434>
 800c142:	bf00      	nop
 800c144:	0800dab0 	.word	0x0800dab0
 800c148:	0800da88 	.word	0x0800da88
 800c14c:	9908      	ldr	r1, [sp, #32]
 800c14e:	2900      	cmp	r1, #0
 800c150:	f000 80e3 	beq.w	800c31a <_dtoa_r+0x7ea>
 800c154:	9907      	ldr	r1, [sp, #28]
 800c156:	2901      	cmp	r1, #1
 800c158:	f300 80c8 	bgt.w	800c2ec <_dtoa_r+0x7bc>
 800c15c:	2d00      	cmp	r5, #0
 800c15e:	f000 80c1 	beq.w	800c2e4 <_dtoa_r+0x7b4>
 800c162:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c166:	9e05      	ldr	r6, [sp, #20]
 800c168:	461c      	mov	r4, r3
 800c16a:	9304      	str	r3, [sp, #16]
 800c16c:	9b05      	ldr	r3, [sp, #20]
 800c16e:	4413      	add	r3, r2
 800c170:	9305      	str	r3, [sp, #20]
 800c172:	9b06      	ldr	r3, [sp, #24]
 800c174:	2101      	movs	r1, #1
 800c176:	4413      	add	r3, r2
 800c178:	4648      	mov	r0, r9
 800c17a:	9306      	str	r3, [sp, #24]
 800c17c:	f000 fb6c 	bl	800c858 <__i2b>
 800c180:	9b04      	ldr	r3, [sp, #16]
 800c182:	4605      	mov	r5, r0
 800c184:	b166      	cbz	r6, 800c1a0 <_dtoa_r+0x670>
 800c186:	9a06      	ldr	r2, [sp, #24]
 800c188:	2a00      	cmp	r2, #0
 800c18a:	dd09      	ble.n	800c1a0 <_dtoa_r+0x670>
 800c18c:	42b2      	cmp	r2, r6
 800c18e:	9905      	ldr	r1, [sp, #20]
 800c190:	bfa8      	it	ge
 800c192:	4632      	movge	r2, r6
 800c194:	1a89      	subs	r1, r1, r2
 800c196:	9105      	str	r1, [sp, #20]
 800c198:	9906      	ldr	r1, [sp, #24]
 800c19a:	1ab6      	subs	r6, r6, r2
 800c19c:	1a8a      	subs	r2, r1, r2
 800c19e:	9206      	str	r2, [sp, #24]
 800c1a0:	b1fb      	cbz	r3, 800c1e2 <_dtoa_r+0x6b2>
 800c1a2:	9a08      	ldr	r2, [sp, #32]
 800c1a4:	2a00      	cmp	r2, #0
 800c1a6:	f000 80bc 	beq.w	800c322 <_dtoa_r+0x7f2>
 800c1aa:	b19c      	cbz	r4, 800c1d4 <_dtoa_r+0x6a4>
 800c1ac:	4629      	mov	r1, r5
 800c1ae:	4622      	mov	r2, r4
 800c1b0:	4648      	mov	r0, r9
 800c1b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1b4:	f000 fc10 	bl	800c9d8 <__pow5mult>
 800c1b8:	9a01      	ldr	r2, [sp, #4]
 800c1ba:	4601      	mov	r1, r0
 800c1bc:	4605      	mov	r5, r0
 800c1be:	4648      	mov	r0, r9
 800c1c0:	f000 fb60 	bl	800c884 <__multiply>
 800c1c4:	9901      	ldr	r1, [sp, #4]
 800c1c6:	9004      	str	r0, [sp, #16]
 800c1c8:	4648      	mov	r0, r9
 800c1ca:	f000 fa91 	bl	800c6f0 <_Bfree>
 800c1ce:	9a04      	ldr	r2, [sp, #16]
 800c1d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1d2:	9201      	str	r2, [sp, #4]
 800c1d4:	1b1a      	subs	r2, r3, r4
 800c1d6:	d004      	beq.n	800c1e2 <_dtoa_r+0x6b2>
 800c1d8:	9901      	ldr	r1, [sp, #4]
 800c1da:	4648      	mov	r0, r9
 800c1dc:	f000 fbfc 	bl	800c9d8 <__pow5mult>
 800c1e0:	9001      	str	r0, [sp, #4]
 800c1e2:	2101      	movs	r1, #1
 800c1e4:	4648      	mov	r0, r9
 800c1e6:	f000 fb37 	bl	800c858 <__i2b>
 800c1ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	f000 81d0 	beq.w	800c594 <_dtoa_r+0xa64>
 800c1f4:	461a      	mov	r2, r3
 800c1f6:	4601      	mov	r1, r0
 800c1f8:	4648      	mov	r0, r9
 800c1fa:	f000 fbed 	bl	800c9d8 <__pow5mult>
 800c1fe:	9b07      	ldr	r3, [sp, #28]
 800c200:	2b01      	cmp	r3, #1
 800c202:	4604      	mov	r4, r0
 800c204:	f300 8095 	bgt.w	800c332 <_dtoa_r+0x802>
 800c208:	9b02      	ldr	r3, [sp, #8]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	f040 808b 	bne.w	800c326 <_dtoa_r+0x7f6>
 800c210:	9b03      	ldr	r3, [sp, #12]
 800c212:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c216:	2a00      	cmp	r2, #0
 800c218:	f040 8087 	bne.w	800c32a <_dtoa_r+0x7fa>
 800c21c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c220:	0d12      	lsrs	r2, r2, #20
 800c222:	0512      	lsls	r2, r2, #20
 800c224:	2a00      	cmp	r2, #0
 800c226:	f000 8082 	beq.w	800c32e <_dtoa_r+0x7fe>
 800c22a:	9b05      	ldr	r3, [sp, #20]
 800c22c:	3301      	adds	r3, #1
 800c22e:	9305      	str	r3, [sp, #20]
 800c230:	9b06      	ldr	r3, [sp, #24]
 800c232:	3301      	adds	r3, #1
 800c234:	9306      	str	r3, [sp, #24]
 800c236:	2301      	movs	r3, #1
 800c238:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c23a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f000 81af 	beq.w	800c5a0 <_dtoa_r+0xa70>
 800c242:	6922      	ldr	r2, [r4, #16]
 800c244:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c248:	6910      	ldr	r0, [r2, #16]
 800c24a:	f000 fab9 	bl	800c7c0 <__hi0bits>
 800c24e:	f1c0 0020 	rsb	r0, r0, #32
 800c252:	9b06      	ldr	r3, [sp, #24]
 800c254:	4418      	add	r0, r3
 800c256:	f010 001f 	ands.w	r0, r0, #31
 800c25a:	d076      	beq.n	800c34a <_dtoa_r+0x81a>
 800c25c:	f1c0 0220 	rsb	r2, r0, #32
 800c260:	2a04      	cmp	r2, #4
 800c262:	dd69      	ble.n	800c338 <_dtoa_r+0x808>
 800c264:	9b05      	ldr	r3, [sp, #20]
 800c266:	f1c0 001c 	rsb	r0, r0, #28
 800c26a:	4403      	add	r3, r0
 800c26c:	9305      	str	r3, [sp, #20]
 800c26e:	9b06      	ldr	r3, [sp, #24]
 800c270:	4406      	add	r6, r0
 800c272:	4403      	add	r3, r0
 800c274:	9306      	str	r3, [sp, #24]
 800c276:	9b05      	ldr	r3, [sp, #20]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	dd05      	ble.n	800c288 <_dtoa_r+0x758>
 800c27c:	9901      	ldr	r1, [sp, #4]
 800c27e:	461a      	mov	r2, r3
 800c280:	4648      	mov	r0, r9
 800c282:	f000 fc03 	bl	800ca8c <__lshift>
 800c286:	9001      	str	r0, [sp, #4]
 800c288:	9b06      	ldr	r3, [sp, #24]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	dd05      	ble.n	800c29a <_dtoa_r+0x76a>
 800c28e:	4621      	mov	r1, r4
 800c290:	461a      	mov	r2, r3
 800c292:	4648      	mov	r0, r9
 800c294:	f000 fbfa 	bl	800ca8c <__lshift>
 800c298:	4604      	mov	r4, r0
 800c29a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d056      	beq.n	800c34e <_dtoa_r+0x81e>
 800c2a0:	9801      	ldr	r0, [sp, #4]
 800c2a2:	4621      	mov	r1, r4
 800c2a4:	f000 fc5e 	bl	800cb64 <__mcmp>
 800c2a8:	2800      	cmp	r0, #0
 800c2aa:	da50      	bge.n	800c34e <_dtoa_r+0x81e>
 800c2ac:	f108 33ff 	add.w	r3, r8, #4294967295
 800c2b0:	9304      	str	r3, [sp, #16]
 800c2b2:	9901      	ldr	r1, [sp, #4]
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	220a      	movs	r2, #10
 800c2b8:	4648      	mov	r0, r9
 800c2ba:	f000 fa3b 	bl	800c734 <__multadd>
 800c2be:	9b08      	ldr	r3, [sp, #32]
 800c2c0:	9001      	str	r0, [sp, #4]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	f000 816e 	beq.w	800c5a4 <_dtoa_r+0xa74>
 800c2c8:	4629      	mov	r1, r5
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	220a      	movs	r2, #10
 800c2ce:	4648      	mov	r0, r9
 800c2d0:	f000 fa30 	bl	800c734 <__multadd>
 800c2d4:	f1bb 0f00 	cmp.w	fp, #0
 800c2d8:	4605      	mov	r5, r0
 800c2da:	dc64      	bgt.n	800c3a6 <_dtoa_r+0x876>
 800c2dc:	9b07      	ldr	r3, [sp, #28]
 800c2de:	2b02      	cmp	r3, #2
 800c2e0:	dc3e      	bgt.n	800c360 <_dtoa_r+0x830>
 800c2e2:	e060      	b.n	800c3a6 <_dtoa_r+0x876>
 800c2e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c2e6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c2ea:	e73c      	b.n	800c166 <_dtoa_r+0x636>
 800c2ec:	f10a 34ff 	add.w	r4, sl, #4294967295
 800c2f0:	42a3      	cmp	r3, r4
 800c2f2:	bfbf      	itttt	lt
 800c2f4:	1ae2      	sublt	r2, r4, r3
 800c2f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c2f8:	189b      	addlt	r3, r3, r2
 800c2fa:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800c2fc:	bfae      	itee	ge
 800c2fe:	1b1c      	subge	r4, r3, r4
 800c300:	4623      	movlt	r3, r4
 800c302:	2400      	movlt	r4, #0
 800c304:	f1ba 0f00 	cmp.w	sl, #0
 800c308:	bfb5      	itete	lt
 800c30a:	9a05      	ldrlt	r2, [sp, #20]
 800c30c:	9e05      	ldrge	r6, [sp, #20]
 800c30e:	eba2 060a 	sublt.w	r6, r2, sl
 800c312:	4652      	movge	r2, sl
 800c314:	bfb8      	it	lt
 800c316:	2200      	movlt	r2, #0
 800c318:	e727      	b.n	800c16a <_dtoa_r+0x63a>
 800c31a:	9e05      	ldr	r6, [sp, #20]
 800c31c:	9d08      	ldr	r5, [sp, #32]
 800c31e:	461c      	mov	r4, r3
 800c320:	e730      	b.n	800c184 <_dtoa_r+0x654>
 800c322:	461a      	mov	r2, r3
 800c324:	e758      	b.n	800c1d8 <_dtoa_r+0x6a8>
 800c326:	2300      	movs	r3, #0
 800c328:	e786      	b.n	800c238 <_dtoa_r+0x708>
 800c32a:	9b02      	ldr	r3, [sp, #8]
 800c32c:	e784      	b.n	800c238 <_dtoa_r+0x708>
 800c32e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c330:	e783      	b.n	800c23a <_dtoa_r+0x70a>
 800c332:	2300      	movs	r3, #0
 800c334:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c336:	e784      	b.n	800c242 <_dtoa_r+0x712>
 800c338:	d09d      	beq.n	800c276 <_dtoa_r+0x746>
 800c33a:	9b05      	ldr	r3, [sp, #20]
 800c33c:	321c      	adds	r2, #28
 800c33e:	4413      	add	r3, r2
 800c340:	9305      	str	r3, [sp, #20]
 800c342:	9b06      	ldr	r3, [sp, #24]
 800c344:	4416      	add	r6, r2
 800c346:	4413      	add	r3, r2
 800c348:	e794      	b.n	800c274 <_dtoa_r+0x744>
 800c34a:	4602      	mov	r2, r0
 800c34c:	e7f5      	b.n	800c33a <_dtoa_r+0x80a>
 800c34e:	f1ba 0f00 	cmp.w	sl, #0
 800c352:	f8cd 8010 	str.w	r8, [sp, #16]
 800c356:	46d3      	mov	fp, sl
 800c358:	dc21      	bgt.n	800c39e <_dtoa_r+0x86e>
 800c35a:	9b07      	ldr	r3, [sp, #28]
 800c35c:	2b02      	cmp	r3, #2
 800c35e:	dd1e      	ble.n	800c39e <_dtoa_r+0x86e>
 800c360:	f1bb 0f00 	cmp.w	fp, #0
 800c364:	f47f aeb7 	bne.w	800c0d6 <_dtoa_r+0x5a6>
 800c368:	4621      	mov	r1, r4
 800c36a:	465b      	mov	r3, fp
 800c36c:	2205      	movs	r2, #5
 800c36e:	4648      	mov	r0, r9
 800c370:	f000 f9e0 	bl	800c734 <__multadd>
 800c374:	4601      	mov	r1, r0
 800c376:	4604      	mov	r4, r0
 800c378:	9801      	ldr	r0, [sp, #4]
 800c37a:	f000 fbf3 	bl	800cb64 <__mcmp>
 800c37e:	2800      	cmp	r0, #0
 800c380:	f77f aea9 	ble.w	800c0d6 <_dtoa_r+0x5a6>
 800c384:	463e      	mov	r6, r7
 800c386:	2331      	movs	r3, #49	@ 0x31
 800c388:	f806 3b01 	strb.w	r3, [r6], #1
 800c38c:	9b04      	ldr	r3, [sp, #16]
 800c38e:	3301      	adds	r3, #1
 800c390:	9304      	str	r3, [sp, #16]
 800c392:	e6a4      	b.n	800c0de <_dtoa_r+0x5ae>
 800c394:	f8cd 8010 	str.w	r8, [sp, #16]
 800c398:	4654      	mov	r4, sl
 800c39a:	4625      	mov	r5, r4
 800c39c:	e7f2      	b.n	800c384 <_dtoa_r+0x854>
 800c39e:	9b08      	ldr	r3, [sp, #32]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	f000 8103 	beq.w	800c5ac <_dtoa_r+0xa7c>
 800c3a6:	2e00      	cmp	r6, #0
 800c3a8:	dd05      	ble.n	800c3b6 <_dtoa_r+0x886>
 800c3aa:	4629      	mov	r1, r5
 800c3ac:	4632      	mov	r2, r6
 800c3ae:	4648      	mov	r0, r9
 800c3b0:	f000 fb6c 	bl	800ca8c <__lshift>
 800c3b4:	4605      	mov	r5, r0
 800c3b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d058      	beq.n	800c46e <_dtoa_r+0x93e>
 800c3bc:	6869      	ldr	r1, [r5, #4]
 800c3be:	4648      	mov	r0, r9
 800c3c0:	f000 f956 	bl	800c670 <_Balloc>
 800c3c4:	4606      	mov	r6, r0
 800c3c6:	b928      	cbnz	r0, 800c3d4 <_dtoa_r+0x8a4>
 800c3c8:	4b82      	ldr	r3, [pc, #520]	@ (800c5d4 <_dtoa_r+0xaa4>)
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c3d0:	f7ff bbc7 	b.w	800bb62 <_dtoa_r+0x32>
 800c3d4:	692a      	ldr	r2, [r5, #16]
 800c3d6:	3202      	adds	r2, #2
 800c3d8:	0092      	lsls	r2, r2, #2
 800c3da:	f105 010c 	add.w	r1, r5, #12
 800c3de:	300c      	adds	r0, #12
 800c3e0:	f001 f892 	bl	800d508 <memcpy>
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	4631      	mov	r1, r6
 800c3e8:	4648      	mov	r0, r9
 800c3ea:	f000 fb4f 	bl	800ca8c <__lshift>
 800c3ee:	1c7b      	adds	r3, r7, #1
 800c3f0:	9305      	str	r3, [sp, #20]
 800c3f2:	eb07 030b 	add.w	r3, r7, fp
 800c3f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3f8:	9b02      	ldr	r3, [sp, #8]
 800c3fa:	f003 0301 	and.w	r3, r3, #1
 800c3fe:	46a8      	mov	r8, r5
 800c400:	9308      	str	r3, [sp, #32]
 800c402:	4605      	mov	r5, r0
 800c404:	9b05      	ldr	r3, [sp, #20]
 800c406:	9801      	ldr	r0, [sp, #4]
 800c408:	4621      	mov	r1, r4
 800c40a:	f103 3bff 	add.w	fp, r3, #4294967295
 800c40e:	f7ff fb06 	bl	800ba1e <quorem>
 800c412:	4641      	mov	r1, r8
 800c414:	9002      	str	r0, [sp, #8]
 800c416:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c41a:	9801      	ldr	r0, [sp, #4]
 800c41c:	f000 fba2 	bl	800cb64 <__mcmp>
 800c420:	462a      	mov	r2, r5
 800c422:	9006      	str	r0, [sp, #24]
 800c424:	4621      	mov	r1, r4
 800c426:	4648      	mov	r0, r9
 800c428:	f000 fbb8 	bl	800cb9c <__mdiff>
 800c42c:	68c2      	ldr	r2, [r0, #12]
 800c42e:	4606      	mov	r6, r0
 800c430:	b9fa      	cbnz	r2, 800c472 <_dtoa_r+0x942>
 800c432:	4601      	mov	r1, r0
 800c434:	9801      	ldr	r0, [sp, #4]
 800c436:	f000 fb95 	bl	800cb64 <__mcmp>
 800c43a:	4602      	mov	r2, r0
 800c43c:	4631      	mov	r1, r6
 800c43e:	4648      	mov	r0, r9
 800c440:	920a      	str	r2, [sp, #40]	@ 0x28
 800c442:	f000 f955 	bl	800c6f0 <_Bfree>
 800c446:	9b07      	ldr	r3, [sp, #28]
 800c448:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c44a:	9e05      	ldr	r6, [sp, #20]
 800c44c:	ea43 0102 	orr.w	r1, r3, r2
 800c450:	9b08      	ldr	r3, [sp, #32]
 800c452:	4319      	orrs	r1, r3
 800c454:	d10f      	bne.n	800c476 <_dtoa_r+0x946>
 800c456:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c45a:	d028      	beq.n	800c4ae <_dtoa_r+0x97e>
 800c45c:	9b06      	ldr	r3, [sp, #24]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	dd02      	ble.n	800c468 <_dtoa_r+0x938>
 800c462:	9b02      	ldr	r3, [sp, #8]
 800c464:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800c468:	f88b a000 	strb.w	sl, [fp]
 800c46c:	e639      	b.n	800c0e2 <_dtoa_r+0x5b2>
 800c46e:	4628      	mov	r0, r5
 800c470:	e7bd      	b.n	800c3ee <_dtoa_r+0x8be>
 800c472:	2201      	movs	r2, #1
 800c474:	e7e2      	b.n	800c43c <_dtoa_r+0x90c>
 800c476:	9b06      	ldr	r3, [sp, #24]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	db04      	blt.n	800c486 <_dtoa_r+0x956>
 800c47c:	9907      	ldr	r1, [sp, #28]
 800c47e:	430b      	orrs	r3, r1
 800c480:	9908      	ldr	r1, [sp, #32]
 800c482:	430b      	orrs	r3, r1
 800c484:	d120      	bne.n	800c4c8 <_dtoa_r+0x998>
 800c486:	2a00      	cmp	r2, #0
 800c488:	ddee      	ble.n	800c468 <_dtoa_r+0x938>
 800c48a:	9901      	ldr	r1, [sp, #4]
 800c48c:	2201      	movs	r2, #1
 800c48e:	4648      	mov	r0, r9
 800c490:	f000 fafc 	bl	800ca8c <__lshift>
 800c494:	4621      	mov	r1, r4
 800c496:	9001      	str	r0, [sp, #4]
 800c498:	f000 fb64 	bl	800cb64 <__mcmp>
 800c49c:	2800      	cmp	r0, #0
 800c49e:	dc03      	bgt.n	800c4a8 <_dtoa_r+0x978>
 800c4a0:	d1e2      	bne.n	800c468 <_dtoa_r+0x938>
 800c4a2:	f01a 0f01 	tst.w	sl, #1
 800c4a6:	d0df      	beq.n	800c468 <_dtoa_r+0x938>
 800c4a8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c4ac:	d1d9      	bne.n	800c462 <_dtoa_r+0x932>
 800c4ae:	2339      	movs	r3, #57	@ 0x39
 800c4b0:	f88b 3000 	strb.w	r3, [fp]
 800c4b4:	4633      	mov	r3, r6
 800c4b6:	461e      	mov	r6, r3
 800c4b8:	3b01      	subs	r3, #1
 800c4ba:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c4be:	2a39      	cmp	r2, #57	@ 0x39
 800c4c0:	d053      	beq.n	800c56a <_dtoa_r+0xa3a>
 800c4c2:	3201      	adds	r2, #1
 800c4c4:	701a      	strb	r2, [r3, #0]
 800c4c6:	e60c      	b.n	800c0e2 <_dtoa_r+0x5b2>
 800c4c8:	2a00      	cmp	r2, #0
 800c4ca:	dd07      	ble.n	800c4dc <_dtoa_r+0x9ac>
 800c4cc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c4d0:	d0ed      	beq.n	800c4ae <_dtoa_r+0x97e>
 800c4d2:	f10a 0301 	add.w	r3, sl, #1
 800c4d6:	f88b 3000 	strb.w	r3, [fp]
 800c4da:	e602      	b.n	800c0e2 <_dtoa_r+0x5b2>
 800c4dc:	9b05      	ldr	r3, [sp, #20]
 800c4de:	9a05      	ldr	r2, [sp, #20]
 800c4e0:	f803 ac01 	strb.w	sl, [r3, #-1]
 800c4e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d029      	beq.n	800c53e <_dtoa_r+0xa0e>
 800c4ea:	9901      	ldr	r1, [sp, #4]
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	220a      	movs	r2, #10
 800c4f0:	4648      	mov	r0, r9
 800c4f2:	f000 f91f 	bl	800c734 <__multadd>
 800c4f6:	45a8      	cmp	r8, r5
 800c4f8:	9001      	str	r0, [sp, #4]
 800c4fa:	f04f 0300 	mov.w	r3, #0
 800c4fe:	f04f 020a 	mov.w	r2, #10
 800c502:	4641      	mov	r1, r8
 800c504:	4648      	mov	r0, r9
 800c506:	d107      	bne.n	800c518 <_dtoa_r+0x9e8>
 800c508:	f000 f914 	bl	800c734 <__multadd>
 800c50c:	4680      	mov	r8, r0
 800c50e:	4605      	mov	r5, r0
 800c510:	9b05      	ldr	r3, [sp, #20]
 800c512:	3301      	adds	r3, #1
 800c514:	9305      	str	r3, [sp, #20]
 800c516:	e775      	b.n	800c404 <_dtoa_r+0x8d4>
 800c518:	f000 f90c 	bl	800c734 <__multadd>
 800c51c:	4629      	mov	r1, r5
 800c51e:	4680      	mov	r8, r0
 800c520:	2300      	movs	r3, #0
 800c522:	220a      	movs	r2, #10
 800c524:	4648      	mov	r0, r9
 800c526:	f000 f905 	bl	800c734 <__multadd>
 800c52a:	4605      	mov	r5, r0
 800c52c:	e7f0      	b.n	800c510 <_dtoa_r+0x9e0>
 800c52e:	f1bb 0f00 	cmp.w	fp, #0
 800c532:	bfcc      	ite	gt
 800c534:	465e      	movgt	r6, fp
 800c536:	2601      	movle	r6, #1
 800c538:	443e      	add	r6, r7
 800c53a:	f04f 0800 	mov.w	r8, #0
 800c53e:	9901      	ldr	r1, [sp, #4]
 800c540:	2201      	movs	r2, #1
 800c542:	4648      	mov	r0, r9
 800c544:	f000 faa2 	bl	800ca8c <__lshift>
 800c548:	4621      	mov	r1, r4
 800c54a:	9001      	str	r0, [sp, #4]
 800c54c:	f000 fb0a 	bl	800cb64 <__mcmp>
 800c550:	2800      	cmp	r0, #0
 800c552:	dcaf      	bgt.n	800c4b4 <_dtoa_r+0x984>
 800c554:	d102      	bne.n	800c55c <_dtoa_r+0xa2c>
 800c556:	f01a 0f01 	tst.w	sl, #1
 800c55a:	d1ab      	bne.n	800c4b4 <_dtoa_r+0x984>
 800c55c:	4633      	mov	r3, r6
 800c55e:	461e      	mov	r6, r3
 800c560:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c564:	2a30      	cmp	r2, #48	@ 0x30
 800c566:	d0fa      	beq.n	800c55e <_dtoa_r+0xa2e>
 800c568:	e5bb      	b.n	800c0e2 <_dtoa_r+0x5b2>
 800c56a:	429f      	cmp	r7, r3
 800c56c:	d1a3      	bne.n	800c4b6 <_dtoa_r+0x986>
 800c56e:	9b04      	ldr	r3, [sp, #16]
 800c570:	3301      	adds	r3, #1
 800c572:	9304      	str	r3, [sp, #16]
 800c574:	2331      	movs	r3, #49	@ 0x31
 800c576:	703b      	strb	r3, [r7, #0]
 800c578:	e5b3      	b.n	800c0e2 <_dtoa_r+0x5b2>
 800c57a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c57c:	4f16      	ldr	r7, [pc, #88]	@ (800c5d8 <_dtoa_r+0xaa8>)
 800c57e:	b11b      	cbz	r3, 800c588 <_dtoa_r+0xa58>
 800c580:	f107 0308 	add.w	r3, r7, #8
 800c584:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c586:	6013      	str	r3, [r2, #0]
 800c588:	4638      	mov	r0, r7
 800c58a:	b011      	add	sp, #68	@ 0x44
 800c58c:	ecbd 8b02 	vpop	{d8}
 800c590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c594:	9b07      	ldr	r3, [sp, #28]
 800c596:	2b01      	cmp	r3, #1
 800c598:	f77f ae36 	ble.w	800c208 <_dtoa_r+0x6d8>
 800c59c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c59e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c5a0:	2001      	movs	r0, #1
 800c5a2:	e656      	b.n	800c252 <_dtoa_r+0x722>
 800c5a4:	f1bb 0f00 	cmp.w	fp, #0
 800c5a8:	f77f aed7 	ble.w	800c35a <_dtoa_r+0x82a>
 800c5ac:	463e      	mov	r6, r7
 800c5ae:	9801      	ldr	r0, [sp, #4]
 800c5b0:	4621      	mov	r1, r4
 800c5b2:	f7ff fa34 	bl	800ba1e <quorem>
 800c5b6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c5ba:	f806 ab01 	strb.w	sl, [r6], #1
 800c5be:	1bf2      	subs	r2, r6, r7
 800c5c0:	4593      	cmp	fp, r2
 800c5c2:	ddb4      	ble.n	800c52e <_dtoa_r+0x9fe>
 800c5c4:	9901      	ldr	r1, [sp, #4]
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	220a      	movs	r2, #10
 800c5ca:	4648      	mov	r0, r9
 800c5cc:	f000 f8b2 	bl	800c734 <__multadd>
 800c5d0:	9001      	str	r0, [sp, #4]
 800c5d2:	e7ec      	b.n	800c5ae <_dtoa_r+0xa7e>
 800c5d4:	0800da0c 	.word	0x0800da0c
 800c5d8:	0800d990 	.word	0x0800d990

0800c5dc <_free_r>:
 800c5dc:	b538      	push	{r3, r4, r5, lr}
 800c5de:	4605      	mov	r5, r0
 800c5e0:	2900      	cmp	r1, #0
 800c5e2:	d041      	beq.n	800c668 <_free_r+0x8c>
 800c5e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5e8:	1f0c      	subs	r4, r1, #4
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	bfb8      	it	lt
 800c5ee:	18e4      	addlt	r4, r4, r3
 800c5f0:	f7fe faea 	bl	800abc8 <__malloc_lock>
 800c5f4:	4a1d      	ldr	r2, [pc, #116]	@ (800c66c <_free_r+0x90>)
 800c5f6:	6813      	ldr	r3, [r2, #0]
 800c5f8:	b933      	cbnz	r3, 800c608 <_free_r+0x2c>
 800c5fa:	6063      	str	r3, [r4, #4]
 800c5fc:	6014      	str	r4, [r2, #0]
 800c5fe:	4628      	mov	r0, r5
 800c600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c604:	f7fe bae6 	b.w	800abd4 <__malloc_unlock>
 800c608:	42a3      	cmp	r3, r4
 800c60a:	d908      	bls.n	800c61e <_free_r+0x42>
 800c60c:	6820      	ldr	r0, [r4, #0]
 800c60e:	1821      	adds	r1, r4, r0
 800c610:	428b      	cmp	r3, r1
 800c612:	bf01      	itttt	eq
 800c614:	6819      	ldreq	r1, [r3, #0]
 800c616:	685b      	ldreq	r3, [r3, #4]
 800c618:	1809      	addeq	r1, r1, r0
 800c61a:	6021      	streq	r1, [r4, #0]
 800c61c:	e7ed      	b.n	800c5fa <_free_r+0x1e>
 800c61e:	461a      	mov	r2, r3
 800c620:	685b      	ldr	r3, [r3, #4]
 800c622:	b10b      	cbz	r3, 800c628 <_free_r+0x4c>
 800c624:	42a3      	cmp	r3, r4
 800c626:	d9fa      	bls.n	800c61e <_free_r+0x42>
 800c628:	6811      	ldr	r1, [r2, #0]
 800c62a:	1850      	adds	r0, r2, r1
 800c62c:	42a0      	cmp	r0, r4
 800c62e:	d10b      	bne.n	800c648 <_free_r+0x6c>
 800c630:	6820      	ldr	r0, [r4, #0]
 800c632:	4401      	add	r1, r0
 800c634:	1850      	adds	r0, r2, r1
 800c636:	4283      	cmp	r3, r0
 800c638:	6011      	str	r1, [r2, #0]
 800c63a:	d1e0      	bne.n	800c5fe <_free_r+0x22>
 800c63c:	6818      	ldr	r0, [r3, #0]
 800c63e:	685b      	ldr	r3, [r3, #4]
 800c640:	6053      	str	r3, [r2, #4]
 800c642:	4408      	add	r0, r1
 800c644:	6010      	str	r0, [r2, #0]
 800c646:	e7da      	b.n	800c5fe <_free_r+0x22>
 800c648:	d902      	bls.n	800c650 <_free_r+0x74>
 800c64a:	230c      	movs	r3, #12
 800c64c:	602b      	str	r3, [r5, #0]
 800c64e:	e7d6      	b.n	800c5fe <_free_r+0x22>
 800c650:	6820      	ldr	r0, [r4, #0]
 800c652:	1821      	adds	r1, r4, r0
 800c654:	428b      	cmp	r3, r1
 800c656:	bf04      	itt	eq
 800c658:	6819      	ldreq	r1, [r3, #0]
 800c65a:	685b      	ldreq	r3, [r3, #4]
 800c65c:	6063      	str	r3, [r4, #4]
 800c65e:	bf04      	itt	eq
 800c660:	1809      	addeq	r1, r1, r0
 800c662:	6021      	streq	r1, [r4, #0]
 800c664:	6054      	str	r4, [r2, #4]
 800c666:	e7ca      	b.n	800c5fe <_free_r+0x22>
 800c668:	bd38      	pop	{r3, r4, r5, pc}
 800c66a:	bf00      	nop
 800c66c:	24000574 	.word	0x24000574

0800c670 <_Balloc>:
 800c670:	b570      	push	{r4, r5, r6, lr}
 800c672:	69c6      	ldr	r6, [r0, #28]
 800c674:	4604      	mov	r4, r0
 800c676:	460d      	mov	r5, r1
 800c678:	b976      	cbnz	r6, 800c698 <_Balloc+0x28>
 800c67a:	2010      	movs	r0, #16
 800c67c:	f7fe f9fa 	bl	800aa74 <malloc>
 800c680:	4602      	mov	r2, r0
 800c682:	61e0      	str	r0, [r4, #28]
 800c684:	b920      	cbnz	r0, 800c690 <_Balloc+0x20>
 800c686:	4b18      	ldr	r3, [pc, #96]	@ (800c6e8 <_Balloc+0x78>)
 800c688:	4818      	ldr	r0, [pc, #96]	@ (800c6ec <_Balloc+0x7c>)
 800c68a:	216b      	movs	r1, #107	@ 0x6b
 800c68c:	f000 ff4a 	bl	800d524 <__assert_func>
 800c690:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c694:	6006      	str	r6, [r0, #0]
 800c696:	60c6      	str	r6, [r0, #12]
 800c698:	69e6      	ldr	r6, [r4, #28]
 800c69a:	68f3      	ldr	r3, [r6, #12]
 800c69c:	b183      	cbz	r3, 800c6c0 <_Balloc+0x50>
 800c69e:	69e3      	ldr	r3, [r4, #28]
 800c6a0:	68db      	ldr	r3, [r3, #12]
 800c6a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c6a6:	b9b8      	cbnz	r0, 800c6d8 <_Balloc+0x68>
 800c6a8:	2101      	movs	r1, #1
 800c6aa:	fa01 f605 	lsl.w	r6, r1, r5
 800c6ae:	1d72      	adds	r2, r6, #5
 800c6b0:	0092      	lsls	r2, r2, #2
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f000 ff54 	bl	800d560 <_calloc_r>
 800c6b8:	b160      	cbz	r0, 800c6d4 <_Balloc+0x64>
 800c6ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c6be:	e00e      	b.n	800c6de <_Balloc+0x6e>
 800c6c0:	2221      	movs	r2, #33	@ 0x21
 800c6c2:	2104      	movs	r1, #4
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	f000 ff4b 	bl	800d560 <_calloc_r>
 800c6ca:	69e3      	ldr	r3, [r4, #28]
 800c6cc:	60f0      	str	r0, [r6, #12]
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d1e4      	bne.n	800c69e <_Balloc+0x2e>
 800c6d4:	2000      	movs	r0, #0
 800c6d6:	bd70      	pop	{r4, r5, r6, pc}
 800c6d8:	6802      	ldr	r2, [r0, #0]
 800c6da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c6de:	2300      	movs	r3, #0
 800c6e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c6e4:	e7f7      	b.n	800c6d6 <_Balloc+0x66>
 800c6e6:	bf00      	nop
 800c6e8:	0800d99d 	.word	0x0800d99d
 800c6ec:	0800da1d 	.word	0x0800da1d

0800c6f0 <_Bfree>:
 800c6f0:	b570      	push	{r4, r5, r6, lr}
 800c6f2:	69c6      	ldr	r6, [r0, #28]
 800c6f4:	4605      	mov	r5, r0
 800c6f6:	460c      	mov	r4, r1
 800c6f8:	b976      	cbnz	r6, 800c718 <_Bfree+0x28>
 800c6fa:	2010      	movs	r0, #16
 800c6fc:	f7fe f9ba 	bl	800aa74 <malloc>
 800c700:	4602      	mov	r2, r0
 800c702:	61e8      	str	r0, [r5, #28]
 800c704:	b920      	cbnz	r0, 800c710 <_Bfree+0x20>
 800c706:	4b09      	ldr	r3, [pc, #36]	@ (800c72c <_Bfree+0x3c>)
 800c708:	4809      	ldr	r0, [pc, #36]	@ (800c730 <_Bfree+0x40>)
 800c70a:	218f      	movs	r1, #143	@ 0x8f
 800c70c:	f000 ff0a 	bl	800d524 <__assert_func>
 800c710:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c714:	6006      	str	r6, [r0, #0]
 800c716:	60c6      	str	r6, [r0, #12]
 800c718:	b13c      	cbz	r4, 800c72a <_Bfree+0x3a>
 800c71a:	69eb      	ldr	r3, [r5, #28]
 800c71c:	6862      	ldr	r2, [r4, #4]
 800c71e:	68db      	ldr	r3, [r3, #12]
 800c720:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c724:	6021      	str	r1, [r4, #0]
 800c726:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c72a:	bd70      	pop	{r4, r5, r6, pc}
 800c72c:	0800d99d 	.word	0x0800d99d
 800c730:	0800da1d 	.word	0x0800da1d

0800c734 <__multadd>:
 800c734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c738:	690d      	ldr	r5, [r1, #16]
 800c73a:	4607      	mov	r7, r0
 800c73c:	460c      	mov	r4, r1
 800c73e:	461e      	mov	r6, r3
 800c740:	f101 0c14 	add.w	ip, r1, #20
 800c744:	2000      	movs	r0, #0
 800c746:	f8dc 3000 	ldr.w	r3, [ip]
 800c74a:	b299      	uxth	r1, r3
 800c74c:	fb02 6101 	mla	r1, r2, r1, r6
 800c750:	0c1e      	lsrs	r6, r3, #16
 800c752:	0c0b      	lsrs	r3, r1, #16
 800c754:	fb02 3306 	mla	r3, r2, r6, r3
 800c758:	b289      	uxth	r1, r1
 800c75a:	3001      	adds	r0, #1
 800c75c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c760:	4285      	cmp	r5, r0
 800c762:	f84c 1b04 	str.w	r1, [ip], #4
 800c766:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c76a:	dcec      	bgt.n	800c746 <__multadd+0x12>
 800c76c:	b30e      	cbz	r6, 800c7b2 <__multadd+0x7e>
 800c76e:	68a3      	ldr	r3, [r4, #8]
 800c770:	42ab      	cmp	r3, r5
 800c772:	dc19      	bgt.n	800c7a8 <__multadd+0x74>
 800c774:	6861      	ldr	r1, [r4, #4]
 800c776:	4638      	mov	r0, r7
 800c778:	3101      	adds	r1, #1
 800c77a:	f7ff ff79 	bl	800c670 <_Balloc>
 800c77e:	4680      	mov	r8, r0
 800c780:	b928      	cbnz	r0, 800c78e <__multadd+0x5a>
 800c782:	4602      	mov	r2, r0
 800c784:	4b0c      	ldr	r3, [pc, #48]	@ (800c7b8 <__multadd+0x84>)
 800c786:	480d      	ldr	r0, [pc, #52]	@ (800c7bc <__multadd+0x88>)
 800c788:	21ba      	movs	r1, #186	@ 0xba
 800c78a:	f000 fecb 	bl	800d524 <__assert_func>
 800c78e:	6922      	ldr	r2, [r4, #16]
 800c790:	3202      	adds	r2, #2
 800c792:	f104 010c 	add.w	r1, r4, #12
 800c796:	0092      	lsls	r2, r2, #2
 800c798:	300c      	adds	r0, #12
 800c79a:	f000 feb5 	bl	800d508 <memcpy>
 800c79e:	4621      	mov	r1, r4
 800c7a0:	4638      	mov	r0, r7
 800c7a2:	f7ff ffa5 	bl	800c6f0 <_Bfree>
 800c7a6:	4644      	mov	r4, r8
 800c7a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c7ac:	3501      	adds	r5, #1
 800c7ae:	615e      	str	r6, [r3, #20]
 800c7b0:	6125      	str	r5, [r4, #16]
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7b8:	0800da0c 	.word	0x0800da0c
 800c7bc:	0800da1d 	.word	0x0800da1d

0800c7c0 <__hi0bits>:
 800c7c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	bf36      	itet	cc
 800c7c8:	0403      	lslcc	r3, r0, #16
 800c7ca:	2000      	movcs	r0, #0
 800c7cc:	2010      	movcc	r0, #16
 800c7ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c7d2:	bf3c      	itt	cc
 800c7d4:	021b      	lslcc	r3, r3, #8
 800c7d6:	3008      	addcc	r0, #8
 800c7d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c7dc:	bf3c      	itt	cc
 800c7de:	011b      	lslcc	r3, r3, #4
 800c7e0:	3004      	addcc	r0, #4
 800c7e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7e6:	bf3c      	itt	cc
 800c7e8:	009b      	lslcc	r3, r3, #2
 800c7ea:	3002      	addcc	r0, #2
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	db05      	blt.n	800c7fc <__hi0bits+0x3c>
 800c7f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c7f4:	f100 0001 	add.w	r0, r0, #1
 800c7f8:	bf08      	it	eq
 800c7fa:	2020      	moveq	r0, #32
 800c7fc:	4770      	bx	lr

0800c7fe <__lo0bits>:
 800c7fe:	6803      	ldr	r3, [r0, #0]
 800c800:	4602      	mov	r2, r0
 800c802:	f013 0007 	ands.w	r0, r3, #7
 800c806:	d00b      	beq.n	800c820 <__lo0bits+0x22>
 800c808:	07d9      	lsls	r1, r3, #31
 800c80a:	d421      	bmi.n	800c850 <__lo0bits+0x52>
 800c80c:	0798      	lsls	r0, r3, #30
 800c80e:	bf49      	itett	mi
 800c810:	085b      	lsrmi	r3, r3, #1
 800c812:	089b      	lsrpl	r3, r3, #2
 800c814:	2001      	movmi	r0, #1
 800c816:	6013      	strmi	r3, [r2, #0]
 800c818:	bf5c      	itt	pl
 800c81a:	6013      	strpl	r3, [r2, #0]
 800c81c:	2002      	movpl	r0, #2
 800c81e:	4770      	bx	lr
 800c820:	b299      	uxth	r1, r3
 800c822:	b909      	cbnz	r1, 800c828 <__lo0bits+0x2a>
 800c824:	0c1b      	lsrs	r3, r3, #16
 800c826:	2010      	movs	r0, #16
 800c828:	b2d9      	uxtb	r1, r3
 800c82a:	b909      	cbnz	r1, 800c830 <__lo0bits+0x32>
 800c82c:	3008      	adds	r0, #8
 800c82e:	0a1b      	lsrs	r3, r3, #8
 800c830:	0719      	lsls	r1, r3, #28
 800c832:	bf04      	itt	eq
 800c834:	091b      	lsreq	r3, r3, #4
 800c836:	3004      	addeq	r0, #4
 800c838:	0799      	lsls	r1, r3, #30
 800c83a:	bf04      	itt	eq
 800c83c:	089b      	lsreq	r3, r3, #2
 800c83e:	3002      	addeq	r0, #2
 800c840:	07d9      	lsls	r1, r3, #31
 800c842:	d403      	bmi.n	800c84c <__lo0bits+0x4e>
 800c844:	085b      	lsrs	r3, r3, #1
 800c846:	f100 0001 	add.w	r0, r0, #1
 800c84a:	d003      	beq.n	800c854 <__lo0bits+0x56>
 800c84c:	6013      	str	r3, [r2, #0]
 800c84e:	4770      	bx	lr
 800c850:	2000      	movs	r0, #0
 800c852:	4770      	bx	lr
 800c854:	2020      	movs	r0, #32
 800c856:	4770      	bx	lr

0800c858 <__i2b>:
 800c858:	b510      	push	{r4, lr}
 800c85a:	460c      	mov	r4, r1
 800c85c:	2101      	movs	r1, #1
 800c85e:	f7ff ff07 	bl	800c670 <_Balloc>
 800c862:	4602      	mov	r2, r0
 800c864:	b928      	cbnz	r0, 800c872 <__i2b+0x1a>
 800c866:	4b05      	ldr	r3, [pc, #20]	@ (800c87c <__i2b+0x24>)
 800c868:	4805      	ldr	r0, [pc, #20]	@ (800c880 <__i2b+0x28>)
 800c86a:	f240 1145 	movw	r1, #325	@ 0x145
 800c86e:	f000 fe59 	bl	800d524 <__assert_func>
 800c872:	2301      	movs	r3, #1
 800c874:	6144      	str	r4, [r0, #20]
 800c876:	6103      	str	r3, [r0, #16]
 800c878:	bd10      	pop	{r4, pc}
 800c87a:	bf00      	nop
 800c87c:	0800da0c 	.word	0x0800da0c
 800c880:	0800da1d 	.word	0x0800da1d

0800c884 <__multiply>:
 800c884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c888:	4614      	mov	r4, r2
 800c88a:	690a      	ldr	r2, [r1, #16]
 800c88c:	6923      	ldr	r3, [r4, #16]
 800c88e:	429a      	cmp	r2, r3
 800c890:	bfa8      	it	ge
 800c892:	4623      	movge	r3, r4
 800c894:	460f      	mov	r7, r1
 800c896:	bfa4      	itt	ge
 800c898:	460c      	movge	r4, r1
 800c89a:	461f      	movge	r7, r3
 800c89c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c8a0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c8a4:	68a3      	ldr	r3, [r4, #8]
 800c8a6:	6861      	ldr	r1, [r4, #4]
 800c8a8:	eb0a 0609 	add.w	r6, sl, r9
 800c8ac:	42b3      	cmp	r3, r6
 800c8ae:	b085      	sub	sp, #20
 800c8b0:	bfb8      	it	lt
 800c8b2:	3101      	addlt	r1, #1
 800c8b4:	f7ff fedc 	bl	800c670 <_Balloc>
 800c8b8:	b930      	cbnz	r0, 800c8c8 <__multiply+0x44>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	4b44      	ldr	r3, [pc, #272]	@ (800c9d0 <__multiply+0x14c>)
 800c8be:	4845      	ldr	r0, [pc, #276]	@ (800c9d4 <__multiply+0x150>)
 800c8c0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c8c4:	f000 fe2e 	bl	800d524 <__assert_func>
 800c8c8:	f100 0514 	add.w	r5, r0, #20
 800c8cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c8d0:	462b      	mov	r3, r5
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	4543      	cmp	r3, r8
 800c8d6:	d321      	bcc.n	800c91c <__multiply+0x98>
 800c8d8:	f107 0114 	add.w	r1, r7, #20
 800c8dc:	f104 0214 	add.w	r2, r4, #20
 800c8e0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c8e4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c8e8:	9302      	str	r3, [sp, #8]
 800c8ea:	1b13      	subs	r3, r2, r4
 800c8ec:	3b15      	subs	r3, #21
 800c8ee:	f023 0303 	bic.w	r3, r3, #3
 800c8f2:	3304      	adds	r3, #4
 800c8f4:	f104 0715 	add.w	r7, r4, #21
 800c8f8:	42ba      	cmp	r2, r7
 800c8fa:	bf38      	it	cc
 800c8fc:	2304      	movcc	r3, #4
 800c8fe:	9301      	str	r3, [sp, #4]
 800c900:	9b02      	ldr	r3, [sp, #8]
 800c902:	9103      	str	r1, [sp, #12]
 800c904:	428b      	cmp	r3, r1
 800c906:	d80c      	bhi.n	800c922 <__multiply+0x9e>
 800c908:	2e00      	cmp	r6, #0
 800c90a:	dd03      	ble.n	800c914 <__multiply+0x90>
 800c90c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c910:	2b00      	cmp	r3, #0
 800c912:	d05b      	beq.n	800c9cc <__multiply+0x148>
 800c914:	6106      	str	r6, [r0, #16]
 800c916:	b005      	add	sp, #20
 800c918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c91c:	f843 2b04 	str.w	r2, [r3], #4
 800c920:	e7d8      	b.n	800c8d4 <__multiply+0x50>
 800c922:	f8b1 a000 	ldrh.w	sl, [r1]
 800c926:	f1ba 0f00 	cmp.w	sl, #0
 800c92a:	d024      	beq.n	800c976 <__multiply+0xf2>
 800c92c:	f104 0e14 	add.w	lr, r4, #20
 800c930:	46a9      	mov	r9, r5
 800c932:	f04f 0c00 	mov.w	ip, #0
 800c936:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c93a:	f8d9 3000 	ldr.w	r3, [r9]
 800c93e:	fa1f fb87 	uxth.w	fp, r7
 800c942:	b29b      	uxth	r3, r3
 800c944:	fb0a 330b 	mla	r3, sl, fp, r3
 800c948:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c94c:	f8d9 7000 	ldr.w	r7, [r9]
 800c950:	4463      	add	r3, ip
 800c952:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c956:	fb0a c70b 	mla	r7, sl, fp, ip
 800c95a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c95e:	b29b      	uxth	r3, r3
 800c960:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c964:	4572      	cmp	r2, lr
 800c966:	f849 3b04 	str.w	r3, [r9], #4
 800c96a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c96e:	d8e2      	bhi.n	800c936 <__multiply+0xb2>
 800c970:	9b01      	ldr	r3, [sp, #4]
 800c972:	f845 c003 	str.w	ip, [r5, r3]
 800c976:	9b03      	ldr	r3, [sp, #12]
 800c978:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c97c:	3104      	adds	r1, #4
 800c97e:	f1b9 0f00 	cmp.w	r9, #0
 800c982:	d021      	beq.n	800c9c8 <__multiply+0x144>
 800c984:	682b      	ldr	r3, [r5, #0]
 800c986:	f104 0c14 	add.w	ip, r4, #20
 800c98a:	46ae      	mov	lr, r5
 800c98c:	f04f 0a00 	mov.w	sl, #0
 800c990:	f8bc b000 	ldrh.w	fp, [ip]
 800c994:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c998:	fb09 770b 	mla	r7, r9, fp, r7
 800c99c:	4457      	add	r7, sl
 800c99e:	b29b      	uxth	r3, r3
 800c9a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c9a4:	f84e 3b04 	str.w	r3, [lr], #4
 800c9a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c9ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c9b0:	f8be 3000 	ldrh.w	r3, [lr]
 800c9b4:	fb09 330a 	mla	r3, r9, sl, r3
 800c9b8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c9bc:	4562      	cmp	r2, ip
 800c9be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c9c2:	d8e5      	bhi.n	800c990 <__multiply+0x10c>
 800c9c4:	9f01      	ldr	r7, [sp, #4]
 800c9c6:	51eb      	str	r3, [r5, r7]
 800c9c8:	3504      	adds	r5, #4
 800c9ca:	e799      	b.n	800c900 <__multiply+0x7c>
 800c9cc:	3e01      	subs	r6, #1
 800c9ce:	e79b      	b.n	800c908 <__multiply+0x84>
 800c9d0:	0800da0c 	.word	0x0800da0c
 800c9d4:	0800da1d 	.word	0x0800da1d

0800c9d8 <__pow5mult>:
 800c9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9dc:	4615      	mov	r5, r2
 800c9de:	f012 0203 	ands.w	r2, r2, #3
 800c9e2:	4607      	mov	r7, r0
 800c9e4:	460e      	mov	r6, r1
 800c9e6:	d007      	beq.n	800c9f8 <__pow5mult+0x20>
 800c9e8:	4c25      	ldr	r4, [pc, #148]	@ (800ca80 <__pow5mult+0xa8>)
 800c9ea:	3a01      	subs	r2, #1
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c9f2:	f7ff fe9f 	bl	800c734 <__multadd>
 800c9f6:	4606      	mov	r6, r0
 800c9f8:	10ad      	asrs	r5, r5, #2
 800c9fa:	d03d      	beq.n	800ca78 <__pow5mult+0xa0>
 800c9fc:	69fc      	ldr	r4, [r7, #28]
 800c9fe:	b97c      	cbnz	r4, 800ca20 <__pow5mult+0x48>
 800ca00:	2010      	movs	r0, #16
 800ca02:	f7fe f837 	bl	800aa74 <malloc>
 800ca06:	4602      	mov	r2, r0
 800ca08:	61f8      	str	r0, [r7, #28]
 800ca0a:	b928      	cbnz	r0, 800ca18 <__pow5mult+0x40>
 800ca0c:	4b1d      	ldr	r3, [pc, #116]	@ (800ca84 <__pow5mult+0xac>)
 800ca0e:	481e      	ldr	r0, [pc, #120]	@ (800ca88 <__pow5mult+0xb0>)
 800ca10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ca14:	f000 fd86 	bl	800d524 <__assert_func>
 800ca18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ca1c:	6004      	str	r4, [r0, #0]
 800ca1e:	60c4      	str	r4, [r0, #12]
 800ca20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ca24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ca28:	b94c      	cbnz	r4, 800ca3e <__pow5mult+0x66>
 800ca2a:	f240 2171 	movw	r1, #625	@ 0x271
 800ca2e:	4638      	mov	r0, r7
 800ca30:	f7ff ff12 	bl	800c858 <__i2b>
 800ca34:	2300      	movs	r3, #0
 800ca36:	f8c8 0008 	str.w	r0, [r8, #8]
 800ca3a:	4604      	mov	r4, r0
 800ca3c:	6003      	str	r3, [r0, #0]
 800ca3e:	f04f 0900 	mov.w	r9, #0
 800ca42:	07eb      	lsls	r3, r5, #31
 800ca44:	d50a      	bpl.n	800ca5c <__pow5mult+0x84>
 800ca46:	4631      	mov	r1, r6
 800ca48:	4622      	mov	r2, r4
 800ca4a:	4638      	mov	r0, r7
 800ca4c:	f7ff ff1a 	bl	800c884 <__multiply>
 800ca50:	4631      	mov	r1, r6
 800ca52:	4680      	mov	r8, r0
 800ca54:	4638      	mov	r0, r7
 800ca56:	f7ff fe4b 	bl	800c6f0 <_Bfree>
 800ca5a:	4646      	mov	r6, r8
 800ca5c:	106d      	asrs	r5, r5, #1
 800ca5e:	d00b      	beq.n	800ca78 <__pow5mult+0xa0>
 800ca60:	6820      	ldr	r0, [r4, #0]
 800ca62:	b938      	cbnz	r0, 800ca74 <__pow5mult+0x9c>
 800ca64:	4622      	mov	r2, r4
 800ca66:	4621      	mov	r1, r4
 800ca68:	4638      	mov	r0, r7
 800ca6a:	f7ff ff0b 	bl	800c884 <__multiply>
 800ca6e:	6020      	str	r0, [r4, #0]
 800ca70:	f8c0 9000 	str.w	r9, [r0]
 800ca74:	4604      	mov	r4, r0
 800ca76:	e7e4      	b.n	800ca42 <__pow5mult+0x6a>
 800ca78:	4630      	mov	r0, r6
 800ca7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca7e:	bf00      	nop
 800ca80:	0800da78 	.word	0x0800da78
 800ca84:	0800d99d 	.word	0x0800d99d
 800ca88:	0800da1d 	.word	0x0800da1d

0800ca8c <__lshift>:
 800ca8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca90:	460c      	mov	r4, r1
 800ca92:	6849      	ldr	r1, [r1, #4]
 800ca94:	6923      	ldr	r3, [r4, #16]
 800ca96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca9a:	68a3      	ldr	r3, [r4, #8]
 800ca9c:	4607      	mov	r7, r0
 800ca9e:	4691      	mov	r9, r2
 800caa0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800caa4:	f108 0601 	add.w	r6, r8, #1
 800caa8:	42b3      	cmp	r3, r6
 800caaa:	db0b      	blt.n	800cac4 <__lshift+0x38>
 800caac:	4638      	mov	r0, r7
 800caae:	f7ff fddf 	bl	800c670 <_Balloc>
 800cab2:	4605      	mov	r5, r0
 800cab4:	b948      	cbnz	r0, 800caca <__lshift+0x3e>
 800cab6:	4602      	mov	r2, r0
 800cab8:	4b28      	ldr	r3, [pc, #160]	@ (800cb5c <__lshift+0xd0>)
 800caba:	4829      	ldr	r0, [pc, #164]	@ (800cb60 <__lshift+0xd4>)
 800cabc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cac0:	f000 fd30 	bl	800d524 <__assert_func>
 800cac4:	3101      	adds	r1, #1
 800cac6:	005b      	lsls	r3, r3, #1
 800cac8:	e7ee      	b.n	800caa8 <__lshift+0x1c>
 800caca:	2300      	movs	r3, #0
 800cacc:	f100 0114 	add.w	r1, r0, #20
 800cad0:	f100 0210 	add.w	r2, r0, #16
 800cad4:	4618      	mov	r0, r3
 800cad6:	4553      	cmp	r3, sl
 800cad8:	db33      	blt.n	800cb42 <__lshift+0xb6>
 800cada:	6920      	ldr	r0, [r4, #16]
 800cadc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cae0:	f104 0314 	add.w	r3, r4, #20
 800cae4:	f019 091f 	ands.w	r9, r9, #31
 800cae8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800caec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800caf0:	d02b      	beq.n	800cb4a <__lshift+0xbe>
 800caf2:	f1c9 0e20 	rsb	lr, r9, #32
 800caf6:	468a      	mov	sl, r1
 800caf8:	2200      	movs	r2, #0
 800cafa:	6818      	ldr	r0, [r3, #0]
 800cafc:	fa00 f009 	lsl.w	r0, r0, r9
 800cb00:	4310      	orrs	r0, r2
 800cb02:	f84a 0b04 	str.w	r0, [sl], #4
 800cb06:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb0a:	459c      	cmp	ip, r3
 800cb0c:	fa22 f20e 	lsr.w	r2, r2, lr
 800cb10:	d8f3      	bhi.n	800cafa <__lshift+0x6e>
 800cb12:	ebac 0304 	sub.w	r3, ip, r4
 800cb16:	3b15      	subs	r3, #21
 800cb18:	f023 0303 	bic.w	r3, r3, #3
 800cb1c:	3304      	adds	r3, #4
 800cb1e:	f104 0015 	add.w	r0, r4, #21
 800cb22:	4584      	cmp	ip, r0
 800cb24:	bf38      	it	cc
 800cb26:	2304      	movcc	r3, #4
 800cb28:	50ca      	str	r2, [r1, r3]
 800cb2a:	b10a      	cbz	r2, 800cb30 <__lshift+0xa4>
 800cb2c:	f108 0602 	add.w	r6, r8, #2
 800cb30:	3e01      	subs	r6, #1
 800cb32:	4638      	mov	r0, r7
 800cb34:	612e      	str	r6, [r5, #16]
 800cb36:	4621      	mov	r1, r4
 800cb38:	f7ff fdda 	bl	800c6f0 <_Bfree>
 800cb3c:	4628      	mov	r0, r5
 800cb3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb42:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb46:	3301      	adds	r3, #1
 800cb48:	e7c5      	b.n	800cad6 <__lshift+0x4a>
 800cb4a:	3904      	subs	r1, #4
 800cb4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb50:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb54:	459c      	cmp	ip, r3
 800cb56:	d8f9      	bhi.n	800cb4c <__lshift+0xc0>
 800cb58:	e7ea      	b.n	800cb30 <__lshift+0xa4>
 800cb5a:	bf00      	nop
 800cb5c:	0800da0c 	.word	0x0800da0c
 800cb60:	0800da1d 	.word	0x0800da1d

0800cb64 <__mcmp>:
 800cb64:	690a      	ldr	r2, [r1, #16]
 800cb66:	4603      	mov	r3, r0
 800cb68:	6900      	ldr	r0, [r0, #16]
 800cb6a:	1a80      	subs	r0, r0, r2
 800cb6c:	b530      	push	{r4, r5, lr}
 800cb6e:	d10e      	bne.n	800cb8e <__mcmp+0x2a>
 800cb70:	3314      	adds	r3, #20
 800cb72:	3114      	adds	r1, #20
 800cb74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cb78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cb7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cb80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cb84:	4295      	cmp	r5, r2
 800cb86:	d003      	beq.n	800cb90 <__mcmp+0x2c>
 800cb88:	d205      	bcs.n	800cb96 <__mcmp+0x32>
 800cb8a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb8e:	bd30      	pop	{r4, r5, pc}
 800cb90:	42a3      	cmp	r3, r4
 800cb92:	d3f3      	bcc.n	800cb7c <__mcmp+0x18>
 800cb94:	e7fb      	b.n	800cb8e <__mcmp+0x2a>
 800cb96:	2001      	movs	r0, #1
 800cb98:	e7f9      	b.n	800cb8e <__mcmp+0x2a>
	...

0800cb9c <__mdiff>:
 800cb9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba0:	4689      	mov	r9, r1
 800cba2:	4606      	mov	r6, r0
 800cba4:	4611      	mov	r1, r2
 800cba6:	4648      	mov	r0, r9
 800cba8:	4614      	mov	r4, r2
 800cbaa:	f7ff ffdb 	bl	800cb64 <__mcmp>
 800cbae:	1e05      	subs	r5, r0, #0
 800cbb0:	d112      	bne.n	800cbd8 <__mdiff+0x3c>
 800cbb2:	4629      	mov	r1, r5
 800cbb4:	4630      	mov	r0, r6
 800cbb6:	f7ff fd5b 	bl	800c670 <_Balloc>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	b928      	cbnz	r0, 800cbca <__mdiff+0x2e>
 800cbbe:	4b3f      	ldr	r3, [pc, #252]	@ (800ccbc <__mdiff+0x120>)
 800cbc0:	f240 2137 	movw	r1, #567	@ 0x237
 800cbc4:	483e      	ldr	r0, [pc, #248]	@ (800ccc0 <__mdiff+0x124>)
 800cbc6:	f000 fcad 	bl	800d524 <__assert_func>
 800cbca:	2301      	movs	r3, #1
 800cbcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cbd0:	4610      	mov	r0, r2
 800cbd2:	b003      	add	sp, #12
 800cbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd8:	bfbc      	itt	lt
 800cbda:	464b      	movlt	r3, r9
 800cbdc:	46a1      	movlt	r9, r4
 800cbde:	4630      	mov	r0, r6
 800cbe0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cbe4:	bfba      	itte	lt
 800cbe6:	461c      	movlt	r4, r3
 800cbe8:	2501      	movlt	r5, #1
 800cbea:	2500      	movge	r5, #0
 800cbec:	f7ff fd40 	bl	800c670 <_Balloc>
 800cbf0:	4602      	mov	r2, r0
 800cbf2:	b918      	cbnz	r0, 800cbfc <__mdiff+0x60>
 800cbf4:	4b31      	ldr	r3, [pc, #196]	@ (800ccbc <__mdiff+0x120>)
 800cbf6:	f240 2145 	movw	r1, #581	@ 0x245
 800cbfa:	e7e3      	b.n	800cbc4 <__mdiff+0x28>
 800cbfc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cc00:	6926      	ldr	r6, [r4, #16]
 800cc02:	60c5      	str	r5, [r0, #12]
 800cc04:	f109 0310 	add.w	r3, r9, #16
 800cc08:	f109 0514 	add.w	r5, r9, #20
 800cc0c:	f104 0e14 	add.w	lr, r4, #20
 800cc10:	f100 0b14 	add.w	fp, r0, #20
 800cc14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cc18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cc1c:	9301      	str	r3, [sp, #4]
 800cc1e:	46d9      	mov	r9, fp
 800cc20:	f04f 0c00 	mov.w	ip, #0
 800cc24:	9b01      	ldr	r3, [sp, #4]
 800cc26:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cc2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cc2e:	9301      	str	r3, [sp, #4]
 800cc30:	fa1f f38a 	uxth.w	r3, sl
 800cc34:	4619      	mov	r1, r3
 800cc36:	b283      	uxth	r3, r0
 800cc38:	1acb      	subs	r3, r1, r3
 800cc3a:	0c00      	lsrs	r0, r0, #16
 800cc3c:	4463      	add	r3, ip
 800cc3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cc42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cc4c:	4576      	cmp	r6, lr
 800cc4e:	f849 3b04 	str.w	r3, [r9], #4
 800cc52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc56:	d8e5      	bhi.n	800cc24 <__mdiff+0x88>
 800cc58:	1b33      	subs	r3, r6, r4
 800cc5a:	3b15      	subs	r3, #21
 800cc5c:	f023 0303 	bic.w	r3, r3, #3
 800cc60:	3415      	adds	r4, #21
 800cc62:	3304      	adds	r3, #4
 800cc64:	42a6      	cmp	r6, r4
 800cc66:	bf38      	it	cc
 800cc68:	2304      	movcc	r3, #4
 800cc6a:	441d      	add	r5, r3
 800cc6c:	445b      	add	r3, fp
 800cc6e:	461e      	mov	r6, r3
 800cc70:	462c      	mov	r4, r5
 800cc72:	4544      	cmp	r4, r8
 800cc74:	d30e      	bcc.n	800cc94 <__mdiff+0xf8>
 800cc76:	f108 0103 	add.w	r1, r8, #3
 800cc7a:	1b49      	subs	r1, r1, r5
 800cc7c:	f021 0103 	bic.w	r1, r1, #3
 800cc80:	3d03      	subs	r5, #3
 800cc82:	45a8      	cmp	r8, r5
 800cc84:	bf38      	it	cc
 800cc86:	2100      	movcc	r1, #0
 800cc88:	440b      	add	r3, r1
 800cc8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc8e:	b191      	cbz	r1, 800ccb6 <__mdiff+0x11a>
 800cc90:	6117      	str	r7, [r2, #16]
 800cc92:	e79d      	b.n	800cbd0 <__mdiff+0x34>
 800cc94:	f854 1b04 	ldr.w	r1, [r4], #4
 800cc98:	46e6      	mov	lr, ip
 800cc9a:	0c08      	lsrs	r0, r1, #16
 800cc9c:	fa1c fc81 	uxtah	ip, ip, r1
 800cca0:	4471      	add	r1, lr
 800cca2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cca6:	b289      	uxth	r1, r1
 800cca8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ccac:	f846 1b04 	str.w	r1, [r6], #4
 800ccb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ccb4:	e7dd      	b.n	800cc72 <__mdiff+0xd6>
 800ccb6:	3f01      	subs	r7, #1
 800ccb8:	e7e7      	b.n	800cc8a <__mdiff+0xee>
 800ccba:	bf00      	nop
 800ccbc:	0800da0c 	.word	0x0800da0c
 800ccc0:	0800da1d 	.word	0x0800da1d

0800ccc4 <__d2b>:
 800ccc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ccc8:	460f      	mov	r7, r1
 800ccca:	2101      	movs	r1, #1
 800cccc:	ec59 8b10 	vmov	r8, r9, d0
 800ccd0:	4616      	mov	r6, r2
 800ccd2:	f7ff fccd 	bl	800c670 <_Balloc>
 800ccd6:	4604      	mov	r4, r0
 800ccd8:	b930      	cbnz	r0, 800cce8 <__d2b+0x24>
 800ccda:	4602      	mov	r2, r0
 800ccdc:	4b23      	ldr	r3, [pc, #140]	@ (800cd6c <__d2b+0xa8>)
 800ccde:	4824      	ldr	r0, [pc, #144]	@ (800cd70 <__d2b+0xac>)
 800cce0:	f240 310f 	movw	r1, #783	@ 0x30f
 800cce4:	f000 fc1e 	bl	800d524 <__assert_func>
 800cce8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ccec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ccf0:	b10d      	cbz	r5, 800ccf6 <__d2b+0x32>
 800ccf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ccf6:	9301      	str	r3, [sp, #4]
 800ccf8:	f1b8 0300 	subs.w	r3, r8, #0
 800ccfc:	d023      	beq.n	800cd46 <__d2b+0x82>
 800ccfe:	4668      	mov	r0, sp
 800cd00:	9300      	str	r3, [sp, #0]
 800cd02:	f7ff fd7c 	bl	800c7fe <__lo0bits>
 800cd06:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cd0a:	b1d0      	cbz	r0, 800cd42 <__d2b+0x7e>
 800cd0c:	f1c0 0320 	rsb	r3, r0, #32
 800cd10:	fa02 f303 	lsl.w	r3, r2, r3
 800cd14:	430b      	orrs	r3, r1
 800cd16:	40c2      	lsrs	r2, r0
 800cd18:	6163      	str	r3, [r4, #20]
 800cd1a:	9201      	str	r2, [sp, #4]
 800cd1c:	9b01      	ldr	r3, [sp, #4]
 800cd1e:	61a3      	str	r3, [r4, #24]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	bf0c      	ite	eq
 800cd24:	2201      	moveq	r2, #1
 800cd26:	2202      	movne	r2, #2
 800cd28:	6122      	str	r2, [r4, #16]
 800cd2a:	b1a5      	cbz	r5, 800cd56 <__d2b+0x92>
 800cd2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cd30:	4405      	add	r5, r0
 800cd32:	603d      	str	r5, [r7, #0]
 800cd34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cd38:	6030      	str	r0, [r6, #0]
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	b003      	add	sp, #12
 800cd3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd42:	6161      	str	r1, [r4, #20]
 800cd44:	e7ea      	b.n	800cd1c <__d2b+0x58>
 800cd46:	a801      	add	r0, sp, #4
 800cd48:	f7ff fd59 	bl	800c7fe <__lo0bits>
 800cd4c:	9b01      	ldr	r3, [sp, #4]
 800cd4e:	6163      	str	r3, [r4, #20]
 800cd50:	3020      	adds	r0, #32
 800cd52:	2201      	movs	r2, #1
 800cd54:	e7e8      	b.n	800cd28 <__d2b+0x64>
 800cd56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cd5e:	6038      	str	r0, [r7, #0]
 800cd60:	6918      	ldr	r0, [r3, #16]
 800cd62:	f7ff fd2d 	bl	800c7c0 <__hi0bits>
 800cd66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd6a:	e7e5      	b.n	800cd38 <__d2b+0x74>
 800cd6c:	0800da0c 	.word	0x0800da0c
 800cd70:	0800da1d 	.word	0x0800da1d

0800cd74 <__ssputs_r>:
 800cd74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd78:	688e      	ldr	r6, [r1, #8]
 800cd7a:	461f      	mov	r7, r3
 800cd7c:	42be      	cmp	r6, r7
 800cd7e:	680b      	ldr	r3, [r1, #0]
 800cd80:	4682      	mov	sl, r0
 800cd82:	460c      	mov	r4, r1
 800cd84:	4690      	mov	r8, r2
 800cd86:	d82d      	bhi.n	800cde4 <__ssputs_r+0x70>
 800cd88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cd90:	d026      	beq.n	800cde0 <__ssputs_r+0x6c>
 800cd92:	6965      	ldr	r5, [r4, #20]
 800cd94:	6909      	ldr	r1, [r1, #16]
 800cd96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd9a:	eba3 0901 	sub.w	r9, r3, r1
 800cd9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cda2:	1c7b      	adds	r3, r7, #1
 800cda4:	444b      	add	r3, r9
 800cda6:	106d      	asrs	r5, r5, #1
 800cda8:	429d      	cmp	r5, r3
 800cdaa:	bf38      	it	cc
 800cdac:	461d      	movcc	r5, r3
 800cdae:	0553      	lsls	r3, r2, #21
 800cdb0:	d527      	bpl.n	800ce02 <__ssputs_r+0x8e>
 800cdb2:	4629      	mov	r1, r5
 800cdb4:	f7fd fe88 	bl	800aac8 <_malloc_r>
 800cdb8:	4606      	mov	r6, r0
 800cdba:	b360      	cbz	r0, 800ce16 <__ssputs_r+0xa2>
 800cdbc:	6921      	ldr	r1, [r4, #16]
 800cdbe:	464a      	mov	r2, r9
 800cdc0:	f000 fba2 	bl	800d508 <memcpy>
 800cdc4:	89a3      	ldrh	r3, [r4, #12]
 800cdc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cdca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdce:	81a3      	strh	r3, [r4, #12]
 800cdd0:	6126      	str	r6, [r4, #16]
 800cdd2:	6165      	str	r5, [r4, #20]
 800cdd4:	444e      	add	r6, r9
 800cdd6:	eba5 0509 	sub.w	r5, r5, r9
 800cdda:	6026      	str	r6, [r4, #0]
 800cddc:	60a5      	str	r5, [r4, #8]
 800cdde:	463e      	mov	r6, r7
 800cde0:	42be      	cmp	r6, r7
 800cde2:	d900      	bls.n	800cde6 <__ssputs_r+0x72>
 800cde4:	463e      	mov	r6, r7
 800cde6:	6820      	ldr	r0, [r4, #0]
 800cde8:	4632      	mov	r2, r6
 800cdea:	4641      	mov	r1, r8
 800cdec:	f7fe fd6e 	bl	800b8cc <memmove>
 800cdf0:	68a3      	ldr	r3, [r4, #8]
 800cdf2:	1b9b      	subs	r3, r3, r6
 800cdf4:	60a3      	str	r3, [r4, #8]
 800cdf6:	6823      	ldr	r3, [r4, #0]
 800cdf8:	4433      	add	r3, r6
 800cdfa:	6023      	str	r3, [r4, #0]
 800cdfc:	2000      	movs	r0, #0
 800cdfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce02:	462a      	mov	r2, r5
 800ce04:	f000 fbd2 	bl	800d5ac <_realloc_r>
 800ce08:	4606      	mov	r6, r0
 800ce0a:	2800      	cmp	r0, #0
 800ce0c:	d1e0      	bne.n	800cdd0 <__ssputs_r+0x5c>
 800ce0e:	6921      	ldr	r1, [r4, #16]
 800ce10:	4650      	mov	r0, sl
 800ce12:	f7ff fbe3 	bl	800c5dc <_free_r>
 800ce16:	230c      	movs	r3, #12
 800ce18:	f8ca 3000 	str.w	r3, [sl]
 800ce1c:	89a3      	ldrh	r3, [r4, #12]
 800ce1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce22:	81a3      	strh	r3, [r4, #12]
 800ce24:	f04f 30ff 	mov.w	r0, #4294967295
 800ce28:	e7e9      	b.n	800cdfe <__ssputs_r+0x8a>
	...

0800ce2c <_svfiprintf_r>:
 800ce2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce30:	4698      	mov	r8, r3
 800ce32:	898b      	ldrh	r3, [r1, #12]
 800ce34:	061b      	lsls	r3, r3, #24
 800ce36:	b09d      	sub	sp, #116	@ 0x74
 800ce38:	4607      	mov	r7, r0
 800ce3a:	460d      	mov	r5, r1
 800ce3c:	4614      	mov	r4, r2
 800ce3e:	d510      	bpl.n	800ce62 <_svfiprintf_r+0x36>
 800ce40:	690b      	ldr	r3, [r1, #16]
 800ce42:	b973      	cbnz	r3, 800ce62 <_svfiprintf_r+0x36>
 800ce44:	2140      	movs	r1, #64	@ 0x40
 800ce46:	f7fd fe3f 	bl	800aac8 <_malloc_r>
 800ce4a:	6028      	str	r0, [r5, #0]
 800ce4c:	6128      	str	r0, [r5, #16]
 800ce4e:	b930      	cbnz	r0, 800ce5e <_svfiprintf_r+0x32>
 800ce50:	230c      	movs	r3, #12
 800ce52:	603b      	str	r3, [r7, #0]
 800ce54:	f04f 30ff 	mov.w	r0, #4294967295
 800ce58:	b01d      	add	sp, #116	@ 0x74
 800ce5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce5e:	2340      	movs	r3, #64	@ 0x40
 800ce60:	616b      	str	r3, [r5, #20]
 800ce62:	2300      	movs	r3, #0
 800ce64:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce66:	2320      	movs	r3, #32
 800ce68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce70:	2330      	movs	r3, #48	@ 0x30
 800ce72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d010 <_svfiprintf_r+0x1e4>
 800ce76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce7a:	f04f 0901 	mov.w	r9, #1
 800ce7e:	4623      	mov	r3, r4
 800ce80:	469a      	mov	sl, r3
 800ce82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce86:	b10a      	cbz	r2, 800ce8c <_svfiprintf_r+0x60>
 800ce88:	2a25      	cmp	r2, #37	@ 0x25
 800ce8a:	d1f9      	bne.n	800ce80 <_svfiprintf_r+0x54>
 800ce8c:	ebba 0b04 	subs.w	fp, sl, r4
 800ce90:	d00b      	beq.n	800ceaa <_svfiprintf_r+0x7e>
 800ce92:	465b      	mov	r3, fp
 800ce94:	4622      	mov	r2, r4
 800ce96:	4629      	mov	r1, r5
 800ce98:	4638      	mov	r0, r7
 800ce9a:	f7ff ff6b 	bl	800cd74 <__ssputs_r>
 800ce9e:	3001      	adds	r0, #1
 800cea0:	f000 80a7 	beq.w	800cff2 <_svfiprintf_r+0x1c6>
 800cea4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cea6:	445a      	add	r2, fp
 800cea8:	9209      	str	r2, [sp, #36]	@ 0x24
 800ceaa:	f89a 3000 	ldrb.w	r3, [sl]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	f000 809f 	beq.w	800cff2 <_svfiprintf_r+0x1c6>
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	f04f 32ff 	mov.w	r2, #4294967295
 800ceba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cebe:	f10a 0a01 	add.w	sl, sl, #1
 800cec2:	9304      	str	r3, [sp, #16]
 800cec4:	9307      	str	r3, [sp, #28]
 800cec6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ceca:	931a      	str	r3, [sp, #104]	@ 0x68
 800cecc:	4654      	mov	r4, sl
 800cece:	2205      	movs	r2, #5
 800ced0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ced4:	484e      	ldr	r0, [pc, #312]	@ (800d010 <_svfiprintf_r+0x1e4>)
 800ced6:	f7f3 fa1b 	bl	8000310 <memchr>
 800ceda:	9a04      	ldr	r2, [sp, #16]
 800cedc:	b9d8      	cbnz	r0, 800cf16 <_svfiprintf_r+0xea>
 800cede:	06d0      	lsls	r0, r2, #27
 800cee0:	bf44      	itt	mi
 800cee2:	2320      	movmi	r3, #32
 800cee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cee8:	0711      	lsls	r1, r2, #28
 800ceea:	bf44      	itt	mi
 800ceec:	232b      	movmi	r3, #43	@ 0x2b
 800ceee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cef2:	f89a 3000 	ldrb.w	r3, [sl]
 800cef6:	2b2a      	cmp	r3, #42	@ 0x2a
 800cef8:	d015      	beq.n	800cf26 <_svfiprintf_r+0xfa>
 800cefa:	9a07      	ldr	r2, [sp, #28]
 800cefc:	4654      	mov	r4, sl
 800cefe:	2000      	movs	r0, #0
 800cf00:	f04f 0c0a 	mov.w	ip, #10
 800cf04:	4621      	mov	r1, r4
 800cf06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf0a:	3b30      	subs	r3, #48	@ 0x30
 800cf0c:	2b09      	cmp	r3, #9
 800cf0e:	d94b      	bls.n	800cfa8 <_svfiprintf_r+0x17c>
 800cf10:	b1b0      	cbz	r0, 800cf40 <_svfiprintf_r+0x114>
 800cf12:	9207      	str	r2, [sp, #28]
 800cf14:	e014      	b.n	800cf40 <_svfiprintf_r+0x114>
 800cf16:	eba0 0308 	sub.w	r3, r0, r8
 800cf1a:	fa09 f303 	lsl.w	r3, r9, r3
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	9304      	str	r3, [sp, #16]
 800cf22:	46a2      	mov	sl, r4
 800cf24:	e7d2      	b.n	800cecc <_svfiprintf_r+0xa0>
 800cf26:	9b03      	ldr	r3, [sp, #12]
 800cf28:	1d19      	adds	r1, r3, #4
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	9103      	str	r1, [sp, #12]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	bfbb      	ittet	lt
 800cf32:	425b      	neglt	r3, r3
 800cf34:	f042 0202 	orrlt.w	r2, r2, #2
 800cf38:	9307      	strge	r3, [sp, #28]
 800cf3a:	9307      	strlt	r3, [sp, #28]
 800cf3c:	bfb8      	it	lt
 800cf3e:	9204      	strlt	r2, [sp, #16]
 800cf40:	7823      	ldrb	r3, [r4, #0]
 800cf42:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf44:	d10a      	bne.n	800cf5c <_svfiprintf_r+0x130>
 800cf46:	7863      	ldrb	r3, [r4, #1]
 800cf48:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf4a:	d132      	bne.n	800cfb2 <_svfiprintf_r+0x186>
 800cf4c:	9b03      	ldr	r3, [sp, #12]
 800cf4e:	1d1a      	adds	r2, r3, #4
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	9203      	str	r2, [sp, #12]
 800cf54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf58:	3402      	adds	r4, #2
 800cf5a:	9305      	str	r3, [sp, #20]
 800cf5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d020 <_svfiprintf_r+0x1f4>
 800cf60:	7821      	ldrb	r1, [r4, #0]
 800cf62:	2203      	movs	r2, #3
 800cf64:	4650      	mov	r0, sl
 800cf66:	f7f3 f9d3 	bl	8000310 <memchr>
 800cf6a:	b138      	cbz	r0, 800cf7c <_svfiprintf_r+0x150>
 800cf6c:	9b04      	ldr	r3, [sp, #16]
 800cf6e:	eba0 000a 	sub.w	r0, r0, sl
 800cf72:	2240      	movs	r2, #64	@ 0x40
 800cf74:	4082      	lsls	r2, r0
 800cf76:	4313      	orrs	r3, r2
 800cf78:	3401      	adds	r4, #1
 800cf7a:	9304      	str	r3, [sp, #16]
 800cf7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf80:	4824      	ldr	r0, [pc, #144]	@ (800d014 <_svfiprintf_r+0x1e8>)
 800cf82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf86:	2206      	movs	r2, #6
 800cf88:	f7f3 f9c2 	bl	8000310 <memchr>
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	d036      	beq.n	800cffe <_svfiprintf_r+0x1d2>
 800cf90:	4b21      	ldr	r3, [pc, #132]	@ (800d018 <_svfiprintf_r+0x1ec>)
 800cf92:	bb1b      	cbnz	r3, 800cfdc <_svfiprintf_r+0x1b0>
 800cf94:	9b03      	ldr	r3, [sp, #12]
 800cf96:	3307      	adds	r3, #7
 800cf98:	f023 0307 	bic.w	r3, r3, #7
 800cf9c:	3308      	adds	r3, #8
 800cf9e:	9303      	str	r3, [sp, #12]
 800cfa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfa2:	4433      	add	r3, r6
 800cfa4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfa6:	e76a      	b.n	800ce7e <_svfiprintf_r+0x52>
 800cfa8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfac:	460c      	mov	r4, r1
 800cfae:	2001      	movs	r0, #1
 800cfb0:	e7a8      	b.n	800cf04 <_svfiprintf_r+0xd8>
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	3401      	adds	r4, #1
 800cfb6:	9305      	str	r3, [sp, #20]
 800cfb8:	4619      	mov	r1, r3
 800cfba:	f04f 0c0a 	mov.w	ip, #10
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfc4:	3a30      	subs	r2, #48	@ 0x30
 800cfc6:	2a09      	cmp	r2, #9
 800cfc8:	d903      	bls.n	800cfd2 <_svfiprintf_r+0x1a6>
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d0c6      	beq.n	800cf5c <_svfiprintf_r+0x130>
 800cfce:	9105      	str	r1, [sp, #20]
 800cfd0:	e7c4      	b.n	800cf5c <_svfiprintf_r+0x130>
 800cfd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfd6:	4604      	mov	r4, r0
 800cfd8:	2301      	movs	r3, #1
 800cfda:	e7f0      	b.n	800cfbe <_svfiprintf_r+0x192>
 800cfdc:	ab03      	add	r3, sp, #12
 800cfde:	9300      	str	r3, [sp, #0]
 800cfe0:	462a      	mov	r2, r5
 800cfe2:	4b0e      	ldr	r3, [pc, #56]	@ (800d01c <_svfiprintf_r+0x1f0>)
 800cfe4:	a904      	add	r1, sp, #16
 800cfe6:	4638      	mov	r0, r7
 800cfe8:	f7fd fe8a 	bl	800ad00 <_printf_float>
 800cfec:	1c42      	adds	r2, r0, #1
 800cfee:	4606      	mov	r6, r0
 800cff0:	d1d6      	bne.n	800cfa0 <_svfiprintf_r+0x174>
 800cff2:	89ab      	ldrh	r3, [r5, #12]
 800cff4:	065b      	lsls	r3, r3, #25
 800cff6:	f53f af2d 	bmi.w	800ce54 <_svfiprintf_r+0x28>
 800cffa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cffc:	e72c      	b.n	800ce58 <_svfiprintf_r+0x2c>
 800cffe:	ab03      	add	r3, sp, #12
 800d000:	9300      	str	r3, [sp, #0]
 800d002:	462a      	mov	r2, r5
 800d004:	4b05      	ldr	r3, [pc, #20]	@ (800d01c <_svfiprintf_r+0x1f0>)
 800d006:	a904      	add	r1, sp, #16
 800d008:	4638      	mov	r0, r7
 800d00a:	f7fe f901 	bl	800b210 <_printf_i>
 800d00e:	e7ed      	b.n	800cfec <_svfiprintf_r+0x1c0>
 800d010:	0800db78 	.word	0x0800db78
 800d014:	0800db82 	.word	0x0800db82
 800d018:	0800ad01 	.word	0x0800ad01
 800d01c:	0800cd75 	.word	0x0800cd75
 800d020:	0800db7e 	.word	0x0800db7e

0800d024 <__sfputc_r>:
 800d024:	6893      	ldr	r3, [r2, #8]
 800d026:	3b01      	subs	r3, #1
 800d028:	2b00      	cmp	r3, #0
 800d02a:	b410      	push	{r4}
 800d02c:	6093      	str	r3, [r2, #8]
 800d02e:	da08      	bge.n	800d042 <__sfputc_r+0x1e>
 800d030:	6994      	ldr	r4, [r2, #24]
 800d032:	42a3      	cmp	r3, r4
 800d034:	db01      	blt.n	800d03a <__sfputc_r+0x16>
 800d036:	290a      	cmp	r1, #10
 800d038:	d103      	bne.n	800d042 <__sfputc_r+0x1e>
 800d03a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d03e:	f7fe bbb0 	b.w	800b7a2 <__swbuf_r>
 800d042:	6813      	ldr	r3, [r2, #0]
 800d044:	1c58      	adds	r0, r3, #1
 800d046:	6010      	str	r0, [r2, #0]
 800d048:	7019      	strb	r1, [r3, #0]
 800d04a:	4608      	mov	r0, r1
 800d04c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d050:	4770      	bx	lr

0800d052 <__sfputs_r>:
 800d052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d054:	4606      	mov	r6, r0
 800d056:	460f      	mov	r7, r1
 800d058:	4614      	mov	r4, r2
 800d05a:	18d5      	adds	r5, r2, r3
 800d05c:	42ac      	cmp	r4, r5
 800d05e:	d101      	bne.n	800d064 <__sfputs_r+0x12>
 800d060:	2000      	movs	r0, #0
 800d062:	e007      	b.n	800d074 <__sfputs_r+0x22>
 800d064:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d068:	463a      	mov	r2, r7
 800d06a:	4630      	mov	r0, r6
 800d06c:	f7ff ffda 	bl	800d024 <__sfputc_r>
 800d070:	1c43      	adds	r3, r0, #1
 800d072:	d1f3      	bne.n	800d05c <__sfputs_r+0xa>
 800d074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d078 <_vfiprintf_r>:
 800d078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d07c:	460d      	mov	r5, r1
 800d07e:	b09d      	sub	sp, #116	@ 0x74
 800d080:	4614      	mov	r4, r2
 800d082:	4698      	mov	r8, r3
 800d084:	4606      	mov	r6, r0
 800d086:	b118      	cbz	r0, 800d090 <_vfiprintf_r+0x18>
 800d088:	6a03      	ldr	r3, [r0, #32]
 800d08a:	b90b      	cbnz	r3, 800d090 <_vfiprintf_r+0x18>
 800d08c:	f7fe fa6c 	bl	800b568 <__sinit>
 800d090:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d092:	07d9      	lsls	r1, r3, #31
 800d094:	d405      	bmi.n	800d0a2 <_vfiprintf_r+0x2a>
 800d096:	89ab      	ldrh	r3, [r5, #12]
 800d098:	059a      	lsls	r2, r3, #22
 800d09a:	d402      	bmi.n	800d0a2 <_vfiprintf_r+0x2a>
 800d09c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d09e:	f7fe fcbc 	bl	800ba1a <__retarget_lock_acquire_recursive>
 800d0a2:	89ab      	ldrh	r3, [r5, #12]
 800d0a4:	071b      	lsls	r3, r3, #28
 800d0a6:	d501      	bpl.n	800d0ac <_vfiprintf_r+0x34>
 800d0a8:	692b      	ldr	r3, [r5, #16]
 800d0aa:	b99b      	cbnz	r3, 800d0d4 <_vfiprintf_r+0x5c>
 800d0ac:	4629      	mov	r1, r5
 800d0ae:	4630      	mov	r0, r6
 800d0b0:	f7fe fbb6 	bl	800b820 <__swsetup_r>
 800d0b4:	b170      	cbz	r0, 800d0d4 <_vfiprintf_r+0x5c>
 800d0b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0b8:	07dc      	lsls	r4, r3, #31
 800d0ba:	d504      	bpl.n	800d0c6 <_vfiprintf_r+0x4e>
 800d0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d0c0:	b01d      	add	sp, #116	@ 0x74
 800d0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0c6:	89ab      	ldrh	r3, [r5, #12]
 800d0c8:	0598      	lsls	r0, r3, #22
 800d0ca:	d4f7      	bmi.n	800d0bc <_vfiprintf_r+0x44>
 800d0cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0ce:	f7fe fca5 	bl	800ba1c <__retarget_lock_release_recursive>
 800d0d2:	e7f3      	b.n	800d0bc <_vfiprintf_r+0x44>
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0d8:	2320      	movs	r3, #32
 800d0da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d0de:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0e2:	2330      	movs	r3, #48	@ 0x30
 800d0e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d294 <_vfiprintf_r+0x21c>
 800d0e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d0ec:	f04f 0901 	mov.w	r9, #1
 800d0f0:	4623      	mov	r3, r4
 800d0f2:	469a      	mov	sl, r3
 800d0f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0f8:	b10a      	cbz	r2, 800d0fe <_vfiprintf_r+0x86>
 800d0fa:	2a25      	cmp	r2, #37	@ 0x25
 800d0fc:	d1f9      	bne.n	800d0f2 <_vfiprintf_r+0x7a>
 800d0fe:	ebba 0b04 	subs.w	fp, sl, r4
 800d102:	d00b      	beq.n	800d11c <_vfiprintf_r+0xa4>
 800d104:	465b      	mov	r3, fp
 800d106:	4622      	mov	r2, r4
 800d108:	4629      	mov	r1, r5
 800d10a:	4630      	mov	r0, r6
 800d10c:	f7ff ffa1 	bl	800d052 <__sfputs_r>
 800d110:	3001      	adds	r0, #1
 800d112:	f000 80a7 	beq.w	800d264 <_vfiprintf_r+0x1ec>
 800d116:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d118:	445a      	add	r2, fp
 800d11a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d11c:	f89a 3000 	ldrb.w	r3, [sl]
 800d120:	2b00      	cmp	r3, #0
 800d122:	f000 809f 	beq.w	800d264 <_vfiprintf_r+0x1ec>
 800d126:	2300      	movs	r3, #0
 800d128:	f04f 32ff 	mov.w	r2, #4294967295
 800d12c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d130:	f10a 0a01 	add.w	sl, sl, #1
 800d134:	9304      	str	r3, [sp, #16]
 800d136:	9307      	str	r3, [sp, #28]
 800d138:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d13c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d13e:	4654      	mov	r4, sl
 800d140:	2205      	movs	r2, #5
 800d142:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d146:	4853      	ldr	r0, [pc, #332]	@ (800d294 <_vfiprintf_r+0x21c>)
 800d148:	f7f3 f8e2 	bl	8000310 <memchr>
 800d14c:	9a04      	ldr	r2, [sp, #16]
 800d14e:	b9d8      	cbnz	r0, 800d188 <_vfiprintf_r+0x110>
 800d150:	06d1      	lsls	r1, r2, #27
 800d152:	bf44      	itt	mi
 800d154:	2320      	movmi	r3, #32
 800d156:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d15a:	0713      	lsls	r3, r2, #28
 800d15c:	bf44      	itt	mi
 800d15e:	232b      	movmi	r3, #43	@ 0x2b
 800d160:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d164:	f89a 3000 	ldrb.w	r3, [sl]
 800d168:	2b2a      	cmp	r3, #42	@ 0x2a
 800d16a:	d015      	beq.n	800d198 <_vfiprintf_r+0x120>
 800d16c:	9a07      	ldr	r2, [sp, #28]
 800d16e:	4654      	mov	r4, sl
 800d170:	2000      	movs	r0, #0
 800d172:	f04f 0c0a 	mov.w	ip, #10
 800d176:	4621      	mov	r1, r4
 800d178:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d17c:	3b30      	subs	r3, #48	@ 0x30
 800d17e:	2b09      	cmp	r3, #9
 800d180:	d94b      	bls.n	800d21a <_vfiprintf_r+0x1a2>
 800d182:	b1b0      	cbz	r0, 800d1b2 <_vfiprintf_r+0x13a>
 800d184:	9207      	str	r2, [sp, #28]
 800d186:	e014      	b.n	800d1b2 <_vfiprintf_r+0x13a>
 800d188:	eba0 0308 	sub.w	r3, r0, r8
 800d18c:	fa09 f303 	lsl.w	r3, r9, r3
 800d190:	4313      	orrs	r3, r2
 800d192:	9304      	str	r3, [sp, #16]
 800d194:	46a2      	mov	sl, r4
 800d196:	e7d2      	b.n	800d13e <_vfiprintf_r+0xc6>
 800d198:	9b03      	ldr	r3, [sp, #12]
 800d19a:	1d19      	adds	r1, r3, #4
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	9103      	str	r1, [sp, #12]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	bfbb      	ittet	lt
 800d1a4:	425b      	neglt	r3, r3
 800d1a6:	f042 0202 	orrlt.w	r2, r2, #2
 800d1aa:	9307      	strge	r3, [sp, #28]
 800d1ac:	9307      	strlt	r3, [sp, #28]
 800d1ae:	bfb8      	it	lt
 800d1b0:	9204      	strlt	r2, [sp, #16]
 800d1b2:	7823      	ldrb	r3, [r4, #0]
 800d1b4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d1b6:	d10a      	bne.n	800d1ce <_vfiprintf_r+0x156>
 800d1b8:	7863      	ldrb	r3, [r4, #1]
 800d1ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1bc:	d132      	bne.n	800d224 <_vfiprintf_r+0x1ac>
 800d1be:	9b03      	ldr	r3, [sp, #12]
 800d1c0:	1d1a      	adds	r2, r3, #4
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	9203      	str	r2, [sp, #12]
 800d1c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d1ca:	3402      	adds	r4, #2
 800d1cc:	9305      	str	r3, [sp, #20]
 800d1ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d2a4 <_vfiprintf_r+0x22c>
 800d1d2:	7821      	ldrb	r1, [r4, #0]
 800d1d4:	2203      	movs	r2, #3
 800d1d6:	4650      	mov	r0, sl
 800d1d8:	f7f3 f89a 	bl	8000310 <memchr>
 800d1dc:	b138      	cbz	r0, 800d1ee <_vfiprintf_r+0x176>
 800d1de:	9b04      	ldr	r3, [sp, #16]
 800d1e0:	eba0 000a 	sub.w	r0, r0, sl
 800d1e4:	2240      	movs	r2, #64	@ 0x40
 800d1e6:	4082      	lsls	r2, r0
 800d1e8:	4313      	orrs	r3, r2
 800d1ea:	3401      	adds	r4, #1
 800d1ec:	9304      	str	r3, [sp, #16]
 800d1ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1f2:	4829      	ldr	r0, [pc, #164]	@ (800d298 <_vfiprintf_r+0x220>)
 800d1f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d1f8:	2206      	movs	r2, #6
 800d1fa:	f7f3 f889 	bl	8000310 <memchr>
 800d1fe:	2800      	cmp	r0, #0
 800d200:	d03f      	beq.n	800d282 <_vfiprintf_r+0x20a>
 800d202:	4b26      	ldr	r3, [pc, #152]	@ (800d29c <_vfiprintf_r+0x224>)
 800d204:	bb1b      	cbnz	r3, 800d24e <_vfiprintf_r+0x1d6>
 800d206:	9b03      	ldr	r3, [sp, #12]
 800d208:	3307      	adds	r3, #7
 800d20a:	f023 0307 	bic.w	r3, r3, #7
 800d20e:	3308      	adds	r3, #8
 800d210:	9303      	str	r3, [sp, #12]
 800d212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d214:	443b      	add	r3, r7
 800d216:	9309      	str	r3, [sp, #36]	@ 0x24
 800d218:	e76a      	b.n	800d0f0 <_vfiprintf_r+0x78>
 800d21a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d21e:	460c      	mov	r4, r1
 800d220:	2001      	movs	r0, #1
 800d222:	e7a8      	b.n	800d176 <_vfiprintf_r+0xfe>
 800d224:	2300      	movs	r3, #0
 800d226:	3401      	adds	r4, #1
 800d228:	9305      	str	r3, [sp, #20]
 800d22a:	4619      	mov	r1, r3
 800d22c:	f04f 0c0a 	mov.w	ip, #10
 800d230:	4620      	mov	r0, r4
 800d232:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d236:	3a30      	subs	r2, #48	@ 0x30
 800d238:	2a09      	cmp	r2, #9
 800d23a:	d903      	bls.n	800d244 <_vfiprintf_r+0x1cc>
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d0c6      	beq.n	800d1ce <_vfiprintf_r+0x156>
 800d240:	9105      	str	r1, [sp, #20]
 800d242:	e7c4      	b.n	800d1ce <_vfiprintf_r+0x156>
 800d244:	fb0c 2101 	mla	r1, ip, r1, r2
 800d248:	4604      	mov	r4, r0
 800d24a:	2301      	movs	r3, #1
 800d24c:	e7f0      	b.n	800d230 <_vfiprintf_r+0x1b8>
 800d24e:	ab03      	add	r3, sp, #12
 800d250:	9300      	str	r3, [sp, #0]
 800d252:	462a      	mov	r2, r5
 800d254:	4b12      	ldr	r3, [pc, #72]	@ (800d2a0 <_vfiprintf_r+0x228>)
 800d256:	a904      	add	r1, sp, #16
 800d258:	4630      	mov	r0, r6
 800d25a:	f7fd fd51 	bl	800ad00 <_printf_float>
 800d25e:	4607      	mov	r7, r0
 800d260:	1c78      	adds	r0, r7, #1
 800d262:	d1d6      	bne.n	800d212 <_vfiprintf_r+0x19a>
 800d264:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d266:	07d9      	lsls	r1, r3, #31
 800d268:	d405      	bmi.n	800d276 <_vfiprintf_r+0x1fe>
 800d26a:	89ab      	ldrh	r3, [r5, #12]
 800d26c:	059a      	lsls	r2, r3, #22
 800d26e:	d402      	bmi.n	800d276 <_vfiprintf_r+0x1fe>
 800d270:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d272:	f7fe fbd3 	bl	800ba1c <__retarget_lock_release_recursive>
 800d276:	89ab      	ldrh	r3, [r5, #12]
 800d278:	065b      	lsls	r3, r3, #25
 800d27a:	f53f af1f 	bmi.w	800d0bc <_vfiprintf_r+0x44>
 800d27e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d280:	e71e      	b.n	800d0c0 <_vfiprintf_r+0x48>
 800d282:	ab03      	add	r3, sp, #12
 800d284:	9300      	str	r3, [sp, #0]
 800d286:	462a      	mov	r2, r5
 800d288:	4b05      	ldr	r3, [pc, #20]	@ (800d2a0 <_vfiprintf_r+0x228>)
 800d28a:	a904      	add	r1, sp, #16
 800d28c:	4630      	mov	r0, r6
 800d28e:	f7fd ffbf 	bl	800b210 <_printf_i>
 800d292:	e7e4      	b.n	800d25e <_vfiprintf_r+0x1e6>
 800d294:	0800db78 	.word	0x0800db78
 800d298:	0800db82 	.word	0x0800db82
 800d29c:	0800ad01 	.word	0x0800ad01
 800d2a0:	0800d053 	.word	0x0800d053
 800d2a4:	0800db7e 	.word	0x0800db7e

0800d2a8 <__sflush_r>:
 800d2a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2b0:	0716      	lsls	r6, r2, #28
 800d2b2:	4605      	mov	r5, r0
 800d2b4:	460c      	mov	r4, r1
 800d2b6:	d454      	bmi.n	800d362 <__sflush_r+0xba>
 800d2b8:	684b      	ldr	r3, [r1, #4]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	dc02      	bgt.n	800d2c4 <__sflush_r+0x1c>
 800d2be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	dd48      	ble.n	800d356 <__sflush_r+0xae>
 800d2c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d2c6:	2e00      	cmp	r6, #0
 800d2c8:	d045      	beq.n	800d356 <__sflush_r+0xae>
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d2d0:	682f      	ldr	r7, [r5, #0]
 800d2d2:	6a21      	ldr	r1, [r4, #32]
 800d2d4:	602b      	str	r3, [r5, #0]
 800d2d6:	d030      	beq.n	800d33a <__sflush_r+0x92>
 800d2d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d2da:	89a3      	ldrh	r3, [r4, #12]
 800d2dc:	0759      	lsls	r1, r3, #29
 800d2de:	d505      	bpl.n	800d2ec <__sflush_r+0x44>
 800d2e0:	6863      	ldr	r3, [r4, #4]
 800d2e2:	1ad2      	subs	r2, r2, r3
 800d2e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d2e6:	b10b      	cbz	r3, 800d2ec <__sflush_r+0x44>
 800d2e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d2ea:	1ad2      	subs	r2, r2, r3
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d2f0:	6a21      	ldr	r1, [r4, #32]
 800d2f2:	4628      	mov	r0, r5
 800d2f4:	47b0      	blx	r6
 800d2f6:	1c43      	adds	r3, r0, #1
 800d2f8:	89a3      	ldrh	r3, [r4, #12]
 800d2fa:	d106      	bne.n	800d30a <__sflush_r+0x62>
 800d2fc:	6829      	ldr	r1, [r5, #0]
 800d2fe:	291d      	cmp	r1, #29
 800d300:	d82b      	bhi.n	800d35a <__sflush_r+0xb2>
 800d302:	4a2a      	ldr	r2, [pc, #168]	@ (800d3ac <__sflush_r+0x104>)
 800d304:	410a      	asrs	r2, r1
 800d306:	07d6      	lsls	r6, r2, #31
 800d308:	d427      	bmi.n	800d35a <__sflush_r+0xb2>
 800d30a:	2200      	movs	r2, #0
 800d30c:	6062      	str	r2, [r4, #4]
 800d30e:	04d9      	lsls	r1, r3, #19
 800d310:	6922      	ldr	r2, [r4, #16]
 800d312:	6022      	str	r2, [r4, #0]
 800d314:	d504      	bpl.n	800d320 <__sflush_r+0x78>
 800d316:	1c42      	adds	r2, r0, #1
 800d318:	d101      	bne.n	800d31e <__sflush_r+0x76>
 800d31a:	682b      	ldr	r3, [r5, #0]
 800d31c:	b903      	cbnz	r3, 800d320 <__sflush_r+0x78>
 800d31e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d320:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d322:	602f      	str	r7, [r5, #0]
 800d324:	b1b9      	cbz	r1, 800d356 <__sflush_r+0xae>
 800d326:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d32a:	4299      	cmp	r1, r3
 800d32c:	d002      	beq.n	800d334 <__sflush_r+0x8c>
 800d32e:	4628      	mov	r0, r5
 800d330:	f7ff f954 	bl	800c5dc <_free_r>
 800d334:	2300      	movs	r3, #0
 800d336:	6363      	str	r3, [r4, #52]	@ 0x34
 800d338:	e00d      	b.n	800d356 <__sflush_r+0xae>
 800d33a:	2301      	movs	r3, #1
 800d33c:	4628      	mov	r0, r5
 800d33e:	47b0      	blx	r6
 800d340:	4602      	mov	r2, r0
 800d342:	1c50      	adds	r0, r2, #1
 800d344:	d1c9      	bne.n	800d2da <__sflush_r+0x32>
 800d346:	682b      	ldr	r3, [r5, #0]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d0c6      	beq.n	800d2da <__sflush_r+0x32>
 800d34c:	2b1d      	cmp	r3, #29
 800d34e:	d001      	beq.n	800d354 <__sflush_r+0xac>
 800d350:	2b16      	cmp	r3, #22
 800d352:	d11e      	bne.n	800d392 <__sflush_r+0xea>
 800d354:	602f      	str	r7, [r5, #0]
 800d356:	2000      	movs	r0, #0
 800d358:	e022      	b.n	800d3a0 <__sflush_r+0xf8>
 800d35a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d35e:	b21b      	sxth	r3, r3
 800d360:	e01b      	b.n	800d39a <__sflush_r+0xf2>
 800d362:	690f      	ldr	r7, [r1, #16]
 800d364:	2f00      	cmp	r7, #0
 800d366:	d0f6      	beq.n	800d356 <__sflush_r+0xae>
 800d368:	0793      	lsls	r3, r2, #30
 800d36a:	680e      	ldr	r6, [r1, #0]
 800d36c:	bf08      	it	eq
 800d36e:	694b      	ldreq	r3, [r1, #20]
 800d370:	600f      	str	r7, [r1, #0]
 800d372:	bf18      	it	ne
 800d374:	2300      	movne	r3, #0
 800d376:	eba6 0807 	sub.w	r8, r6, r7
 800d37a:	608b      	str	r3, [r1, #8]
 800d37c:	f1b8 0f00 	cmp.w	r8, #0
 800d380:	dde9      	ble.n	800d356 <__sflush_r+0xae>
 800d382:	6a21      	ldr	r1, [r4, #32]
 800d384:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d386:	4643      	mov	r3, r8
 800d388:	463a      	mov	r2, r7
 800d38a:	4628      	mov	r0, r5
 800d38c:	47b0      	blx	r6
 800d38e:	2800      	cmp	r0, #0
 800d390:	dc08      	bgt.n	800d3a4 <__sflush_r+0xfc>
 800d392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d39a:	81a3      	strh	r3, [r4, #12]
 800d39c:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3a4:	4407      	add	r7, r0
 800d3a6:	eba8 0800 	sub.w	r8, r8, r0
 800d3aa:	e7e7      	b.n	800d37c <__sflush_r+0xd4>
 800d3ac:	dfbffffe 	.word	0xdfbffffe

0800d3b0 <_fflush_r>:
 800d3b0:	b538      	push	{r3, r4, r5, lr}
 800d3b2:	690b      	ldr	r3, [r1, #16]
 800d3b4:	4605      	mov	r5, r0
 800d3b6:	460c      	mov	r4, r1
 800d3b8:	b913      	cbnz	r3, 800d3c0 <_fflush_r+0x10>
 800d3ba:	2500      	movs	r5, #0
 800d3bc:	4628      	mov	r0, r5
 800d3be:	bd38      	pop	{r3, r4, r5, pc}
 800d3c0:	b118      	cbz	r0, 800d3ca <_fflush_r+0x1a>
 800d3c2:	6a03      	ldr	r3, [r0, #32]
 800d3c4:	b90b      	cbnz	r3, 800d3ca <_fflush_r+0x1a>
 800d3c6:	f7fe f8cf 	bl	800b568 <__sinit>
 800d3ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d0f3      	beq.n	800d3ba <_fflush_r+0xa>
 800d3d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d3d4:	07d0      	lsls	r0, r2, #31
 800d3d6:	d404      	bmi.n	800d3e2 <_fflush_r+0x32>
 800d3d8:	0599      	lsls	r1, r3, #22
 800d3da:	d402      	bmi.n	800d3e2 <_fflush_r+0x32>
 800d3dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d3de:	f7fe fb1c 	bl	800ba1a <__retarget_lock_acquire_recursive>
 800d3e2:	4628      	mov	r0, r5
 800d3e4:	4621      	mov	r1, r4
 800d3e6:	f7ff ff5f 	bl	800d2a8 <__sflush_r>
 800d3ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d3ec:	07da      	lsls	r2, r3, #31
 800d3ee:	4605      	mov	r5, r0
 800d3f0:	d4e4      	bmi.n	800d3bc <_fflush_r+0xc>
 800d3f2:	89a3      	ldrh	r3, [r4, #12]
 800d3f4:	059b      	lsls	r3, r3, #22
 800d3f6:	d4e1      	bmi.n	800d3bc <_fflush_r+0xc>
 800d3f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d3fa:	f7fe fb0f 	bl	800ba1c <__retarget_lock_release_recursive>
 800d3fe:	e7dd      	b.n	800d3bc <_fflush_r+0xc>

0800d400 <__swhatbuf_r>:
 800d400:	b570      	push	{r4, r5, r6, lr}
 800d402:	460c      	mov	r4, r1
 800d404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d408:	2900      	cmp	r1, #0
 800d40a:	b096      	sub	sp, #88	@ 0x58
 800d40c:	4615      	mov	r5, r2
 800d40e:	461e      	mov	r6, r3
 800d410:	da0d      	bge.n	800d42e <__swhatbuf_r+0x2e>
 800d412:	89a3      	ldrh	r3, [r4, #12]
 800d414:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d418:	f04f 0100 	mov.w	r1, #0
 800d41c:	bf14      	ite	ne
 800d41e:	2340      	movne	r3, #64	@ 0x40
 800d420:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d424:	2000      	movs	r0, #0
 800d426:	6031      	str	r1, [r6, #0]
 800d428:	602b      	str	r3, [r5, #0]
 800d42a:	b016      	add	sp, #88	@ 0x58
 800d42c:	bd70      	pop	{r4, r5, r6, pc}
 800d42e:	466a      	mov	r2, sp
 800d430:	f000 f848 	bl	800d4c4 <_fstat_r>
 800d434:	2800      	cmp	r0, #0
 800d436:	dbec      	blt.n	800d412 <__swhatbuf_r+0x12>
 800d438:	9901      	ldr	r1, [sp, #4]
 800d43a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d43e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d442:	4259      	negs	r1, r3
 800d444:	4159      	adcs	r1, r3
 800d446:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d44a:	e7eb      	b.n	800d424 <__swhatbuf_r+0x24>

0800d44c <__smakebuf_r>:
 800d44c:	898b      	ldrh	r3, [r1, #12]
 800d44e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d450:	079d      	lsls	r5, r3, #30
 800d452:	4606      	mov	r6, r0
 800d454:	460c      	mov	r4, r1
 800d456:	d507      	bpl.n	800d468 <__smakebuf_r+0x1c>
 800d458:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d45c:	6023      	str	r3, [r4, #0]
 800d45e:	6123      	str	r3, [r4, #16]
 800d460:	2301      	movs	r3, #1
 800d462:	6163      	str	r3, [r4, #20]
 800d464:	b003      	add	sp, #12
 800d466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d468:	ab01      	add	r3, sp, #4
 800d46a:	466a      	mov	r2, sp
 800d46c:	f7ff ffc8 	bl	800d400 <__swhatbuf_r>
 800d470:	9f00      	ldr	r7, [sp, #0]
 800d472:	4605      	mov	r5, r0
 800d474:	4639      	mov	r1, r7
 800d476:	4630      	mov	r0, r6
 800d478:	f7fd fb26 	bl	800aac8 <_malloc_r>
 800d47c:	b948      	cbnz	r0, 800d492 <__smakebuf_r+0x46>
 800d47e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d482:	059a      	lsls	r2, r3, #22
 800d484:	d4ee      	bmi.n	800d464 <__smakebuf_r+0x18>
 800d486:	f023 0303 	bic.w	r3, r3, #3
 800d48a:	f043 0302 	orr.w	r3, r3, #2
 800d48e:	81a3      	strh	r3, [r4, #12]
 800d490:	e7e2      	b.n	800d458 <__smakebuf_r+0xc>
 800d492:	89a3      	ldrh	r3, [r4, #12]
 800d494:	6020      	str	r0, [r4, #0]
 800d496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d49a:	81a3      	strh	r3, [r4, #12]
 800d49c:	9b01      	ldr	r3, [sp, #4]
 800d49e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d4a2:	b15b      	cbz	r3, 800d4bc <__smakebuf_r+0x70>
 800d4a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4a8:	4630      	mov	r0, r6
 800d4aa:	f000 f81d 	bl	800d4e8 <_isatty_r>
 800d4ae:	b128      	cbz	r0, 800d4bc <__smakebuf_r+0x70>
 800d4b0:	89a3      	ldrh	r3, [r4, #12]
 800d4b2:	f023 0303 	bic.w	r3, r3, #3
 800d4b6:	f043 0301 	orr.w	r3, r3, #1
 800d4ba:	81a3      	strh	r3, [r4, #12]
 800d4bc:	89a3      	ldrh	r3, [r4, #12]
 800d4be:	431d      	orrs	r5, r3
 800d4c0:	81a5      	strh	r5, [r4, #12]
 800d4c2:	e7cf      	b.n	800d464 <__smakebuf_r+0x18>

0800d4c4 <_fstat_r>:
 800d4c4:	b538      	push	{r3, r4, r5, lr}
 800d4c6:	4d07      	ldr	r5, [pc, #28]	@ (800d4e4 <_fstat_r+0x20>)
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	4604      	mov	r4, r0
 800d4cc:	4608      	mov	r0, r1
 800d4ce:	4611      	mov	r1, r2
 800d4d0:	602b      	str	r3, [r5, #0]
 800d4d2:	f7f4 f9bd 	bl	8001850 <_fstat>
 800d4d6:	1c43      	adds	r3, r0, #1
 800d4d8:	d102      	bne.n	800d4e0 <_fstat_r+0x1c>
 800d4da:	682b      	ldr	r3, [r5, #0]
 800d4dc:	b103      	cbz	r3, 800d4e0 <_fstat_r+0x1c>
 800d4de:	6023      	str	r3, [r4, #0]
 800d4e0:	bd38      	pop	{r3, r4, r5, pc}
 800d4e2:	bf00      	nop
 800d4e4:	240006b4 	.word	0x240006b4

0800d4e8 <_isatty_r>:
 800d4e8:	b538      	push	{r3, r4, r5, lr}
 800d4ea:	4d06      	ldr	r5, [pc, #24]	@ (800d504 <_isatty_r+0x1c>)
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	4604      	mov	r4, r0
 800d4f0:	4608      	mov	r0, r1
 800d4f2:	602b      	str	r3, [r5, #0]
 800d4f4:	f7f4 f9bc 	bl	8001870 <_isatty>
 800d4f8:	1c43      	adds	r3, r0, #1
 800d4fa:	d102      	bne.n	800d502 <_isatty_r+0x1a>
 800d4fc:	682b      	ldr	r3, [r5, #0]
 800d4fe:	b103      	cbz	r3, 800d502 <_isatty_r+0x1a>
 800d500:	6023      	str	r3, [r4, #0]
 800d502:	bd38      	pop	{r3, r4, r5, pc}
 800d504:	240006b4 	.word	0x240006b4

0800d508 <memcpy>:
 800d508:	440a      	add	r2, r1
 800d50a:	4291      	cmp	r1, r2
 800d50c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d510:	d100      	bne.n	800d514 <memcpy+0xc>
 800d512:	4770      	bx	lr
 800d514:	b510      	push	{r4, lr}
 800d516:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d51a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d51e:	4291      	cmp	r1, r2
 800d520:	d1f9      	bne.n	800d516 <memcpy+0xe>
 800d522:	bd10      	pop	{r4, pc}

0800d524 <__assert_func>:
 800d524:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d526:	4614      	mov	r4, r2
 800d528:	461a      	mov	r2, r3
 800d52a:	4b09      	ldr	r3, [pc, #36]	@ (800d550 <__assert_func+0x2c>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	4605      	mov	r5, r0
 800d530:	68d8      	ldr	r0, [r3, #12]
 800d532:	b954      	cbnz	r4, 800d54a <__assert_func+0x26>
 800d534:	4b07      	ldr	r3, [pc, #28]	@ (800d554 <__assert_func+0x30>)
 800d536:	461c      	mov	r4, r3
 800d538:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d53c:	9100      	str	r1, [sp, #0]
 800d53e:	462b      	mov	r3, r5
 800d540:	4905      	ldr	r1, [pc, #20]	@ (800d558 <__assert_func+0x34>)
 800d542:	f000 f86f 	bl	800d624 <fiprintf>
 800d546:	f000 f87f 	bl	800d648 <abort>
 800d54a:	4b04      	ldr	r3, [pc, #16]	@ (800d55c <__assert_func+0x38>)
 800d54c:	e7f4      	b.n	800d538 <__assert_func+0x14>
 800d54e:	bf00      	nop
 800d550:	24000120 	.word	0x24000120
 800d554:	0800dbce 	.word	0x0800dbce
 800d558:	0800dba0 	.word	0x0800dba0
 800d55c:	0800db93 	.word	0x0800db93

0800d560 <_calloc_r>:
 800d560:	b570      	push	{r4, r5, r6, lr}
 800d562:	fba1 5402 	umull	r5, r4, r1, r2
 800d566:	b93c      	cbnz	r4, 800d578 <_calloc_r+0x18>
 800d568:	4629      	mov	r1, r5
 800d56a:	f7fd faad 	bl	800aac8 <_malloc_r>
 800d56e:	4606      	mov	r6, r0
 800d570:	b928      	cbnz	r0, 800d57e <_calloc_r+0x1e>
 800d572:	2600      	movs	r6, #0
 800d574:	4630      	mov	r0, r6
 800d576:	bd70      	pop	{r4, r5, r6, pc}
 800d578:	220c      	movs	r2, #12
 800d57a:	6002      	str	r2, [r0, #0]
 800d57c:	e7f9      	b.n	800d572 <_calloc_r+0x12>
 800d57e:	462a      	mov	r2, r5
 800d580:	4621      	mov	r1, r4
 800d582:	f7fe f9bd 	bl	800b900 <memset>
 800d586:	e7f5      	b.n	800d574 <_calloc_r+0x14>

0800d588 <__ascii_mbtowc>:
 800d588:	b082      	sub	sp, #8
 800d58a:	b901      	cbnz	r1, 800d58e <__ascii_mbtowc+0x6>
 800d58c:	a901      	add	r1, sp, #4
 800d58e:	b142      	cbz	r2, 800d5a2 <__ascii_mbtowc+0x1a>
 800d590:	b14b      	cbz	r3, 800d5a6 <__ascii_mbtowc+0x1e>
 800d592:	7813      	ldrb	r3, [r2, #0]
 800d594:	600b      	str	r3, [r1, #0]
 800d596:	7812      	ldrb	r2, [r2, #0]
 800d598:	1e10      	subs	r0, r2, #0
 800d59a:	bf18      	it	ne
 800d59c:	2001      	movne	r0, #1
 800d59e:	b002      	add	sp, #8
 800d5a0:	4770      	bx	lr
 800d5a2:	4610      	mov	r0, r2
 800d5a4:	e7fb      	b.n	800d59e <__ascii_mbtowc+0x16>
 800d5a6:	f06f 0001 	mvn.w	r0, #1
 800d5aa:	e7f8      	b.n	800d59e <__ascii_mbtowc+0x16>

0800d5ac <_realloc_r>:
 800d5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b0:	4680      	mov	r8, r0
 800d5b2:	4615      	mov	r5, r2
 800d5b4:	460c      	mov	r4, r1
 800d5b6:	b921      	cbnz	r1, 800d5c2 <_realloc_r+0x16>
 800d5b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5bc:	4611      	mov	r1, r2
 800d5be:	f7fd ba83 	b.w	800aac8 <_malloc_r>
 800d5c2:	b92a      	cbnz	r2, 800d5d0 <_realloc_r+0x24>
 800d5c4:	f7ff f80a 	bl	800c5dc <_free_r>
 800d5c8:	2400      	movs	r4, #0
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5d0:	f000 f841 	bl	800d656 <_malloc_usable_size_r>
 800d5d4:	4285      	cmp	r5, r0
 800d5d6:	4606      	mov	r6, r0
 800d5d8:	d802      	bhi.n	800d5e0 <_realloc_r+0x34>
 800d5da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d5de:	d8f4      	bhi.n	800d5ca <_realloc_r+0x1e>
 800d5e0:	4629      	mov	r1, r5
 800d5e2:	4640      	mov	r0, r8
 800d5e4:	f7fd fa70 	bl	800aac8 <_malloc_r>
 800d5e8:	4607      	mov	r7, r0
 800d5ea:	2800      	cmp	r0, #0
 800d5ec:	d0ec      	beq.n	800d5c8 <_realloc_r+0x1c>
 800d5ee:	42b5      	cmp	r5, r6
 800d5f0:	462a      	mov	r2, r5
 800d5f2:	4621      	mov	r1, r4
 800d5f4:	bf28      	it	cs
 800d5f6:	4632      	movcs	r2, r6
 800d5f8:	f7ff ff86 	bl	800d508 <memcpy>
 800d5fc:	4621      	mov	r1, r4
 800d5fe:	4640      	mov	r0, r8
 800d600:	f7fe ffec 	bl	800c5dc <_free_r>
 800d604:	463c      	mov	r4, r7
 800d606:	e7e0      	b.n	800d5ca <_realloc_r+0x1e>

0800d608 <__ascii_wctomb>:
 800d608:	4603      	mov	r3, r0
 800d60a:	4608      	mov	r0, r1
 800d60c:	b141      	cbz	r1, 800d620 <__ascii_wctomb+0x18>
 800d60e:	2aff      	cmp	r2, #255	@ 0xff
 800d610:	d904      	bls.n	800d61c <__ascii_wctomb+0x14>
 800d612:	228a      	movs	r2, #138	@ 0x8a
 800d614:	601a      	str	r2, [r3, #0]
 800d616:	f04f 30ff 	mov.w	r0, #4294967295
 800d61a:	4770      	bx	lr
 800d61c:	700a      	strb	r2, [r1, #0]
 800d61e:	2001      	movs	r0, #1
 800d620:	4770      	bx	lr
	...

0800d624 <fiprintf>:
 800d624:	b40e      	push	{r1, r2, r3}
 800d626:	b503      	push	{r0, r1, lr}
 800d628:	4601      	mov	r1, r0
 800d62a:	ab03      	add	r3, sp, #12
 800d62c:	4805      	ldr	r0, [pc, #20]	@ (800d644 <fiprintf+0x20>)
 800d62e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d632:	6800      	ldr	r0, [r0, #0]
 800d634:	9301      	str	r3, [sp, #4]
 800d636:	f7ff fd1f 	bl	800d078 <_vfiprintf_r>
 800d63a:	b002      	add	sp, #8
 800d63c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d640:	b003      	add	sp, #12
 800d642:	4770      	bx	lr
 800d644:	24000120 	.word	0x24000120

0800d648 <abort>:
 800d648:	b508      	push	{r3, lr}
 800d64a:	2006      	movs	r0, #6
 800d64c:	f000 f834 	bl	800d6b8 <raise>
 800d650:	2001      	movs	r0, #1
 800d652:	f7f4 f8c9 	bl	80017e8 <_exit>

0800d656 <_malloc_usable_size_r>:
 800d656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d65a:	1f18      	subs	r0, r3, #4
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	bfbc      	itt	lt
 800d660:	580b      	ldrlt	r3, [r1, r0]
 800d662:	18c0      	addlt	r0, r0, r3
 800d664:	4770      	bx	lr

0800d666 <_raise_r>:
 800d666:	291f      	cmp	r1, #31
 800d668:	b538      	push	{r3, r4, r5, lr}
 800d66a:	4605      	mov	r5, r0
 800d66c:	460c      	mov	r4, r1
 800d66e:	d904      	bls.n	800d67a <_raise_r+0x14>
 800d670:	2316      	movs	r3, #22
 800d672:	6003      	str	r3, [r0, #0]
 800d674:	f04f 30ff 	mov.w	r0, #4294967295
 800d678:	bd38      	pop	{r3, r4, r5, pc}
 800d67a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d67c:	b112      	cbz	r2, 800d684 <_raise_r+0x1e>
 800d67e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d682:	b94b      	cbnz	r3, 800d698 <_raise_r+0x32>
 800d684:	4628      	mov	r0, r5
 800d686:	f000 f831 	bl	800d6ec <_getpid_r>
 800d68a:	4622      	mov	r2, r4
 800d68c:	4601      	mov	r1, r0
 800d68e:	4628      	mov	r0, r5
 800d690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d694:	f000 b818 	b.w	800d6c8 <_kill_r>
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d00a      	beq.n	800d6b2 <_raise_r+0x4c>
 800d69c:	1c59      	adds	r1, r3, #1
 800d69e:	d103      	bne.n	800d6a8 <_raise_r+0x42>
 800d6a0:	2316      	movs	r3, #22
 800d6a2:	6003      	str	r3, [r0, #0]
 800d6a4:	2001      	movs	r0, #1
 800d6a6:	e7e7      	b.n	800d678 <_raise_r+0x12>
 800d6a8:	2100      	movs	r1, #0
 800d6aa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d6ae:	4620      	mov	r0, r4
 800d6b0:	4798      	blx	r3
 800d6b2:	2000      	movs	r0, #0
 800d6b4:	e7e0      	b.n	800d678 <_raise_r+0x12>
	...

0800d6b8 <raise>:
 800d6b8:	4b02      	ldr	r3, [pc, #8]	@ (800d6c4 <raise+0xc>)
 800d6ba:	4601      	mov	r1, r0
 800d6bc:	6818      	ldr	r0, [r3, #0]
 800d6be:	f7ff bfd2 	b.w	800d666 <_raise_r>
 800d6c2:	bf00      	nop
 800d6c4:	24000120 	.word	0x24000120

0800d6c8 <_kill_r>:
 800d6c8:	b538      	push	{r3, r4, r5, lr}
 800d6ca:	4d07      	ldr	r5, [pc, #28]	@ (800d6e8 <_kill_r+0x20>)
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	4604      	mov	r4, r0
 800d6d0:	4608      	mov	r0, r1
 800d6d2:	4611      	mov	r1, r2
 800d6d4:	602b      	str	r3, [r5, #0]
 800d6d6:	f7f4 f877 	bl	80017c8 <_kill>
 800d6da:	1c43      	adds	r3, r0, #1
 800d6dc:	d102      	bne.n	800d6e4 <_kill_r+0x1c>
 800d6de:	682b      	ldr	r3, [r5, #0]
 800d6e0:	b103      	cbz	r3, 800d6e4 <_kill_r+0x1c>
 800d6e2:	6023      	str	r3, [r4, #0]
 800d6e4:	bd38      	pop	{r3, r4, r5, pc}
 800d6e6:	bf00      	nop
 800d6e8:	240006b4 	.word	0x240006b4

0800d6ec <_getpid_r>:
 800d6ec:	f7f4 b864 	b.w	80017b8 <_getpid>

0800d6f0 <_init>:
 800d6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6f2:	bf00      	nop
 800d6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6f6:	bc08      	pop	{r3}
 800d6f8:	469e      	mov	lr, r3
 800d6fa:	4770      	bx	lr

0800d6fc <_fini>:
 800d6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6fe:	bf00      	nop
 800d700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d702:	bc08      	pop	{r3}
 800d704:	469e      	mov	lr, r3
 800d706:	4770      	bx	lr
