
Master_two_mt6835.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000925c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  08009530  08009530  0000a530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009ad0  08009ad0  0000aad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009ad8  08009ad8  0000aad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009adc  08009adc  0000aadc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002dc  24000000  08009ae0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002a4  240002dc  08009dbc  0000b2dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000580  08009dbc  0000b580  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b2dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001457d  00000000  00000000  0000b30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ce1  00000000  00000000  0001f887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ea0  00000000  00000000  00022568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b34  00000000  00000000  00023408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033c89  00000000  00000000  00023f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000162e0  00000000  00000000  00057bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001463b7  00000000  00000000  0006dea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b425c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004a40  00000000  00000000  001b42a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000053  00000000  00000000  001b8ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002dc 	.word	0x240002dc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08009514 	.word	0x08009514

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002e0 	.word	0x240002e0
 800030c:	08009514 	.word	0x08009514

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	@ 0x28
 80006b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006c6:	4b33      	ldr	r3, [pc, #204]	@ (8000794 <MX_GPIO_Init+0xe4>)
 80006c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006cc:	4a31      	ldr	r2, [pc, #196]	@ (8000794 <MX_GPIO_Init+0xe4>)
 80006ce:	f043 0320 	orr.w	r3, r3, #32
 80006d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000794 <MX_GPIO_Init+0xe4>)
 80006d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006dc:	f003 0320 	and.w	r3, r3, #32
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e4:	4b2b      	ldr	r3, [pc, #172]	@ (8000794 <MX_GPIO_Init+0xe4>)
 80006e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ea:	4a2a      	ldr	r2, [pc, #168]	@ (8000794 <MX_GPIO_Init+0xe4>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006f4:	4b27      	ldr	r3, [pc, #156]	@ (8000794 <MX_GPIO_Init+0xe4>)
 80006f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000702:	4b24      	ldr	r3, [pc, #144]	@ (8000794 <MX_GPIO_Init+0xe4>)
 8000704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000708:	4a22      	ldr	r2, [pc, #136]	@ (8000794 <MX_GPIO_Init+0xe4>)
 800070a:	f043 0308 	orr.w	r3, r3, #8
 800070e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000712:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <MX_GPIO_Init+0xe4>)
 8000714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000718:	f003 0308 	and.w	r3, r3, #8
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000720:	4b1c      	ldr	r3, [pc, #112]	@ (8000794 <MX_GPIO_Init+0xe4>)
 8000722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000726:	4a1b      	ldr	r2, [pc, #108]	@ (8000794 <MX_GPIO_Init+0xe4>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_GPIO_Init+0xe4>)
 8000732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_M2_GPIO_Port, SPI3_M2_Pin, GPIO_PIN_SET);
 800073e:	2201      	movs	r2, #1
 8000740:	2108      	movs	r1, #8
 8000742:	4815      	ldr	r0, [pc, #84]	@ (8000798 <MX_GPIO_Init+0xe8>)
 8000744:	f001 fcb0 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_M1_GPIO_Port, SPI3_M1_Pin, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2110      	movs	r1, #16
 800074c:	4813      	ldr	r0, [pc, #76]	@ (800079c <MX_GPIO_Init+0xec>)
 800074e:	f001 fcab 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_M2_Pin;
 8000752:	2308      	movs	r3, #8
 8000754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_M2_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	4619      	mov	r1, r3
 8000768:	480b      	ldr	r0, [pc, #44]	@ (8000798 <MX_GPIO_Init+0xe8>)
 800076a:	f001 faf5 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_M1_Pin;
 800076e:	2310      	movs	r3, #16
 8000770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_M1_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4619      	mov	r1, r3
 8000784:	4805      	ldr	r0, [pc, #20]	@ (800079c <MX_GPIO_Init+0xec>)
 8000786:	f001 fae7 	bl	8001d58 <HAL_GPIO_Init>

}
 800078a:	bf00      	nop
 800078c:	3728      	adds	r7, #40	@ 0x28
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	58024400 	.word	0x58024400
 8000798:	58021400 	.word	0x58021400
 800079c:	58020000 	.word	0x58020000

080007a0 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	f04f 33ff 	mov.w	r3, #4294967295
 80007b4:	68b9      	ldr	r1, [r7, #8]
 80007b6:	4804      	ldr	r0, [pc, #16]	@ (80007c8 <_write+0x28>)
 80007b8:	f005 f86f 	bl	800589a <HAL_UART_Transmit>
	return len;
 80007bc:	687b      	ldr	r3, [r7, #4]
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2400039c 	.word	0x2400039c

080007cc <mt6835_cs_control>:
#define SPI_M1_CS       SPI3_M1_Pin       // CS M1
#define SPI_M1_CS_PORT  SPI3_M1_GPIO_Port //
#define SPI_M2_CS       SPI3_M2_Pin       // CS M2
#define SPI_M2_CS_PORT  SPI3_M2_GPIO_Port //

static void mt6835_cs_control(mt6835_cs_state_enum_t state) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
	if (state == MT6835_CS_HIGH) {
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d105      	bne.n	80007e8 <mt6835_cs_control+0x1c>
		// 高电平
		HAL_GPIO_WritePin(SPI_M1_CS_PORT, SPI_M1_CS, GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	2110      	movs	r1, #16
 80007e0:	4806      	ldr	r0, [pc, #24]	@ (80007fc <mt6835_cs_control+0x30>)
 80007e2:	f001 fc61 	bl	80020a8 <HAL_GPIO_WritePin>
	} else {
		// 低电平
		HAL_GPIO_WritePin(SPI_M1_CS_PORT, SPI_M1_CS, GPIO_PIN_RESET);
	}
}
 80007e6:	e004      	b.n	80007f2 <mt6835_cs_control+0x26>
		HAL_GPIO_WritePin(SPI_M1_CS_PORT, SPI_M1_CS, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2110      	movs	r1, #16
 80007ec:	4803      	ldr	r0, [pc, #12]	@ (80007fc <mt6835_cs_control+0x30>)
 80007ee:	f001 fc5b 	bl	80020a8 <HAL_GPIO_WritePin>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	58020000 	.word	0x58020000

08000800 <mt6835_cs2_control>:

static void mt6835_cs2_control(mt6835_cs_state_enum_t state) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	if (state == MT6835_CS_HIGH) {
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d105      	bne.n	800081c <mt6835_cs2_control+0x1c>
		// 高电平
		HAL_GPIO_WritePin(SPI_M2_CS_PORT, SPI_M2_CS, GPIO_PIN_SET);
 8000810:	2201      	movs	r2, #1
 8000812:	2108      	movs	r1, #8
 8000814:	4806      	ldr	r0, [pc, #24]	@ (8000830 <mt6835_cs2_control+0x30>)
 8000816:	f001 fc47 	bl	80020a8 <HAL_GPIO_WritePin>
	} else {
		// 低电平
		HAL_GPIO_WritePin(SPI_M2_CS_PORT, SPI_M2_CS, GPIO_PIN_RESET);
	}
}
 800081a:	e004      	b.n	8000826 <mt6835_cs2_control+0x26>
		HAL_GPIO_WritePin(SPI_M2_CS_PORT, SPI_M2_CS, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	2108      	movs	r1, #8
 8000820:	4803      	ldr	r0, [pc, #12]	@ (8000830 <mt6835_cs2_control+0x30>)
 8000822:	f001 fc41 	bl	80020a8 <HAL_GPIO_WritePin>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	58021400 	.word	0x58021400

08000834 <mt6835_spi_send_recv>:

static void mt6835_spi_send_recv(uint8_t *tx_buf, uint8_t *rx_buf, uint8_t len) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	4613      	mov	r3, r2
 8000840:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 8000842:	2300      	movs	r3, #0
 8000844:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_TransmitReceive_IT(&SPI_INSTANCE, tx_buf, rx_buf, len);
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	b29b      	uxth	r3, r3
 800084a:	68ba      	ldr	r2, [r7, #8]
 800084c:	68f9      	ldr	r1, [r7, #12]
 800084e:	4813      	ldr	r0, [pc, #76]	@ (800089c <mt6835_spi_send_recv+0x68>)
 8000850:	f004 faca 	bl	8004de8 <HAL_SPI_TransmitReceive_IT>
 8000854:	4603      	mov	r3, r0
 8000856:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 8000858:	7dfb      	ldrb	r3, [r7, #23]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d005      	beq.n	800086a <mt6835_spi_send_recv+0x36>
		printf("spi send_recv failed %d\n\r", status);
 800085e:	7dfb      	ldrb	r3, [r7, #23]
 8000860:	4619      	mov	r1, r3
 8000862:	480f      	ldr	r0, [pc, #60]	@ (80008a0 <mt6835_spi_send_recv+0x6c>)
 8000864:	f006 ffe6 	bl	8007834 <iprintf>
		return;
 8000868:	e014      	b.n	8000894 <mt6835_spi_send_recv+0x60>
	}
	// wait IT
	uint32_t tickstart = HAL_GetTick();
 800086a:	f000 feef 	bl	800164c <HAL_GetTick>
 800086e:	6138      	str	r0, [r7, #16]
	while (HAL_SPI_GetState(&SPI_INSTANCE) != HAL_SPI_STATE_READY) {
 8000870:	e00a      	b.n	8000888 <mt6835_spi_send_recv+0x54>
		if (HAL_GetTick() - tickstart > 1) {
 8000872:	f000 feeb 	bl	800164c <HAL_GetTick>
 8000876:	4602      	mov	r2, r0
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	2b01      	cmp	r3, #1
 800087e:	d903      	bls.n	8000888 <mt6835_spi_send_recv+0x54>
			printf("spi send_recv timeout\n\r");
 8000880:	4808      	ldr	r0, [pc, #32]	@ (80008a4 <mt6835_spi_send_recv+0x70>)
 8000882:	f006 ffd7 	bl	8007834 <iprintf>
			return;
 8000886:	e005      	b.n	8000894 <mt6835_spi_send_recv+0x60>
	while (HAL_SPI_GetState(&SPI_INSTANCE) != HAL_SPI_STATE_READY) {
 8000888:	4804      	ldr	r0, [pc, #16]	@ (800089c <mt6835_spi_send_recv+0x68>)
 800088a:	f004 fdbf 	bl	800540c <HAL_SPI_GetState>
 800088e:	4603      	mov	r3, r0
 8000890:	2b01      	cmp	r3, #1
 8000892:	d1ee      	bne.n	8000872 <mt6835_spi_send_recv+0x3e>
		}
	}
}
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	24000310 	.word	0x24000310
 80008a0:	08009530 	.word	0x08009530
 80008a4:	0800954c 	.word	0x0800954c

080008a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008ae:	f000 fe47 	bl	8001540 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008b2:	f000 f8d5 	bl	8000a60 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008b6:	f7ff fefb 	bl	80006b0 <MX_GPIO_Init>
	MX_SPI3_Init();
 80008ba:	f000 fb0f 	bl	8000edc <MX_SPI3_Init>
	MX_USART3_UART_Init();
 80008be:	f000 fd5f 	bl	8001380 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	mt6835_t *mt6835_1;
	mt6835_t *mt6835_2;

	mt6835_1 = mt6835_create();
 80008c2:	f000 f98f 	bl	8000be4 <mt6835_create>
 80008c6:	6078      	str	r0, [r7, #4]
	mt6835_2 = mt6835_create();
 80008c8:	f000 f98c 	bl	8000be4 <mt6835_create>
 80008cc:	6038      	str	r0, [r7, #0]

	mt6835_link_spi_cs_control(mt6835_1, mt6835_cs_control);
 80008ce:	4956      	ldr	r1, [pc, #344]	@ (8000a28 <main+0x180>)
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f000 f9ab 	bl	8000c2c <mt6835_link_spi_cs_control>
	mt6835_link_spi_cs_control(mt6835_2, mt6835_cs2_control);
 80008d6:	4955      	ldr	r1, [pc, #340]	@ (8000a2c <main+0x184>)
 80008d8:	6838      	ldr	r0, [r7, #0]
 80008da:	f000 f9a7 	bl	8000c2c <mt6835_link_spi_cs_control>

	mt6835_link_spi_send_recv(mt6835_1, mt6835_spi_send_recv);
 80008de:	4954      	ldr	r1, [pc, #336]	@ (8000a30 <main+0x188>)
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f000 f9cd 	bl	8000c80 <mt6835_link_spi_send_recv>
	mt6835_link_spi_send_recv(mt6835_2, mt6835_spi_send_recv);
 80008e6:	4952      	ldr	r1, [pc, #328]	@ (8000a30 <main+0x188>)
 80008e8:	6838      	ldr	r0, [r7, #0]
 80008ea:	f000 f9c9 	bl	8000c80 <mt6835_link_spi_send_recv>

	mt6835_enable_crc_check(mt6835_1);
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f000 f952 	bl	8000b98 <mt6835_enable_crc_check>
	mt6835_enable_crc_check(mt6835_2);
 80008f4:	6838      	ldr	r0, [r7, #0]
 80008f6:	f000 f94f 	bl	8000b98 <mt6835_enable_crc_check>
		//raw_angle, radian_angle, degree_angle);
		//HAL_Delay(500);

		/* for Burst mode*/
		// Select CS1 for MT6835 1 and read angle
		raw_angle_1 = mt6835_get_raw_angle(mt6835_1,MT6835_READ_ANGLE_METHOD_NORMAL);
 80008fa:	2100      	movs	r1, #0
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f000 f9e9 	bl	8000cd4 <mt6835_get_raw_angle>
 8000902:	4603      	mov	r3, r0
 8000904:	4a4b      	ldr	r2, [pc, #300]	@ (8000a34 <main+0x18c>)
 8000906:	6013      	str	r3, [r2, #0]
			//	MT6835_READ_ANGLE_METHOD_BURST);
		radian_angle_1 = raw_angle_1 * (M_PI * 2.0f) / MT6835_ANGLE_RESOLUTION;
 8000908:	4b4a      	ldr	r3, [pc, #296]	@ (8000a34 <main+0x18c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	ee07 3a90 	vmov	s15, r3
 8000910:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000914:	ed9f 6b40 	vldr	d6, [pc, #256]	@ 8000a18 <main+0x170>
 8000918:	ee27 6b06 	vmul.f64	d6, d7, d6
 800091c:	ed9f 5b40 	vldr	d5, [pc, #256]	@ 8000a20 <main+0x178>
 8000920:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000924:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000928:	4b43      	ldr	r3, [pc, #268]	@ (8000a38 <main+0x190>)
 800092a:	edc3 7a00 	vstr	s15, [r3]
		degree_angle_1 = raw_angle_1 * (360.0f / MT6835_ANGLE_RESOLUTION);
 800092e:	4b41      	ldr	r3, [pc, #260]	@ (8000a34 <main+0x18c>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	ee07 3a90 	vmov	s15, r3
 8000936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800093a:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8000a3c <main+0x194>
 800093e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000942:	4b3f      	ldr	r3, [pc, #252]	@ (8000a40 <main+0x198>)
 8000944:	edc3 7a00 	vstr	s15, [r3]

		// Select CS2 for MT6835 2 and read angle
		raw_angle_2 = mt6835_get_raw_angle(mt6835_2,MT6835_READ_ANGLE_METHOD_NORMAL);
 8000948:	2100      	movs	r1, #0
 800094a:	6838      	ldr	r0, [r7, #0]
 800094c:	f000 f9c2 	bl	8000cd4 <mt6835_get_raw_angle>
 8000950:	4603      	mov	r3, r0
 8000952:	4a3c      	ldr	r2, [pc, #240]	@ (8000a44 <main+0x19c>)
 8000954:	6013      	str	r3, [r2, #0]
		//MT6835_READ_ANGLE_METHOD_BURST);
		radian_angle_2 = raw_angle_2 * (M_PI * 2.0f) / MT6835_ANGLE_RESOLUTION;
 8000956:	4b3b      	ldr	r3, [pc, #236]	@ (8000a44 <main+0x19c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	ee07 3a90 	vmov	s15, r3
 800095e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000962:	ed9f 6b2d 	vldr	d6, [pc, #180]	@ 8000a18 <main+0x170>
 8000966:	ee27 6b06 	vmul.f64	d6, d7, d6
 800096a:	ed9f 5b2d 	vldr	d5, [pc, #180]	@ 8000a20 <main+0x178>
 800096e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000972:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000976:	4b34      	ldr	r3, [pc, #208]	@ (8000a48 <main+0x1a0>)
 8000978:	edc3 7a00 	vstr	s15, [r3]
		degree_angle_2 = raw_angle_2 * (360.0f / MT6835_ANGLE_RESOLUTION);
 800097c:	4b31      	ldr	r3, [pc, #196]	@ (8000a44 <main+0x19c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	ee07 3a90 	vmov	s15, r3
 8000984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000988:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000a3c <main+0x194>
 800098c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000990:	4b2e      	ldr	r3, [pc, #184]	@ (8000a4c <main+0x1a4>)
 8000992:	edc3 7a00 	vstr	s15, [r3]

		// Check CRC for both sensors
		if (!mt6835_1->crc_res) {
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	7c5b      	ldrb	r3, [r3, #17]
 800099a:	f083 0301 	eor.w	r3, r3, #1
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d002      	beq.n	80009aa <main+0x102>
			printf("CRC error on MT6835 1\n\r");
 80009a4:	482a      	ldr	r0, [pc, #168]	@ (8000a50 <main+0x1a8>)
 80009a6:	f006 ff45 	bl	8007834 <iprintf>
		}
		if (!mt6835_2->crc_res) {
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	7c5b      	ldrb	r3, [r3, #17]
 80009ae:	f083 0301 	eor.w	r3, r3, #1
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d002      	beq.n	80009be <main+0x116>
			printf("CRC error on MT6835 2\n\r");
 80009b8:	4826      	ldr	r0, [pc, #152]	@ (8000a54 <main+0x1ac>)
 80009ba:	f006 ff3b 	bl	8007834 <iprintf>
		}

		printf("Raw Angle 1: %lu, Radian 1: %f, degree_angle1: %.2f deg\n\r",
 80009be:	4b1d      	ldr	r3, [pc, #116]	@ (8000a34 <main+0x18c>)
 80009c0:	6819      	ldr	r1, [r3, #0]
 80009c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a38 <main+0x190>)
 80009c4:	edd3 7a00 	vldr	s15, [r3]
 80009c8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80009cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <main+0x198>)
 80009ce:	edd3 7a00 	vldr	s15, [r3]
 80009d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009d6:	ed8d 7b00 	vstr	d7, [sp]
 80009da:	ec53 2b16 	vmov	r2, r3, d6
 80009de:	481e      	ldr	r0, [pc, #120]	@ (8000a58 <main+0x1b0>)
 80009e0:	f006 ff28 	bl	8007834 <iprintf>
				raw_angle_1, radian_angle_1, degree_angle_1);

		printf("Raw Angle 2: %lu, Radian 2: %f, degree_angle2: %.2f deg\n\r",
 80009e4:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <main+0x19c>)
 80009e6:	6819      	ldr	r1, [r3, #0]
 80009e8:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <main+0x1a0>)
 80009ea:	edd3 7a00 	vldr	s15, [r3]
 80009ee:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80009f2:	4b16      	ldr	r3, [pc, #88]	@ (8000a4c <main+0x1a4>)
 80009f4:	edd3 7a00 	vldr	s15, [r3]
 80009f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009fc:	ed8d 7b00 	vstr	d7, [sp]
 8000a00:	ec53 2b16 	vmov	r2, r3, d6
 8000a04:	4815      	ldr	r0, [pc, #84]	@ (8000a5c <main+0x1b4>)
 8000a06:	f006 ff15 	bl	8007834 <iprintf>
				raw_angle_2, radian_angle_2, degree_angle_2);


		HAL_Delay(500);
 8000a0a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a0e:	f000 fe29 	bl	8001664 <HAL_Delay>
		raw_angle_1 = mt6835_get_raw_angle(mt6835_1,MT6835_READ_ANGLE_METHOD_NORMAL);
 8000a12:	e772      	b.n	80008fa <main+0x52>
 8000a14:	f3af 8000 	nop.w
 8000a18:	54442d18 	.word	0x54442d18
 8000a1c:	401921fb 	.word	0x401921fb
 8000a20:	00000000 	.word	0x00000000
 8000a24:	41400000 	.word	0x41400000
 8000a28:	080007cd 	.word	0x080007cd
 8000a2c:	08000801 	.word	0x08000801
 8000a30:	08000835 	.word	0x08000835
 8000a34:	240002f8 	.word	0x240002f8
 8000a38:	24000300 	.word	0x24000300
 8000a3c:	39340000 	.word	0x39340000
 8000a40:	24000308 	.word	0x24000308
 8000a44:	240002fc 	.word	0x240002fc
 8000a48:	24000304 	.word	0x24000304
 8000a4c:	2400030c 	.word	0x2400030c
 8000a50:	08009564 	.word	0x08009564
 8000a54:	0800957c 	.word	0x0800957c
 8000a58:	08009594 	.word	0x08009594
 8000a5c:	080095d0 	.word	0x080095d0

08000a60 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b09c      	sub	sp, #112	@ 0x70
 8000a64:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a6a:	224c      	movs	r2, #76	@ 0x4c
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f006 ff4f 	bl	8007912 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2220      	movs	r2, #32
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f006 ff49 	bl	8007912 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a80:	2002      	movs	r0, #2
 8000a82:	f001 fb2b 	bl	80020dc <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b2c      	ldr	r3, [pc, #176]	@ (8000b3c <SystemClock_Config+0xdc>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a92:	4a2a      	ldr	r2, [pc, #168]	@ (8000b3c <SystemClock_Config+0xdc>)
 8000a94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a98:	6193      	str	r3, [r2, #24]
 8000a9a:	4b28      	ldr	r3, [pc, #160]	@ (8000b3c <SystemClock_Config+0xdc>)
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000aa6:	bf00      	nop
 8000aa8:	4b24      	ldr	r3, [pc, #144]	@ (8000b3c <SystemClock_Config+0xdc>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ab0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ab4:	d1f8      	bne.n	8000aa8 <SystemClock_Config+0x48>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000aba:	2301      	movs	r3, #1
 8000abc:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 8000abe:	2340      	movs	r3, #64	@ 0x40
 8000ac0:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000aca:	2304      	movs	r3, #4
 8000acc:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 12;
 8000ace:	230c      	movs	r3, #12
 8000ad0:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ade:	230c      	movs	r3, #12
 8000ae0:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000aea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aee:	4618      	mov	r0, r3
 8000af0:	f001 fb2e 	bl	8002150 <HAL_RCC_OscConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0x9e>
		Error_Handler();
 8000afa:	f000 f821 	bl	8000b40 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000afe:	233f      	movs	r3, #63	@ 0x3f
 8000b00:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b02:	2303      	movs	r3, #3
 8000b04:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b0a:	2308      	movs	r3, #8
 8000b0c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b0e:	2340      	movs	r3, #64	@ 0x40
 8000b10:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b12:	2340      	movs	r3, #64	@ 0x40
 8000b14:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b1a:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b1c:	2340      	movs	r3, #64	@ 0x40
 8000b1e:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2101      	movs	r1, #1
 8000b24:	4618      	mov	r0, r3
 8000b26:	f001 feed 	bl	8002904 <HAL_RCC_ClockConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0xd4>
		Error_Handler();
 8000b30:	f000 f806 	bl	8000b40 <Error_Handler>
	}
}
 8000b34:	bf00      	nop
 8000b36:	3770      	adds	r7, #112	@ 0x70
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	58024800 	.word	0x58024800

08000b40 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <Error_Handler+0x8>

08000b4c <crc_table>:
 * @brief  CRC校验：X8+X2+X+1
 * @param  data  数据指针
 * @param  len   数据长度
 * @return CRC校验值
 */
static uint8_t crc_table(const uint8_t *data, uint8_t len) {
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0x00; // 初始CRC值
 8000b58:	2300      	movs	r3, #0
 8000b5a:	73fb      	strb	r3, [r7, #15]

    for (uint8_t i = 0; i < len; i++) {
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	73bb      	strb	r3, [r7, #14]
 8000b60:	e00d      	b.n	8000b7e <crc_table+0x32>
        crc ^= data[i]; // 与数据异或
 8000b62:	7bbb      	ldrb	r3, [r7, #14]
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	4413      	add	r3, r2
 8000b68:	781a      	ldrb	r2, [r3, #0]
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	4053      	eors	r3, r2
 8000b6e:	73fb      	strb	r3, [r7, #15]
        crc = crc8_table[crc]; // 查表更新CRC
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	4a08      	ldr	r2, [pc, #32]	@ (8000b94 <crc_table+0x48>)
 8000b74:	5cd3      	ldrb	r3, [r2, r3]
 8000b76:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len; i++) {
 8000b78:	7bbb      	ldrb	r3, [r7, #14]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	73bb      	strb	r3, [r7, #14]
 8000b7e:	7bba      	ldrb	r2, [r7, #14]
 8000b80:	78fb      	ldrb	r3, [r7, #3]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d3ed      	bcc.n	8000b62 <crc_table+0x16>
    }

    return crc;
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	24000004 	.word	0x24000004

08000b98 <mt6835_enable_crc_check>:

/**
 * @brief enable crc check
 * @param mt6835 mt6835 object
 */
void mt6835_enable_crc_check(mt6835_t *mt6835) {
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
    mt6835->crc_check = true;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	775a      	strb	r2, [r3, #29]
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <mt6835_cs_control>:

/**
 * @brief spi cs control, this function is weak, you can override it
 * @param state MT6835_CS_HIGH or MT6835_CS_LOW
 */
__attribute__((weak)) void mt6835_cs_control(mt6835_cs_state_enum_t state) {
 8000bb2:	b480      	push	{r7}
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	71fb      	strb	r3, [r7, #7]
    (void)state;
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <mt6835_spi_send_recv>:
 * @brief spi send and receive, this function is weak, you can override it
 * @param tx_buf tx buffer
 * @param rx_buf rx buffer
 * @param len length
 */
__attribute__((weak)) void mt6835_spi_send_recv(uint8_t *tx_buf, uint8_t *rx_buf, uint8_t len) {
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	71fb      	strb	r3, [r7, #7]
    (void)tx_buf;
    (void)rx_buf;
    (void)len;
}
 8000bd6:	bf00      	nop
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <mt6835_create>:

/**
 * @brief create a mt6835 object
 * @return mt6835 object
 */
mt6835_t *mt6835_create() {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
    mt6835_t *mt6835 = (mt6835_t *)MT6835_MALLOC(sizeof(mt6835_t));
 8000bea:	2020      	movs	r0, #32
 8000bec:	f006 f874 	bl	8006cd8 <malloc>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	607b      	str	r3, [r7, #4]
    if (mt6835 == NULL) {
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d107      	bne.n	8000c0a <mt6835_create+0x26>
        MT6835_DEBUG("%s malloc failed", TAG);
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <mt6835_create+0x40>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4809      	ldr	r0, [pc, #36]	@ (8000c28 <mt6835_create+0x44>)
 8000c02:	f006 fe17 	bl	8007834 <iprintf>
        return NULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	e008      	b.n	8000c1c <mt6835_create+0x38>
    }
    memset(mt6835, 0, sizeof(mt6835_t));
 8000c0a:	2220      	movs	r2, #32
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f006 fe7f 	bl	8007912 <memset>
    mt6835->crc_check = false;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2200      	movs	r2, #0
 8000c18:	775a      	strb	r2, [r3, #29]
    return mt6835;
 8000c1a:	687b      	ldr	r3, [r7, #4]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	24000000 	.word	0x24000000
 8000c28:	08009614 	.word	0x08009614

08000c2c <mt6835_link_spi_cs_control>:
/**
 * @brief link spi cs control function to mt6835 object
 * @param mt6835 mt6835 object
 * @param spi_cs_control spi cs control function
 */
void mt6835_link_spi_cs_control(mt6835_t *mt6835, void (*spi_cs_control)(mt6835_cs_state_enum_t state)) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
    if (mt6835 == NULL) {
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d106      	bne.n	8000c4a <mt6835_link_spi_cs_control+0x1e>
        MT6835_DEBUG("%s mt6835 object is null", TAG);
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <mt6835_link_spi_cs_control+0x44>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	480c      	ldr	r0, [pc, #48]	@ (8000c74 <mt6835_link_spi_cs_control+0x48>)
 8000c44:	f006 fdf6 	bl	8007834 <iprintf>
        return;
 8000c48:	e00f      	b.n	8000c6a <mt6835_link_spi_cs_control+0x3e>
    }
    if (spi_cs_control == NULL) {
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d109      	bne.n	8000c64 <mt6835_link_spi_cs_control+0x38>
        MT6835_DEBUG("%s mt6835 object use default spi_cs_control(null)", TAG);
 8000c50:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <mt6835_link_spi_cs_control+0x44>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	4808      	ldr	r0, [pc, #32]	@ (8000c78 <mt6835_link_spi_cs_control+0x4c>)
 8000c58:	f006 fdec 	bl	8007834 <iprintf>
        mt6835->func.spi_cs_control = mt6835_cs_control;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a07      	ldr	r2, [pc, #28]	@ (8000c7c <mt6835_link_spi_cs_control+0x50>)
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	e002      	b.n	8000c6a <mt6835_link_spi_cs_control+0x3e>
    } else {
        mt6835->func.spi_cs_control = spi_cs_control;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	683a      	ldr	r2, [r7, #0]
 8000c68:	601a      	str	r2, [r3, #0]
    }
}
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	24000000 	.word	0x24000000
 8000c74:	08009628 	.word	0x08009628
 8000c78:	08009644 	.word	0x08009644
 8000c7c:	08000bb3 	.word	0x08000bb3

08000c80 <mt6835_link_spi_send_recv>:
/**
 * @brief link spi send and receive function to mt6835 object
 * @param mt6835 mt6835 object
 * @param spi_send_recv spi send and receive function
 */
void mt6835_link_spi_send_recv(mt6835_t *mt6835, void (*spi_send_recv)(uint8_t *tx_buf, uint8_t *rx_buf, uint8_t len)) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
    if (mt6835 == NULL) {
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d106      	bne.n	8000c9e <mt6835_link_spi_send_recv+0x1e>
        MT6835_DEBUG("%s mt6835 object is null", TAG);
 8000c90:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <mt6835_link_spi_send_recv+0x44>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	480c      	ldr	r0, [pc, #48]	@ (8000cc8 <mt6835_link_spi_send_recv+0x48>)
 8000c98:	f006 fdcc 	bl	8007834 <iprintf>
        return;
 8000c9c:	e00e      	b.n	8000cbc <mt6835_link_spi_send_recv+0x3c>
    }
    if (spi_send_recv == NULL) {
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d108      	bne.n	8000cb6 <mt6835_link_spi_send_recv+0x36>
        MT6835_DEBUG("%s mt6835 object use default spi_send_recv(null)", TAG);
 8000ca4:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <mt6835_link_spi_send_recv+0x44>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4808      	ldr	r0, [pc, #32]	@ (8000ccc <mt6835_link_spi_send_recv+0x4c>)
 8000cac:	f006 fdc2 	bl	8007834 <iprintf>
        mt6835->func.spi_send_recv = mt6835_spi_send_recv;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a07      	ldr	r2, [pc, #28]	@ (8000cd0 <mt6835_link_spi_send_recv+0x50>)
 8000cb4:	60da      	str	r2, [r3, #12]
    }
    mt6835->func.spi_send_recv = spi_send_recv;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	683a      	ldr	r2, [r7, #0]
 8000cba:	60da      	str	r2, [r3, #12]
}
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	24000000 	.word	0x24000000
 8000cc8:	08009628 	.word	0x08009628
 8000ccc:	080096d0 	.word	0x080096d0
 8000cd0:	08000bc9 	.word	0x08000bc9

08000cd4 <mt6835_get_raw_angle>:
 * @brief get mt6835 raw angle
 * @param mt6835 mt6835 object
 * @param method read angle method, MT6835_READ_ANGLE_METHOD_NORMAL or MT6835_READ_ANGLE_METHOD_BURST
 * @return raw angle data in raw
 */
uint32_t mt6835_get_raw_angle(mt6835_t *mt6835, mt6835_read_angle_method_enum_t method) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	70fb      	strb	r3, [r7, #3]
    uint8_t rx_buf[6] = {0};
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	82bb      	strh	r3, [r7, #20]
    uint8_t tx_buf[6] = {0};
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	2300      	movs	r3, #0
 8000cee:	81bb      	strh	r3, [r7, #12]

    switch (method) {
 8000cf0:	78fb      	ldrb	r3, [r7, #3]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <mt6835_get_raw_angle+0x28>
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d01d      	beq.n	8000d36 <mt6835_get_raw_angle+0x62>
 8000cfa:	e070      	b.n	8000dde <mt6835_get_raw_angle+0x10a>
        case MT6835_READ_ANGLE_METHOD_NORMAL: {
            rx_buf[0] = mt6835_read_reg(mt6835, MT6835_REG_ANGLE3);
 8000cfc:	2103      	movs	r1, #3
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f000 f8a4 	bl	8000e4c <mt6835_read_reg>
 8000d04:	4603      	mov	r3, r0
 8000d06:	743b      	strb	r3, [r7, #16]
            rx_buf[1] = mt6835_read_reg(mt6835, MT6835_REG_ANGLE2);
 8000d08:	2104      	movs	r1, #4
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f000 f89e 	bl	8000e4c <mt6835_read_reg>
 8000d10:	4603      	mov	r3, r0
 8000d12:	747b      	strb	r3, [r7, #17]
            rx_buf[2] = mt6835_read_reg(mt6835, MT6835_REG_ANGLE1);
 8000d14:	2105      	movs	r1, #5
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 f898 	bl	8000e4c <mt6835_read_reg>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	74bb      	strb	r3, [r7, #18]
            if (mt6835->crc_check) {
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	7f5b      	ldrb	r3, [r3, #29]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d057      	beq.n	8000dd8 <mt6835_get_raw_angle+0x104>
                rx_buf[3] = mt6835_read_reg(mt6835, MT6835_REG_CRC);
 8000d28:	2106      	movs	r1, #6
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f000 f88e 	bl	8000e4c <mt6835_read_reg>
 8000d30:	4603      	mov	r3, r0
 8000d32:	74fb      	strb	r3, [r7, #19]
            }
            break;
 8000d34:	e050      	b.n	8000dd8 <mt6835_get_raw_angle+0x104>
        }
        case MT6835_READ_ANGLE_METHOD_BURST: {
            const uint8_t rd = mt6835->crc_check ? 6 : 5;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	7f5b      	ldrb	r3, [r3, #29]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <mt6835_get_raw_angle+0x6e>
 8000d3e:	2306      	movs	r3, #6
 8000d40:	e000      	b.n	8000d44 <mt6835_get_raw_angle+0x70>
 8000d42:	2305      	movs	r3, #5
 8000d44:	75fb      	strb	r3, [r7, #23]

            mt6835->func.spi_cs_control(MT6835_CS_HIGH);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	4798      	blx	r3
            mt6835->data_frame.cmd = MT6835_CMD_BURST;
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	7e13      	ldrb	r3, [r2, #24]
 8000d52:	210a      	movs	r1, #10
 8000d54:	f361 1307 	bfi	r3, r1, #4, #4
 8000d58:	7613      	strb	r3, [r2, #24]
            mt6835->data_frame.reg = MT6835_REG_ANGLE3;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	765a      	strb	r2, [r3, #25]
            tx_buf[0] = mt6835->data_frame.pack & 0xFF;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	723b      	strb	r3, [r7, #8]
            tx_buf[1] = (mt6835->data_frame.pack >> 8) & 0xFF;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	727b      	strb	r3, [r7, #9]

            mt6835->func.spi_cs_control(MT6835_CS_LOW);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2000      	movs	r0, #0
 8000d78:	4798      	blx	r3
            if (mt6835->func.spi_send_recv) {
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d008      	beq.n	8000d94 <mt6835_get_raw_angle+0xc0>
                mt6835->func.spi_send_recv(tx_buf, rx_buf, rd);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	7dfa      	ldrb	r2, [r7, #23]
 8000d88:	f107 0110 	add.w	r1, r7, #16
 8000d8c:	f107 0008 	add.w	r0, r7, #8
 8000d90:	4798      	blx	r3
 8000d92:	e00d      	b.n	8000db0 <mt6835_get_raw_angle+0xdc>
            } else {
                mt6835->func.spi_send(tx_buf, rd);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	7df9      	ldrb	r1, [r7, #23]
 8000d9a:	f107 0208 	add.w	r2, r7, #8
 8000d9e:	4610      	mov	r0, r2
 8000da0:	4798      	blx	r3
                mt6835->func.spi_recv(rx_buf, rd);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	7df9      	ldrb	r1, [r7, #23]
 8000da8:	f107 0210 	add.w	r2, r7, #16
 8000dac:	4610      	mov	r0, r2
 8000dae:	4798      	blx	r3
            }
            mt6835->func.spi_cs_control(MT6835_CS_HIGH);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2001      	movs	r0, #1
 8000db6:	4798      	blx	r3

            memmove(rx_buf, &rx_buf[2], 3);
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	1c99      	adds	r1, r3, #2
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f006 fd8a 	bl	80078de <memmove>
            if (mt6835->crc_check) {
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	7f5b      	ldrb	r3, [r3, #29]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d004      	beq.n	8000ddc <mt6835_get_raw_angle+0x108>
                rx_buf[3] = rx_buf[5];
 8000dd2:	7d7b      	ldrb	r3, [r7, #21]
 8000dd4:	74fb      	strb	r3, [r7, #19]
            }
            break;
 8000dd6:	e001      	b.n	8000ddc <mt6835_get_raw_angle+0x108>
            break;
 8000dd8:	bf00      	nop
 8000dda:	e000      	b.n	8000dde <mt6835_get_raw_angle+0x10a>
            break;
 8000ddc:	bf00      	nop
        }
    }

    if (mt6835->crc_check) {
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7f5b      	ldrb	r3, [r3, #29]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d01b      	beq.n	8000e1e <mt6835_get_raw_angle+0x14a>
        mt6835->crc = rx_buf[3];
 8000de6:	7cfa      	ldrb	r2, [r7, #19]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	741a      	strb	r2, [r3, #16]
#if MT6835_USE_CRC == 1
        if (crc_table(rx_buf, 3) != rx_buf[3]) {
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	2103      	movs	r1, #3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff feaa 	bl	8000b4c <crc_table>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	7cfb      	ldrb	r3, [r7, #19]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d00a      	beq.n	8000e18 <mt6835_get_raw_angle+0x144>
            MT6835_DEBUG("%s crc check failed\r\n", TAG);
 8000e02:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <mt6835_get_raw_angle+0x170>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4619      	mov	r1, r3
 8000e08:	480f      	ldr	r0, [pc, #60]	@ (8000e48 <mt6835_get_raw_angle+0x174>)
 8000e0a:	f006 fd13 	bl	8007834 <iprintf>
            mt6835->crc_res = false;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	745a      	strb	r2, [r3, #17]
            return 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	e011      	b.n	8000e3c <mt6835_get_raw_angle+0x168>
        }
        mt6835->crc_res = true;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	745a      	strb	r2, [r3, #17]
#endif
    }

    mt6835->state = rx_buf[2] & 0x07;
 8000e1e:	7cbb      	ldrb	r3, [r7, #18]
 8000e20:	f003 0307 	and.w	r3, r3, #7
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	771a      	strb	r2, [r3, #28]
    return (rx_buf[0] << 13) | (rx_buf[1] << 5) | (rx_buf[2] >> 3);
 8000e2a:	7c3b      	ldrb	r3, [r7, #16]
 8000e2c:	035a      	lsls	r2, r3, #13
 8000e2e:	7c7b      	ldrb	r3, [r7, #17]
 8000e30:	015b      	lsls	r3, r3, #5
 8000e32:	4313      	orrs	r3, r2
 8000e34:	7cba      	ldrb	r2, [r7, #18]
 8000e36:	08d2      	lsrs	r2, r2, #3
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	4313      	orrs	r3, r2
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	24000000 	.word	0x24000000
 8000e48:	08009704 	.word	0x08009704

08000e4c <mt6835_read_reg>:
 * @brief read mt6835 register
 * @param mt6835 mt6835 object
 * @param reg register address, @ref mt6835_reg_enum_t
 * @return data
 */
uint8_t mt6835_read_reg(mt6835_t *mt6835, mt6835_reg_enum_t reg) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	70fb      	strb	r3, [r7, #3]
    uint8_t result[3] = {0, 0, 0};
 8000e58:	4a1f      	ldr	r2, [pc, #124]	@ (8000ed8 <mt6835_read_reg+0x8c>)
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	6812      	ldr	r2, [r2, #0]
 8000e60:	4611      	mov	r1, r2
 8000e62:	8019      	strh	r1, [r3, #0]
 8000e64:	3302      	adds	r3, #2
 8000e66:	0c12      	lsrs	r2, r2, #16
 8000e68:	701a      	strb	r2, [r3, #0]

    /* data frame */
    mt6835->func.spi_cs_control(MT6835_CS_HIGH);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2001      	movs	r0, #1
 8000e70:	4798      	blx	r3
    mt6835->data_frame.cmd = MT6835_CMD_RD; // byte read command
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	7e13      	ldrb	r3, [r2, #24]
 8000e76:	2103      	movs	r1, #3
 8000e78:	f361 1307 	bfi	r3, r1, #4, #4
 8000e7c:	7613      	strb	r3, [r2, #24]
    mt6835->data_frame.reg = reg;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	78fa      	ldrb	r2, [r7, #3]
 8000e82:	765a      	strb	r2, [r3, #25]

    mt6835->func.spi_cs_control(MT6835_CS_LOW);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2000      	movs	r0, #0
 8000e8a:	4798      	blx	r3
    if (mt6835->func.spi_send_recv == NULL ? false : true) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d009      	beq.n	8000ea8 <mt6835_read_reg+0x5c>
        mt6835->func.spi_send_recv((uint8_t *)&mt6835->data_frame.pack, (uint8_t *)&result, 3);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	f102 0018 	add.w	r0, r2, #24
 8000e9e:	f107 010c 	add.w	r1, r7, #12
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	4798      	blx	r3
 8000ea6:	e00d      	b.n	8000ec4 <mt6835_read_reg+0x78>
    } else {
        mt6835->func.spi_send((uint8_t *)&mt6835->data_frame.pack, 3);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	3218      	adds	r2, #24
 8000eb0:	2103      	movs	r1, #3
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	4798      	blx	r3
        mt6835->func.spi_recv((uint8_t *)&result, 3);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f107 020c 	add.w	r2, r7, #12
 8000ebe:	2103      	movs	r1, #3
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4798      	blx	r3
    }
    mt6835->func.spi_cs_control(MT6835_CS_HIGH);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2001      	movs	r0, #1
 8000eca:	4798      	blx	r3

    return result[2];
 8000ecc:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	0800971c 	.word	0x0800971c

08000edc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000ee0:	4b28      	ldr	r3, [pc, #160]	@ (8000f84 <MX_SPI3_Init+0xa8>)
 8000ee2:	4a29      	ldr	r2, [pc, #164]	@ (8000f88 <MX_SPI3_Init+0xac>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ee6:	4b27      	ldr	r3, [pc, #156]	@ (8000f84 <MX_SPI3_Init+0xa8>)
 8000ee8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000eec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000eee:	4b25      	ldr	r3, [pc, #148]	@ (8000f84 <MX_SPI3_Init+0xa8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ef4:	4b23      	ldr	r3, [pc, #140]	@ (8000f84 <MX_SPI3_Init+0xa8>)
 8000ef6:	2207      	movs	r2, #7
 8000ef8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000efa:	4b22      	ldr	r3, [pc, #136]	@ (8000f84 <MX_SPI3_Init+0xa8>)
 8000efc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f00:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f02:	4b20      	ldr	r3, [pc, #128]	@ (8000f84 <MX_SPI3_Init+0xa8>)
 8000f04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000f08:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f84 <MX_SPI3_Init+0xa8>)
 8000f0c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f10:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000f12:	4b1c      	ldr	r3, [pc, #112]	@ (8000f84 <MX_SPI3_Init+0xa8>)
 8000f14:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f18:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f84 <MX_SPI3_Init+0xa8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f20:	4b18      	ldr	r3, [pc, #96]	@ (8000f84 <MX_SPI3_Init+0xa8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f26:	4b17      	ldr	r3, [pc, #92]	@ (8000f84 <MX_SPI3_Init+0xa8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000f2c:	4b15      	ldr	r3, [pc, #84]	@ (8000f84 <MX_SPI3_Init+0xa8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f32:	4b14      	ldr	r3, [pc, #80]	@ (8000f84 <MX_SPI3_Init+0xa8>)
 8000f34:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f38:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f3a:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <MX_SPI3_Init+0xa8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f40:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <MX_SPI3_Init+0xa8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f46:	4b0f      	ldr	r3, [pc, #60]	@ (8000f84 <MX_SPI3_Init+0xa8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f84 <MX_SPI3_Init+0xa8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f52:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <MX_SPI3_Init+0xa8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <MX_SPI3_Init+0xa8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f5e:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <MX_SPI3_Init+0xa8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f64:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <MX_SPI3_Init+0xa8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f6a:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <MX_SPI3_Init+0xa8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f70:	4804      	ldr	r0, [pc, #16]	@ (8000f84 <MX_SPI3_Init+0xa8>)
 8000f72:	f003 fe15 	bl	8004ba0 <HAL_SPI_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_SPI3_Init+0xa4>
  {
    Error_Handler();
 8000f7c:	f7ff fde0 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	24000310 	.word	0x24000310
 8000f88:	40003c00 	.word	0x40003c00

08000f8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b0b8      	sub	sp, #224	@ 0xe0
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	22b8      	movs	r2, #184	@ 0xb8
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f006 fcb0 	bl	8007912 <memset>
  if(spiHandle->Instance==SPI3)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a34      	ldr	r2, [pc, #208]	@ (8001088 <HAL_SPI_MspInit+0xfc>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d161      	bne.n	8001080 <HAL_SPI_MspInit+0xf4>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000fbc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fc0:	f04f 0300 	mov.w	r3, #0
 8000fc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f002 f823 	bl	800301c <HAL_RCCEx_PeriphCLKConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000fdc:	f7ff fdb0 	bl	8000b40 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fe0:	4b2a      	ldr	r3, [pc, #168]	@ (800108c <HAL_SPI_MspInit+0x100>)
 8000fe2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fe6:	4a29      	ldr	r2, [pc, #164]	@ (800108c <HAL_SPI_MspInit+0x100>)
 8000fe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ff0:	4b26      	ldr	r3, [pc, #152]	@ (800108c <HAL_SPI_MspInit+0x100>)
 8000ff2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ff6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	4b23      	ldr	r3, [pc, #140]	@ (800108c <HAL_SPI_MspInit+0x100>)
 8001000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001004:	4a21      	ldr	r2, [pc, #132]	@ (800108c <HAL_SPI_MspInit+0x100>)
 8001006:	f043 0302 	orr.w	r3, r3, #2
 800100a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800100e:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <HAL_SPI_MspInit+0x100>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB3(JTDO/TRACESWO)     ------> SPI3_SCK
    PB4(NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800101c:	2318      	movs	r3, #24
 800101e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001034:	2306      	movs	r3, #6
 8001036:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800103e:	4619      	mov	r1, r3
 8001040:	4813      	ldr	r0, [pc, #76]	@ (8001090 <HAL_SPI_MspInit+0x104>)
 8001042:	f000 fe89 	bl	8001d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001046:	2320      	movs	r3, #32
 8001048:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800105e:	2307      	movs	r3, #7
 8001060:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001064:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001068:	4619      	mov	r1, r3
 800106a:	4809      	ldr	r0, [pc, #36]	@ (8001090 <HAL_SPI_MspInit+0x104>)
 800106c:	f000 fe74 	bl	8001d58 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	2100      	movs	r1, #0
 8001074:	2033      	movs	r0, #51	@ 0x33
 8001076:	f000 fbf4 	bl	8001862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800107a:	2033      	movs	r0, #51	@ 0x33
 800107c:	f000 fc0b 	bl	8001896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001080:	bf00      	nop
 8001082:	37e0      	adds	r7, #224	@ 0xe0
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40003c00 	.word	0x40003c00
 800108c:	58024400 	.word	0x58024400
 8001090:	58020400 	.word	0x58020400

08001094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <HAL_MspInit+0x30>)
 800109c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010a0:	4a08      	ldr	r2, [pc, #32]	@ (80010c4 <HAL_MspInit+0x30>)
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_MspInit+0x30>)
 80010ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	58024400 	.word	0x58024400

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <NMI_Handler+0x4>

080010d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <HardFault_Handler+0x4>

080010d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <MemManage_Handler+0x4>

080010e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <BusFault_Handler+0x4>

080010e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <UsageFault_Handler+0x4>

080010f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111e:	f000 fa81 	bl	8001624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800112c:	4802      	ldr	r0, [pc, #8]	@ (8001138 <SPI3_IRQHandler+0x10>)
 800112e:	f003 ff6d 	bl	800500c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	24000310 	.word	0x24000310

0800113c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return 1;
 8001140:	2301      	movs	r3, #1
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <_kill>:

int _kill(int pid, int sig)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001156:	f006 fc3f 	bl	80079d8 <__errno>
 800115a:	4603      	mov	r3, r0
 800115c:	2216      	movs	r2, #22
 800115e:	601a      	str	r2, [r3, #0]
  return -1;
 8001160:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <_exit>:

void _exit (int status)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001174:	f04f 31ff 	mov.w	r1, #4294967295
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ffe7 	bl	800114c <_kill>
  while (1) {}    /* Make sure we hang here */
 800117e:	bf00      	nop
 8001180:	e7fd      	b.n	800117e <_exit+0x12>

08001182 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af00      	add	r7, sp, #0
 8001188:	60f8      	str	r0, [r7, #12]
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
 8001192:	e00a      	b.n	80011aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001194:	f3af 8000 	nop.w
 8001198:	4601      	mov	r1, r0
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	1c5a      	adds	r2, r3, #1
 800119e:	60ba      	str	r2, [r7, #8]
 80011a0:	b2ca      	uxtb	r2, r1
 80011a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	3301      	adds	r3, #1
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	dbf0      	blt.n	8001194 <_read+0x12>
  }

  return len;
 80011b2:	687b      	ldr	r3, [r7, #4]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <_close>:
  }
  return len;
}

int _close(int file)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011e4:	605a      	str	r2, [r3, #4]
  return 0;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <_isatty>:

int _isatty(int file)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011fc:	2301      	movs	r3, #1
}
 80011fe:	4618      	mov	r0, r3
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800120a:	b480      	push	{r7}
 800120c:	b085      	sub	sp, #20
 800120e:	af00      	add	r7, sp, #0
 8001210:	60f8      	str	r0, [r7, #12]
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800122c:	4a14      	ldr	r2, [pc, #80]	@ (8001280 <_sbrk+0x5c>)
 800122e:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <_sbrk+0x60>)
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001238:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <_sbrk+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d102      	bne.n	8001246 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001240:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <_sbrk+0x64>)
 8001242:	4a12      	ldr	r2, [pc, #72]	@ (800128c <_sbrk+0x68>)
 8001244:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001246:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <_sbrk+0x64>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	429a      	cmp	r2, r3
 8001252:	d207      	bcs.n	8001264 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001254:	f006 fbc0 	bl	80079d8 <__errno>
 8001258:	4603      	mov	r3, r0
 800125a:	220c      	movs	r2, #12
 800125c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
 8001262:	e009      	b.n	8001278 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001264:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <_sbrk+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800126a:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <_sbrk+0x64>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	4a05      	ldr	r2, [pc, #20]	@ (8001288 <_sbrk+0x64>)
 8001274:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001276:	68fb      	ldr	r3, [r7, #12]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	24050000 	.word	0x24050000
 8001284:	00000400 	.word	0x00000400
 8001288:	24000398 	.word	0x24000398
 800128c:	24000580 	.word	0x24000580

08001290 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001294:	4b32      	ldr	r3, [pc, #200]	@ (8001360 <SystemInit+0xd0>)
 8001296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800129a:	4a31      	ldr	r2, [pc, #196]	@ (8001360 <SystemInit+0xd0>)
 800129c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001364 <SystemInit+0xd4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 030f 	and.w	r3, r3, #15
 80012ac:	2b06      	cmp	r3, #6
 80012ae:	d807      	bhi.n	80012c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001364 <SystemInit+0xd4>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f023 030f 	bic.w	r3, r3, #15
 80012b8:	4a2a      	ldr	r2, [pc, #168]	@ (8001364 <SystemInit+0xd4>)
 80012ba:	f043 0307 	orr.w	r3, r3, #7
 80012be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012c0:	4b29      	ldr	r3, [pc, #164]	@ (8001368 <SystemInit+0xd8>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a28      	ldr	r2, [pc, #160]	@ (8001368 <SystemInit+0xd8>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012cc:	4b26      	ldr	r3, [pc, #152]	@ (8001368 <SystemInit+0xd8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012d2:	4b25      	ldr	r3, [pc, #148]	@ (8001368 <SystemInit+0xd8>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	4924      	ldr	r1, [pc, #144]	@ (8001368 <SystemInit+0xd8>)
 80012d8:	4b24      	ldr	r3, [pc, #144]	@ (800136c <SystemInit+0xdc>)
 80012da:	4013      	ands	r3, r2
 80012dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012de:	4b21      	ldr	r3, [pc, #132]	@ (8001364 <SystemInit+0xd4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d007      	beq.n	80012fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001364 <SystemInit+0xd4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 030f 	bic.w	r3, r3, #15
 80012f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001364 <SystemInit+0xd4>)
 80012f4:	f043 0307 	orr.w	r3, r3, #7
 80012f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80012fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001368 <SystemInit+0xd8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001300:	4b19      	ldr	r3, [pc, #100]	@ (8001368 <SystemInit+0xd8>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001306:	4b18      	ldr	r3, [pc, #96]	@ (8001368 <SystemInit+0xd8>)
 8001308:	2200      	movs	r2, #0
 800130a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800130c:	4b16      	ldr	r3, [pc, #88]	@ (8001368 <SystemInit+0xd8>)
 800130e:	4a18      	ldr	r2, [pc, #96]	@ (8001370 <SystemInit+0xe0>)
 8001310:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001312:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <SystemInit+0xd8>)
 8001314:	4a17      	ldr	r2, [pc, #92]	@ (8001374 <SystemInit+0xe4>)
 8001316:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001318:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <SystemInit+0xd8>)
 800131a:	4a17      	ldr	r2, [pc, #92]	@ (8001378 <SystemInit+0xe8>)
 800131c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800131e:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <SystemInit+0xd8>)
 8001320:	2200      	movs	r2, #0
 8001322:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001324:	4b10      	ldr	r3, [pc, #64]	@ (8001368 <SystemInit+0xd8>)
 8001326:	4a14      	ldr	r2, [pc, #80]	@ (8001378 <SystemInit+0xe8>)
 8001328:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800132a:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <SystemInit+0xd8>)
 800132c:	2200      	movs	r2, #0
 800132e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001330:	4b0d      	ldr	r3, [pc, #52]	@ (8001368 <SystemInit+0xd8>)
 8001332:	4a11      	ldr	r2, [pc, #68]	@ (8001378 <SystemInit+0xe8>)
 8001334:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001336:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <SystemInit+0xd8>)
 8001338:	2200      	movs	r2, #0
 800133a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800133c:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <SystemInit+0xd8>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a09      	ldr	r2, [pc, #36]	@ (8001368 <SystemInit+0xd8>)
 8001342:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001346:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001348:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <SystemInit+0xd8>)
 800134a:	2200      	movs	r2, #0
 800134c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800134e:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <SystemInit+0xec>)
 8001350:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001354:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00
 8001364:	52002000 	.word	0x52002000
 8001368:	58024400 	.word	0x58024400
 800136c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001370:	02020200 	.word	0x02020200
 8001374:	01ff0000 	.word	0x01ff0000
 8001378:	01010280 	.word	0x01010280
 800137c:	52004000 	.word	0x52004000

08001380 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001384:	4b22      	ldr	r3, [pc, #136]	@ (8001410 <MX_USART3_UART_Init+0x90>)
 8001386:	4a23      	ldr	r2, [pc, #140]	@ (8001414 <MX_USART3_UART_Init+0x94>)
 8001388:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800138a:	4b21      	ldr	r3, [pc, #132]	@ (8001410 <MX_USART3_UART_Init+0x90>)
 800138c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001390:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001392:	4b1f      	ldr	r3, [pc, #124]	@ (8001410 <MX_USART3_UART_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001398:	4b1d      	ldr	r3, [pc, #116]	@ (8001410 <MX_USART3_UART_Init+0x90>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800139e:	4b1c      	ldr	r3, [pc, #112]	@ (8001410 <MX_USART3_UART_Init+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001410 <MX_USART3_UART_Init+0x90>)
 80013a6:	220c      	movs	r2, #12
 80013a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013aa:	4b19      	ldr	r3, [pc, #100]	@ (8001410 <MX_USART3_UART_Init+0x90>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b0:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <MX_USART3_UART_Init+0x90>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b6:	4b16      	ldr	r3, [pc, #88]	@ (8001410 <MX_USART3_UART_Init+0x90>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013bc:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <MX_USART3_UART_Init+0x90>)
 80013be:	2200      	movs	r2, #0
 80013c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c2:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <MX_USART3_UART_Init+0x90>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013c8:	4811      	ldr	r0, [pc, #68]	@ (8001410 <MX_USART3_UART_Init+0x90>)
 80013ca:	f004 fa16 	bl	80057fa <HAL_UART_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013d4:	f7ff fbb4 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d8:	2100      	movs	r1, #0
 80013da:	480d      	ldr	r0, [pc, #52]	@ (8001410 <MX_USART3_UART_Init+0x90>)
 80013dc:	f005 fbb1 	bl	8006b42 <HAL_UARTEx_SetTxFifoThreshold>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013e6:	f7ff fbab 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ea:	2100      	movs	r1, #0
 80013ec:	4808      	ldr	r0, [pc, #32]	@ (8001410 <MX_USART3_UART_Init+0x90>)
 80013ee:	f005 fbe6 	bl	8006bbe <HAL_UARTEx_SetRxFifoThreshold>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013f8:	f7ff fba2 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	@ (8001410 <MX_USART3_UART_Init+0x90>)
 80013fe:	f005 fb67 	bl	8006ad0 <HAL_UARTEx_DisableFifoMode>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001408:	f7ff fb9a 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	2400039c 	.word	0x2400039c
 8001414:	40004800 	.word	0x40004800

08001418 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b0b8      	sub	sp, #224	@ 0xe0
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	22b8      	movs	r2, #184	@ 0xb8
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f006 fa6a 	bl	8007912 <memset>
  if(uartHandle->Instance==USART3)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a27      	ldr	r2, [pc, #156]	@ (80014e0 <HAL_UART_MspInit+0xc8>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d146      	bne.n	80014d6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001448:	f04f 0202 	mov.w	r2, #2
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800145a:	f107 0310 	add.w	r3, r7, #16
 800145e:	4618      	mov	r0, r3
 8001460:	f001 fddc 	bl	800301c <HAL_RCCEx_PeriphCLKConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800146a:	f7ff fb69 	bl	8000b40 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800146e:	4b1d      	ldr	r3, [pc, #116]	@ (80014e4 <HAL_UART_MspInit+0xcc>)
 8001470:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001474:	4a1b      	ldr	r2, [pc, #108]	@ (80014e4 <HAL_UART_MspInit+0xcc>)
 8001476:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800147a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800147e:	4b19      	ldr	r3, [pc, #100]	@ (80014e4 <HAL_UART_MspInit+0xcc>)
 8001480:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001484:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800148c:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <HAL_UART_MspInit+0xcc>)
 800148e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001492:	4a14      	ldr	r2, [pc, #80]	@ (80014e4 <HAL_UART_MspInit+0xcc>)
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <HAL_UART_MspInit+0xcc>)
 800149e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014c4:	2307      	movs	r3, #7
 80014c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ca:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80014ce:	4619      	mov	r1, r3
 80014d0:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <HAL_UART_MspInit+0xd0>)
 80014d2:	f000 fc41 	bl	8001d58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014d6:	bf00      	nop
 80014d8:	37e0      	adds	r7, #224	@ 0xe0
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40004800 	.word	0x40004800
 80014e4:	58024400 	.word	0x58024400
 80014e8:	58020c00 	.word	0x58020c00

080014ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001524 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014f0:	f7ff fece 	bl	8001290 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f4:	480c      	ldr	r0, [pc, #48]	@ (8001528 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014f6:	490d      	ldr	r1, [pc, #52]	@ (800152c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001530 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014fc:	e002      	b.n	8001504 <LoopCopyDataInit>

080014fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001502:	3304      	adds	r3, #4

08001504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001508:	d3f9      	bcc.n	80014fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150a:	4a0a      	ldr	r2, [pc, #40]	@ (8001534 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800150c:	4c0a      	ldr	r4, [pc, #40]	@ (8001538 <LoopFillZerobss+0x22>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001510:	e001      	b.n	8001516 <LoopFillZerobss>

08001512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001514:	3204      	adds	r2, #4

08001516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001518:	d3fb      	bcc.n	8001512 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800151a:	f006 fa63 	bl	80079e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151e:	f7ff f9c3 	bl	80008a8 <main>
  bx  lr
 8001522:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001524:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001528:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800152c:	240002dc 	.word	0x240002dc
  ldr r2, =_sidata
 8001530:	08009ae0 	.word	0x08009ae0
  ldr r2, =_sbss
 8001534:	240002dc 	.word	0x240002dc
  ldr r4, =_ebss
 8001538:	24000580 	.word	0x24000580

0800153c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800153c:	e7fe      	b.n	800153c <ADC3_IRQHandler>
	...

08001540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001546:	2003      	movs	r0, #3
 8001548:	f000 f980 	bl	800184c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800154c:	f001 fb90 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
 8001550:	4602      	mov	r2, r0
 8001552:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <HAL_Init+0x68>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	0a1b      	lsrs	r3, r3, #8
 8001558:	f003 030f 	and.w	r3, r3, #15
 800155c:	4913      	ldr	r1, [pc, #76]	@ (80015ac <HAL_Init+0x6c>)
 800155e:	5ccb      	ldrb	r3, [r1, r3]
 8001560:	f003 031f 	and.w	r3, r3, #31
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
 8001568:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800156a:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <HAL_Init+0x68>)
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	4a0e      	ldr	r2, [pc, #56]	@ (80015ac <HAL_Init+0x6c>)
 8001574:	5cd3      	ldrb	r3, [r2, r3]
 8001576:	f003 031f 	and.w	r3, r3, #31
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	fa22 f303 	lsr.w	r3, r2, r3
 8001580:	4a0b      	ldr	r2, [pc, #44]	@ (80015b0 <HAL_Init+0x70>)
 8001582:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001584:	4a0b      	ldr	r2, [pc, #44]	@ (80015b4 <HAL_Init+0x74>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800158a:	2000      	movs	r0, #0
 800158c:	f000 f814 	bl	80015b8 <HAL_InitTick>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e002      	b.n	80015a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800159a:	f7ff fd7b 	bl	8001094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	58024400 	.word	0x58024400
 80015ac:	08009724 	.word	0x08009724
 80015b0:	24000108 	.word	0x24000108
 80015b4:	24000104 	.word	0x24000104

080015b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015c0:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <HAL_InitTick+0x60>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e021      	b.n	8001610 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015cc:	4b13      	ldr	r3, [pc, #76]	@ (800161c <HAL_InitTick+0x64>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <HAL_InitTick+0x60>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015da:	fbb3 f3f1 	udiv	r3, r3, r1
 80015de:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 f965 	bl	80018b2 <HAL_SYSTICK_Config>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00e      	b.n	8001610 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b0f      	cmp	r3, #15
 80015f6:	d80a      	bhi.n	800160e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f8:	2200      	movs	r2, #0
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f000 f92f 	bl	8001862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001604:	4a06      	ldr	r2, [pc, #24]	@ (8001620 <HAL_InitTick+0x68>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	e000      	b.n	8001610 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	24000110 	.word	0x24000110
 800161c:	24000104 	.word	0x24000104
 8001620:	2400010c 	.word	0x2400010c

08001624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <HAL_IncTick+0x20>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <HAL_IncTick+0x24>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4413      	add	r3, r2
 8001634:	4a04      	ldr	r2, [pc, #16]	@ (8001648 <HAL_IncTick+0x24>)
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	24000110 	.word	0x24000110
 8001648:	24000430 	.word	0x24000430

0800164c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;
 8001650:	4b03      	ldr	r3, [pc, #12]	@ (8001660 <HAL_GetTick+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	24000430 	.word	0x24000430

08001664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800166c:	f7ff ffee 	bl	800164c <HAL_GetTick>
 8001670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167c:	d005      	beq.n	800168a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167e:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <HAL_Delay+0x44>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800168a:	bf00      	nop
 800168c:	f7ff ffde 	bl	800164c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	429a      	cmp	r2, r3
 800169a:	d8f7      	bhi.n	800168c <HAL_Delay+0x28>
  {
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	24000110 	.word	0x24000110

080016ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016bc:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <__NVIC_SetPriorityGrouping+0x40>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016c8:	4013      	ands	r3, r2
 80016ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016da:	4a04      	ldr	r2, [pc, #16]	@ (80016ec <__NVIC_SetPriorityGrouping+0x40>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00
 80016f0:	05fa0000 	.word	0x05fa0000

080016f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f8:	4b04      	ldr	r3, [pc, #16]	@ (800170c <__NVIC_GetPriorityGrouping+0x18>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	f003 0307 	and.w	r3, r3, #7
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800171a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171e:	2b00      	cmp	r3, #0
 8001720:	db0b      	blt.n	800173a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	f003 021f 	and.w	r2, r3, #31
 8001728:	4907      	ldr	r1, [pc, #28]	@ (8001748 <__NVIC_EnableIRQ+0x38>)
 800172a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800172e:	095b      	lsrs	r3, r3, #5
 8001730:	2001      	movs	r0, #1
 8001732:	fa00 f202 	lsl.w	r2, r0, r2
 8001736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000e100 	.word	0xe000e100

0800174c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	6039      	str	r1, [r7, #0]
 8001756:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001758:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800175c:	2b00      	cmp	r3, #0
 800175e:	db0a      	blt.n	8001776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	490c      	ldr	r1, [pc, #48]	@ (8001798 <__NVIC_SetPriority+0x4c>)
 8001766:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800176a:	0112      	lsls	r2, r2, #4
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	440b      	add	r3, r1
 8001770:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001774:	e00a      	b.n	800178c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4908      	ldr	r1, [pc, #32]	@ (800179c <__NVIC_SetPriority+0x50>)
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	3b04      	subs	r3, #4
 8001784:	0112      	lsls	r2, r2, #4
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	440b      	add	r3, r1
 800178a:	761a      	strb	r2, [r3, #24]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000e100 	.word	0xe000e100
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	@ 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f1c3 0307 	rsb	r3, r3, #7
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	bf28      	it	cs
 80017be:	2304      	movcs	r3, #4
 80017c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3304      	adds	r3, #4
 80017c6:	2b06      	cmp	r3, #6
 80017c8:	d902      	bls.n	80017d0 <NVIC_EncodePriority+0x30>
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3b03      	subs	r3, #3
 80017ce:	e000      	b.n	80017d2 <NVIC_EncodePriority+0x32>
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43da      	mvns	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	401a      	ands	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	43d9      	mvns	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	4313      	orrs	r3, r2
         );
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3724      	adds	r7, #36	@ 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001818:	d301      	bcc.n	800181e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800181a:	2301      	movs	r3, #1
 800181c:	e00f      	b.n	800183e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181e:	4a0a      	ldr	r2, [pc, #40]	@ (8001848 <SysTick_Config+0x40>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3b01      	subs	r3, #1
 8001824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001826:	210f      	movs	r1, #15
 8001828:	f04f 30ff 	mov.w	r0, #4294967295
 800182c:	f7ff ff8e 	bl	800174c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001830:	4b05      	ldr	r3, [pc, #20]	@ (8001848 <SysTick_Config+0x40>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001836:	4b04      	ldr	r3, [pc, #16]	@ (8001848 <SysTick_Config+0x40>)
 8001838:	2207      	movs	r2, #7
 800183a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	e000e010 	.word	0xe000e010

0800184c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ff29 	bl	80016ac <__NVIC_SetPriorityGrouping>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001870:	f7ff ff40 	bl	80016f4 <__NVIC_GetPriorityGrouping>
 8001874:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68b9      	ldr	r1, [r7, #8]
 800187a:	6978      	ldr	r0, [r7, #20]
 800187c:	f7ff ff90 	bl	80017a0 <NVIC_EncodePriority>
 8001880:	4602      	mov	r2, r0
 8001882:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff5f 	bl	800174c <__NVIC_SetPriority>
}
 800188e:	bf00      	nop
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff33 	bl	8001710 <__NVIC_EnableIRQ>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ffa4 	bl	8001808 <SysTick_Config>
 80018c0:	4603      	mov	r3, r0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e237      	b.n	8001d4e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d004      	beq.n	80018f4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2280      	movs	r2, #128	@ 0x80
 80018ee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e22c      	b.n	8001d4e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a5c      	ldr	r2, [pc, #368]	@ (8001a6c <HAL_DMA_Abort_IT+0x1a0>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d04a      	beq.n	8001994 <HAL_DMA_Abort_IT+0xc8>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a5b      	ldr	r2, [pc, #364]	@ (8001a70 <HAL_DMA_Abort_IT+0x1a4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d045      	beq.n	8001994 <HAL_DMA_Abort_IT+0xc8>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a59      	ldr	r2, [pc, #356]	@ (8001a74 <HAL_DMA_Abort_IT+0x1a8>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d040      	beq.n	8001994 <HAL_DMA_Abort_IT+0xc8>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a58      	ldr	r2, [pc, #352]	@ (8001a78 <HAL_DMA_Abort_IT+0x1ac>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d03b      	beq.n	8001994 <HAL_DMA_Abort_IT+0xc8>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a56      	ldr	r2, [pc, #344]	@ (8001a7c <HAL_DMA_Abort_IT+0x1b0>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d036      	beq.n	8001994 <HAL_DMA_Abort_IT+0xc8>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a55      	ldr	r2, [pc, #340]	@ (8001a80 <HAL_DMA_Abort_IT+0x1b4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d031      	beq.n	8001994 <HAL_DMA_Abort_IT+0xc8>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a53      	ldr	r2, [pc, #332]	@ (8001a84 <HAL_DMA_Abort_IT+0x1b8>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d02c      	beq.n	8001994 <HAL_DMA_Abort_IT+0xc8>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a52      	ldr	r2, [pc, #328]	@ (8001a88 <HAL_DMA_Abort_IT+0x1bc>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d027      	beq.n	8001994 <HAL_DMA_Abort_IT+0xc8>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a50      	ldr	r2, [pc, #320]	@ (8001a8c <HAL_DMA_Abort_IT+0x1c0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d022      	beq.n	8001994 <HAL_DMA_Abort_IT+0xc8>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a4f      	ldr	r2, [pc, #316]	@ (8001a90 <HAL_DMA_Abort_IT+0x1c4>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d01d      	beq.n	8001994 <HAL_DMA_Abort_IT+0xc8>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a4d      	ldr	r2, [pc, #308]	@ (8001a94 <HAL_DMA_Abort_IT+0x1c8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d018      	beq.n	8001994 <HAL_DMA_Abort_IT+0xc8>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a4c      	ldr	r2, [pc, #304]	@ (8001a98 <HAL_DMA_Abort_IT+0x1cc>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d013      	beq.n	8001994 <HAL_DMA_Abort_IT+0xc8>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a4a      	ldr	r2, [pc, #296]	@ (8001a9c <HAL_DMA_Abort_IT+0x1d0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d00e      	beq.n	8001994 <HAL_DMA_Abort_IT+0xc8>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a49      	ldr	r2, [pc, #292]	@ (8001aa0 <HAL_DMA_Abort_IT+0x1d4>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d009      	beq.n	8001994 <HAL_DMA_Abort_IT+0xc8>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a47      	ldr	r2, [pc, #284]	@ (8001aa4 <HAL_DMA_Abort_IT+0x1d8>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d004      	beq.n	8001994 <HAL_DMA_Abort_IT+0xc8>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a46      	ldr	r2, [pc, #280]	@ (8001aa8 <HAL_DMA_Abort_IT+0x1dc>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d101      	bne.n	8001998 <HAL_DMA_Abort_IT+0xcc>
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <HAL_DMA_Abort_IT+0xce>
 8001998:	2300      	movs	r3, #0
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 8086 	beq.w	8001aac <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2204      	movs	r2, #4
 80019a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a2f      	ldr	r2, [pc, #188]	@ (8001a6c <HAL_DMA_Abort_IT+0x1a0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d04a      	beq.n	8001a48 <HAL_DMA_Abort_IT+0x17c>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a2e      	ldr	r2, [pc, #184]	@ (8001a70 <HAL_DMA_Abort_IT+0x1a4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d045      	beq.n	8001a48 <HAL_DMA_Abort_IT+0x17c>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a2c      	ldr	r2, [pc, #176]	@ (8001a74 <HAL_DMA_Abort_IT+0x1a8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d040      	beq.n	8001a48 <HAL_DMA_Abort_IT+0x17c>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a2b      	ldr	r2, [pc, #172]	@ (8001a78 <HAL_DMA_Abort_IT+0x1ac>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d03b      	beq.n	8001a48 <HAL_DMA_Abort_IT+0x17c>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a29      	ldr	r2, [pc, #164]	@ (8001a7c <HAL_DMA_Abort_IT+0x1b0>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d036      	beq.n	8001a48 <HAL_DMA_Abort_IT+0x17c>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a28      	ldr	r2, [pc, #160]	@ (8001a80 <HAL_DMA_Abort_IT+0x1b4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d031      	beq.n	8001a48 <HAL_DMA_Abort_IT+0x17c>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a26      	ldr	r2, [pc, #152]	@ (8001a84 <HAL_DMA_Abort_IT+0x1b8>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d02c      	beq.n	8001a48 <HAL_DMA_Abort_IT+0x17c>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a25      	ldr	r2, [pc, #148]	@ (8001a88 <HAL_DMA_Abort_IT+0x1bc>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d027      	beq.n	8001a48 <HAL_DMA_Abort_IT+0x17c>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a23      	ldr	r2, [pc, #140]	@ (8001a8c <HAL_DMA_Abort_IT+0x1c0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d022      	beq.n	8001a48 <HAL_DMA_Abort_IT+0x17c>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a22      	ldr	r2, [pc, #136]	@ (8001a90 <HAL_DMA_Abort_IT+0x1c4>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d01d      	beq.n	8001a48 <HAL_DMA_Abort_IT+0x17c>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a20      	ldr	r2, [pc, #128]	@ (8001a94 <HAL_DMA_Abort_IT+0x1c8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d018      	beq.n	8001a48 <HAL_DMA_Abort_IT+0x17c>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a1f      	ldr	r2, [pc, #124]	@ (8001a98 <HAL_DMA_Abort_IT+0x1cc>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d013      	beq.n	8001a48 <HAL_DMA_Abort_IT+0x17c>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a1d      	ldr	r2, [pc, #116]	@ (8001a9c <HAL_DMA_Abort_IT+0x1d0>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d00e      	beq.n	8001a48 <HAL_DMA_Abort_IT+0x17c>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001aa0 <HAL_DMA_Abort_IT+0x1d4>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d009      	beq.n	8001a48 <HAL_DMA_Abort_IT+0x17c>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a1a      	ldr	r2, [pc, #104]	@ (8001aa4 <HAL_DMA_Abort_IT+0x1d8>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d004      	beq.n	8001a48 <HAL_DMA_Abort_IT+0x17c>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a19      	ldr	r2, [pc, #100]	@ (8001aa8 <HAL_DMA_Abort_IT+0x1dc>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d108      	bne.n	8001a5a <HAL_DMA_Abort_IT+0x18e>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0201 	bic.w	r2, r2, #1
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	e178      	b.n	8001d4c <HAL_DMA_Abort_IT+0x480>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0201 	bic.w	r2, r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	e16f      	b.n	8001d4c <HAL_DMA_Abort_IT+0x480>
 8001a6c:	40020010 	.word	0x40020010
 8001a70:	40020028 	.word	0x40020028
 8001a74:	40020040 	.word	0x40020040
 8001a78:	40020058 	.word	0x40020058
 8001a7c:	40020070 	.word	0x40020070
 8001a80:	40020088 	.word	0x40020088
 8001a84:	400200a0 	.word	0x400200a0
 8001a88:	400200b8 	.word	0x400200b8
 8001a8c:	40020410 	.word	0x40020410
 8001a90:	40020428 	.word	0x40020428
 8001a94:	40020440 	.word	0x40020440
 8001a98:	40020458 	.word	0x40020458
 8001a9c:	40020470 	.word	0x40020470
 8001aa0:	40020488 	.word	0x40020488
 8001aa4:	400204a0 	.word	0x400204a0
 8001aa8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 020e 	bic.w	r2, r2, #14
 8001aba:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a6c      	ldr	r2, [pc, #432]	@ (8001c74 <HAL_DMA_Abort_IT+0x3a8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d04a      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x290>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a6b      	ldr	r2, [pc, #428]	@ (8001c78 <HAL_DMA_Abort_IT+0x3ac>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d045      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x290>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a69      	ldr	r2, [pc, #420]	@ (8001c7c <HAL_DMA_Abort_IT+0x3b0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d040      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x290>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a68      	ldr	r2, [pc, #416]	@ (8001c80 <HAL_DMA_Abort_IT+0x3b4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d03b      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x290>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a66      	ldr	r2, [pc, #408]	@ (8001c84 <HAL_DMA_Abort_IT+0x3b8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d036      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x290>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a65      	ldr	r2, [pc, #404]	@ (8001c88 <HAL_DMA_Abort_IT+0x3bc>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d031      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x290>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a63      	ldr	r2, [pc, #396]	@ (8001c8c <HAL_DMA_Abort_IT+0x3c0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d02c      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x290>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a62      	ldr	r2, [pc, #392]	@ (8001c90 <HAL_DMA_Abort_IT+0x3c4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d027      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x290>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a60      	ldr	r2, [pc, #384]	@ (8001c94 <HAL_DMA_Abort_IT+0x3c8>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d022      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x290>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a5f      	ldr	r2, [pc, #380]	@ (8001c98 <HAL_DMA_Abort_IT+0x3cc>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d01d      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x290>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a5d      	ldr	r2, [pc, #372]	@ (8001c9c <HAL_DMA_Abort_IT+0x3d0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d018      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x290>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ca0 <HAL_DMA_Abort_IT+0x3d4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d013      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x290>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a5a      	ldr	r2, [pc, #360]	@ (8001ca4 <HAL_DMA_Abort_IT+0x3d8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00e      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x290>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a59      	ldr	r2, [pc, #356]	@ (8001ca8 <HAL_DMA_Abort_IT+0x3dc>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d009      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x290>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a57      	ldr	r2, [pc, #348]	@ (8001cac <HAL_DMA_Abort_IT+0x3e0>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d004      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x290>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a56      	ldr	r2, [pc, #344]	@ (8001cb0 <HAL_DMA_Abort_IT+0x3e4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d108      	bne.n	8001b6e <HAL_DMA_Abort_IT+0x2a2>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0201 	bic.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	e007      	b.n	8001b7e <HAL_DMA_Abort_IT+0x2b2>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0201 	bic.w	r2, r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a3c      	ldr	r2, [pc, #240]	@ (8001c74 <HAL_DMA_Abort_IT+0x3a8>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d072      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x3a2>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a3a      	ldr	r2, [pc, #232]	@ (8001c78 <HAL_DMA_Abort_IT+0x3ac>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d06d      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x3a2>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a39      	ldr	r2, [pc, #228]	@ (8001c7c <HAL_DMA_Abort_IT+0x3b0>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d068      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x3a2>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a37      	ldr	r2, [pc, #220]	@ (8001c80 <HAL_DMA_Abort_IT+0x3b4>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d063      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x3a2>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a36      	ldr	r2, [pc, #216]	@ (8001c84 <HAL_DMA_Abort_IT+0x3b8>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d05e      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x3a2>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a34      	ldr	r2, [pc, #208]	@ (8001c88 <HAL_DMA_Abort_IT+0x3bc>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d059      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x3a2>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a33      	ldr	r2, [pc, #204]	@ (8001c8c <HAL_DMA_Abort_IT+0x3c0>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d054      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x3a2>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a31      	ldr	r2, [pc, #196]	@ (8001c90 <HAL_DMA_Abort_IT+0x3c4>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d04f      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x3a2>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a30      	ldr	r2, [pc, #192]	@ (8001c94 <HAL_DMA_Abort_IT+0x3c8>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d04a      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x3a2>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a2e      	ldr	r2, [pc, #184]	@ (8001c98 <HAL_DMA_Abort_IT+0x3cc>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d045      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x3a2>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a2d      	ldr	r2, [pc, #180]	@ (8001c9c <HAL_DMA_Abort_IT+0x3d0>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d040      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x3a2>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a2b      	ldr	r2, [pc, #172]	@ (8001ca0 <HAL_DMA_Abort_IT+0x3d4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d03b      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x3a2>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8001ca4 <HAL_DMA_Abort_IT+0x3d8>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d036      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x3a2>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a28      	ldr	r2, [pc, #160]	@ (8001ca8 <HAL_DMA_Abort_IT+0x3dc>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d031      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x3a2>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a27      	ldr	r2, [pc, #156]	@ (8001cac <HAL_DMA_Abort_IT+0x3e0>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d02c      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x3a2>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a25      	ldr	r2, [pc, #148]	@ (8001cb0 <HAL_DMA_Abort_IT+0x3e4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d027      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x3a2>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a24      	ldr	r2, [pc, #144]	@ (8001cb4 <HAL_DMA_Abort_IT+0x3e8>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d022      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x3a2>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a22      	ldr	r2, [pc, #136]	@ (8001cb8 <HAL_DMA_Abort_IT+0x3ec>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d01d      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x3a2>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a21      	ldr	r2, [pc, #132]	@ (8001cbc <HAL_DMA_Abort_IT+0x3f0>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d018      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x3a2>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc0 <HAL_DMA_Abort_IT+0x3f4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d013      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x3a2>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a1e      	ldr	r2, [pc, #120]	@ (8001cc4 <HAL_DMA_Abort_IT+0x3f8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d00e      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x3a2>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a1c      	ldr	r2, [pc, #112]	@ (8001cc8 <HAL_DMA_Abort_IT+0x3fc>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d009      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x3a2>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a1b      	ldr	r2, [pc, #108]	@ (8001ccc <HAL_DMA_Abort_IT+0x400>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d004      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x3a2>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a19      	ldr	r2, [pc, #100]	@ (8001cd0 <HAL_DMA_Abort_IT+0x404>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d132      	bne.n	8001cd4 <HAL_DMA_Abort_IT+0x408>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e031      	b.n	8001cd6 <HAL_DMA_Abort_IT+0x40a>
 8001c72:	bf00      	nop
 8001c74:	40020010 	.word	0x40020010
 8001c78:	40020028 	.word	0x40020028
 8001c7c:	40020040 	.word	0x40020040
 8001c80:	40020058 	.word	0x40020058
 8001c84:	40020070 	.word	0x40020070
 8001c88:	40020088 	.word	0x40020088
 8001c8c:	400200a0 	.word	0x400200a0
 8001c90:	400200b8 	.word	0x400200b8
 8001c94:	40020410 	.word	0x40020410
 8001c98:	40020428 	.word	0x40020428
 8001c9c:	40020440 	.word	0x40020440
 8001ca0:	40020458 	.word	0x40020458
 8001ca4:	40020470 	.word	0x40020470
 8001ca8:	40020488 	.word	0x40020488
 8001cac:	400204a0 	.word	0x400204a0
 8001cb0:	400204b8 	.word	0x400204b8
 8001cb4:	58025408 	.word	0x58025408
 8001cb8:	5802541c 	.word	0x5802541c
 8001cbc:	58025430 	.word	0x58025430
 8001cc0:	58025444 	.word	0x58025444
 8001cc4:	58025458 	.word	0x58025458
 8001cc8:	5802546c 	.word	0x5802546c
 8001ccc:	58025480 	.word	0x58025480
 8001cd0:	58025494 	.word	0x58025494
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d028      	beq.n	8001d2c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ce4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ce8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf4:	f003 031f 	and.w	r3, r3, #31
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001d08:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00c      	beq.n	8001d2c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d20:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001d2a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop

08001d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	@ 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d66:	4b86      	ldr	r3, [pc, #536]	@ (8001f80 <HAL_GPIO_Init+0x228>)
 8001d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d6a:	e18c      	b.n	8002086 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	2101      	movs	r1, #1
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 817e 	beq.w	8002080 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d005      	beq.n	8001d9c <HAL_GPIO_Init+0x44>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d130      	bne.n	8001dfe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	2203      	movs	r2, #3
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	091b      	lsrs	r3, r3, #4
 8001de8:	f003 0201 	and.w	r2, r3, #1
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	d017      	beq.n	8001e3a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	2203      	movs	r2, #3
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d123      	bne.n	8001e8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	08da      	lsrs	r2, r3, #3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3208      	adds	r2, #8
 8001e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	220f      	movs	r2, #15
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	691a      	ldr	r2, [r3, #16]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	08da      	lsrs	r2, r3, #3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3208      	adds	r2, #8
 8001e88:	69b9      	ldr	r1, [r7, #24]
 8001e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	2203      	movs	r2, #3
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0203 	and.w	r2, r3, #3
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 80d8 	beq.w	8002080 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed0:	4b2c      	ldr	r3, [pc, #176]	@ (8001f84 <HAL_GPIO_Init+0x22c>)
 8001ed2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ed6:	4a2b      	ldr	r2, [pc, #172]	@ (8001f84 <HAL_GPIO_Init+0x22c>)
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ee0:	4b28      	ldr	r3, [pc, #160]	@ (8001f84 <HAL_GPIO_Init+0x22c>)
 8001ee2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eee:	4a26      	ldr	r2, [pc, #152]	@ (8001f88 <HAL_GPIO_Init+0x230>)
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	220f      	movs	r2, #15
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a1d      	ldr	r2, [pc, #116]	@ (8001f8c <HAL_GPIO_Init+0x234>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d04a      	beq.n	8001fb0 <HAL_GPIO_Init+0x258>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8001f90 <HAL_GPIO_Init+0x238>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d02b      	beq.n	8001f7a <HAL_GPIO_Init+0x222>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a1b      	ldr	r2, [pc, #108]	@ (8001f94 <HAL_GPIO_Init+0x23c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d025      	beq.n	8001f76 <HAL_GPIO_Init+0x21e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a1a      	ldr	r2, [pc, #104]	@ (8001f98 <HAL_GPIO_Init+0x240>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d01f      	beq.n	8001f72 <HAL_GPIO_Init+0x21a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a19      	ldr	r2, [pc, #100]	@ (8001f9c <HAL_GPIO_Init+0x244>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d019      	beq.n	8001f6e <HAL_GPIO_Init+0x216>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a18      	ldr	r2, [pc, #96]	@ (8001fa0 <HAL_GPIO_Init+0x248>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d013      	beq.n	8001f6a <HAL_GPIO_Init+0x212>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a17      	ldr	r2, [pc, #92]	@ (8001fa4 <HAL_GPIO_Init+0x24c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00d      	beq.n	8001f66 <HAL_GPIO_Init+0x20e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a16      	ldr	r2, [pc, #88]	@ (8001fa8 <HAL_GPIO_Init+0x250>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d007      	beq.n	8001f62 <HAL_GPIO_Init+0x20a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a15      	ldr	r2, [pc, #84]	@ (8001fac <HAL_GPIO_Init+0x254>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d101      	bne.n	8001f5e <HAL_GPIO_Init+0x206>
 8001f5a:	2309      	movs	r3, #9
 8001f5c:	e029      	b.n	8001fb2 <HAL_GPIO_Init+0x25a>
 8001f5e:	230a      	movs	r3, #10
 8001f60:	e027      	b.n	8001fb2 <HAL_GPIO_Init+0x25a>
 8001f62:	2307      	movs	r3, #7
 8001f64:	e025      	b.n	8001fb2 <HAL_GPIO_Init+0x25a>
 8001f66:	2306      	movs	r3, #6
 8001f68:	e023      	b.n	8001fb2 <HAL_GPIO_Init+0x25a>
 8001f6a:	2305      	movs	r3, #5
 8001f6c:	e021      	b.n	8001fb2 <HAL_GPIO_Init+0x25a>
 8001f6e:	2304      	movs	r3, #4
 8001f70:	e01f      	b.n	8001fb2 <HAL_GPIO_Init+0x25a>
 8001f72:	2303      	movs	r3, #3
 8001f74:	e01d      	b.n	8001fb2 <HAL_GPIO_Init+0x25a>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e01b      	b.n	8001fb2 <HAL_GPIO_Init+0x25a>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e019      	b.n	8001fb2 <HAL_GPIO_Init+0x25a>
 8001f7e:	bf00      	nop
 8001f80:	58000080 	.word	0x58000080
 8001f84:	58024400 	.word	0x58024400
 8001f88:	58000400 	.word	0x58000400
 8001f8c:	58020000 	.word	0x58020000
 8001f90:	58020400 	.word	0x58020400
 8001f94:	58020800 	.word	0x58020800
 8001f98:	58020c00 	.word	0x58020c00
 8001f9c:	58021000 	.word	0x58021000
 8001fa0:	58021400 	.word	0x58021400
 8001fa4:	58021800 	.word	0x58021800
 8001fa8:	58021c00 	.word	0x58021c00
 8001fac:	58022400 	.word	0x58022400
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	f002 0203 	and.w	r2, r2, #3
 8001fb8:	0092      	lsls	r2, r2, #2
 8001fba:	4093      	lsls	r3, r2
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc2:	4938      	ldr	r1, [pc, #224]	@ (80020a4 <HAL_GPIO_Init+0x34c>)
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	3302      	adds	r3, #2
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001ff6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ffe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002024:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	3301      	adds	r3, #1
 8002084:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa22 f303 	lsr.w	r3, r2, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	f47f ae6b 	bne.w	8001d6c <HAL_GPIO_Init+0x14>
  }
}
 8002096:	bf00      	nop
 8002098:	bf00      	nop
 800209a:	3724      	adds	r7, #36	@ 0x24
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	58000400 	.word	0x58000400

080020a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	807b      	strh	r3, [r7, #2]
 80020b4:	4613      	mov	r3, r2
 80020b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020b8:	787b      	ldrb	r3, [r7, #1]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020be:	887a      	ldrh	r2, [r7, #2]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020c4:	e003      	b.n	80020ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020c6:	887b      	ldrh	r3, [r7, #2]
 80020c8:	041a      	lsls	r2, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	619a      	str	r2, [r3, #24]
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80020e4:	4b19      	ldr	r3, [pc, #100]	@ (800214c <HAL_PWREx_ConfigSupply+0x70>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d00a      	beq.n	8002106 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <HAL_PWREx_ConfigSupply+0x70>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d001      	beq.n	8002102 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e01f      	b.n	8002142 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	e01d      	b.n	8002142 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002106:	4b11      	ldr	r3, [pc, #68]	@ (800214c <HAL_PWREx_ConfigSupply+0x70>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f023 0207 	bic.w	r2, r3, #7
 800210e:	490f      	ldr	r1, [pc, #60]	@ (800214c <HAL_PWREx_ConfigSupply+0x70>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4313      	orrs	r3, r2
 8002114:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002116:	f7ff fa99 	bl	800164c <HAL_GetTick>
 800211a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800211c:	e009      	b.n	8002132 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800211e:	f7ff fa95 	bl	800164c <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800212c:	d901      	bls.n	8002132 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e007      	b.n	8002142 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002132:	4b06      	ldr	r3, [pc, #24]	@ (800214c <HAL_PWREx_ConfigSupply+0x70>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800213a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800213e:	d1ee      	bne.n	800211e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	58024800 	.word	0x58024800

08002150 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08c      	sub	sp, #48	@ 0x30
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e3c8      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 8087 	beq.w	800227e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002170:	4b88      	ldr	r3, [pc, #544]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002178:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800217a:	4b86      	ldr	r3, [pc, #536]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 800217c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002182:	2b10      	cmp	r3, #16
 8002184:	d007      	beq.n	8002196 <HAL_RCC_OscConfig+0x46>
 8002186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002188:	2b18      	cmp	r3, #24
 800218a:	d110      	bne.n	80021ae <HAL_RCC_OscConfig+0x5e>
 800218c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d10b      	bne.n	80021ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002196:	4b7f      	ldr	r3, [pc, #508]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d06c      	beq.n	800227c <HAL_RCC_OscConfig+0x12c>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d168      	bne.n	800227c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e3a2      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021b6:	d106      	bne.n	80021c6 <HAL_RCC_OscConfig+0x76>
 80021b8:	4b76      	ldr	r3, [pc, #472]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a75      	ldr	r2, [pc, #468]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 80021be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021c2:	6013      	str	r3, [r2, #0]
 80021c4:	e02e      	b.n	8002224 <HAL_RCC_OscConfig+0xd4>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x98>
 80021ce:	4b71      	ldr	r3, [pc, #452]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a70      	ldr	r2, [pc, #448]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 80021d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b6e      	ldr	r3, [pc, #440]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a6d      	ldr	r2, [pc, #436]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 80021e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e01d      	b.n	8002224 <HAL_RCC_OscConfig+0xd4>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021f0:	d10c      	bne.n	800220c <HAL_RCC_OscConfig+0xbc>
 80021f2:	4b68      	ldr	r3, [pc, #416]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a67      	ldr	r2, [pc, #412]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 80021f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	4b65      	ldr	r3, [pc, #404]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a64      	ldr	r2, [pc, #400]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 8002204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	e00b      	b.n	8002224 <HAL_RCC_OscConfig+0xd4>
 800220c:	4b61      	ldr	r3, [pc, #388]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a60      	ldr	r2, [pc, #384]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 8002212:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	4b5e      	ldr	r3, [pc, #376]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a5d      	ldr	r2, [pc, #372]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 800221e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d013      	beq.n	8002254 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222c:	f7ff fa0e 	bl	800164c <HAL_GetTick>
 8002230:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002234:	f7ff fa0a 	bl	800164c <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b64      	cmp	r3, #100	@ 0x64
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e356      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002246:	4b53      	ldr	r3, [pc, #332]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <HAL_RCC_OscConfig+0xe4>
 8002252:	e014      	b.n	800227e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002254:	f7ff f9fa 	bl	800164c <HAL_GetTick>
 8002258:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800225c:	f7ff f9f6 	bl	800164c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b64      	cmp	r3, #100	@ 0x64
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e342      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800226e:	4b49      	ldr	r3, [pc, #292]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x10c>
 800227a:	e000      	b.n	800227e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 808c 	beq.w	80023a4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800228c:	4b41      	ldr	r3, [pc, #260]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002294:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002296:	4b3f      	ldr	r3, [pc, #252]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 8002298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d007      	beq.n	80022b2 <HAL_RCC_OscConfig+0x162>
 80022a2:	6a3b      	ldr	r3, [r7, #32]
 80022a4:	2b18      	cmp	r3, #24
 80022a6:	d137      	bne.n	8002318 <HAL_RCC_OscConfig+0x1c8>
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d132      	bne.n	8002318 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022b2:	4b38      	ldr	r3, [pc, #224]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_RCC_OscConfig+0x17a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e314      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80022ca:	4b32      	ldr	r3, [pc, #200]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 0219 	bic.w	r2, r3, #25
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	492f      	ldr	r1, [pc, #188]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022dc:	f7ff f9b6 	bl	800164c <HAL_GetTick>
 80022e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e4:	f7ff f9b2 	bl	800164c <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e2fe      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022f6:	4b27      	ldr	r3, [pc, #156]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002302:	4b24      	ldr	r3, [pc, #144]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	061b      	lsls	r3, r3, #24
 8002310:	4920      	ldr	r1, [pc, #128]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 8002312:	4313      	orrs	r3, r2
 8002314:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002316:	e045      	b.n	80023a4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d026      	beq.n	800236e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002320:	4b1c      	ldr	r3, [pc, #112]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f023 0219 	bic.w	r2, r3, #25
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4919      	ldr	r1, [pc, #100]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002332:	f7ff f98b 	bl	800164c <HAL_GetTick>
 8002336:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233a:	f7ff f987 	bl	800164c <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e2d3      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800234c:	4b11      	ldr	r3, [pc, #68]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002358:	4b0e      	ldr	r3, [pc, #56]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	061b      	lsls	r3, r3, #24
 8002366:	490b      	ldr	r1, [pc, #44]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]
 800236c:	e01a      	b.n	80023a4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800236e:	4b09      	ldr	r3, [pc, #36]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a08      	ldr	r2, [pc, #32]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237a:	f7ff f967 	bl	800164c <HAL_GetTick>
 800237e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002380:	e00a      	b.n	8002398 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002382:	f7ff f963 	bl	800164c <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d903      	bls.n	8002398 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e2af      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a4>
 8002394:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002398:	4b96      	ldr	r3, [pc, #600]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1ee      	bne.n	8002382 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0310 	and.w	r3, r3, #16
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d06a      	beq.n	8002486 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023b0:	4b90      	ldr	r3, [pc, #576]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023b8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023ba:	4b8e      	ldr	r3, [pc, #568]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 80023bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023be:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d007      	beq.n	80023d6 <HAL_RCC_OscConfig+0x286>
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	2b18      	cmp	r3, #24
 80023ca:	d11b      	bne.n	8002404 <HAL_RCC_OscConfig+0x2b4>
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d116      	bne.n	8002404 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023d6:	4b87      	ldr	r3, [pc, #540]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <HAL_RCC_OscConfig+0x29e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	2b80      	cmp	r3, #128	@ 0x80
 80023e8:	d001      	beq.n	80023ee <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e282      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023ee:	4b81      	ldr	r3, [pc, #516]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	061b      	lsls	r3, r3, #24
 80023fc:	497d      	ldr	r1, [pc, #500]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002402:	e040      	b.n	8002486 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d023      	beq.n	8002454 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800240c:	4b79      	ldr	r3, [pc, #484]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a78      	ldr	r2, [pc, #480]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 8002412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7ff f918 	bl	800164c <HAL_GetTick>
 800241c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002420:	f7ff f914 	bl	800164c <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e260      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002432:	4b70      	ldr	r3, [pc, #448]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800243e:	4b6d      	ldr	r3, [pc, #436]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	061b      	lsls	r3, r3, #24
 800244c:	4969      	ldr	r1, [pc, #420]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 800244e:	4313      	orrs	r3, r2
 8002450:	60cb      	str	r3, [r1, #12]
 8002452:	e018      	b.n	8002486 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002454:	4b67      	ldr	r3, [pc, #412]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a66      	ldr	r2, [pc, #408]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 800245a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800245e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7ff f8f4 	bl	800164c <HAL_GetTick>
 8002464:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002468:	f7ff f8f0 	bl	800164c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e23c      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800247a:	4b5e      	ldr	r3, [pc, #376]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d036      	beq.n	8002500 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d019      	beq.n	80024ce <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800249a:	4b56      	ldr	r3, [pc, #344]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 800249c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800249e:	4a55      	ldr	r2, [pc, #340]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a6:	f7ff f8d1 	bl	800164c <HAL_GetTick>
 80024aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ae:	f7ff f8cd 	bl	800164c <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e219      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024c0:	4b4c      	ldr	r3, [pc, #304]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 80024c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x35e>
 80024cc:	e018      	b.n	8002500 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ce:	4b49      	ldr	r3, [pc, #292]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 80024d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024d2:	4a48      	ldr	r2, [pc, #288]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 80024d4:	f023 0301 	bic.w	r3, r3, #1
 80024d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024da:	f7ff f8b7 	bl	800164c <HAL_GetTick>
 80024de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e2:	f7ff f8b3 	bl	800164c <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e1ff      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024f4:	4b3f      	ldr	r3, [pc, #252]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 80024f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f0      	bne.n	80024e2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b00      	cmp	r3, #0
 800250a:	d036      	beq.n	800257a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d019      	beq.n	8002548 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002514:	4b37      	ldr	r3, [pc, #220]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a36      	ldr	r2, [pc, #216]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 800251a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800251e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002520:	f7ff f894 	bl	800164c <HAL_GetTick>
 8002524:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002528:	f7ff f890 	bl	800164c <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e1dc      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800253a:	4b2e      	ldr	r3, [pc, #184]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x3d8>
 8002546:	e018      	b.n	800257a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002548:	4b2a      	ldr	r3, [pc, #168]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a29      	ldr	r2, [pc, #164]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 800254e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002552:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002554:	f7ff f87a 	bl	800164c <HAL_GetTick>
 8002558:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800255c:	f7ff f876 	bl	800164c <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e1c2      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800256e:	4b21      	ldr	r3, [pc, #132]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 8086 	beq.w	8002694 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002588:	4b1b      	ldr	r3, [pc, #108]	@ (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a1a      	ldr	r2, [pc, #104]	@ (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 800258e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002592:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002594:	f7ff f85a 	bl	800164c <HAL_GetTick>
 8002598:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259c:	f7ff f856 	bl	800164c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	@ 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e1a2      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025ae:	4b12      	ldr	r3, [pc, #72]	@ (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d106      	bne.n	80025d0 <HAL_RCC_OscConfig+0x480>
 80025c2:	4b0c      	ldr	r3, [pc, #48]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c6:	4a0b      	ldr	r2, [pc, #44]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ce:	e032      	b.n	8002636 <HAL_RCC_OscConfig+0x4e6>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d111      	bne.n	80025fc <HAL_RCC_OscConfig+0x4ac>
 80025d8:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 80025da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025dc:	4a05      	ldr	r2, [pc, #20]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 80025de:	f023 0301 	bic.w	r3, r3, #1
 80025e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80025e4:	4b03      	ldr	r3, [pc, #12]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 80025e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e8:	4a02      	ldr	r2, [pc, #8]	@ (80025f4 <HAL_RCC_OscConfig+0x4a4>)
 80025ea:	f023 0304 	bic.w	r3, r3, #4
 80025ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80025f0:	e021      	b.n	8002636 <HAL_RCC_OscConfig+0x4e6>
 80025f2:	bf00      	nop
 80025f4:	58024400 	.word	0x58024400
 80025f8:	58024800 	.word	0x58024800
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2b05      	cmp	r3, #5
 8002602:	d10c      	bne.n	800261e <HAL_RCC_OscConfig+0x4ce>
 8002604:	4b83      	ldr	r3, [pc, #524]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002608:	4a82      	ldr	r2, [pc, #520]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 800260a:	f043 0304 	orr.w	r3, r3, #4
 800260e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002610:	4b80      	ldr	r3, [pc, #512]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 8002612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002614:	4a7f      	ldr	r2, [pc, #508]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	6713      	str	r3, [r2, #112]	@ 0x70
 800261c:	e00b      	b.n	8002636 <HAL_RCC_OscConfig+0x4e6>
 800261e:	4b7d      	ldr	r3, [pc, #500]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 8002620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002622:	4a7c      	ldr	r2, [pc, #496]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 8002624:	f023 0301 	bic.w	r3, r3, #1
 8002628:	6713      	str	r3, [r2, #112]	@ 0x70
 800262a:	4b7a      	ldr	r3, [pc, #488]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 800262c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262e:	4a79      	ldr	r2, [pc, #484]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 8002630:	f023 0304 	bic.w	r3, r3, #4
 8002634:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d015      	beq.n	800266a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263e:	f7ff f805 	bl	800164c <HAL_GetTick>
 8002642:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002644:	e00a      	b.n	800265c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002646:	f7ff f801 	bl	800164c <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002654:	4293      	cmp	r3, r2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e14b      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800265c:	4b6d      	ldr	r3, [pc, #436]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 800265e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0ee      	beq.n	8002646 <HAL_RCC_OscConfig+0x4f6>
 8002668:	e014      	b.n	8002694 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fe ffef 	bl	800164c <HAL_GetTick>
 800266e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe ffeb 	bl	800164c <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e135      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002688:	4b62      	ldr	r3, [pc, #392]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1ee      	bne.n	8002672 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 812a 	beq.w	80028f2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800269e:	4b5d      	ldr	r3, [pc, #372]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026a6:	2b18      	cmp	r3, #24
 80026a8:	f000 80ba 	beq.w	8002820 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	f040 8095 	bne.w	80027e0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b6:	4b57      	ldr	r3, [pc, #348]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a56      	ldr	r2, [pc, #344]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 80026bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c2:	f7fe ffc3 	bl	800164c <HAL_GetTick>
 80026c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ca:	f7fe ffbf 	bl	800164c <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e10b      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f0      	bne.n	80026ca <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 80026ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026ec:	4b4a      	ldr	r3, [pc, #296]	@ (8002818 <HAL_RCC_OscConfig+0x6c8>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80026f8:	0112      	lsls	r2, r2, #4
 80026fa:	430a      	orrs	r2, r1
 80026fc:	4945      	ldr	r1, [pc, #276]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	628b      	str	r3, [r1, #40]	@ 0x28
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	3b01      	subs	r3, #1
 8002708:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002710:	3b01      	subs	r3, #1
 8002712:	025b      	lsls	r3, r3, #9
 8002714:	b29b      	uxth	r3, r3
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800271c:	3b01      	subs	r3, #1
 800271e:	041b      	lsls	r3, r3, #16
 8002720:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800272a:	3b01      	subs	r3, #1
 800272c:	061b      	lsls	r3, r3, #24
 800272e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002732:	4938      	ldr	r1, [pc, #224]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 8002734:	4313      	orrs	r3, r2
 8002736:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002738:	4b36      	ldr	r3, [pc, #216]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 800273a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273c:	4a35      	ldr	r2, [pc, #212]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 800273e:	f023 0301 	bic.w	r3, r3, #1
 8002742:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002744:	4b33      	ldr	r3, [pc, #204]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 8002746:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002748:	4b34      	ldr	r3, [pc, #208]	@ (800281c <HAL_RCC_OscConfig+0x6cc>)
 800274a:	4013      	ands	r3, r2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002750:	00d2      	lsls	r2, r2, #3
 8002752:	4930      	ldr	r1, [pc, #192]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 8002754:	4313      	orrs	r3, r2
 8002756:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002758:	4b2e      	ldr	r3, [pc, #184]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 800275a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275c:	f023 020c 	bic.w	r2, r3, #12
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002764:	492b      	ldr	r1, [pc, #172]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 8002766:	4313      	orrs	r3, r2
 8002768:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800276a:	4b2a      	ldr	r3, [pc, #168]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 800276c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800276e:	f023 0202 	bic.w	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002776:	4927      	ldr	r1, [pc, #156]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 8002778:	4313      	orrs	r3, r2
 800277a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800277c:	4b25      	ldr	r3, [pc, #148]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 800277e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002780:	4a24      	ldr	r2, [pc, #144]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 8002782:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002786:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002788:	4b22      	ldr	r3, [pc, #136]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 800278a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278c:	4a21      	ldr	r2, [pc, #132]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 800278e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002792:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002794:	4b1f      	ldr	r3, [pc, #124]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 8002796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002798:	4a1e      	ldr	r2, [pc, #120]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 800279a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800279e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80027a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 80027a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ac:	4b19      	ldr	r3, [pc, #100]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a18      	ldr	r2, [pc, #96]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 80027b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7fe ff48 	bl	800164c <HAL_GetTick>
 80027bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c0:	f7fe ff44 	bl	800164c <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e090      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027d2:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x670>
 80027de:	e088      	b.n	80028f2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 80027e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ec:	f7fe ff2e 	bl	800164c <HAL_GetTick>
 80027f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f4:	f7fe ff2a 	bl	800164c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e076      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002806:	4b03      	ldr	r3, [pc, #12]	@ (8002814 <HAL_RCC_OscConfig+0x6c4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x6a4>
 8002812:	e06e      	b.n	80028f2 <HAL_RCC_OscConfig+0x7a2>
 8002814:	58024400 	.word	0x58024400
 8002818:	fffffc0c 	.word	0xfffffc0c
 800281c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002820:	4b36      	ldr	r3, [pc, #216]	@ (80028fc <HAL_RCC_OscConfig+0x7ac>)
 8002822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002824:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002826:	4b35      	ldr	r3, [pc, #212]	@ (80028fc <HAL_RCC_OscConfig+0x7ac>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002830:	2b01      	cmp	r3, #1
 8002832:	d031      	beq.n	8002898 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f003 0203 	and.w	r2, r3, #3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d12a      	bne.n	8002898 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	091b      	lsrs	r3, r3, #4
 8002846:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d122      	bne.n	8002898 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800285e:	429a      	cmp	r2, r3
 8002860:	d11a      	bne.n	8002898 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	0a5b      	lsrs	r3, r3, #9
 8002866:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800286e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002870:	429a      	cmp	r2, r3
 8002872:	d111      	bne.n	8002898 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	0c1b      	lsrs	r3, r3, #16
 8002878:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002880:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002882:	429a      	cmp	r2, r3
 8002884:	d108      	bne.n	8002898 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	0e1b      	lsrs	r3, r3, #24
 800288a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002892:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e02b      	b.n	80028f4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800289c:	4b17      	ldr	r3, [pc, #92]	@ (80028fc <HAL_RCC_OscConfig+0x7ac>)
 800289e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028a0:	08db      	lsrs	r3, r3, #3
 80028a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028a6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d01f      	beq.n	80028f2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80028b2:	4b12      	ldr	r3, [pc, #72]	@ (80028fc <HAL_RCC_OscConfig+0x7ac>)
 80028b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b6:	4a11      	ldr	r2, [pc, #68]	@ (80028fc <HAL_RCC_OscConfig+0x7ac>)
 80028b8:	f023 0301 	bic.w	r3, r3, #1
 80028bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028be:	f7fe fec5 	bl	800164c <HAL_GetTick>
 80028c2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80028c4:	bf00      	nop
 80028c6:	f7fe fec1 	bl	800164c <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d0f9      	beq.n	80028c6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028d2:	4b0a      	ldr	r3, [pc, #40]	@ (80028fc <HAL_RCC_OscConfig+0x7ac>)
 80028d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002900 <HAL_RCC_OscConfig+0x7b0>)
 80028d8:	4013      	ands	r3, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028de:	00d2      	lsls	r2, r2, #3
 80028e0:	4906      	ldr	r1, [pc, #24]	@ (80028fc <HAL_RCC_OscConfig+0x7ac>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80028e6:	4b05      	ldr	r3, [pc, #20]	@ (80028fc <HAL_RCC_OscConfig+0x7ac>)
 80028e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ea:	4a04      	ldr	r2, [pc, #16]	@ (80028fc <HAL_RCC_OscConfig+0x7ac>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3730      	adds	r7, #48	@ 0x30
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	58024400 	.word	0x58024400
 8002900:	ffff0007 	.word	0xffff0007

08002904 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e19c      	b.n	8002c52 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002918:	4b8a      	ldr	r3, [pc, #552]	@ (8002b44 <HAL_RCC_ClockConfig+0x240>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 030f 	and.w	r3, r3, #15
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d910      	bls.n	8002948 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b87      	ldr	r3, [pc, #540]	@ (8002b44 <HAL_RCC_ClockConfig+0x240>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 020f 	bic.w	r2, r3, #15
 800292e:	4985      	ldr	r1, [pc, #532]	@ (8002b44 <HAL_RCC_ClockConfig+0x240>)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b83      	ldr	r3, [pc, #524]	@ (8002b44 <HAL_RCC_ClockConfig+0x240>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e184      	b.n	8002c52 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d010      	beq.n	8002976 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	4b7b      	ldr	r3, [pc, #492]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002960:	429a      	cmp	r2, r3
 8002962:	d908      	bls.n	8002976 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002964:	4b78      	ldr	r3, [pc, #480]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	4975      	ldr	r1, [pc, #468]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 8002972:	4313      	orrs	r3, r2
 8002974:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d010      	beq.n	80029a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	4b70      	ldr	r3, [pc, #448]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800298e:	429a      	cmp	r2, r3
 8002990:	d908      	bls.n	80029a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002992:	4b6d      	ldr	r3, [pc, #436]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	496a      	ldr	r1, [pc, #424]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d010      	beq.n	80029d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699a      	ldr	r2, [r3, #24]
 80029b4:	4b64      	ldr	r3, [pc, #400]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80029bc:	429a      	cmp	r2, r3
 80029be:	d908      	bls.n	80029d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029c0:	4b61      	ldr	r3, [pc, #388]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	495e      	ldr	r1, [pc, #376]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0320 	and.w	r3, r3, #32
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d010      	beq.n	8002a00 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69da      	ldr	r2, [r3, #28]
 80029e2:	4b59      	ldr	r3, [pc, #356]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d908      	bls.n	8002a00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80029ee:	4b56      	ldr	r3, [pc, #344]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	4953      	ldr	r1, [pc, #332]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d010      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	4b4d      	ldr	r3, [pc, #308]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d908      	bls.n	8002a2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a1c:	4b4a      	ldr	r3, [pc, #296]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	f023 020f 	bic.w	r2, r3, #15
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4947      	ldr	r1, [pc, #284]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d055      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002a3a:	4b43      	ldr	r3, [pc, #268]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	4940      	ldr	r1, [pc, #256]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d107      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a54:	4b3c      	ldr	r3, [pc, #240]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d121      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0f6      	b.n	8002c52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d107      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a6c:	4b36      	ldr	r3, [pc, #216]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d115      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0ea      	b.n	8002c52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d107      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a84:	4b30      	ldr	r3, [pc, #192]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d109      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0de      	b.n	8002c52 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a94:	4b2c      	ldr	r3, [pc, #176]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0d6      	b.n	8002c52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002aa4:	4b28      	ldr	r3, [pc, #160]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	f023 0207 	bic.w	r2, r3, #7
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	4925      	ldr	r1, [pc, #148]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ab6:	f7fe fdc9 	bl	800164c <HAL_GetTick>
 8002aba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002abc:	e00a      	b.n	8002ad4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002abe:	f7fe fdc5 	bl	800164c <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e0be      	b.n	8002c52 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d1eb      	bne.n	8002abe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d010      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	4b14      	ldr	r3, [pc, #80]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d208      	bcs.n	8002b14 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b02:	4b11      	ldr	r3, [pc, #68]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f023 020f 	bic.w	r2, r3, #15
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	490e      	ldr	r1, [pc, #56]	@ (8002b48 <HAL_RCC_ClockConfig+0x244>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b14:	4b0b      	ldr	r3, [pc, #44]	@ (8002b44 <HAL_RCC_ClockConfig+0x240>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d214      	bcs.n	8002b4c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4b08      	ldr	r3, [pc, #32]	@ (8002b44 <HAL_RCC_ClockConfig+0x240>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 020f 	bic.w	r2, r3, #15
 8002b2a:	4906      	ldr	r1, [pc, #24]	@ (8002b44 <HAL_RCC_ClockConfig+0x240>)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b04      	ldr	r3, [pc, #16]	@ (8002b44 <HAL_RCC_ClockConfig+0x240>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d005      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e086      	b.n	8002c52 <HAL_RCC_ClockConfig+0x34e>
 8002b44:	52002000 	.word	0x52002000
 8002b48:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d010      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691a      	ldr	r2, [r3, #16]
 8002b5c:	4b3f      	ldr	r3, [pc, #252]	@ (8002c5c <HAL_RCC_ClockConfig+0x358>)
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d208      	bcs.n	8002b7a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b68:	4b3c      	ldr	r3, [pc, #240]	@ (8002c5c <HAL_RCC_ClockConfig+0x358>)
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	4939      	ldr	r1, [pc, #228]	@ (8002c5c <HAL_RCC_ClockConfig+0x358>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d010      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	4b34      	ldr	r3, [pc, #208]	@ (8002c5c <HAL_RCC_ClockConfig+0x358>)
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d208      	bcs.n	8002ba8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b96:	4b31      	ldr	r3, [pc, #196]	@ (8002c5c <HAL_RCC_ClockConfig+0x358>)
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	492e      	ldr	r1, [pc, #184]	@ (8002c5c <HAL_RCC_ClockConfig+0x358>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d010      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	699a      	ldr	r2, [r3, #24]
 8002bb8:	4b28      	ldr	r3, [pc, #160]	@ (8002c5c <HAL_RCC_ClockConfig+0x358>)
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d208      	bcs.n	8002bd6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bc4:	4b25      	ldr	r3, [pc, #148]	@ (8002c5c <HAL_RCC_ClockConfig+0x358>)
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	4922      	ldr	r1, [pc, #136]	@ (8002c5c <HAL_RCC_ClockConfig+0x358>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0320 	and.w	r3, r3, #32
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d010      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69da      	ldr	r2, [r3, #28]
 8002be6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c5c <HAL_RCC_ClockConfig+0x358>)
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d208      	bcs.n	8002c04 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c5c <HAL_RCC_ClockConfig+0x358>)
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	4917      	ldr	r1, [pc, #92]	@ (8002c5c <HAL_RCC_ClockConfig+0x358>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c04:	f000 f834 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	4b14      	ldr	r3, [pc, #80]	@ (8002c5c <HAL_RCC_ClockConfig+0x358>)
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	0a1b      	lsrs	r3, r3, #8
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	4912      	ldr	r1, [pc, #72]	@ (8002c60 <HAL_RCC_ClockConfig+0x35c>)
 8002c16:	5ccb      	ldrb	r3, [r1, r3]
 8002c18:	f003 031f 	and.w	r3, r3, #31
 8002c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c20:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c22:	4b0e      	ldr	r3, [pc, #56]	@ (8002c5c <HAL_RCC_ClockConfig+0x358>)
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	4a0d      	ldr	r2, [pc, #52]	@ (8002c60 <HAL_RCC_ClockConfig+0x35c>)
 8002c2c:	5cd3      	ldrb	r3, [r2, r3]
 8002c2e:	f003 031f 	and.w	r3, r3, #31
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	fa22 f303 	lsr.w	r3, r2, r3
 8002c38:	4a0a      	ldr	r2, [pc, #40]	@ (8002c64 <HAL_RCC_ClockConfig+0x360>)
 8002c3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c3c:	4a0a      	ldr	r2, [pc, #40]	@ (8002c68 <HAL_RCC_ClockConfig+0x364>)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002c42:	4b0a      	ldr	r3, [pc, #40]	@ (8002c6c <HAL_RCC_ClockConfig+0x368>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fe fcb6 	bl	80015b8 <HAL_InitTick>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	58024400 	.word	0x58024400
 8002c60:	08009724 	.word	0x08009724
 8002c64:	24000108 	.word	0x24000108
 8002c68:	24000104 	.word	0x24000104
 8002c6c:	2400010c 	.word	0x2400010c

08002c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b089      	sub	sp, #36	@ 0x24
 8002c74:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c76:	4bb3      	ldr	r3, [pc, #716]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c7e:	2b18      	cmp	r3, #24
 8002c80:	f200 8155 	bhi.w	8002f2e <HAL_RCC_GetSysClockFreq+0x2be>
 8002c84:	a201      	add	r2, pc, #4	@ (adr r2, 8002c8c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8a:	bf00      	nop
 8002c8c:	08002cf1 	.word	0x08002cf1
 8002c90:	08002f2f 	.word	0x08002f2f
 8002c94:	08002f2f 	.word	0x08002f2f
 8002c98:	08002f2f 	.word	0x08002f2f
 8002c9c:	08002f2f 	.word	0x08002f2f
 8002ca0:	08002f2f 	.word	0x08002f2f
 8002ca4:	08002f2f 	.word	0x08002f2f
 8002ca8:	08002f2f 	.word	0x08002f2f
 8002cac:	08002d17 	.word	0x08002d17
 8002cb0:	08002f2f 	.word	0x08002f2f
 8002cb4:	08002f2f 	.word	0x08002f2f
 8002cb8:	08002f2f 	.word	0x08002f2f
 8002cbc:	08002f2f 	.word	0x08002f2f
 8002cc0:	08002f2f 	.word	0x08002f2f
 8002cc4:	08002f2f 	.word	0x08002f2f
 8002cc8:	08002f2f 	.word	0x08002f2f
 8002ccc:	08002d1d 	.word	0x08002d1d
 8002cd0:	08002f2f 	.word	0x08002f2f
 8002cd4:	08002f2f 	.word	0x08002f2f
 8002cd8:	08002f2f 	.word	0x08002f2f
 8002cdc:	08002f2f 	.word	0x08002f2f
 8002ce0:	08002f2f 	.word	0x08002f2f
 8002ce4:	08002f2f 	.word	0x08002f2f
 8002ce8:	08002f2f 	.word	0x08002f2f
 8002cec:	08002d23 	.word	0x08002d23
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cf0:	4b94      	ldr	r3, [pc, #592]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d009      	beq.n	8002d10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002cfc:	4b91      	ldr	r3, [pc, #580]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	08db      	lsrs	r3, r3, #3
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	4a90      	ldr	r2, [pc, #576]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d08:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002d0e:	e111      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002d10:	4b8d      	ldr	r3, [pc, #564]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d12:	61bb      	str	r3, [r7, #24]
      break;
 8002d14:	e10e      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002d16:	4b8d      	ldr	r3, [pc, #564]	@ (8002f4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d18:	61bb      	str	r3, [r7, #24]
      break;
 8002d1a:	e10b      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002d1c:	4b8c      	ldr	r3, [pc, #560]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002d1e:	61bb      	str	r3, [r7, #24]
      break;
 8002d20:	e108      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d22:	4b88      	ldr	r3, [pc, #544]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002d2c:	4b85      	ldr	r3, [pc, #532]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d30:	091b      	lsrs	r3, r3, #4
 8002d32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d36:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002d38:	4b82      	ldr	r3, [pc, #520]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002d42:	4b80      	ldr	r3, [pc, #512]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d46:	08db      	lsrs	r3, r3, #3
 8002d48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	fb02 f303 	mul.w	r3, r2, r3
 8002d52:	ee07 3a90 	vmov	s15, r3
 8002d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d5a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80e1 	beq.w	8002f28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	f000 8083 	beq.w	8002e74 <HAL_RCC_GetSysClockFreq+0x204>
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	f200 80a1 	bhi.w	8002eb8 <HAL_RCC_GetSysClockFreq+0x248>
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_RCC_GetSysClockFreq+0x114>
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d056      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002d82:	e099      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d84:	4b6f      	ldr	r3, [pc, #444]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0320 	and.w	r3, r3, #32
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d02d      	beq.n	8002dec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d90:	4b6c      	ldr	r3, [pc, #432]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	08db      	lsrs	r3, r3, #3
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	4a6b      	ldr	r2, [pc, #428]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002da0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	ee07 3a90 	vmov	s15, r3
 8002da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	ee07 3a90 	vmov	s15, r3
 8002db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dba:	4b62      	ldr	r3, [pc, #392]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc2:	ee07 3a90 	vmov	s15, r3
 8002dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dca:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dce:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002dea:	e087      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	ee07 3a90 	vmov	s15, r3
 8002df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002f58 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dfe:	4b51      	ldr	r3, [pc, #324]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e06:	ee07 3a90 	vmov	s15, r3
 8002e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e12:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e2e:	e065      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	ee07 3a90 	vmov	s15, r3
 8002e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e3a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002f5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e42:	4b40      	ldr	r3, [pc, #256]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e4a:	ee07 3a90 	vmov	s15, r3
 8002e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e52:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e56:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e72:	e043      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	ee07 3a90 	vmov	s15, r3
 8002e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e7e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002f60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e86:	4b2f      	ldr	r3, [pc, #188]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e8e:	ee07 3a90 	vmov	s15, r3
 8002e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e9a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ea6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002eb6:	e021      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	ee07 3a90 	vmov	s15, r3
 8002ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ec2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002f5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eca:	4b1e      	ldr	r3, [pc, #120]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed2:	ee07 3a90 	vmov	s15, r3
 8002ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ede:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002efa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002efc:	4b11      	ldr	r3, [pc, #68]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f00:	0a5b      	lsrs	r3, r3, #9
 8002f02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f06:	3301      	adds	r3, #1
 8002f08:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	ee07 3a90 	vmov	s15, r3
 8002f10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f14:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f20:	ee17 3a90 	vmov	r3, s15
 8002f24:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002f26:	e005      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61bb      	str	r3, [r7, #24]
      break;
 8002f2c:	e002      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002f2e:	4b07      	ldr	r3, [pc, #28]	@ (8002f4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f30:	61bb      	str	r3, [r7, #24]
      break;
 8002f32:	bf00      	nop
  }

  return sysclockfreq;
 8002f34:	69bb      	ldr	r3, [r7, #24]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3724      	adds	r7, #36	@ 0x24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	58024400 	.word	0x58024400
 8002f48:	03d09000 	.word	0x03d09000
 8002f4c:	003d0900 	.word	0x003d0900
 8002f50:	007a1200 	.word	0x007a1200
 8002f54:	46000000 	.word	0x46000000
 8002f58:	4c742400 	.word	0x4c742400
 8002f5c:	4a742400 	.word	0x4a742400
 8002f60:	4af42400 	.word	0x4af42400

08002f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002f6a:	f7ff fe81 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	4b10      	ldr	r3, [pc, #64]	@ (8002fb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	0a1b      	lsrs	r3, r3, #8
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	490f      	ldr	r1, [pc, #60]	@ (8002fb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002f7c:	5ccb      	ldrb	r3, [r1, r3]
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	fa22 f303 	lsr.w	r3, r2, r3
 8002f86:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f88:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	4a09      	ldr	r2, [pc, #36]	@ (8002fb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002f92:	5cd3      	ldrb	r3, [r2, r3]
 8002f94:	f003 031f 	and.w	r3, r3, #31
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f9e:	4a07      	ldr	r2, [pc, #28]	@ (8002fbc <HAL_RCC_GetHCLKFreq+0x58>)
 8002fa0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fa2:	4a07      	ldr	r2, [pc, #28]	@ (8002fc0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002fa8:	4b04      	ldr	r3, [pc, #16]	@ (8002fbc <HAL_RCC_GetHCLKFreq+0x58>)
 8002faa:	681b      	ldr	r3, [r3, #0]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	58024400 	.word	0x58024400
 8002fb8:	08009724 	.word	0x08009724
 8002fbc:	24000108 	.word	0x24000108
 8002fc0:	24000104 	.word	0x24000104

08002fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002fc8:	f7ff ffcc 	bl	8002f64 <HAL_RCC_GetHCLKFreq>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	091b      	lsrs	r3, r3, #4
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	4904      	ldr	r1, [pc, #16]	@ (8002fec <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fda:	5ccb      	ldrb	r3, [r1, r3]
 8002fdc:	f003 031f 	and.w	r3, r3, #31
 8002fe0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	58024400 	.word	0x58024400
 8002fec:	08009724 	.word	0x08009724

08002ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002ff4:	f7ff ffb6 	bl	8002f64 <HAL_RCC_GetHCLKFreq>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	4b06      	ldr	r3, [pc, #24]	@ (8003014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	0a1b      	lsrs	r3, r3, #8
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	4904      	ldr	r1, [pc, #16]	@ (8003018 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003006:	5ccb      	ldrb	r3, [r1, r3]
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003010:	4618      	mov	r0, r3
 8003012:	bd80      	pop	{r7, pc}
 8003014:	58024400 	.word	0x58024400
 8003018:	08009724 	.word	0x08009724

0800301c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800301c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003020:	b0c6      	sub	sp, #280	@ 0x118
 8003022:	af00      	add	r7, sp, #0
 8003024:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003028:	2300      	movs	r3, #0
 800302a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800302e:	2300      	movs	r3, #0
 8003030:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003040:	2500      	movs	r5, #0
 8003042:	ea54 0305 	orrs.w	r3, r4, r5
 8003046:	d049      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800304c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800304e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003052:	d02f      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003054:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003058:	d828      	bhi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800305a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800305e:	d01a      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003060:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003064:	d822      	bhi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800306a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800306e:	d007      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003070:	e01c      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003072:	4bab      	ldr	r3, [pc, #684]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003076:	4aaa      	ldr	r2, [pc, #680]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003078:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800307c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800307e:	e01a      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003084:	3308      	adds	r3, #8
 8003086:	2102      	movs	r1, #2
 8003088:	4618      	mov	r0, r3
 800308a:	f001 fc25 	bl	80048d8 <RCCEx_PLL2_Config>
 800308e:	4603      	mov	r3, r0
 8003090:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003094:	e00f      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800309a:	3328      	adds	r3, #40	@ 0x28
 800309c:	2102      	movs	r1, #2
 800309e:	4618      	mov	r0, r3
 80030a0:	f001 fccc 	bl	8004a3c <RCCEx_PLL3_Config>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80030aa:	e004      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80030b2:	e000      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80030b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10a      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80030be:	4b98      	ldr	r3, [pc, #608]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80030c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030cc:	4a94      	ldr	r2, [pc, #592]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030ce:	430b      	orrs	r3, r1
 80030d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80030d2:	e003      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80030dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80030e8:	f04f 0900 	mov.w	r9, #0
 80030ec:	ea58 0309 	orrs.w	r3, r8, r9
 80030f0:	d047      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80030f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d82a      	bhi.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80030fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003104 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80030fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003102:	bf00      	nop
 8003104:	08003119 	.word	0x08003119
 8003108:	08003127 	.word	0x08003127
 800310c:	0800313d 	.word	0x0800313d
 8003110:	0800315b 	.word	0x0800315b
 8003114:	0800315b 	.word	0x0800315b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003118:	4b81      	ldr	r3, [pc, #516]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800311a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311c:	4a80      	ldr	r2, [pc, #512]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800311e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003122:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003124:	e01a      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800312a:	3308      	adds	r3, #8
 800312c:	2100      	movs	r1, #0
 800312e:	4618      	mov	r0, r3
 8003130:	f001 fbd2 	bl	80048d8 <RCCEx_PLL2_Config>
 8003134:	4603      	mov	r3, r0
 8003136:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800313a:	e00f      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800313c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003140:	3328      	adds	r3, #40	@ 0x28
 8003142:	2100      	movs	r1, #0
 8003144:	4618      	mov	r0, r3
 8003146:	f001 fc79 	bl	8004a3c <RCCEx_PLL3_Config>
 800314a:	4603      	mov	r3, r0
 800314c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003150:	e004      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003158:	e000      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800315a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800315c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10a      	bne.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003164:	4b6e      	ldr	r3, [pc, #440]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003168:	f023 0107 	bic.w	r1, r3, #7
 800316c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003172:	4a6b      	ldr	r2, [pc, #428]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003174:	430b      	orrs	r3, r1
 8003176:	6513      	str	r3, [r2, #80]	@ 0x50
 8003178:	e003      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800317a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800317e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800318e:	f04f 0b00 	mov.w	fp, #0
 8003192:	ea5a 030b 	orrs.w	r3, sl, fp
 8003196:	d05b      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800319c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80031a0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80031a4:	d03b      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80031a6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80031aa:	d834      	bhi.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80031ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031b0:	d037      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80031b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031b6:	d82e      	bhi.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80031b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80031bc:	d033      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80031be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80031c2:	d828      	bhi.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80031c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031c8:	d01a      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80031ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031ce:	d822      	bhi.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80031d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031d8:	d007      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80031da:	e01c      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031dc:	4b50      	ldr	r3, [pc, #320]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e0:	4a4f      	ldr	r2, [pc, #316]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031e8:	e01e      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031ee:	3308      	adds	r3, #8
 80031f0:	2100      	movs	r1, #0
 80031f2:	4618      	mov	r0, r3
 80031f4:	f001 fb70 	bl	80048d8 <RCCEx_PLL2_Config>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80031fe:	e013      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003204:	3328      	adds	r3, #40	@ 0x28
 8003206:	2100      	movs	r1, #0
 8003208:	4618      	mov	r0, r3
 800320a:	f001 fc17 	bl	8004a3c <RCCEx_PLL3_Config>
 800320e:	4603      	mov	r3, r0
 8003210:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003214:	e008      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800321c:	e004      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800321e:	bf00      	nop
 8003220:	e002      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003222:	bf00      	nop
 8003224:	e000      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003228:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10b      	bne.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003230:	4b3b      	ldr	r3, [pc, #236]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003234:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800323c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003240:	4a37      	ldr	r2, [pc, #220]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003242:	430b      	orrs	r3, r1
 8003244:	6593      	str	r3, [r2, #88]	@ 0x58
 8003246:	e003      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003248:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800324c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003258:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800325c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003260:	2300      	movs	r3, #0
 8003262:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003266:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800326a:	460b      	mov	r3, r1
 800326c:	4313      	orrs	r3, r2
 800326e:	d05d      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003274:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003278:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800327c:	d03b      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800327e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003282:	d834      	bhi.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003284:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003288:	d037      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800328a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800328e:	d82e      	bhi.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003290:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003294:	d033      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003296:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800329a:	d828      	bhi.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800329c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032a0:	d01a      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80032a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032a6:	d822      	bhi.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80032ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032b0:	d007      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80032b2:	e01c      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b8:	4a19      	ldr	r2, [pc, #100]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032c0:	e01e      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032c6:	3308      	adds	r3, #8
 80032c8:	2100      	movs	r1, #0
 80032ca:	4618      	mov	r0, r3
 80032cc:	f001 fb04 	bl	80048d8 <RCCEx_PLL2_Config>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80032d6:	e013      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032dc:	3328      	adds	r3, #40	@ 0x28
 80032de:	2100      	movs	r1, #0
 80032e0:	4618      	mov	r0, r3
 80032e2:	f001 fbab 	bl	8004a3c <RCCEx_PLL3_Config>
 80032e6:	4603      	mov	r3, r0
 80032e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032ec:	e008      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80032f4:	e004      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80032f6:	bf00      	nop
 80032f8:	e002      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80032fa:	bf00      	nop
 80032fc:	e000      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80032fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003300:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10d      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003308:	4b05      	ldr	r3, [pc, #20]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800330a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800330c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003314:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003318:	4a01      	ldr	r2, [pc, #4]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800331a:	430b      	orrs	r3, r1
 800331c:	6593      	str	r3, [r2, #88]	@ 0x58
 800331e:	e005      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003320:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003324:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003328:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800332c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003334:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003338:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800333c:	2300      	movs	r3, #0
 800333e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003342:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003346:	460b      	mov	r3, r1
 8003348:	4313      	orrs	r3, r2
 800334a:	d03a      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800334c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003352:	2b30      	cmp	r3, #48	@ 0x30
 8003354:	d01f      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003356:	2b30      	cmp	r3, #48	@ 0x30
 8003358:	d819      	bhi.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800335a:	2b20      	cmp	r3, #32
 800335c:	d00c      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800335e:	2b20      	cmp	r3, #32
 8003360:	d815      	bhi.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003362:	2b00      	cmp	r3, #0
 8003364:	d019      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003366:	2b10      	cmp	r3, #16
 8003368:	d111      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800336a:	4baa      	ldr	r3, [pc, #680]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800336c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336e:	4aa9      	ldr	r2, [pc, #676]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003374:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003376:	e011      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800337c:	3308      	adds	r3, #8
 800337e:	2102      	movs	r1, #2
 8003380:	4618      	mov	r0, r3
 8003382:	f001 faa9 	bl	80048d8 <RCCEx_PLL2_Config>
 8003386:	4603      	mov	r3, r0
 8003388:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800338c:	e006      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003394:	e002      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003396:	bf00      	nop
 8003398:	e000      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800339a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800339c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10a      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80033a4:	4b9b      	ldr	r3, [pc, #620]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033a8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80033ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033b2:	4a98      	ldr	r2, [pc, #608]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033b4:	430b      	orrs	r3, r1
 80033b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033b8:	e003      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80033c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ca:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80033ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80033d2:	2300      	movs	r3, #0
 80033d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80033d8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80033dc:	460b      	mov	r3, r1
 80033de:	4313      	orrs	r3, r2
 80033e0:	d051      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80033e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033ec:	d035      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80033ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033f2:	d82e      	bhi.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80033f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80033f8:	d031      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80033fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80033fe:	d828      	bhi.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003400:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003404:	d01a      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003406:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800340a:	d822      	bhi.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003410:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003414:	d007      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003416:	e01c      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003418:	4b7e      	ldr	r3, [pc, #504]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800341a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341c:	4a7d      	ldr	r2, [pc, #500]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800341e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003422:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003424:	e01c      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800342a:	3308      	adds	r3, #8
 800342c:	2100      	movs	r1, #0
 800342e:	4618      	mov	r0, r3
 8003430:	f001 fa52 	bl	80048d8 <RCCEx_PLL2_Config>
 8003434:	4603      	mov	r3, r0
 8003436:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800343a:	e011      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800343c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003440:	3328      	adds	r3, #40	@ 0x28
 8003442:	2100      	movs	r1, #0
 8003444:	4618      	mov	r0, r3
 8003446:	f001 faf9 	bl	8004a3c <RCCEx_PLL3_Config>
 800344a:	4603      	mov	r3, r0
 800344c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003450:	e006      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003458:	e002      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800345a:	bf00      	nop
 800345c:	e000      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800345e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003460:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10a      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003468:	4b6a      	ldr	r3, [pc, #424]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800346a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800346c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003476:	4a67      	ldr	r2, [pc, #412]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003478:	430b      	orrs	r3, r1
 800347a:	6513      	str	r3, [r2, #80]	@ 0x50
 800347c:	e003      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800347e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003482:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800348a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003492:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003496:	2300      	movs	r3, #0
 8003498:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800349c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4313      	orrs	r3, r2
 80034a4:	d053      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80034a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034b0:	d033      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80034b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034b6:	d82c      	bhi.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80034b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034bc:	d02f      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x502>
 80034be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034c2:	d826      	bhi.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80034c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80034c8:	d02b      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80034ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80034ce:	d820      	bhi.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80034d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034d4:	d012      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80034d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034da:	d81a      	bhi.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d022      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80034e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034e4:	d115      	bne.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034ea:	3308      	adds	r3, #8
 80034ec:	2101      	movs	r1, #1
 80034ee:	4618      	mov	r0, r3
 80034f0:	f001 f9f2 	bl	80048d8 <RCCEx_PLL2_Config>
 80034f4:	4603      	mov	r3, r0
 80034f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80034fa:	e015      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003500:	3328      	adds	r3, #40	@ 0x28
 8003502:	2101      	movs	r1, #1
 8003504:	4618      	mov	r0, r3
 8003506:	f001 fa99 	bl	8004a3c <RCCEx_PLL3_Config>
 800350a:	4603      	mov	r3, r0
 800350c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003510:	e00a      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003518:	e006      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800351a:	bf00      	nop
 800351c:	e004      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800351e:	bf00      	nop
 8003520:	e002      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003522:	bf00      	nop
 8003524:	e000      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003526:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003528:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10a      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003530:	4b38      	ldr	r3, [pc, #224]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003534:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800353c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800353e:	4a35      	ldr	r2, [pc, #212]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003540:	430b      	orrs	r3, r1
 8003542:	6513      	str	r3, [r2, #80]	@ 0x50
 8003544:	e003      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003546:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800354a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800354e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003556:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800355a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800355e:	2300      	movs	r3, #0
 8003560:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003564:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003568:	460b      	mov	r3, r1
 800356a:	4313      	orrs	r3, r2
 800356c:	d058      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800356e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003572:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003576:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800357a:	d033      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800357c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003580:	d82c      	bhi.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003586:	d02f      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800358c:	d826      	bhi.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800358e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003592:	d02b      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003594:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003598:	d820      	bhi.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800359a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800359e:	d012      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80035a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035a4:	d81a      	bhi.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d022      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80035aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035ae:	d115      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035b4:	3308      	adds	r3, #8
 80035b6:	2101      	movs	r1, #1
 80035b8:	4618      	mov	r0, r3
 80035ba:	f001 f98d 	bl	80048d8 <RCCEx_PLL2_Config>
 80035be:	4603      	mov	r3, r0
 80035c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80035c4:	e015      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035ca:	3328      	adds	r3, #40	@ 0x28
 80035cc:	2101      	movs	r1, #1
 80035ce:	4618      	mov	r0, r3
 80035d0:	f001 fa34 	bl	8004a3c <RCCEx_PLL3_Config>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80035da:	e00a      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035e2:	e006      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80035e4:	bf00      	nop
 80035e6:	e004      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80035e8:	bf00      	nop
 80035ea:	e002      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80035ec:	bf00      	nop
 80035ee:	e000      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80035f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10e      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80035fa:	4b06      	ldr	r3, [pc, #24]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003606:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800360a:	4a02      	ldr	r2, [pc, #8]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800360c:	430b      	orrs	r3, r1
 800360e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003610:	e006      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003612:	bf00      	nop
 8003614:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003618:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800361c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003628:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800362c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003630:	2300      	movs	r3, #0
 8003632:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003636:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800363a:	460b      	mov	r3, r1
 800363c:	4313      	orrs	r3, r2
 800363e:	d037      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003644:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003646:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800364a:	d00e      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800364c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003650:	d816      	bhi.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003652:	2b00      	cmp	r3, #0
 8003654:	d018      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003656:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800365a:	d111      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800365c:	4bc4      	ldr	r3, [pc, #784]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800365e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003660:	4ac3      	ldr	r2, [pc, #780]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003662:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003666:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003668:	e00f      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800366a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800366e:	3308      	adds	r3, #8
 8003670:	2101      	movs	r1, #1
 8003672:	4618      	mov	r0, r3
 8003674:	f001 f930 	bl	80048d8 <RCCEx_PLL2_Config>
 8003678:	4603      	mov	r3, r0
 800367a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800367e:	e004      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003686:	e000      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800368a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10a      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003692:	4bb7      	ldr	r3, [pc, #732]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003694:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003696:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800369a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800369e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036a0:	4ab3      	ldr	r2, [pc, #716]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036a2:	430b      	orrs	r3, r1
 80036a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80036a6:	e003      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80036b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80036bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036c0:	2300      	movs	r3, #0
 80036c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80036c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80036ca:	460b      	mov	r3, r1
 80036cc:	4313      	orrs	r3, r2
 80036ce:	d039      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80036d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	d81c      	bhi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80036da:	a201      	add	r2, pc, #4	@ (adr r2, 80036e0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80036dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e0:	0800371d 	.word	0x0800371d
 80036e4:	080036f1 	.word	0x080036f1
 80036e8:	080036ff 	.word	0x080036ff
 80036ec:	0800371d 	.word	0x0800371d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036f0:	4b9f      	ldr	r3, [pc, #636]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f4:	4a9e      	ldr	r2, [pc, #632]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80036fc:	e00f      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003702:	3308      	adds	r3, #8
 8003704:	2102      	movs	r1, #2
 8003706:	4618      	mov	r0, r3
 8003708:	f001 f8e6 	bl	80048d8 <RCCEx_PLL2_Config>
 800370c:	4603      	mov	r3, r0
 800370e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003712:	e004      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800371a:	e000      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800371c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800371e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10a      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003726:	4b92      	ldr	r3, [pc, #584]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800372a:	f023 0103 	bic.w	r1, r3, #3
 800372e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003732:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003734:	4a8e      	ldr	r2, [pc, #568]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003736:	430b      	orrs	r3, r1
 8003738:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800373a:	e003      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003740:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003750:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003754:	2300      	movs	r3, #0
 8003756:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800375a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800375e:	460b      	mov	r3, r1
 8003760:	4313      	orrs	r3, r2
 8003762:	f000 8099 	beq.w	8003898 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003766:	4b83      	ldr	r3, [pc, #524]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a82      	ldr	r2, [pc, #520]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800376c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003770:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003772:	f7fd ff6b 	bl	800164c <HAL_GetTick>
 8003776:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800377a:	e00b      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377c:	f7fd ff66 	bl	800164c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b64      	cmp	r3, #100	@ 0x64
 800378a:	d903      	bls.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003792:	e005      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003794:	4b77      	ldr	r3, [pc, #476]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0ed      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80037a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d173      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80037a8:	4b71      	ldr	r3, [pc, #452]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80037ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037b4:	4053      	eors	r3, r2
 80037b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d015      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037be:	4b6c      	ldr	r3, [pc, #432]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037c6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037ca:	4b69      	ldr	r3, [pc, #420]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ce:	4a68      	ldr	r2, [pc, #416]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037d6:	4b66      	ldr	r3, [pc, #408]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037da:	4a65      	ldr	r2, [pc, #404]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037e0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80037e2:	4a63      	ldr	r2, [pc, #396]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037e8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80037ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037f6:	d118      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f8:	f7fd ff28 	bl	800164c <HAL_GetTick>
 80037fc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003800:	e00d      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003802:	f7fd ff23 	bl	800164c <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800380c:	1ad2      	subs	r2, r2, r3
 800380e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003812:	429a      	cmp	r2, r3
 8003814:	d903      	bls.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800381c:	e005      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800381e:	4b54      	ldr	r3, [pc, #336]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0eb      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800382a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800382e:	2b00      	cmp	r3, #0
 8003830:	d129      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003836:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800383a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800383e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003842:	d10e      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003844:	4b4a      	ldr	r3, [pc, #296]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800384c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003850:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003854:	091a      	lsrs	r2, r3, #4
 8003856:	4b48      	ldr	r3, [pc, #288]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003858:	4013      	ands	r3, r2
 800385a:	4a45      	ldr	r2, [pc, #276]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800385c:	430b      	orrs	r3, r1
 800385e:	6113      	str	r3, [r2, #16]
 8003860:	e005      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003862:	4b43      	ldr	r3, [pc, #268]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	4a42      	ldr	r2, [pc, #264]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003868:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800386c:	6113      	str	r3, [r2, #16]
 800386e:	4b40      	ldr	r3, [pc, #256]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003870:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003876:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800387a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387e:	4a3c      	ldr	r2, [pc, #240]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003880:	430b      	orrs	r3, r1
 8003882:	6713      	str	r3, [r2, #112]	@ 0x70
 8003884:	e008      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003886:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800388a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800388e:	e003      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003890:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003894:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	f002 0301 	and.w	r3, r2, #1
 80038a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038a8:	2300      	movs	r3, #0
 80038aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80038ae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80038b2:	460b      	mov	r3, r1
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f000 808f 	beq.w	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80038ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038c0:	2b28      	cmp	r3, #40	@ 0x28
 80038c2:	d871      	bhi.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80038c4:	a201      	add	r2, pc, #4	@ (adr r2, 80038cc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80038c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ca:	bf00      	nop
 80038cc:	080039b1 	.word	0x080039b1
 80038d0:	080039a9 	.word	0x080039a9
 80038d4:	080039a9 	.word	0x080039a9
 80038d8:	080039a9 	.word	0x080039a9
 80038dc:	080039a9 	.word	0x080039a9
 80038e0:	080039a9 	.word	0x080039a9
 80038e4:	080039a9 	.word	0x080039a9
 80038e8:	080039a9 	.word	0x080039a9
 80038ec:	0800397d 	.word	0x0800397d
 80038f0:	080039a9 	.word	0x080039a9
 80038f4:	080039a9 	.word	0x080039a9
 80038f8:	080039a9 	.word	0x080039a9
 80038fc:	080039a9 	.word	0x080039a9
 8003900:	080039a9 	.word	0x080039a9
 8003904:	080039a9 	.word	0x080039a9
 8003908:	080039a9 	.word	0x080039a9
 800390c:	08003993 	.word	0x08003993
 8003910:	080039a9 	.word	0x080039a9
 8003914:	080039a9 	.word	0x080039a9
 8003918:	080039a9 	.word	0x080039a9
 800391c:	080039a9 	.word	0x080039a9
 8003920:	080039a9 	.word	0x080039a9
 8003924:	080039a9 	.word	0x080039a9
 8003928:	080039a9 	.word	0x080039a9
 800392c:	080039b1 	.word	0x080039b1
 8003930:	080039a9 	.word	0x080039a9
 8003934:	080039a9 	.word	0x080039a9
 8003938:	080039a9 	.word	0x080039a9
 800393c:	080039a9 	.word	0x080039a9
 8003940:	080039a9 	.word	0x080039a9
 8003944:	080039a9 	.word	0x080039a9
 8003948:	080039a9 	.word	0x080039a9
 800394c:	080039b1 	.word	0x080039b1
 8003950:	080039a9 	.word	0x080039a9
 8003954:	080039a9 	.word	0x080039a9
 8003958:	080039a9 	.word	0x080039a9
 800395c:	080039a9 	.word	0x080039a9
 8003960:	080039a9 	.word	0x080039a9
 8003964:	080039a9 	.word	0x080039a9
 8003968:	080039a9 	.word	0x080039a9
 800396c:	080039b1 	.word	0x080039b1
 8003970:	58024400 	.word	0x58024400
 8003974:	58024800 	.word	0x58024800
 8003978:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800397c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003980:	3308      	adds	r3, #8
 8003982:	2101      	movs	r1, #1
 8003984:	4618      	mov	r0, r3
 8003986:	f000 ffa7 	bl	80048d8 <RCCEx_PLL2_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003990:	e00f      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003996:	3328      	adds	r3, #40	@ 0x28
 8003998:	2101      	movs	r1, #1
 800399a:	4618      	mov	r0, r3
 800399c:	f001 f84e 	bl	8004a3c <RCCEx_PLL3_Config>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80039a6:	e004      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039ae:	e000      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80039b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10a      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80039ba:	4bbf      	ldr	r3, [pc, #764]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80039bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039be:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80039c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039c8:	4abb      	ldr	r2, [pc, #748]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80039ca:	430b      	orrs	r3, r1
 80039cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80039ce:	e003      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80039d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e0:	f002 0302 	and.w	r3, r2, #2
 80039e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039e8:	2300      	movs	r3, #0
 80039ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4313      	orrs	r3, r2
 80039f6:	d041      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80039f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039fe:	2b05      	cmp	r3, #5
 8003a00:	d824      	bhi.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003a02:	a201      	add	r2, pc, #4	@ (adr r2, 8003a08 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a08:	08003a55 	.word	0x08003a55
 8003a0c:	08003a21 	.word	0x08003a21
 8003a10:	08003a37 	.word	0x08003a37
 8003a14:	08003a55 	.word	0x08003a55
 8003a18:	08003a55 	.word	0x08003a55
 8003a1c:	08003a55 	.word	0x08003a55
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a24:	3308      	adds	r3, #8
 8003a26:	2101      	movs	r1, #1
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 ff55 	bl	80048d8 <RCCEx_PLL2_Config>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003a34:	e00f      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a3a:	3328      	adds	r3, #40	@ 0x28
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fffc 	bl	8004a3c <RCCEx_PLL3_Config>
 8003a44:	4603      	mov	r3, r0
 8003a46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003a4a:	e004      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a52:	e000      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003a54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10a      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003a5e:	4b96      	ldr	r3, [pc, #600]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a62:	f023 0107 	bic.w	r1, r3, #7
 8003a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a6c:	4a92      	ldr	r2, [pc, #584]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a6e:	430b      	orrs	r3, r1
 8003a70:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a72:	e003      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a84:	f002 0304 	and.w	r3, r2, #4
 8003a88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a92:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a96:	460b      	mov	r3, r1
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	d044      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa4:	2b05      	cmp	r3, #5
 8003aa6:	d825      	bhi.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aae:	bf00      	nop
 8003ab0:	08003afd 	.word	0x08003afd
 8003ab4:	08003ac9 	.word	0x08003ac9
 8003ab8:	08003adf 	.word	0x08003adf
 8003abc:	08003afd 	.word	0x08003afd
 8003ac0:	08003afd 	.word	0x08003afd
 8003ac4:	08003afd 	.word	0x08003afd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003acc:	3308      	adds	r3, #8
 8003ace:	2101      	movs	r1, #1
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 ff01 	bl	80048d8 <RCCEx_PLL2_Config>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003adc:	e00f      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ae2:	3328      	adds	r3, #40	@ 0x28
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 ffa8 	bl	8004a3c <RCCEx_PLL3_Config>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003af2:	e004      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003afa:	e000      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003afe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10b      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b06:	4b6c      	ldr	r3, [pc, #432]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0a:	f023 0107 	bic.w	r1, r3, #7
 8003b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b16:	4a68      	ldr	r2, [pc, #416]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b1c:	e003      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b22:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2e:	f002 0320 	and.w	r3, r2, #32
 8003b32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b36:	2300      	movs	r3, #0
 8003b38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003b3c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4313      	orrs	r3, r2
 8003b44:	d055      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b52:	d033      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b58:	d82c      	bhi.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b5e:	d02f      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b64:	d826      	bhi.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003b66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b6a:	d02b      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003b6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b70:	d820      	bhi.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003b72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b76:	d012      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003b78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b7c:	d81a      	bhi.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d022      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003b82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b86:	d115      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 fea1 	bl	80048d8 <RCCEx_PLL2_Config>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b9c:	e015      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ba2:	3328      	adds	r3, #40	@ 0x28
 8003ba4:	2102      	movs	r1, #2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 ff48 	bl	8004a3c <RCCEx_PLL3_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003bb2:	e00a      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003bba:	e006      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003bbc:	bf00      	nop
 8003bbe:	e004      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003bc0:	bf00      	nop
 8003bc2:	e002      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003bc4:	bf00      	nop
 8003bc6:	e000      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003bc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10b      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bd2:	4b39      	ldr	r3, [pc, #228]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003be2:	4a35      	ldr	r2, [pc, #212]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003be4:	430b      	orrs	r3, r1
 8003be6:	6553      	str	r3, [r2, #84]	@ 0x54
 8003be8:	e003      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003bfe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c02:	2300      	movs	r3, #0
 8003c04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c08:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	d058      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c1a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003c1e:	d033      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003c20:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003c24:	d82c      	bhi.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c2a:	d02f      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c30:	d826      	bhi.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c36:	d02b      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003c38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c3c:	d820      	bhi.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c42:	d012      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003c44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c48:	d81a      	bhi.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d022      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c52:	d115      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c58:	3308      	adds	r3, #8
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 fe3b 	bl	80048d8 <RCCEx_PLL2_Config>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003c68:	e015      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c6e:	3328      	adds	r3, #40	@ 0x28
 8003c70:	2102      	movs	r1, #2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 fee2 	bl	8004a3c <RCCEx_PLL3_Config>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003c7e:	e00a      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c86:	e006      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c88:	bf00      	nop
 8003c8a:	e004      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c8c:	bf00      	nop
 8003c8e:	e002      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c90:	bf00      	nop
 8003c92:	e000      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10e      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c9e:	4b06      	ldr	r3, [pc, #24]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003caa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cae:	4a02      	ldr	r2, [pc, #8]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cb4:	e006      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003cb6:	bf00      	nop
 8003cb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ccc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003cd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003cda:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	d055      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ce8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003cec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003cf0:	d033      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003cf2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003cf6:	d82c      	bhi.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003cf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cfc:	d02f      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003cfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d02:	d826      	bhi.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003d04:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003d08:	d02b      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003d0a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003d0e:	d820      	bhi.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003d10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d14:	d012      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003d16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d1a:	d81a      	bhi.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d022      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003d20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d24:	d115      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d2a:	3308      	adds	r3, #8
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fdd2 	bl	80048d8 <RCCEx_PLL2_Config>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003d3a:	e015      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d40:	3328      	adds	r3, #40	@ 0x28
 8003d42:	2102      	movs	r1, #2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fe79 	bl	8004a3c <RCCEx_PLL3_Config>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003d50:	e00a      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d58:	e006      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003d5a:	bf00      	nop
 8003d5c:	e004      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003d5e:	bf00      	nop
 8003d60:	e002      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003d62:	bf00      	nop
 8003d64:	e000      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003d66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10b      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003d70:	4ba0      	ldr	r3, [pc, #640]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d74:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d80:	4a9c      	ldr	r2, [pc, #624]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d82:	430b      	orrs	r3, r1
 8003d84:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d86:	e003      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d98:	f002 0308 	and.w	r3, r2, #8
 8003d9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003da0:	2300      	movs	r3, #0
 8003da2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003da6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003daa:	460b      	mov	r3, r1
 8003dac:	4313      	orrs	r3, r2
 8003dae:	d01e      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dbc:	d10c      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dc2:	3328      	adds	r3, #40	@ 0x28
 8003dc4:	2102      	movs	r1, #2
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fe38 	bl	8004a3c <RCCEx_PLL3_Config>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003dd8:	4b86      	ldr	r3, [pc, #536]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ddc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003de8:	4a82      	ldr	r2, [pc, #520]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dea:	430b      	orrs	r3, r1
 8003dec:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df6:	f002 0310 	and.w	r3, r2, #16
 8003dfa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e04:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	d01e      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e1a:	d10c      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e20:	3328      	adds	r3, #40	@ 0x28
 8003e22:	2102      	movs	r1, #2
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 fe09 	bl	8004a3c <RCCEx_PLL3_Config>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e36:	4b6f      	ldr	r3, [pc, #444]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e46:	4a6b      	ldr	r2, [pc, #428]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e54:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003e58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e5e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003e62:	460b      	mov	r3, r1
 8003e64:	4313      	orrs	r3, r2
 8003e66:	d03e      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003e70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e74:	d022      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003e76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e7a:	d81b      	bhi.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e84:	d00b      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003e86:	e015      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e8c:	3308      	adds	r3, #8
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fd21 	bl	80048d8 <RCCEx_PLL2_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e9c:	e00f      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ea2:	3328      	adds	r3, #40	@ 0x28
 8003ea4:	2102      	movs	r1, #2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fdc8 	bl	8004a3c <RCCEx_PLL3_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003eb2:	e004      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003eba:	e000      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ebe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10b      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ec6:	4b4b      	ldr	r3, [pc, #300]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ed2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003ed6:	4a47      	ldr	r2, [pc, #284]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	6593      	str	r3, [r2, #88]	@ 0x58
 8003edc:	e003      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ede:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ee2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003ef2:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ef8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003efc:	460b      	mov	r3, r1
 8003efe:	4313      	orrs	r3, r2
 8003f00:	d03b      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f0e:	d01f      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003f10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f14:	d818      	bhi.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003f16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f1a:	d003      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003f1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f20:	d007      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003f22:	e011      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f24:	4b33      	ldr	r3, [pc, #204]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f28:	4a32      	ldr	r2, [pc, #200]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003f30:	e00f      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f36:	3328      	adds	r3, #40	@ 0x28
 8003f38:	2101      	movs	r1, #1
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fd7e 	bl	8004a3c <RCCEx_PLL3_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003f46:	e004      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f4e:	e000      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10b      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f5a:	4b26      	ldr	r3, [pc, #152]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f5e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f6a:	4a22      	ldr	r2, [pc, #136]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f70:	e003      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f82:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003f86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f88:	2300      	movs	r3, #0
 8003f8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f8c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003f90:	460b      	mov	r3, r1
 8003f92:	4313      	orrs	r3, r2
 8003f94:	d034      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fa4:	d007      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003fa6:	e011      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fa8:	4b12      	ldr	r3, [pc, #72]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fac:	4a11      	ldr	r2, [pc, #68]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003fb4:	e00e      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fba:	3308      	adds	r3, #8
 8003fbc:	2102      	movs	r1, #2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fc8a 	bl	80048d8 <RCCEx_PLL2_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003fca:	e003      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10d      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003fdc:	4b05      	ldr	r3, [pc, #20]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fe0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fea:	4a02      	ldr	r2, [pc, #8]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fec:	430b      	orrs	r3, r1
 8003fee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ff0:	e006      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003ff2:	bf00      	nop
 8003ff4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ffc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004008:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800400c:	663b      	str	r3, [r7, #96]	@ 0x60
 800400e:	2300      	movs	r3, #0
 8004010:	667b      	str	r3, [r7, #100]	@ 0x64
 8004012:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004016:	460b      	mov	r3, r1
 8004018:	4313      	orrs	r3, r2
 800401a:	d00c      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800401c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004020:	3328      	adds	r3, #40	@ 0x28
 8004022:	2102      	movs	r1, #2
 8004024:	4618      	mov	r0, r3
 8004026:	f000 fd09 	bl	8004a3c <RCCEx_PLL3_Config>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800403a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004042:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004044:	2300      	movs	r3, #0
 8004046:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004048:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800404c:	460b      	mov	r3, r1
 800404e:	4313      	orrs	r3, r2
 8004050:	d036      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004056:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004058:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800405c:	d018      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800405e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004062:	d811      	bhi.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004064:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004068:	d014      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800406a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800406e:	d80b      	bhi.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004070:	2b00      	cmp	r3, #0
 8004072:	d011      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004078:	d106      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800407a:	4bb7      	ldr	r3, [pc, #732]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800407c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407e:	4ab6      	ldr	r2, [pc, #728]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004080:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004084:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004086:	e008      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800408e:	e004      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004090:	bf00      	nop
 8004092:	e002      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004094:	bf00      	nop
 8004096:	e000      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800409a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040a2:	4bad      	ldr	r3, [pc, #692]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040b0:	4aa9      	ldr	r2, [pc, #676]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040b2:	430b      	orrs	r3, r1
 80040b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80040b6:	e003      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80040cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80040ce:	2300      	movs	r3, #0
 80040d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80040d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80040d6:	460b      	mov	r3, r1
 80040d8:	4313      	orrs	r3, r2
 80040da:	d009      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040dc:	4b9e      	ldr	r3, [pc, #632]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80040e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ea:	4a9b      	ldr	r2, [pc, #620]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040ec:	430b      	orrs	r3, r1
 80040ee:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80040fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040fe:	2300      	movs	r3, #0
 8004100:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004102:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004106:	460b      	mov	r3, r1
 8004108:	4313      	orrs	r3, r2
 800410a:	d009      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800410c:	4b92      	ldr	r3, [pc, #584]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800410e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004110:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004118:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800411a:	4a8f      	ldr	r2, [pc, #572]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800411c:	430b      	orrs	r3, r1
 800411e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004128:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800412c:	643b      	str	r3, [r7, #64]	@ 0x40
 800412e:	2300      	movs	r3, #0
 8004130:	647b      	str	r3, [r7, #68]	@ 0x44
 8004132:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004136:	460b      	mov	r3, r1
 8004138:	4313      	orrs	r3, r2
 800413a:	d00e      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800413c:	4b86      	ldr	r3, [pc, #536]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	4a85      	ldr	r2, [pc, #532]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004142:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004146:	6113      	str	r3, [r2, #16]
 8004148:	4b83      	ldr	r3, [pc, #524]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800414a:	6919      	ldr	r1, [r3, #16]
 800414c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004150:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004154:	4a80      	ldr	r2, [pc, #512]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004156:	430b      	orrs	r3, r1
 8004158:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800415a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004166:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004168:	2300      	movs	r3, #0
 800416a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800416c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004170:	460b      	mov	r3, r1
 8004172:	4313      	orrs	r3, r2
 8004174:	d009      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004176:	4b78      	ldr	r3, [pc, #480]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800417a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800417e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004184:	4a74      	ldr	r2, [pc, #464]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004186:	430b      	orrs	r3, r1
 8004188:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800418a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800418e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004192:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004196:	633b      	str	r3, [r7, #48]	@ 0x30
 8004198:	2300      	movs	r3, #0
 800419a:	637b      	str	r3, [r7, #52]	@ 0x34
 800419c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80041a0:	460b      	mov	r3, r1
 80041a2:	4313      	orrs	r3, r2
 80041a4:	d00a      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041a6:	4b6c      	ldr	r3, [pc, #432]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041aa:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80041ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b6:	4a68      	ldr	r2, [pc, #416]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041b8:	430b      	orrs	r3, r1
 80041ba:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80041bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c4:	2100      	movs	r1, #0
 80041c6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041ce:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80041d2:	460b      	mov	r3, r1
 80041d4:	4313      	orrs	r3, r2
 80041d6:	d011      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041dc:	3308      	adds	r3, #8
 80041de:	2100      	movs	r1, #0
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fb79 	bl	80048d8 <RCCEx_PLL2_Config>
 80041e6:	4603      	mov	r3, r0
 80041e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80041ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80041fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004204:	2100      	movs	r1, #0
 8004206:	6239      	str	r1, [r7, #32]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	627b      	str	r3, [r7, #36]	@ 0x24
 800420e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004212:	460b      	mov	r3, r1
 8004214:	4313      	orrs	r3, r2
 8004216:	d011      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800421c:	3308      	adds	r3, #8
 800421e:	2101      	movs	r1, #1
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fb59 	bl	80048d8 <RCCEx_PLL2_Config>
 8004226:	4603      	mov	r3, r0
 8004228:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800422c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004234:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004238:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800423c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004244:	2100      	movs	r1, #0
 8004246:	61b9      	str	r1, [r7, #24]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	61fb      	str	r3, [r7, #28]
 800424e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004252:	460b      	mov	r3, r1
 8004254:	4313      	orrs	r3, r2
 8004256:	d011      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800425c:	3308      	adds	r3, #8
 800425e:	2102      	movs	r1, #2
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fb39 	bl	80048d8 <RCCEx_PLL2_Config>
 8004266:	4603      	mov	r3, r0
 8004268:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800426c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004274:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004278:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800427c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004284:	2100      	movs	r1, #0
 8004286:	6139      	str	r1, [r7, #16]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004292:	460b      	mov	r3, r1
 8004294:	4313      	orrs	r3, r2
 8004296:	d011      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800429c:	3328      	adds	r3, #40	@ 0x28
 800429e:	2100      	movs	r1, #0
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 fbcb 	bl	8004a3c <RCCEx_PLL3_Config>
 80042a6:	4603      	mov	r3, r0
 80042a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80042ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80042bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c4:	2100      	movs	r1, #0
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80042d2:	460b      	mov	r3, r1
 80042d4:	4313      	orrs	r3, r2
 80042d6:	d011      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042dc:	3328      	adds	r3, #40	@ 0x28
 80042de:	2101      	movs	r1, #1
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fbab 	bl	8004a3c <RCCEx_PLL3_Config>
 80042e6:	4603      	mov	r3, r0
 80042e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80042ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80042fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004304:	2100      	movs	r1, #0
 8004306:	6039      	str	r1, [r7, #0]
 8004308:	f003 0320 	and.w	r3, r3, #32
 800430c:	607b      	str	r3, [r7, #4]
 800430e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004312:	460b      	mov	r3, r1
 8004314:	4313      	orrs	r3, r2
 8004316:	d011      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800431c:	3328      	adds	r3, #40	@ 0x28
 800431e:	2102      	movs	r1, #2
 8004320:	4618      	mov	r0, r3
 8004322:	f000 fb8b 	bl	8004a3c <RCCEx_PLL3_Config>
 8004326:	4603      	mov	r3, r0
 8004328:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800432c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004334:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004338:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800433c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004344:	2300      	movs	r3, #0
 8004346:	e000      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
}
 800434a:	4618      	mov	r0, r3
 800434c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004350:	46bd      	mov	sp, r7
 8004352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004356:	bf00      	nop
 8004358:	58024400 	.word	0x58024400

0800435c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004360:	f7fe fe00 	bl	8002f64 <HAL_RCC_GetHCLKFreq>
 8004364:	4602      	mov	r2, r0
 8004366:	4b06      	ldr	r3, [pc, #24]	@ (8004380 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	091b      	lsrs	r3, r3, #4
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	4904      	ldr	r1, [pc, #16]	@ (8004384 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004372:	5ccb      	ldrb	r3, [r1, r3]
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800437c:	4618      	mov	r0, r3
 800437e:	bd80      	pop	{r7, pc}
 8004380:	58024400 	.word	0x58024400
 8004384:	08009724 	.word	0x08009724

08004388 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004388:	b480      	push	{r7}
 800438a:	b089      	sub	sp, #36	@ 0x24
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004390:	4ba1      	ldr	r3, [pc, #644]	@ (8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004394:	f003 0303 	and.w	r3, r3, #3
 8004398:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800439a:	4b9f      	ldr	r3, [pc, #636]	@ (8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800439c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439e:	0b1b      	lsrs	r3, r3, #12
 80043a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80043a6:	4b9c      	ldr	r3, [pc, #624]	@ (8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043aa:	091b      	lsrs	r3, r3, #4
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80043b2:	4b99      	ldr	r3, [pc, #612]	@ (8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b6:	08db      	lsrs	r3, r3, #3
 80043b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	fb02 f303 	mul.w	r3, r2, r3
 80043c2:	ee07 3a90 	vmov	s15, r3
 80043c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 8111 	beq.w	80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	2b02      	cmp	r3, #2
 80043da:	f000 8083 	beq.w	80044e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	f200 80a1 	bhi.w	8004528 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d056      	beq.n	80044a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80043f2:	e099      	b.n	8004528 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043f4:	4b88      	ldr	r3, [pc, #544]	@ (8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d02d      	beq.n	800445c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004400:	4b85      	ldr	r3, [pc, #532]	@ (8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	08db      	lsrs	r3, r3, #3
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	4a84      	ldr	r2, [pc, #528]	@ (800461c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800440c:	fa22 f303 	lsr.w	r3, r2, r3
 8004410:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	ee07 3a90 	vmov	s15, r3
 8004418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	ee07 3a90 	vmov	s15, r3
 8004422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800442a:	4b7b      	ldr	r3, [pc, #492]	@ (8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800442c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800442e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800443a:	ed97 6a03 	vldr	s12, [r7, #12]
 800443e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004620 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800444a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800444e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004456:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800445a:	e087      	b.n	800456c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	ee07 3a90 	vmov	s15, r3
 8004462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004466:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800446a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800446e:	4b6a      	ldr	r3, [pc, #424]	@ (8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004476:	ee07 3a90 	vmov	s15, r3
 800447a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800447e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004482:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004620 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800448a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800448e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800449e:	e065      	b.n	800456c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	ee07 3a90 	vmov	s15, r3
 80044a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80044ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044b2:	4b59      	ldr	r3, [pc, #356]	@ (8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ba:	ee07 3a90 	vmov	s15, r3
 80044be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004620 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044e2:	e043      	b.n	800456c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	ee07 3a90 	vmov	s15, r3
 80044ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800462c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80044f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044f6:	4b48      	ldr	r3, [pc, #288]	@ (8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044fe:	ee07 3a90 	vmov	s15, r3
 8004502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004506:	ed97 6a03 	vldr	s12, [r7, #12]
 800450a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004620 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800450e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004516:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800451a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800451e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004522:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004526:	e021      	b.n	800456c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	ee07 3a90 	vmov	s15, r3
 800452e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004532:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800453a:	4b37      	ldr	r3, [pc, #220]	@ (8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800453c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004542:	ee07 3a90 	vmov	s15, r3
 8004546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800454a:	ed97 6a03 	vldr	s12, [r7, #12]
 800454e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004620 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800455a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800455e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004566:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800456a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800456c:	4b2a      	ldr	r3, [pc, #168]	@ (8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800456e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004570:	0a5b      	lsrs	r3, r3, #9
 8004572:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004576:	ee07 3a90 	vmov	s15, r3
 800457a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004582:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004586:	edd7 6a07 	vldr	s13, [r7, #28]
 800458a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800458e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004592:	ee17 2a90 	vmov	r2, s15
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800459a:	4b1f      	ldr	r3, [pc, #124]	@ (8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800459c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459e:	0c1b      	lsrs	r3, r3, #16
 80045a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045a4:	ee07 3a90 	vmov	s15, r3
 80045a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80045b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045c0:	ee17 2a90 	vmov	r2, s15
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80045c8:	4b13      	ldr	r3, [pc, #76]	@ (8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045cc:	0e1b      	lsrs	r3, r3, #24
 80045ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80045e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ee:	ee17 2a90 	vmov	r2, s15
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80045f6:	e008      	b.n	800460a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	609a      	str	r2, [r3, #8]
}
 800460a:	bf00      	nop
 800460c:	3724      	adds	r7, #36	@ 0x24
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	58024400 	.word	0x58024400
 800461c:	03d09000 	.word	0x03d09000
 8004620:	46000000 	.word	0x46000000
 8004624:	4c742400 	.word	0x4c742400
 8004628:	4a742400 	.word	0x4a742400
 800462c:	4af42400 	.word	0x4af42400

08004630 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004630:	b480      	push	{r7}
 8004632:	b089      	sub	sp, #36	@ 0x24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004638:	4ba1      	ldr	r3, [pc, #644]	@ (80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800463a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800463c:	f003 0303 	and.w	r3, r3, #3
 8004640:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004642:	4b9f      	ldr	r3, [pc, #636]	@ (80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004646:	0d1b      	lsrs	r3, r3, #20
 8004648:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800464c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800464e:	4b9c      	ldr	r3, [pc, #624]	@ (80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004652:	0a1b      	lsrs	r3, r3, #8
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800465a:	4b99      	ldr	r3, [pc, #612]	@ (80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800465c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465e:	08db      	lsrs	r3, r3, #3
 8004660:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	fb02 f303 	mul.w	r3, r2, r3
 800466a:	ee07 3a90 	vmov	s15, r3
 800466e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004672:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 8111 	beq.w	80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	2b02      	cmp	r3, #2
 8004682:	f000 8083 	beq.w	800478c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	2b02      	cmp	r3, #2
 800468a:	f200 80a1 	bhi.w	80047d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d056      	beq.n	8004748 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800469a:	e099      	b.n	80047d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800469c:	4b88      	ldr	r3, [pc, #544]	@ (80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0320 	and.w	r3, r3, #32
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d02d      	beq.n	8004704 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046a8:	4b85      	ldr	r3, [pc, #532]	@ (80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	08db      	lsrs	r3, r3, #3
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	4a84      	ldr	r2, [pc, #528]	@ (80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80046b4:	fa22 f303 	lsr.w	r3, r2, r3
 80046b8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	ee07 3a90 	vmov	s15, r3
 80046c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	ee07 3a90 	vmov	s15, r3
 80046ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046d2:	4b7b      	ldr	r3, [pc, #492]	@ (80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80048c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004702:	e087      	b.n	8004814 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	ee07 3a90 	vmov	s15, r3
 800470a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800470e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004716:	4b6a      	ldr	r3, [pc, #424]	@ (80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471e:	ee07 3a90 	vmov	s15, r3
 8004722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004726:	ed97 6a03 	vldr	s12, [r7, #12]
 800472a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80048c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800472e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004736:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800473a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800473e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004742:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004746:	e065      	b.n	8004814 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	ee07 3a90 	vmov	s15, r3
 800474e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004752:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80048d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800475a:	4b59      	ldr	r3, [pc, #356]	@ (80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004762:	ee07 3a90 	vmov	s15, r3
 8004766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800476a:	ed97 6a03 	vldr	s12, [r7, #12]
 800476e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80048c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800477a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800477e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004786:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800478a:	e043      	b.n	8004814 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	ee07 3a90 	vmov	s15, r3
 8004792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004796:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80048d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800479a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800479e:	4b48      	ldr	r3, [pc, #288]	@ (80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a6:	ee07 3a90 	vmov	s15, r3
 80047aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80047b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80048c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047ce:	e021      	b.n	8004814 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	ee07 3a90 	vmov	s15, r3
 80047d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80048d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80047de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e2:	4b37      	ldr	r3, [pc, #220]	@ (80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ea:	ee07 3a90 	vmov	s15, r3
 80047ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80048c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004802:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800480a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800480e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004812:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004814:	4b2a      	ldr	r3, [pc, #168]	@ (80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004818:	0a5b      	lsrs	r3, r3, #9
 800481a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004826:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800482a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800482e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800483a:	ee17 2a90 	vmov	r2, s15
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004842:	4b1f      	ldr	r3, [pc, #124]	@ (80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004846:	0c1b      	lsrs	r3, r3, #16
 8004848:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800484c:	ee07 3a90 	vmov	s15, r3
 8004850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004854:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004858:	ee37 7a87 	vadd.f32	s14, s15, s14
 800485c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004860:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004868:	ee17 2a90 	vmov	r2, s15
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004870:	4b13      	ldr	r3, [pc, #76]	@ (80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004874:	0e1b      	lsrs	r3, r3, #24
 8004876:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004882:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004886:	ee37 7a87 	vadd.f32	s14, s15, s14
 800488a:	edd7 6a07 	vldr	s13, [r7, #28]
 800488e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004896:	ee17 2a90 	vmov	r2, s15
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800489e:	e008      	b.n	80048b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	609a      	str	r2, [r3, #8]
}
 80048b2:	bf00      	nop
 80048b4:	3724      	adds	r7, #36	@ 0x24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	58024400 	.word	0x58024400
 80048c4:	03d09000 	.word	0x03d09000
 80048c8:	46000000 	.word	0x46000000
 80048cc:	4c742400 	.word	0x4c742400
 80048d0:	4a742400 	.word	0x4a742400
 80048d4:	4af42400 	.word	0x4af42400

080048d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048e6:	4b53      	ldr	r3, [pc, #332]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 80048e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d101      	bne.n	80048f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e099      	b.n	8004a2a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80048f6:	4b4f      	ldr	r3, [pc, #316]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a4e      	ldr	r2, [pc, #312]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 80048fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004902:	f7fc fea3 	bl	800164c <HAL_GetTick>
 8004906:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004908:	e008      	b.n	800491c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800490a:	f7fc fe9f 	bl	800164c <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e086      	b.n	8004a2a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800491c:	4b45      	ldr	r3, [pc, #276]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1f0      	bne.n	800490a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004928:	4b42      	ldr	r3, [pc, #264]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 800492a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	031b      	lsls	r3, r3, #12
 8004936:	493f      	ldr	r1, [pc, #252]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 8004938:	4313      	orrs	r3, r2
 800493a:	628b      	str	r3, [r1, #40]	@ 0x28
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	3b01      	subs	r3, #1
 8004942:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	3b01      	subs	r3, #1
 800494c:	025b      	lsls	r3, r3, #9
 800494e:	b29b      	uxth	r3, r3
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	3b01      	subs	r3, #1
 8004958:	041b      	lsls	r3, r3, #16
 800495a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	3b01      	subs	r3, #1
 8004966:	061b      	lsls	r3, r3, #24
 8004968:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800496c:	4931      	ldr	r1, [pc, #196]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 800496e:	4313      	orrs	r3, r2
 8004970:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004972:	4b30      	ldr	r3, [pc, #192]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 8004974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004976:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	492d      	ldr	r1, [pc, #180]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 8004980:	4313      	orrs	r3, r2
 8004982:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004984:	4b2b      	ldr	r3, [pc, #172]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 8004986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004988:	f023 0220 	bic.w	r2, r3, #32
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	4928      	ldr	r1, [pc, #160]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 8004992:	4313      	orrs	r3, r2
 8004994:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004996:	4b27      	ldr	r3, [pc, #156]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 8004998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499a:	4a26      	ldr	r2, [pc, #152]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 800499c:	f023 0310 	bic.w	r3, r3, #16
 80049a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80049a2:	4b24      	ldr	r3, [pc, #144]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 80049a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049a6:	4b24      	ldr	r3, [pc, #144]	@ (8004a38 <RCCEx_PLL2_Config+0x160>)
 80049a8:	4013      	ands	r3, r2
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	69d2      	ldr	r2, [r2, #28]
 80049ae:	00d2      	lsls	r2, r2, #3
 80049b0:	4920      	ldr	r1, [pc, #128]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80049b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 80049b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 80049bc:	f043 0310 	orr.w	r3, r3, #16
 80049c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d106      	bne.n	80049d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80049c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 80049ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049cc:	4a19      	ldr	r2, [pc, #100]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 80049ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80049d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80049d4:	e00f      	b.n	80049f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d106      	bne.n	80049ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80049dc:	4b15      	ldr	r3, [pc, #84]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 80049de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e0:	4a14      	ldr	r2, [pc, #80]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 80049e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80049e8:	e005      	b.n	80049f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80049ea:	4b12      	ldr	r3, [pc, #72]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 80049ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ee:	4a11      	ldr	r2, [pc, #68]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 80049f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80049f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80049f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 80049fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a02:	f7fc fe23 	bl	800164c <HAL_GetTick>
 8004a06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a08:	e008      	b.n	8004a1c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a0a:	f7fc fe1f 	bl	800164c <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e006      	b.n	8004a2a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a1c:	4b05      	ldr	r3, [pc, #20]	@ (8004a34 <RCCEx_PLL2_Config+0x15c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0f0      	beq.n	8004a0a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	58024400 	.word	0x58024400
 8004a38:	ffff0007 	.word	0xffff0007

08004a3c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a4a:	4b53      	ldr	r3, [pc, #332]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	2b03      	cmp	r3, #3
 8004a54:	d101      	bne.n	8004a5a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e099      	b.n	8004b8e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004a5a:	4b4f      	ldr	r3, [pc, #316]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a4e      	ldr	r2, [pc, #312]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004a60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a66:	f7fc fdf1 	bl	800164c <HAL_GetTick>
 8004a6a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a6c:	e008      	b.n	8004a80 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004a6e:	f7fc fded 	bl	800164c <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d901      	bls.n	8004a80 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e086      	b.n	8004b8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a80:	4b45      	ldr	r3, [pc, #276]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1f0      	bne.n	8004a6e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004a8c:	4b42      	ldr	r3, [pc, #264]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a90:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	051b      	lsls	r3, r3, #20
 8004a9a:	493f      	ldr	r1, [pc, #252]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	025b      	lsls	r3, r3, #9
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	041b      	lsls	r3, r3, #16
 8004abe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	061b      	lsls	r3, r3, #24
 8004acc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ad0:	4931      	ldr	r1, [pc, #196]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004ad6:	4b30      	ldr	r3, [pc, #192]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ada:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	492d      	ldr	r1, [pc, #180]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	4928      	ldr	r1, [pc, #160]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004afa:	4b27      	ldr	r3, [pc, #156]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004afe:	4a26      	ldr	r2, [pc, #152]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004b00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004b06:	4b24      	ldr	r3, [pc, #144]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004b08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b0a:	4b24      	ldr	r3, [pc, #144]	@ (8004b9c <RCCEx_PLL3_Config+0x160>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	69d2      	ldr	r2, [r2, #28]
 8004b12:	00d2      	lsls	r2, r2, #3
 8004b14:	4920      	ldr	r1, [pc, #128]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1e:	4a1e      	ldr	r2, [pc, #120]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d106      	bne.n	8004b3a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b30:	4a19      	ldr	r2, [pc, #100]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004b32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004b38:	e00f      	b.n	8004b5a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d106      	bne.n	8004b4e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004b40:	4b15      	ldr	r3, [pc, #84]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b44:	4a14      	ldr	r2, [pc, #80]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004b46:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004b4c:	e005      	b.n	8004b5a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004b4e:	4b12      	ldr	r3, [pc, #72]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b52:	4a11      	ldr	r2, [pc, #68]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004b54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b58:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a0e      	ldr	r2, [pc, #56]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b66:	f7fc fd71 	bl	800164c <HAL_GetTick>
 8004b6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b6c:	e008      	b.n	8004b80 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b6e:	f7fc fd6d 	bl	800164c <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e006      	b.n	8004b8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b80:	4b05      	ldr	r3, [pc, #20]	@ (8004b98 <RCCEx_PLL3_Config+0x15c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0f0      	beq.n	8004b6e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	58024400 	.word	0x58024400
 8004b9c:	ffff0007 	.word	0xffff0007

08004ba0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e10f      	b.n	8004dd2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a87      	ldr	r2, [pc, #540]	@ (8004ddc <HAL_SPI_Init+0x23c>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d00f      	beq.n	8004be2 <HAL_SPI_Init+0x42>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a86      	ldr	r2, [pc, #536]	@ (8004de0 <HAL_SPI_Init+0x240>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d00a      	beq.n	8004be2 <HAL_SPI_Init+0x42>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a84      	ldr	r2, [pc, #528]	@ (8004de4 <HAL_SPI_Init+0x244>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d005      	beq.n	8004be2 <HAL_SPI_Init+0x42>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	2b0f      	cmp	r3, #15
 8004bdc:	d901      	bls.n	8004be2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e0f7      	b.n	8004dd2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fdee 	bl	80057c4 <SPI_GetPacketSize>
 8004be8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a7b      	ldr	r2, [pc, #492]	@ (8004ddc <HAL_SPI_Init+0x23c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00c      	beq.n	8004c0e <HAL_SPI_Init+0x6e>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a79      	ldr	r2, [pc, #484]	@ (8004de0 <HAL_SPI_Init+0x240>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d007      	beq.n	8004c0e <HAL_SPI_Init+0x6e>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a78      	ldr	r2, [pc, #480]	@ (8004de4 <HAL_SPI_Init+0x244>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d002      	beq.n	8004c0e <HAL_SPI_Init+0x6e>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2b08      	cmp	r3, #8
 8004c0c:	d811      	bhi.n	8004c32 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004c12:	4a72      	ldr	r2, [pc, #456]	@ (8004ddc <HAL_SPI_Init+0x23c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d009      	beq.n	8004c2c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a70      	ldr	r2, [pc, #448]	@ (8004de0 <HAL_SPI_Init+0x240>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d004      	beq.n	8004c2c <HAL_SPI_Init+0x8c>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a6f      	ldr	r2, [pc, #444]	@ (8004de4 <HAL_SPI_Init+0x244>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d104      	bne.n	8004c36 <HAL_SPI_Init+0x96>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b10      	cmp	r3, #16
 8004c30:	d901      	bls.n	8004c36 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e0cd      	b.n	8004dd2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d106      	bne.n	8004c50 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7fc f99e 	bl	8000f8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0201 	bic.w	r2, r2, #1
 8004c66:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8004c72:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c7c:	d119      	bne.n	8004cb2 <HAL_SPI_Init+0x112>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c86:	d103      	bne.n	8004c90 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d008      	beq.n	8004ca2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10c      	bne.n	8004cb2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004c9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ca0:	d107      	bne.n	8004cb2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004cb0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00f      	beq.n	8004cde <HAL_SPI_Init+0x13e>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	2b06      	cmp	r3, #6
 8004cc4:	d90b      	bls.n	8004cde <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	e007      	b.n	8004cee <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004cec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69da      	ldr	r2, [r3, #28]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d00:	ea42 0103 	orr.w	r1, r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d4e:	ea42 0103 	orr.w	r1, r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d113      	bne.n	8004d8e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d78:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d8c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0201 	bic.w	r2, r2, #1
 8004d9c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00a      	beq.n	8004dc0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	40013000 	.word	0x40013000
 8004de0:	40003800 	.word	0x40003800
 8004de4:	40003c00 	.word	0x40003c00

08004de8 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size   : amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	807b      	strh	r3, [r7, #2]
  uint32_t tmp_TxXferCount;
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3320      	adds	r3, #32
 8004dfc:	613b      	str	r3, [r7, #16]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d001      	beq.n	8004e0e <HAL_SPI_TransmitReceive_IT+0x26>
  {
    return HAL_BUSY;
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e0e9      	b.n	8004fe2 <HAL_SPI_TransmitReceive_IT+0x1fa>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d005      	beq.n	8004e20 <HAL_SPI_TransmitReceive_IT+0x38>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <HAL_SPI_TransmitReceive_IT+0x38>
 8004e1a:	887b      	ldrh	r3, [r7, #2]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <HAL_SPI_TransmitReceive_IT+0x3c>
  {
    return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e0de      	b.n	8004fe2 <HAL_SPI_TransmitReceive_IT+0x1fa>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d101      	bne.n	8004e32 <HAL_SPI_TransmitReceive_IT+0x4a>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	e0d7      	b.n	8004fe2 <HAL_SPI_TransmitReceive_IT+0x1fa>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2205      	movs	r2, #5
 8004e3e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	887a      	ldrh	r2, [r7, #2]
 8004e54:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	887a      	ldrh	r2, [r7, #2]
 8004e5c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	887a      	ldrh	r2, [r7, #2]
 8004e6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	887a      	ldrh	r2, [r7, #2]
 8004e72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  tmp_TxXferCount   = hspi->TxXferCount;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	617b      	str	r3, [r7, #20]
  hspi->Reload.pTxBuffPtr  = NULL;
  hspi->Reload.TxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	2b0f      	cmp	r3, #15
 8004e86:	d906      	bls.n	8004e96 <HAL_SPI_TransmitReceive_IT+0xae>
  {
    hspi->TxISR     = SPI_TxISR_32BIT;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4a59      	ldr	r2, [pc, #356]	@ (8004ff0 <HAL_SPI_TransmitReceive_IT+0x208>)
 8004e8c:	675a      	str	r2, [r3, #116]	@ 0x74
    hspi->RxISR     = SPI_RxISR_32BIT;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4a58      	ldr	r2, [pc, #352]	@ (8004ff4 <HAL_SPI_TransmitReceive_IT+0x20c>)
 8004e92:	671a      	str	r2, [r3, #112]	@ 0x70
 8004e94:	e010      	b.n	8004eb8 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	2b07      	cmp	r3, #7
 8004e9c:	d906      	bls.n	8004eac <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_RxISR_16BIT;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4a55      	ldr	r2, [pc, #340]	@ (8004ff8 <HAL_SPI_TransmitReceive_IT+0x210>)
 8004ea2:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->TxISR     = SPI_TxISR_16BIT;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4a55      	ldr	r2, [pc, #340]	@ (8004ffc <HAL_SPI_TransmitReceive_IT+0x214>)
 8004ea8:	675a      	str	r2, [r3, #116]	@ 0x74
 8004eaa:	e005      	b.n	8004eb8 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_RxISR_8BIT;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4a54      	ldr	r2, [pc, #336]	@ (8005000 <HAL_SPI_TransmitReceive_IT+0x218>)
 8004eb0:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->TxISR     = SPI_TxISR_8BIT;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4a53      	ldr	r2, [pc, #332]	@ (8005004 <HAL_SPI_TransmitReceive_IT+0x21c>)
 8004eb6:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8004ec6:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	4b4e      	ldr	r3, [pc, #312]	@ (8005008 <HAL_SPI_TransmitReceive_IT+0x220>)
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	8879      	ldrh	r1, [r7, #2]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	6812      	ldr	r2, [r2, #0]
 8004ed8:	430b      	orrs	r3, r1
 8004eda:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0201 	orr.w	r2, r2, #1
 8004eea:	601a      	str	r2, [r3, #0]

  /* Fill in the TxFIFO */
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 8004eec:	e054      	b.n	8004f98 <HAL_SPI_TransmitReceive_IT+0x1b0>
  {
    /* Transmit data in 32 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	2b0f      	cmp	r3, #15
 8004ef4:	d919      	bls.n	8004f2a <HAL_SPI_TransmitReceive_IT+0x142>
    {
      *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6812      	ldr	r2, [r2, #0]
 8004f00:	621a      	str	r2, [r3, #32]
      hspi->pTxBuffPtr += sizeof(uint32_t);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f06:	1d1a      	adds	r2, r3, #4
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	e036      	b.n	8004f98 <HAL_SPI_TransmitReceive_IT+0x1b0>
    }
    /* Transmit data in 16 Bit mode */
    else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	2b07      	cmp	r3, #7
 8004f30:	d918      	bls.n	8004f64 <HAL_SPI_TransmitReceive_IT+0x17c>
    {
#if defined (__GNUC__)
      *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f36:	881a      	ldrh	r2, [r3, #0]
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	801a      	strh	r2, [r3, #0]
#else
      *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f40:	1c9a      	adds	r2, r3, #2
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	e019      	b.n	8004f98 <HAL_SPI_TransmitReceive_IT+0x1b0>
    }
    /* Transmit data in 8 Bit mode */
    else
    {
      *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3320      	adds	r3, #32
 8004f6e:	7812      	ldrb	r2, [r2, #0]
 8004f70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d102      	bne.n	8004fac <HAL_SPI_TransmitReceive_IT+0x1c4>
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1a0      	bne.n	8004eee <HAL_SPI_TransmitReceive_IT+0x106>
    }
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, DXP, UDR, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR |
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6919      	ldr	r1, [r3, #16]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	f240 736c 	movw	r3, #1900	@ 0x76c
 8004fc2:	430b      	orrs	r3, r1
 8004fc4:	6113      	str	r3, [r2, #16]
                             SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fce:	d107      	bne.n	8004fe0 <HAL_SPI_TransmitReceive_IT+0x1f8>
  {
    /* Start Master transfer */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fde:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	371c      	adds	r7, #28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	0800562b 	.word	0x0800562b
 8004ff4:	0800551b 	.word	0x0800551b
 8004ff8:	080054bb 	.word	0x080054bb
 8004ffc:	080055cd 	.word	0x080055cd
 8005000:	0800545d 	.word	0x0800545d
 8005004:	08005573 	.word	0x08005573
 8005008:	ffff0000 	.word	0xffff0000

0800500c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b08a      	sub	sp, #40	@ 0x28
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8005024:	6a3a      	ldr	r2, [r7, #32]
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	4013      	ands	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8005034:	2300      	movs	r3, #0
 8005036:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800503e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3330      	adds	r3, #48	@ 0x30
 8005046:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800504e:	2b00      	cmp	r3, #0
 8005050:	d010      	beq.n	8005074 <HAL_SPI_IRQHandler+0x68>
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00b      	beq.n	8005074 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	699a      	ldr	r2, [r3, #24]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800506a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f9c3 	bl	80053f8 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8005072:	e192      	b.n	800539a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800507a:	2b00      	cmp	r3, #0
 800507c:	d113      	bne.n	80050a6 <HAL_SPI_IRQHandler+0x9a>
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	f003 0320 	and.w	r3, r3, #32
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10e      	bne.n	80050a6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800508e:	2b00      	cmp	r3, #0
 8005090:	d009      	beq.n	80050a6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	4798      	blx	r3
    hspi->RxISR(hspi);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	4798      	blx	r3
    handled = 1UL;
 80050a2:	2301      	movs	r3, #1
 80050a4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10f      	bne.n	80050d0 <HAL_SPI_IRQHandler+0xc4>
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d105      	bne.n	80050d0 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	4798      	blx	r3
    handled = 1UL;
 80050cc:	2301      	movs	r3, #1
 80050ce:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10f      	bne.n	80050fa <HAL_SPI_IRQHandler+0xee>
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d105      	bne.n	80050fa <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	4798      	blx	r3
    handled = 1UL;
 80050f6:	2301      	movs	r3, #1
 80050f8:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f040 8147 	bne.w	8005390 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 808b 	beq.w	8005224 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	699a      	ldr	r2, [r3, #24]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f042 0208 	orr.w	r2, r2, #8
 800511c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	699a      	ldr	r2, [r3, #24]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0210 	orr.w	r2, r2, #16
 800512c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	699a      	ldr	r2, [r3, #24]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800513c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0208 	bic.w	r2, r2, #8
 800514c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d13d      	bne.n	80051d8 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800515c:	e036      	b.n	80051cc <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	2b0f      	cmp	r3, #15
 8005164:	d90b      	bls.n	800517e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800516e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005170:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005176:	1d1a      	adds	r2, r3, #4
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	665a      	str	r2, [r3, #100]	@ 0x64
 800517c:	e01d      	b.n	80051ba <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	2b07      	cmp	r3, #7
 8005184:	d90b      	bls.n	800519e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	8812      	ldrh	r2, [r2, #0]
 800518e:	b292      	uxth	r2, r2
 8005190:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005196:	1c9a      	adds	r2, r3, #2
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	665a      	str	r2, [r3, #100]	@ 0x64
 800519c:	e00d      	b.n	80051ba <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051aa:	7812      	ldrb	r2, [r2, #0]
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051b4:	1c5a      	adds	r2, r3, #1
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1c2      	bne.n	800515e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fa53 	bl	8005684 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d003      	beq.n	80051f8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f8f7 	bl	80053e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80051f6:	e0d0      	b.n	800539a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80051f8:	7cfb      	ldrb	r3, [r7, #19]
 80051fa:	2b05      	cmp	r3, #5
 80051fc:	d103      	bne.n	8005206 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f8e6 	bl	80053d0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8005204:	e0c6      	b.n	8005394 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8005206:	7cfb      	ldrb	r3, [r7, #19]
 8005208:	2b04      	cmp	r3, #4
 800520a:	d103      	bne.n	8005214 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f8d5 	bl	80053bc <HAL_SPI_RxCpltCallback>
    return;
 8005212:	e0bf      	b.n	8005394 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8005214:	7cfb      	ldrb	r3, [r7, #19]
 8005216:	2b03      	cmp	r3, #3
 8005218:	f040 80bc 	bne.w	8005394 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f8c3 	bl	80053a8 <HAL_SPI_TxCpltCallback>
    return;
 8005222:	e0b7      	b.n	8005394 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 80b5 	beq.w	800539a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00f      	beq.n	800525a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005240:	f043 0204 	orr.w	r2, r3, #4
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	699a      	ldr	r2, [r3, #24]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005258:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00f      	beq.n	8005284 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800526a:	f043 0201 	orr.w	r2, r3, #1
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699a      	ldr	r2, [r3, #24]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005282:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00f      	beq.n	80052ae <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005294:	f043 0208 	orr.w	r2, r3, #8
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	699a      	ldr	r2, [r3, #24]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052ac:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	f003 0320 	and.w	r3, r3, #32
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00f      	beq.n	80052d8 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699a      	ldr	r2, [r3, #24]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0220 	orr.w	r2, r2, #32
 80052d6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d05a      	beq.n	8005398 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0201 	bic.w	r2, r2, #1
 80052f0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6919      	ldr	r1, [r3, #16]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	4b28      	ldr	r3, [pc, #160]	@ (80053a0 <HAL_SPI_IRQHandler+0x394>)
 80052fe:	400b      	ands	r3, r1
 8005300:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005308:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800530c:	d138      	bne.n	8005380 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800531c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005322:	2b00      	cmp	r3, #0
 8005324:	d013      	beq.n	800534e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800532a:	4a1e      	ldr	r2, [pc, #120]	@ (80053a4 <HAL_SPI_IRQHandler+0x398>)
 800532c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005332:	4618      	mov	r0, r3
 8005334:	f7fc faca 	bl	80018cc <HAL_DMA_Abort_IT>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d007      	beq.n	800534e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005344:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005352:	2b00      	cmp	r3, #0
 8005354:	d020      	beq.n	8005398 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800535a:	4a12      	ldr	r2, [pc, #72]	@ (80053a4 <HAL_SPI_IRQHandler+0x398>)
 800535c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005362:	4618      	mov	r0, r3
 8005364:	f7fc fab2 	bl	80018cc <HAL_DMA_Abort_IT>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d014      	beq.n	8005398 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005374:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800537e:	e00b      	b.n	8005398 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f82b 	bl	80053e4 <HAL_SPI_ErrorCallback>
    return;
 800538e:	e003      	b.n	8005398 <HAL_SPI_IRQHandler+0x38c>
    return;
 8005390:	bf00      	nop
 8005392:	e002      	b.n	800539a <HAL_SPI_IRQHandler+0x38e>
    return;
 8005394:	bf00      	nop
 8005396:	e000      	b.n	800539a <HAL_SPI_IRQHandler+0x38e>
    return;
 8005398:	bf00      	nop
  }
}
 800539a:	3728      	adds	r7, #40	@ 0x28
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	fffffc94 	.word	0xfffffc94
 80053a4:	08005429 	.word	0x08005429

080053a8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800541a:	b2db      	uxtb	r3, r3
}
 800541c:	4618      	mov	r0, r3
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005434:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f7ff ffc8 	bl	80053e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005454:	bf00      	nop
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005470:	7812      	ldrb	r2, [r2, #0]
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005486:	b29b      	uxth	r3, r3
 8005488:	3b01      	subs	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005498:	b29b      	uxth	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d107      	bne.n	80054ae <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0201 	bic.w	r2, r2, #1
 80054ac:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b085      	sub	sp, #20
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3330      	adds	r3, #48	@ 0x30
 80054c8:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	8812      	ldrh	r2, [r2, #0]
 80054d2:	b292      	uxth	r2, r2
 80054d4:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054da:	1c9a      	adds	r2, r3, #2
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	3b01      	subs	r3, #1
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d107      	bne.n	800550e <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	691a      	ldr	r2, [r3, #16]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 0201 	bic.w	r2, r2, #1
 800550c:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800550e:	bf00      	nop
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800552a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800552c:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005532:	1d1a      	adds	r2, r3, #4
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800553e:	b29b      	uxth	r3, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005550:	b29b      	uxth	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d107      	bne.n	8005566 <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 0201 	bic.w	r2, r2, #1
 8005564:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8005566:	bf00      	nop
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((const uint8_t *)hspi->pTxBuffPtr);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3320      	adds	r3, #32
 8005584:	7812      	ldrb	r2, [r2, #0]
 8005586:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005598:	b29b      	uxth	r3, r3
 800559a:	3b01      	subs	r3, #1
 800559c:	b29a      	uxth	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d107      	bne.n	80055c0 <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	691a      	ldr	r2, [r3, #16]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0202 	bic.w	r2, r2, #2
 80055be:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3320      	adds	r3, #32
 80055da:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055e0:	881a      	ldrh	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ea:	1c9a      	adds	r2, r3, #2
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005608:	b29b      	uxth	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d107      	bne.n	800561e <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0202 	bic.w	r2, r2, #2
 800561c:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800561e:	bf00      	nop
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6812      	ldr	r2, [r2, #0]
 800563c:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005642:	1d1a      	adds	r2, r3, #4
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800564e:	b29b      	uxth	r3, r3
 8005650:	3b01      	subs	r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005660:	b29b      	uxth	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d107      	bne.n	8005676 <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0202 	bic.w	r2, r2, #2
 8005674:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
	...

08005684 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699a      	ldr	r2, [r3, #24]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f042 0208 	orr.w	r2, r2, #8
 80056a2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699a      	ldr	r2, [r3, #24]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0210 	orr.w	r2, r2, #16
 80056b2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0201 	bic.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6919      	ldr	r1, [r3, #16]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	4b3c      	ldr	r3, [pc, #240]	@ (80057c0 <SPI_CloseTransfer+0x13c>)
 80056d0:	400b      	ands	r3, r1
 80056d2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689a      	ldr	r2, [r3, #8]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80056e2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b04      	cmp	r3, #4
 80056ee:	d014      	beq.n	800571a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f003 0320 	and.w	r3, r3, #32
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00f      	beq.n	800571a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005700:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	699a      	ldr	r2, [r3, #24]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f042 0220 	orr.w	r2, r2, #32
 8005718:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b03      	cmp	r3, #3
 8005724:	d014      	beq.n	8005750 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00f      	beq.n	8005750 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005736:	f043 0204 	orr.w	r2, r3, #4
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699a      	ldr	r2, [r3, #24]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800574e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00f      	beq.n	800577a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005760:	f043 0201 	orr.w	r2, r3, #1
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	699a      	ldr	r2, [r3, #24]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005778:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00f      	beq.n	80057a4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800578a:	f043 0208 	orr.w	r2, r3, #8
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057a2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80057b4:	bf00      	nop
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	fffffc90 	.word	0xfffffc90

080057c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d0:	095b      	lsrs	r3, r3, #5
 80057d2:	3301      	adds	r3, #1
 80057d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	3301      	adds	r3, #1
 80057dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	3307      	adds	r3, #7
 80057e2:	08db      	lsrs	r3, r3, #3
 80057e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	fb02 f303 	mul.w	r3, r2, r3
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b082      	sub	sp, #8
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e042      	b.n	8005892 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7fb fdfa 	bl	8001418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2224      	movs	r2, #36	@ 0x24
 8005828:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0201 	bic.w	r2, r2, #1
 800583a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 ff23 	bl	8006690 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f8b4 	bl	80059b8 <UART_SetConfig>
 8005850:	4603      	mov	r3, r0
 8005852:	2b01      	cmp	r3, #1
 8005854:	d101      	bne.n	800585a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e01b      	b.n	8005892 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005868:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005878:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0201 	orr.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 ffa2 	bl	80067d4 <UART_CheckIdleState>
 8005890:	4603      	mov	r3, r0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b08a      	sub	sp, #40	@ 0x28
 800589e:	af02      	add	r7, sp, #8
 80058a0:	60f8      	str	r0, [r7, #12]
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	603b      	str	r3, [r7, #0]
 80058a6:	4613      	mov	r3, r2
 80058a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	d17b      	bne.n	80059ac <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <HAL_UART_Transmit+0x26>
 80058ba:	88fb      	ldrh	r3, [r7, #6]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e074      	b.n	80059ae <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2221      	movs	r2, #33	@ 0x21
 80058d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058d4:	f7fb feba 	bl	800164c <HAL_GetTick>
 80058d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	88fa      	ldrh	r2, [r7, #6]
 80058de:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	88fa      	ldrh	r2, [r7, #6]
 80058e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058f2:	d108      	bne.n	8005906 <HAL_UART_Transmit+0x6c>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d104      	bne.n	8005906 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80058fc:	2300      	movs	r3, #0
 80058fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	e003      	b.n	800590e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800590a:	2300      	movs	r3, #0
 800590c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800590e:	e030      	b.n	8005972 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	2200      	movs	r2, #0
 8005918:	2180      	movs	r1, #128	@ 0x80
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f001 f804 	bl	8006928 <UART_WaitOnFlagUntilTimeout>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d005      	beq.n	8005932 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2220      	movs	r2, #32
 800592a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e03d      	b.n	80059ae <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10b      	bne.n	8005950 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	461a      	mov	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005946:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	3302      	adds	r3, #2
 800594c:	61bb      	str	r3, [r7, #24]
 800594e:	e007      	b.n	8005960 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	781a      	ldrb	r2, [r3, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	3301      	adds	r3, #1
 800595e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005966:	b29b      	uxth	r3, r3
 8005968:	3b01      	subs	r3, #1
 800596a:	b29a      	uxth	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005978:	b29b      	uxth	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1c8      	bne.n	8005910 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2200      	movs	r2, #0
 8005986:	2140      	movs	r1, #64	@ 0x40
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 ffcd 	bl	8006928 <UART_WaitOnFlagUntilTimeout>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d005      	beq.n	80059a0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2220      	movs	r2, #32
 8005998:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e006      	b.n	80059ae <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80059a8:	2300      	movs	r3, #0
 80059aa:	e000      	b.n	80059ae <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80059ac:	2302      	movs	r3, #2
  }
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3720      	adds	r7, #32
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
	...

080059b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059bc:	b092      	sub	sp, #72	@ 0x48
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	431a      	orrs	r2, r3
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	4313      	orrs	r3, r2
 80059de:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	4bbe      	ldr	r3, [pc, #760]	@ (8005ce0 <UART_SetConfig+0x328>)
 80059e8:	4013      	ands	r3, r2
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	6812      	ldr	r2, [r2, #0]
 80059ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80059f0:	430b      	orrs	r3, r1
 80059f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4ab3      	ldr	r2, [pc, #716]	@ (8005ce4 <UART_SetConfig+0x32c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d004      	beq.n	8005a24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a20:	4313      	orrs	r3, r2
 8005a22:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	4baf      	ldr	r3, [pc, #700]	@ (8005ce8 <UART_SetConfig+0x330>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	6812      	ldr	r2, [r2, #0]
 8005a32:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005a34:	430b      	orrs	r3, r1
 8005a36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a3e:	f023 010f 	bic.w	r1, r3, #15
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4aa6      	ldr	r2, [pc, #664]	@ (8005cec <UART_SetConfig+0x334>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d177      	bne.n	8005b48 <UART_SetConfig+0x190>
 8005a58:	4ba5      	ldr	r3, [pc, #660]	@ (8005cf0 <UART_SetConfig+0x338>)
 8005a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a60:	2b28      	cmp	r3, #40	@ 0x28
 8005a62:	d86d      	bhi.n	8005b40 <UART_SetConfig+0x188>
 8005a64:	a201      	add	r2, pc, #4	@ (adr r2, 8005a6c <UART_SetConfig+0xb4>)
 8005a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6a:	bf00      	nop
 8005a6c:	08005b11 	.word	0x08005b11
 8005a70:	08005b41 	.word	0x08005b41
 8005a74:	08005b41 	.word	0x08005b41
 8005a78:	08005b41 	.word	0x08005b41
 8005a7c:	08005b41 	.word	0x08005b41
 8005a80:	08005b41 	.word	0x08005b41
 8005a84:	08005b41 	.word	0x08005b41
 8005a88:	08005b41 	.word	0x08005b41
 8005a8c:	08005b19 	.word	0x08005b19
 8005a90:	08005b41 	.word	0x08005b41
 8005a94:	08005b41 	.word	0x08005b41
 8005a98:	08005b41 	.word	0x08005b41
 8005a9c:	08005b41 	.word	0x08005b41
 8005aa0:	08005b41 	.word	0x08005b41
 8005aa4:	08005b41 	.word	0x08005b41
 8005aa8:	08005b41 	.word	0x08005b41
 8005aac:	08005b21 	.word	0x08005b21
 8005ab0:	08005b41 	.word	0x08005b41
 8005ab4:	08005b41 	.word	0x08005b41
 8005ab8:	08005b41 	.word	0x08005b41
 8005abc:	08005b41 	.word	0x08005b41
 8005ac0:	08005b41 	.word	0x08005b41
 8005ac4:	08005b41 	.word	0x08005b41
 8005ac8:	08005b41 	.word	0x08005b41
 8005acc:	08005b29 	.word	0x08005b29
 8005ad0:	08005b41 	.word	0x08005b41
 8005ad4:	08005b41 	.word	0x08005b41
 8005ad8:	08005b41 	.word	0x08005b41
 8005adc:	08005b41 	.word	0x08005b41
 8005ae0:	08005b41 	.word	0x08005b41
 8005ae4:	08005b41 	.word	0x08005b41
 8005ae8:	08005b41 	.word	0x08005b41
 8005aec:	08005b31 	.word	0x08005b31
 8005af0:	08005b41 	.word	0x08005b41
 8005af4:	08005b41 	.word	0x08005b41
 8005af8:	08005b41 	.word	0x08005b41
 8005afc:	08005b41 	.word	0x08005b41
 8005b00:	08005b41 	.word	0x08005b41
 8005b04:	08005b41 	.word	0x08005b41
 8005b08:	08005b41 	.word	0x08005b41
 8005b0c:	08005b39 	.word	0x08005b39
 8005b10:	2301      	movs	r3, #1
 8005b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b16:	e326      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005b18:	2304      	movs	r3, #4
 8005b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b1e:	e322      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005b20:	2308      	movs	r3, #8
 8005b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b26:	e31e      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005b28:	2310      	movs	r3, #16
 8005b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b2e:	e31a      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005b30:	2320      	movs	r3, #32
 8005b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b36:	e316      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005b38:	2340      	movs	r3, #64	@ 0x40
 8005b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b3e:	e312      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005b40:	2380      	movs	r3, #128	@ 0x80
 8005b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b46:	e30e      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a69      	ldr	r2, [pc, #420]	@ (8005cf4 <UART_SetConfig+0x33c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d130      	bne.n	8005bb4 <UART_SetConfig+0x1fc>
 8005b52:	4b67      	ldr	r3, [pc, #412]	@ (8005cf0 <UART_SetConfig+0x338>)
 8005b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b56:	f003 0307 	and.w	r3, r3, #7
 8005b5a:	2b05      	cmp	r3, #5
 8005b5c:	d826      	bhi.n	8005bac <UART_SetConfig+0x1f4>
 8005b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b64 <UART_SetConfig+0x1ac>)
 8005b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b64:	08005b7d 	.word	0x08005b7d
 8005b68:	08005b85 	.word	0x08005b85
 8005b6c:	08005b8d 	.word	0x08005b8d
 8005b70:	08005b95 	.word	0x08005b95
 8005b74:	08005b9d 	.word	0x08005b9d
 8005b78:	08005ba5 	.word	0x08005ba5
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b82:	e2f0      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005b84:	2304      	movs	r3, #4
 8005b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b8a:	e2ec      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005b8c:	2308      	movs	r3, #8
 8005b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b92:	e2e8      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005b94:	2310      	movs	r3, #16
 8005b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b9a:	e2e4      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005b9c:	2320      	movs	r3, #32
 8005b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ba2:	e2e0      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005ba4:	2340      	movs	r3, #64	@ 0x40
 8005ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005baa:	e2dc      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005bac:	2380      	movs	r3, #128	@ 0x80
 8005bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bb2:	e2d8      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a4f      	ldr	r2, [pc, #316]	@ (8005cf8 <UART_SetConfig+0x340>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d130      	bne.n	8005c20 <UART_SetConfig+0x268>
 8005bbe:	4b4c      	ldr	r3, [pc, #304]	@ (8005cf0 <UART_SetConfig+0x338>)
 8005bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc2:	f003 0307 	and.w	r3, r3, #7
 8005bc6:	2b05      	cmp	r3, #5
 8005bc8:	d826      	bhi.n	8005c18 <UART_SetConfig+0x260>
 8005bca:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd0 <UART_SetConfig+0x218>)
 8005bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd0:	08005be9 	.word	0x08005be9
 8005bd4:	08005bf1 	.word	0x08005bf1
 8005bd8:	08005bf9 	.word	0x08005bf9
 8005bdc:	08005c01 	.word	0x08005c01
 8005be0:	08005c09 	.word	0x08005c09
 8005be4:	08005c11 	.word	0x08005c11
 8005be8:	2300      	movs	r3, #0
 8005bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bee:	e2ba      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bf6:	e2b6      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005bf8:	2308      	movs	r3, #8
 8005bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bfe:	e2b2      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005c00:	2310      	movs	r3, #16
 8005c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c06:	e2ae      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005c08:	2320      	movs	r3, #32
 8005c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c0e:	e2aa      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005c10:	2340      	movs	r3, #64	@ 0x40
 8005c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c16:	e2a6      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005c18:	2380      	movs	r3, #128	@ 0x80
 8005c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c1e:	e2a2      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a35      	ldr	r2, [pc, #212]	@ (8005cfc <UART_SetConfig+0x344>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d130      	bne.n	8005c8c <UART_SetConfig+0x2d4>
 8005c2a:	4b31      	ldr	r3, [pc, #196]	@ (8005cf0 <UART_SetConfig+0x338>)
 8005c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2e:	f003 0307 	and.w	r3, r3, #7
 8005c32:	2b05      	cmp	r3, #5
 8005c34:	d826      	bhi.n	8005c84 <UART_SetConfig+0x2cc>
 8005c36:	a201      	add	r2, pc, #4	@ (adr r2, 8005c3c <UART_SetConfig+0x284>)
 8005c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3c:	08005c55 	.word	0x08005c55
 8005c40:	08005c5d 	.word	0x08005c5d
 8005c44:	08005c65 	.word	0x08005c65
 8005c48:	08005c6d 	.word	0x08005c6d
 8005c4c:	08005c75 	.word	0x08005c75
 8005c50:	08005c7d 	.word	0x08005c7d
 8005c54:	2300      	movs	r3, #0
 8005c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c5a:	e284      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005c5c:	2304      	movs	r3, #4
 8005c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c62:	e280      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005c64:	2308      	movs	r3, #8
 8005c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c6a:	e27c      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005c6c:	2310      	movs	r3, #16
 8005c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c72:	e278      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005c74:	2320      	movs	r3, #32
 8005c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c7a:	e274      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005c7c:	2340      	movs	r3, #64	@ 0x40
 8005c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c82:	e270      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005c84:	2380      	movs	r3, #128	@ 0x80
 8005c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c8a:	e26c      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a1b      	ldr	r2, [pc, #108]	@ (8005d00 <UART_SetConfig+0x348>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d142      	bne.n	8005d1c <UART_SetConfig+0x364>
 8005c96:	4b16      	ldr	r3, [pc, #88]	@ (8005cf0 <UART_SetConfig+0x338>)
 8005c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c9a:	f003 0307 	and.w	r3, r3, #7
 8005c9e:	2b05      	cmp	r3, #5
 8005ca0:	d838      	bhi.n	8005d14 <UART_SetConfig+0x35c>
 8005ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca8 <UART_SetConfig+0x2f0>)
 8005ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca8:	08005cc1 	.word	0x08005cc1
 8005cac:	08005cc9 	.word	0x08005cc9
 8005cb0:	08005cd1 	.word	0x08005cd1
 8005cb4:	08005cd9 	.word	0x08005cd9
 8005cb8:	08005d05 	.word	0x08005d05
 8005cbc:	08005d0d 	.word	0x08005d0d
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cc6:	e24e      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005cc8:	2304      	movs	r3, #4
 8005cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cce:	e24a      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005cd0:	2308      	movs	r3, #8
 8005cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cd6:	e246      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005cd8:	2310      	movs	r3, #16
 8005cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cde:	e242      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005ce0:	cfff69f3 	.word	0xcfff69f3
 8005ce4:	58000c00 	.word	0x58000c00
 8005ce8:	11fff4ff 	.word	0x11fff4ff
 8005cec:	40011000 	.word	0x40011000
 8005cf0:	58024400 	.word	0x58024400
 8005cf4:	40004400 	.word	0x40004400
 8005cf8:	40004800 	.word	0x40004800
 8005cfc:	40004c00 	.word	0x40004c00
 8005d00:	40005000 	.word	0x40005000
 8005d04:	2320      	movs	r3, #32
 8005d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d0a:	e22c      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005d0c:	2340      	movs	r3, #64	@ 0x40
 8005d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d12:	e228      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005d14:	2380      	movs	r3, #128	@ 0x80
 8005d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d1a:	e224      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4ab1      	ldr	r2, [pc, #708]	@ (8005fe8 <UART_SetConfig+0x630>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d176      	bne.n	8005e14 <UART_SetConfig+0x45c>
 8005d26:	4bb1      	ldr	r3, [pc, #708]	@ (8005fec <UART_SetConfig+0x634>)
 8005d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d2e:	2b28      	cmp	r3, #40	@ 0x28
 8005d30:	d86c      	bhi.n	8005e0c <UART_SetConfig+0x454>
 8005d32:	a201      	add	r2, pc, #4	@ (adr r2, 8005d38 <UART_SetConfig+0x380>)
 8005d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d38:	08005ddd 	.word	0x08005ddd
 8005d3c:	08005e0d 	.word	0x08005e0d
 8005d40:	08005e0d 	.word	0x08005e0d
 8005d44:	08005e0d 	.word	0x08005e0d
 8005d48:	08005e0d 	.word	0x08005e0d
 8005d4c:	08005e0d 	.word	0x08005e0d
 8005d50:	08005e0d 	.word	0x08005e0d
 8005d54:	08005e0d 	.word	0x08005e0d
 8005d58:	08005de5 	.word	0x08005de5
 8005d5c:	08005e0d 	.word	0x08005e0d
 8005d60:	08005e0d 	.word	0x08005e0d
 8005d64:	08005e0d 	.word	0x08005e0d
 8005d68:	08005e0d 	.word	0x08005e0d
 8005d6c:	08005e0d 	.word	0x08005e0d
 8005d70:	08005e0d 	.word	0x08005e0d
 8005d74:	08005e0d 	.word	0x08005e0d
 8005d78:	08005ded 	.word	0x08005ded
 8005d7c:	08005e0d 	.word	0x08005e0d
 8005d80:	08005e0d 	.word	0x08005e0d
 8005d84:	08005e0d 	.word	0x08005e0d
 8005d88:	08005e0d 	.word	0x08005e0d
 8005d8c:	08005e0d 	.word	0x08005e0d
 8005d90:	08005e0d 	.word	0x08005e0d
 8005d94:	08005e0d 	.word	0x08005e0d
 8005d98:	08005df5 	.word	0x08005df5
 8005d9c:	08005e0d 	.word	0x08005e0d
 8005da0:	08005e0d 	.word	0x08005e0d
 8005da4:	08005e0d 	.word	0x08005e0d
 8005da8:	08005e0d 	.word	0x08005e0d
 8005dac:	08005e0d 	.word	0x08005e0d
 8005db0:	08005e0d 	.word	0x08005e0d
 8005db4:	08005e0d 	.word	0x08005e0d
 8005db8:	08005dfd 	.word	0x08005dfd
 8005dbc:	08005e0d 	.word	0x08005e0d
 8005dc0:	08005e0d 	.word	0x08005e0d
 8005dc4:	08005e0d 	.word	0x08005e0d
 8005dc8:	08005e0d 	.word	0x08005e0d
 8005dcc:	08005e0d 	.word	0x08005e0d
 8005dd0:	08005e0d 	.word	0x08005e0d
 8005dd4:	08005e0d 	.word	0x08005e0d
 8005dd8:	08005e05 	.word	0x08005e05
 8005ddc:	2301      	movs	r3, #1
 8005dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de2:	e1c0      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005de4:	2304      	movs	r3, #4
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dea:	e1bc      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005dec:	2308      	movs	r3, #8
 8005dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005df2:	e1b8      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005df4:	2310      	movs	r3, #16
 8005df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfa:	e1b4      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005dfc:	2320      	movs	r3, #32
 8005dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e02:	e1b0      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005e04:	2340      	movs	r3, #64	@ 0x40
 8005e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0a:	e1ac      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005e0c:	2380      	movs	r3, #128	@ 0x80
 8005e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e12:	e1a8      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a75      	ldr	r2, [pc, #468]	@ (8005ff0 <UART_SetConfig+0x638>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d130      	bne.n	8005e80 <UART_SetConfig+0x4c8>
 8005e1e:	4b73      	ldr	r3, [pc, #460]	@ (8005fec <UART_SetConfig+0x634>)
 8005e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e22:	f003 0307 	and.w	r3, r3, #7
 8005e26:	2b05      	cmp	r3, #5
 8005e28:	d826      	bhi.n	8005e78 <UART_SetConfig+0x4c0>
 8005e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e30 <UART_SetConfig+0x478>)
 8005e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e30:	08005e49 	.word	0x08005e49
 8005e34:	08005e51 	.word	0x08005e51
 8005e38:	08005e59 	.word	0x08005e59
 8005e3c:	08005e61 	.word	0x08005e61
 8005e40:	08005e69 	.word	0x08005e69
 8005e44:	08005e71 	.word	0x08005e71
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e4e:	e18a      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005e50:	2304      	movs	r3, #4
 8005e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e56:	e186      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005e58:	2308      	movs	r3, #8
 8005e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e5e:	e182      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005e60:	2310      	movs	r3, #16
 8005e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e66:	e17e      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005e68:	2320      	movs	r3, #32
 8005e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6e:	e17a      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005e70:	2340      	movs	r3, #64	@ 0x40
 8005e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e76:	e176      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005e78:	2380      	movs	r3, #128	@ 0x80
 8005e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7e:	e172      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a5b      	ldr	r2, [pc, #364]	@ (8005ff4 <UART_SetConfig+0x63c>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d130      	bne.n	8005eec <UART_SetConfig+0x534>
 8005e8a:	4b58      	ldr	r3, [pc, #352]	@ (8005fec <UART_SetConfig+0x634>)
 8005e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	2b05      	cmp	r3, #5
 8005e94:	d826      	bhi.n	8005ee4 <UART_SetConfig+0x52c>
 8005e96:	a201      	add	r2, pc, #4	@ (adr r2, 8005e9c <UART_SetConfig+0x4e4>)
 8005e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9c:	08005eb5 	.word	0x08005eb5
 8005ea0:	08005ebd 	.word	0x08005ebd
 8005ea4:	08005ec5 	.word	0x08005ec5
 8005ea8:	08005ecd 	.word	0x08005ecd
 8005eac:	08005ed5 	.word	0x08005ed5
 8005eb0:	08005edd 	.word	0x08005edd
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eba:	e154      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005ebc:	2304      	movs	r3, #4
 8005ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ec2:	e150      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005ec4:	2308      	movs	r3, #8
 8005ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eca:	e14c      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005ecc:	2310      	movs	r3, #16
 8005ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ed2:	e148      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005ed4:	2320      	movs	r3, #32
 8005ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eda:	e144      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005edc:	2340      	movs	r3, #64	@ 0x40
 8005ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ee2:	e140      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005ee4:	2380      	movs	r3, #128	@ 0x80
 8005ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eea:	e13c      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a41      	ldr	r2, [pc, #260]	@ (8005ff8 <UART_SetConfig+0x640>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	f040 8082 	bne.w	8005ffc <UART_SetConfig+0x644>
 8005ef8:	4b3c      	ldr	r3, [pc, #240]	@ (8005fec <UART_SetConfig+0x634>)
 8005efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005efc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f00:	2b28      	cmp	r3, #40	@ 0x28
 8005f02:	d86d      	bhi.n	8005fe0 <UART_SetConfig+0x628>
 8005f04:	a201      	add	r2, pc, #4	@ (adr r2, 8005f0c <UART_SetConfig+0x554>)
 8005f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0a:	bf00      	nop
 8005f0c:	08005fb1 	.word	0x08005fb1
 8005f10:	08005fe1 	.word	0x08005fe1
 8005f14:	08005fe1 	.word	0x08005fe1
 8005f18:	08005fe1 	.word	0x08005fe1
 8005f1c:	08005fe1 	.word	0x08005fe1
 8005f20:	08005fe1 	.word	0x08005fe1
 8005f24:	08005fe1 	.word	0x08005fe1
 8005f28:	08005fe1 	.word	0x08005fe1
 8005f2c:	08005fb9 	.word	0x08005fb9
 8005f30:	08005fe1 	.word	0x08005fe1
 8005f34:	08005fe1 	.word	0x08005fe1
 8005f38:	08005fe1 	.word	0x08005fe1
 8005f3c:	08005fe1 	.word	0x08005fe1
 8005f40:	08005fe1 	.word	0x08005fe1
 8005f44:	08005fe1 	.word	0x08005fe1
 8005f48:	08005fe1 	.word	0x08005fe1
 8005f4c:	08005fc1 	.word	0x08005fc1
 8005f50:	08005fe1 	.word	0x08005fe1
 8005f54:	08005fe1 	.word	0x08005fe1
 8005f58:	08005fe1 	.word	0x08005fe1
 8005f5c:	08005fe1 	.word	0x08005fe1
 8005f60:	08005fe1 	.word	0x08005fe1
 8005f64:	08005fe1 	.word	0x08005fe1
 8005f68:	08005fe1 	.word	0x08005fe1
 8005f6c:	08005fc9 	.word	0x08005fc9
 8005f70:	08005fe1 	.word	0x08005fe1
 8005f74:	08005fe1 	.word	0x08005fe1
 8005f78:	08005fe1 	.word	0x08005fe1
 8005f7c:	08005fe1 	.word	0x08005fe1
 8005f80:	08005fe1 	.word	0x08005fe1
 8005f84:	08005fe1 	.word	0x08005fe1
 8005f88:	08005fe1 	.word	0x08005fe1
 8005f8c:	08005fd1 	.word	0x08005fd1
 8005f90:	08005fe1 	.word	0x08005fe1
 8005f94:	08005fe1 	.word	0x08005fe1
 8005f98:	08005fe1 	.word	0x08005fe1
 8005f9c:	08005fe1 	.word	0x08005fe1
 8005fa0:	08005fe1 	.word	0x08005fe1
 8005fa4:	08005fe1 	.word	0x08005fe1
 8005fa8:	08005fe1 	.word	0x08005fe1
 8005fac:	08005fd9 	.word	0x08005fd9
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fb6:	e0d6      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005fb8:	2304      	movs	r3, #4
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fbe:	e0d2      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005fc0:	2308      	movs	r3, #8
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fc6:	e0ce      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005fc8:	2310      	movs	r3, #16
 8005fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fce:	e0ca      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005fd0:	2320      	movs	r3, #32
 8005fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fd6:	e0c6      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005fd8:	2340      	movs	r3, #64	@ 0x40
 8005fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fde:	e0c2      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005fe0:	2380      	movs	r3, #128	@ 0x80
 8005fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fe6:	e0be      	b.n	8006166 <UART_SetConfig+0x7ae>
 8005fe8:	40011400 	.word	0x40011400
 8005fec:	58024400 	.word	0x58024400
 8005ff0:	40007800 	.word	0x40007800
 8005ff4:	40007c00 	.word	0x40007c00
 8005ff8:	40011800 	.word	0x40011800
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4aad      	ldr	r2, [pc, #692]	@ (80062b8 <UART_SetConfig+0x900>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d176      	bne.n	80060f4 <UART_SetConfig+0x73c>
 8006006:	4bad      	ldr	r3, [pc, #692]	@ (80062bc <UART_SetConfig+0x904>)
 8006008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800600a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800600e:	2b28      	cmp	r3, #40	@ 0x28
 8006010:	d86c      	bhi.n	80060ec <UART_SetConfig+0x734>
 8006012:	a201      	add	r2, pc, #4	@ (adr r2, 8006018 <UART_SetConfig+0x660>)
 8006014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006018:	080060bd 	.word	0x080060bd
 800601c:	080060ed 	.word	0x080060ed
 8006020:	080060ed 	.word	0x080060ed
 8006024:	080060ed 	.word	0x080060ed
 8006028:	080060ed 	.word	0x080060ed
 800602c:	080060ed 	.word	0x080060ed
 8006030:	080060ed 	.word	0x080060ed
 8006034:	080060ed 	.word	0x080060ed
 8006038:	080060c5 	.word	0x080060c5
 800603c:	080060ed 	.word	0x080060ed
 8006040:	080060ed 	.word	0x080060ed
 8006044:	080060ed 	.word	0x080060ed
 8006048:	080060ed 	.word	0x080060ed
 800604c:	080060ed 	.word	0x080060ed
 8006050:	080060ed 	.word	0x080060ed
 8006054:	080060ed 	.word	0x080060ed
 8006058:	080060cd 	.word	0x080060cd
 800605c:	080060ed 	.word	0x080060ed
 8006060:	080060ed 	.word	0x080060ed
 8006064:	080060ed 	.word	0x080060ed
 8006068:	080060ed 	.word	0x080060ed
 800606c:	080060ed 	.word	0x080060ed
 8006070:	080060ed 	.word	0x080060ed
 8006074:	080060ed 	.word	0x080060ed
 8006078:	080060d5 	.word	0x080060d5
 800607c:	080060ed 	.word	0x080060ed
 8006080:	080060ed 	.word	0x080060ed
 8006084:	080060ed 	.word	0x080060ed
 8006088:	080060ed 	.word	0x080060ed
 800608c:	080060ed 	.word	0x080060ed
 8006090:	080060ed 	.word	0x080060ed
 8006094:	080060ed 	.word	0x080060ed
 8006098:	080060dd 	.word	0x080060dd
 800609c:	080060ed 	.word	0x080060ed
 80060a0:	080060ed 	.word	0x080060ed
 80060a4:	080060ed 	.word	0x080060ed
 80060a8:	080060ed 	.word	0x080060ed
 80060ac:	080060ed 	.word	0x080060ed
 80060b0:	080060ed 	.word	0x080060ed
 80060b4:	080060ed 	.word	0x080060ed
 80060b8:	080060e5 	.word	0x080060e5
 80060bc:	2301      	movs	r3, #1
 80060be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060c2:	e050      	b.n	8006166 <UART_SetConfig+0x7ae>
 80060c4:	2304      	movs	r3, #4
 80060c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ca:	e04c      	b.n	8006166 <UART_SetConfig+0x7ae>
 80060cc:	2308      	movs	r3, #8
 80060ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060d2:	e048      	b.n	8006166 <UART_SetConfig+0x7ae>
 80060d4:	2310      	movs	r3, #16
 80060d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060da:	e044      	b.n	8006166 <UART_SetConfig+0x7ae>
 80060dc:	2320      	movs	r3, #32
 80060de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060e2:	e040      	b.n	8006166 <UART_SetConfig+0x7ae>
 80060e4:	2340      	movs	r3, #64	@ 0x40
 80060e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ea:	e03c      	b.n	8006166 <UART_SetConfig+0x7ae>
 80060ec:	2380      	movs	r3, #128	@ 0x80
 80060ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060f2:	e038      	b.n	8006166 <UART_SetConfig+0x7ae>
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a71      	ldr	r2, [pc, #452]	@ (80062c0 <UART_SetConfig+0x908>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d130      	bne.n	8006160 <UART_SetConfig+0x7a8>
 80060fe:	4b6f      	ldr	r3, [pc, #444]	@ (80062bc <UART_SetConfig+0x904>)
 8006100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006102:	f003 0307 	and.w	r3, r3, #7
 8006106:	2b05      	cmp	r3, #5
 8006108:	d826      	bhi.n	8006158 <UART_SetConfig+0x7a0>
 800610a:	a201      	add	r2, pc, #4	@ (adr r2, 8006110 <UART_SetConfig+0x758>)
 800610c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006110:	08006129 	.word	0x08006129
 8006114:	08006131 	.word	0x08006131
 8006118:	08006139 	.word	0x08006139
 800611c:	08006141 	.word	0x08006141
 8006120:	08006149 	.word	0x08006149
 8006124:	08006151 	.word	0x08006151
 8006128:	2302      	movs	r3, #2
 800612a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800612e:	e01a      	b.n	8006166 <UART_SetConfig+0x7ae>
 8006130:	2304      	movs	r3, #4
 8006132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006136:	e016      	b.n	8006166 <UART_SetConfig+0x7ae>
 8006138:	2308      	movs	r3, #8
 800613a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800613e:	e012      	b.n	8006166 <UART_SetConfig+0x7ae>
 8006140:	2310      	movs	r3, #16
 8006142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006146:	e00e      	b.n	8006166 <UART_SetConfig+0x7ae>
 8006148:	2320      	movs	r3, #32
 800614a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800614e:	e00a      	b.n	8006166 <UART_SetConfig+0x7ae>
 8006150:	2340      	movs	r3, #64	@ 0x40
 8006152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006156:	e006      	b.n	8006166 <UART_SetConfig+0x7ae>
 8006158:	2380      	movs	r3, #128	@ 0x80
 800615a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800615e:	e002      	b.n	8006166 <UART_SetConfig+0x7ae>
 8006160:	2380      	movs	r3, #128	@ 0x80
 8006162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a55      	ldr	r2, [pc, #340]	@ (80062c0 <UART_SetConfig+0x908>)
 800616c:	4293      	cmp	r3, r2
 800616e:	f040 80f8 	bne.w	8006362 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006172:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006176:	2b20      	cmp	r3, #32
 8006178:	dc46      	bgt.n	8006208 <UART_SetConfig+0x850>
 800617a:	2b02      	cmp	r3, #2
 800617c:	db75      	blt.n	800626a <UART_SetConfig+0x8b2>
 800617e:	3b02      	subs	r3, #2
 8006180:	2b1e      	cmp	r3, #30
 8006182:	d872      	bhi.n	800626a <UART_SetConfig+0x8b2>
 8006184:	a201      	add	r2, pc, #4	@ (adr r2, 800618c <UART_SetConfig+0x7d4>)
 8006186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618a:	bf00      	nop
 800618c:	0800620f 	.word	0x0800620f
 8006190:	0800626b 	.word	0x0800626b
 8006194:	08006217 	.word	0x08006217
 8006198:	0800626b 	.word	0x0800626b
 800619c:	0800626b 	.word	0x0800626b
 80061a0:	0800626b 	.word	0x0800626b
 80061a4:	08006227 	.word	0x08006227
 80061a8:	0800626b 	.word	0x0800626b
 80061ac:	0800626b 	.word	0x0800626b
 80061b0:	0800626b 	.word	0x0800626b
 80061b4:	0800626b 	.word	0x0800626b
 80061b8:	0800626b 	.word	0x0800626b
 80061bc:	0800626b 	.word	0x0800626b
 80061c0:	0800626b 	.word	0x0800626b
 80061c4:	08006237 	.word	0x08006237
 80061c8:	0800626b 	.word	0x0800626b
 80061cc:	0800626b 	.word	0x0800626b
 80061d0:	0800626b 	.word	0x0800626b
 80061d4:	0800626b 	.word	0x0800626b
 80061d8:	0800626b 	.word	0x0800626b
 80061dc:	0800626b 	.word	0x0800626b
 80061e0:	0800626b 	.word	0x0800626b
 80061e4:	0800626b 	.word	0x0800626b
 80061e8:	0800626b 	.word	0x0800626b
 80061ec:	0800626b 	.word	0x0800626b
 80061f0:	0800626b 	.word	0x0800626b
 80061f4:	0800626b 	.word	0x0800626b
 80061f8:	0800626b 	.word	0x0800626b
 80061fc:	0800626b 	.word	0x0800626b
 8006200:	0800626b 	.word	0x0800626b
 8006204:	0800625d 	.word	0x0800625d
 8006208:	2b40      	cmp	r3, #64	@ 0x40
 800620a:	d02a      	beq.n	8006262 <UART_SetConfig+0x8aa>
 800620c:	e02d      	b.n	800626a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800620e:	f7fe f8a5 	bl	800435c <HAL_RCCEx_GetD3PCLK1Freq>
 8006212:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006214:	e02f      	b.n	8006276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006216:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800621a:	4618      	mov	r0, r3
 800621c:	f7fe f8b4 	bl	8004388 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006224:	e027      	b.n	8006276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006226:	f107 0318 	add.w	r3, r7, #24
 800622a:	4618      	mov	r0, r3
 800622c:	f7fe fa00 	bl	8004630 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006234:	e01f      	b.n	8006276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006236:	4b21      	ldr	r3, [pc, #132]	@ (80062bc <UART_SetConfig+0x904>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0320 	and.w	r3, r3, #32
 800623e:	2b00      	cmp	r3, #0
 8006240:	d009      	beq.n	8006256 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006242:	4b1e      	ldr	r3, [pc, #120]	@ (80062bc <UART_SetConfig+0x904>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	08db      	lsrs	r3, r3, #3
 8006248:	f003 0303 	and.w	r3, r3, #3
 800624c:	4a1d      	ldr	r2, [pc, #116]	@ (80062c4 <UART_SetConfig+0x90c>)
 800624e:	fa22 f303 	lsr.w	r3, r2, r3
 8006252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006254:	e00f      	b.n	8006276 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006256:	4b1b      	ldr	r3, [pc, #108]	@ (80062c4 <UART_SetConfig+0x90c>)
 8006258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800625a:	e00c      	b.n	8006276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800625c:	4b1a      	ldr	r3, [pc, #104]	@ (80062c8 <UART_SetConfig+0x910>)
 800625e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006260:	e009      	b.n	8006276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006262:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006268:	e005      	b.n	8006276 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800626a:	2300      	movs	r3, #0
 800626c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006274:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006278:	2b00      	cmp	r3, #0
 800627a:	f000 81ee 	beq.w	800665a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006282:	4a12      	ldr	r2, [pc, #72]	@ (80062cc <UART_SetConfig+0x914>)
 8006284:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006288:	461a      	mov	r2, r3
 800628a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800628c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006290:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	4613      	mov	r3, r2
 8006298:	005b      	lsls	r3, r3, #1
 800629a:	4413      	add	r3, r2
 800629c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800629e:	429a      	cmp	r2, r3
 80062a0:	d305      	bcc.n	80062ae <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d910      	bls.n	80062d0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80062b4:	e1d1      	b.n	800665a <UART_SetConfig+0xca2>
 80062b6:	bf00      	nop
 80062b8:	40011c00 	.word	0x40011c00
 80062bc:	58024400 	.word	0x58024400
 80062c0:	58000c00 	.word	0x58000c00
 80062c4:	03d09000 	.word	0x03d09000
 80062c8:	003d0900 	.word	0x003d0900
 80062cc:	08009734 	.word	0x08009734
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062d2:	2200      	movs	r2, #0
 80062d4:	60bb      	str	r3, [r7, #8]
 80062d6:	60fa      	str	r2, [r7, #12]
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062dc:	4ac0      	ldr	r2, [pc, #768]	@ (80065e0 <UART_SetConfig+0xc28>)
 80062de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	2200      	movs	r2, #0
 80062e6:	603b      	str	r3, [r7, #0]
 80062e8:	607a      	str	r2, [r7, #4]
 80062ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80062f2:	f7fa f865 	bl	80003c0 <__aeabi_uldivmod>
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	4610      	mov	r0, r2
 80062fc:	4619      	mov	r1, r3
 80062fe:	f04f 0200 	mov.w	r2, #0
 8006302:	f04f 0300 	mov.w	r3, #0
 8006306:	020b      	lsls	r3, r1, #8
 8006308:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800630c:	0202      	lsls	r2, r0, #8
 800630e:	6979      	ldr	r1, [r7, #20]
 8006310:	6849      	ldr	r1, [r1, #4]
 8006312:	0849      	lsrs	r1, r1, #1
 8006314:	2000      	movs	r0, #0
 8006316:	460c      	mov	r4, r1
 8006318:	4605      	mov	r5, r0
 800631a:	eb12 0804 	adds.w	r8, r2, r4
 800631e:	eb43 0905 	adc.w	r9, r3, r5
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	469a      	mov	sl, r3
 800632a:	4693      	mov	fp, r2
 800632c:	4652      	mov	r2, sl
 800632e:	465b      	mov	r3, fp
 8006330:	4640      	mov	r0, r8
 8006332:	4649      	mov	r1, r9
 8006334:	f7fa f844 	bl	80003c0 <__aeabi_uldivmod>
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	4613      	mov	r3, r2
 800633e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006342:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006346:	d308      	bcc.n	800635a <UART_SetConfig+0x9a2>
 8006348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800634a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800634e:	d204      	bcs.n	800635a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006356:	60da      	str	r2, [r3, #12]
 8006358:	e17f      	b.n	800665a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006360:	e17b      	b.n	800665a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800636a:	f040 80bd 	bne.w	80064e8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800636e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006372:	2b20      	cmp	r3, #32
 8006374:	dc48      	bgt.n	8006408 <UART_SetConfig+0xa50>
 8006376:	2b00      	cmp	r3, #0
 8006378:	db7b      	blt.n	8006472 <UART_SetConfig+0xaba>
 800637a:	2b20      	cmp	r3, #32
 800637c:	d879      	bhi.n	8006472 <UART_SetConfig+0xaba>
 800637e:	a201      	add	r2, pc, #4	@ (adr r2, 8006384 <UART_SetConfig+0x9cc>)
 8006380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006384:	0800640f 	.word	0x0800640f
 8006388:	08006417 	.word	0x08006417
 800638c:	08006473 	.word	0x08006473
 8006390:	08006473 	.word	0x08006473
 8006394:	0800641f 	.word	0x0800641f
 8006398:	08006473 	.word	0x08006473
 800639c:	08006473 	.word	0x08006473
 80063a0:	08006473 	.word	0x08006473
 80063a4:	0800642f 	.word	0x0800642f
 80063a8:	08006473 	.word	0x08006473
 80063ac:	08006473 	.word	0x08006473
 80063b0:	08006473 	.word	0x08006473
 80063b4:	08006473 	.word	0x08006473
 80063b8:	08006473 	.word	0x08006473
 80063bc:	08006473 	.word	0x08006473
 80063c0:	08006473 	.word	0x08006473
 80063c4:	0800643f 	.word	0x0800643f
 80063c8:	08006473 	.word	0x08006473
 80063cc:	08006473 	.word	0x08006473
 80063d0:	08006473 	.word	0x08006473
 80063d4:	08006473 	.word	0x08006473
 80063d8:	08006473 	.word	0x08006473
 80063dc:	08006473 	.word	0x08006473
 80063e0:	08006473 	.word	0x08006473
 80063e4:	08006473 	.word	0x08006473
 80063e8:	08006473 	.word	0x08006473
 80063ec:	08006473 	.word	0x08006473
 80063f0:	08006473 	.word	0x08006473
 80063f4:	08006473 	.word	0x08006473
 80063f8:	08006473 	.word	0x08006473
 80063fc:	08006473 	.word	0x08006473
 8006400:	08006473 	.word	0x08006473
 8006404:	08006465 	.word	0x08006465
 8006408:	2b40      	cmp	r3, #64	@ 0x40
 800640a:	d02e      	beq.n	800646a <UART_SetConfig+0xab2>
 800640c:	e031      	b.n	8006472 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800640e:	f7fc fdd9 	bl	8002fc4 <HAL_RCC_GetPCLK1Freq>
 8006412:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006414:	e033      	b.n	800647e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006416:	f7fc fdeb 	bl	8002ff0 <HAL_RCC_GetPCLK2Freq>
 800641a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800641c:	e02f      	b.n	800647e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800641e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006422:	4618      	mov	r0, r3
 8006424:	f7fd ffb0 	bl	8004388 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800642a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800642c:	e027      	b.n	800647e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800642e:	f107 0318 	add.w	r3, r7, #24
 8006432:	4618      	mov	r0, r3
 8006434:	f7fe f8fc 	bl	8004630 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800643c:	e01f      	b.n	800647e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800643e:	4b69      	ldr	r3, [pc, #420]	@ (80065e4 <UART_SetConfig+0xc2c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0320 	and.w	r3, r3, #32
 8006446:	2b00      	cmp	r3, #0
 8006448:	d009      	beq.n	800645e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800644a:	4b66      	ldr	r3, [pc, #408]	@ (80065e4 <UART_SetConfig+0xc2c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	08db      	lsrs	r3, r3, #3
 8006450:	f003 0303 	and.w	r3, r3, #3
 8006454:	4a64      	ldr	r2, [pc, #400]	@ (80065e8 <UART_SetConfig+0xc30>)
 8006456:	fa22 f303 	lsr.w	r3, r2, r3
 800645a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800645c:	e00f      	b.n	800647e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800645e:	4b62      	ldr	r3, [pc, #392]	@ (80065e8 <UART_SetConfig+0xc30>)
 8006460:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006462:	e00c      	b.n	800647e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006464:	4b61      	ldr	r3, [pc, #388]	@ (80065ec <UART_SetConfig+0xc34>)
 8006466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006468:	e009      	b.n	800647e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800646a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800646e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006470:	e005      	b.n	800647e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800647c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800647e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 80ea 	beq.w	800665a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648a:	4a55      	ldr	r2, [pc, #340]	@ (80065e0 <UART_SetConfig+0xc28>)
 800648c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006490:	461a      	mov	r2, r3
 8006492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006494:	fbb3 f3f2 	udiv	r3, r3, r2
 8006498:	005a      	lsls	r2, r3, #1
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	085b      	lsrs	r3, r3, #1
 80064a0:	441a      	add	r2, r3
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ae:	2b0f      	cmp	r3, #15
 80064b0:	d916      	bls.n	80064e0 <UART_SetConfig+0xb28>
 80064b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064b8:	d212      	bcs.n	80064e0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064bc:	b29b      	uxth	r3, r3
 80064be:	f023 030f 	bic.w	r3, r3, #15
 80064c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c6:	085b      	lsrs	r3, r3, #1
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	f003 0307 	and.w	r3, r3, #7
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80064d2:	4313      	orrs	r3, r2
 80064d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80064dc:	60da      	str	r2, [r3, #12]
 80064de:	e0bc      	b.n	800665a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80064e6:	e0b8      	b.n	800665a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064e8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80064ec:	2b20      	cmp	r3, #32
 80064ee:	dc4b      	bgt.n	8006588 <UART_SetConfig+0xbd0>
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f2c0 8087 	blt.w	8006604 <UART_SetConfig+0xc4c>
 80064f6:	2b20      	cmp	r3, #32
 80064f8:	f200 8084 	bhi.w	8006604 <UART_SetConfig+0xc4c>
 80064fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006504 <UART_SetConfig+0xb4c>)
 80064fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006502:	bf00      	nop
 8006504:	0800658f 	.word	0x0800658f
 8006508:	08006597 	.word	0x08006597
 800650c:	08006605 	.word	0x08006605
 8006510:	08006605 	.word	0x08006605
 8006514:	0800659f 	.word	0x0800659f
 8006518:	08006605 	.word	0x08006605
 800651c:	08006605 	.word	0x08006605
 8006520:	08006605 	.word	0x08006605
 8006524:	080065af 	.word	0x080065af
 8006528:	08006605 	.word	0x08006605
 800652c:	08006605 	.word	0x08006605
 8006530:	08006605 	.word	0x08006605
 8006534:	08006605 	.word	0x08006605
 8006538:	08006605 	.word	0x08006605
 800653c:	08006605 	.word	0x08006605
 8006540:	08006605 	.word	0x08006605
 8006544:	080065bf 	.word	0x080065bf
 8006548:	08006605 	.word	0x08006605
 800654c:	08006605 	.word	0x08006605
 8006550:	08006605 	.word	0x08006605
 8006554:	08006605 	.word	0x08006605
 8006558:	08006605 	.word	0x08006605
 800655c:	08006605 	.word	0x08006605
 8006560:	08006605 	.word	0x08006605
 8006564:	08006605 	.word	0x08006605
 8006568:	08006605 	.word	0x08006605
 800656c:	08006605 	.word	0x08006605
 8006570:	08006605 	.word	0x08006605
 8006574:	08006605 	.word	0x08006605
 8006578:	08006605 	.word	0x08006605
 800657c:	08006605 	.word	0x08006605
 8006580:	08006605 	.word	0x08006605
 8006584:	080065f7 	.word	0x080065f7
 8006588:	2b40      	cmp	r3, #64	@ 0x40
 800658a:	d037      	beq.n	80065fc <UART_SetConfig+0xc44>
 800658c:	e03a      	b.n	8006604 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800658e:	f7fc fd19 	bl	8002fc4 <HAL_RCC_GetPCLK1Freq>
 8006592:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006594:	e03c      	b.n	8006610 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006596:	f7fc fd2b 	bl	8002ff0 <HAL_RCC_GetPCLK2Freq>
 800659a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800659c:	e038      	b.n	8006610 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800659e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fd fef0 	bl	8004388 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065ac:	e030      	b.n	8006610 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065ae:	f107 0318 	add.w	r3, r7, #24
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7fe f83c 	bl	8004630 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065bc:	e028      	b.n	8006610 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065be:	4b09      	ldr	r3, [pc, #36]	@ (80065e4 <UART_SetConfig+0xc2c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0320 	and.w	r3, r3, #32
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d012      	beq.n	80065f0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065ca:	4b06      	ldr	r3, [pc, #24]	@ (80065e4 <UART_SetConfig+0xc2c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	08db      	lsrs	r3, r3, #3
 80065d0:	f003 0303 	and.w	r3, r3, #3
 80065d4:	4a04      	ldr	r2, [pc, #16]	@ (80065e8 <UART_SetConfig+0xc30>)
 80065d6:	fa22 f303 	lsr.w	r3, r2, r3
 80065da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065dc:	e018      	b.n	8006610 <UART_SetConfig+0xc58>
 80065de:	bf00      	nop
 80065e0:	08009734 	.word	0x08009734
 80065e4:	58024400 	.word	0x58024400
 80065e8:	03d09000 	.word	0x03d09000
 80065ec:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80065f0:	4b24      	ldr	r3, [pc, #144]	@ (8006684 <UART_SetConfig+0xccc>)
 80065f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065f4:	e00c      	b.n	8006610 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80065f6:	4b24      	ldr	r3, [pc, #144]	@ (8006688 <UART_SetConfig+0xcd0>)
 80065f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065fa:	e009      	b.n	8006610 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006602:	e005      	b.n	8006610 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800660e:	bf00      	nop
    }

    if (pclk != 0U)
 8006610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006612:	2b00      	cmp	r3, #0
 8006614:	d021      	beq.n	800665a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661a:	4a1c      	ldr	r2, [pc, #112]	@ (800668c <UART_SetConfig+0xcd4>)
 800661c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006620:	461a      	mov	r2, r3
 8006622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006624:	fbb3 f2f2 	udiv	r2, r3, r2
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	085b      	lsrs	r3, r3, #1
 800662e:	441a      	add	r2, r3
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	fbb2 f3f3 	udiv	r3, r2, r3
 8006638:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800663a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663c:	2b0f      	cmp	r3, #15
 800663e:	d909      	bls.n	8006654 <UART_SetConfig+0xc9c>
 8006640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006642:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006646:	d205      	bcs.n	8006654 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664a:	b29a      	uxth	r2, r3
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	60da      	str	r2, [r3, #12]
 8006652:	e002      	b.n	800665a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	2201      	movs	r2, #1
 800665e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	2201      	movs	r2, #1
 8006666:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2200      	movs	r2, #0
 800666e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2200      	movs	r2, #0
 8006674:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006676:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800667a:	4618      	mov	r0, r3
 800667c:	3748      	adds	r7, #72	@ 0x48
 800667e:	46bd      	mov	sp, r7
 8006680:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006684:	03d09000 	.word	0x03d09000
 8006688:	003d0900 	.word	0x003d0900
 800668c:	08009734 	.word	0x08009734

08006690 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669c:	f003 0308 	and.w	r3, r3, #8
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00a      	beq.n	80066ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	430a      	orrs	r2, r1
 80066b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00a      	beq.n	80066dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	430a      	orrs	r2, r1
 80066da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00a      	beq.n	80066fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006702:	f003 0304 	and.w	r3, r3, #4
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	430a      	orrs	r2, r1
 800671e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006724:	f003 0310 	and.w	r3, r3, #16
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00a      	beq.n	8006742 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006746:	f003 0320 	and.w	r3, r3, #32
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00a      	beq.n	8006764 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800676c:	2b00      	cmp	r3, #0
 800676e:	d01a      	beq.n	80067a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800678a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800678e:	d10a      	bne.n	80067a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00a      	beq.n	80067c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	430a      	orrs	r2, r1
 80067c6:	605a      	str	r2, [r3, #4]
  }
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b098      	sub	sp, #96	@ 0x60
 80067d8:	af02      	add	r7, sp, #8
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067e4:	f7fa ff32 	bl	800164c <HAL_GetTick>
 80067e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0308 	and.w	r3, r3, #8
 80067f4:	2b08      	cmp	r3, #8
 80067f6:	d12f      	bne.n	8006858 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006800:	2200      	movs	r2, #0
 8006802:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f88e 	bl	8006928 <UART_WaitOnFlagUntilTimeout>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d022      	beq.n	8006858 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800681a:	e853 3f00 	ldrex	r3, [r3]
 800681e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006822:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006826:	653b      	str	r3, [r7, #80]	@ 0x50
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	461a      	mov	r2, r3
 800682e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006830:	647b      	str	r3, [r7, #68]	@ 0x44
 8006832:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006834:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006836:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006838:	e841 2300 	strex	r3, r2, [r1]
 800683c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800683e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1e6      	bne.n	8006812 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2220      	movs	r2, #32
 8006848:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e063      	b.n	8006920 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0304 	and.w	r3, r3, #4
 8006862:	2b04      	cmp	r3, #4
 8006864:	d149      	bne.n	80068fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006866:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800686a:	9300      	str	r3, [sp, #0]
 800686c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800686e:	2200      	movs	r2, #0
 8006870:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 f857 	bl	8006928 <UART_WaitOnFlagUntilTimeout>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d03c      	beq.n	80068fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006888:	e853 3f00 	ldrex	r3, [r3]
 800688c:	623b      	str	r3, [r7, #32]
   return(result);
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006894:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	461a      	mov	r2, r3
 800689c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800689e:	633b      	str	r3, [r7, #48]	@ 0x30
 80068a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068a6:	e841 2300 	strex	r3, r2, [r1]
 80068aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1e6      	bne.n	8006880 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	3308      	adds	r3, #8
 80068b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	e853 3f00 	ldrex	r3, [r3]
 80068c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f023 0301 	bic.w	r3, r3, #1
 80068c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3308      	adds	r3, #8
 80068d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068d2:	61fa      	str	r2, [r7, #28]
 80068d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d6:	69b9      	ldr	r1, [r7, #24]
 80068d8:	69fa      	ldr	r2, [r7, #28]
 80068da:	e841 2300 	strex	r3, r2, [r1]
 80068de:	617b      	str	r3, [r7, #20]
   return(result);
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1e5      	bne.n	80068b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2220      	movs	r2, #32
 80068ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e012      	b.n	8006920 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2220      	movs	r2, #32
 80068fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2220      	movs	r2, #32
 8006906:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3758      	adds	r7, #88	@ 0x58
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	603b      	str	r3, [r7, #0]
 8006934:	4613      	mov	r3, r2
 8006936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006938:	e04f      	b.n	80069da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006940:	d04b      	beq.n	80069da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006942:	f7fa fe83 	bl	800164c <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	429a      	cmp	r2, r3
 8006950:	d302      	bcc.n	8006958 <UART_WaitOnFlagUntilTimeout+0x30>
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e04e      	b.n	80069fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0304 	and.w	r3, r3, #4
 8006966:	2b00      	cmp	r3, #0
 8006968:	d037      	beq.n	80069da <UART_WaitOnFlagUntilTimeout+0xb2>
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	2b80      	cmp	r3, #128	@ 0x80
 800696e:	d034      	beq.n	80069da <UART_WaitOnFlagUntilTimeout+0xb2>
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	2b40      	cmp	r3, #64	@ 0x40
 8006974:	d031      	beq.n	80069da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	f003 0308 	and.w	r3, r3, #8
 8006980:	2b08      	cmp	r3, #8
 8006982:	d110      	bne.n	80069a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2208      	movs	r2, #8
 800698a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f000 f839 	bl	8006a04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2208      	movs	r2, #8
 8006996:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e029      	b.n	80069fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	69db      	ldr	r3, [r3, #28]
 80069ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069b4:	d111      	bne.n	80069da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 f81f 	bl	8006a04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2220      	movs	r2, #32
 80069ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e00f      	b.n	80069fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	69da      	ldr	r2, [r3, #28]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	4013      	ands	r3, r2
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	bf0c      	ite	eq
 80069ea:	2301      	moveq	r3, #1
 80069ec:	2300      	movne	r3, #0
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	461a      	mov	r2, r3
 80069f2:	79fb      	ldrb	r3, [r7, #7]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d0a0      	beq.n	800693a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
	...

08006a04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b095      	sub	sp, #84	@ 0x54
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	461a      	mov	r2, r3
 8006a28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a32:	e841 2300 	strex	r3, r2, [r1]
 8006a36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1e6      	bne.n	8006a0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	3308      	adds	r3, #8
 8006a44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	e853 3f00 	ldrex	r3, [r3]
 8006a4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a4e:	69fa      	ldr	r2, [r7, #28]
 8006a50:	4b1e      	ldr	r3, [pc, #120]	@ (8006acc <UART_EndRxTransfer+0xc8>)
 8006a52:	4013      	ands	r3, r2
 8006a54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3308      	adds	r3, #8
 8006a5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a66:	e841 2300 	strex	r3, r2, [r1]
 8006a6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1e5      	bne.n	8006a3e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d118      	bne.n	8006aac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	e853 3f00 	ldrex	r3, [r3]
 8006a86:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f023 0310 	bic.w	r3, r3, #16
 8006a8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	461a      	mov	r2, r3
 8006a96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a98:	61bb      	str	r3, [r7, #24]
 8006a9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9c:	6979      	ldr	r1, [r7, #20]
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	e841 2300 	strex	r3, r2, [r1]
 8006aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1e6      	bne.n	8006a7a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006ac0:	bf00      	nop
 8006ac2:	3754      	adds	r7, #84	@ 0x54
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	effffffe 	.word	0xeffffffe

08006ad0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d101      	bne.n	8006ae6 <HAL_UARTEx_DisableFifoMode+0x16>
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	e027      	b.n	8006b36 <HAL_UARTEx_DisableFifoMode+0x66>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2224      	movs	r2, #36	@ 0x24
 8006af2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 0201 	bic.w	r2, r2, #1
 8006b0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006b14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2220      	movs	r2, #32
 8006b28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3714      	adds	r7, #20
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b084      	sub	sp, #16
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d101      	bne.n	8006b5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006b56:	2302      	movs	r3, #2
 8006b58:	e02d      	b.n	8006bb6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2224      	movs	r2, #36	@ 0x24
 8006b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f022 0201 	bic.w	r2, r2, #1
 8006b80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f850 	bl	8006c3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b084      	sub	sp, #16
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d101      	bne.n	8006bd6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	e02d      	b.n	8006c32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2224      	movs	r2, #36	@ 0x24
 8006be2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 0201 	bic.w	r2, r2, #1
 8006bfc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f812 	bl	8006c3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
	...

08006c3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d108      	bne.n	8006c5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006c5c:	e031      	b.n	8006cc2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006c5e:	2310      	movs	r3, #16
 8006c60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006c62:	2310      	movs	r3, #16
 8006c64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	0e5b      	lsrs	r3, r3, #25
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	f003 0307 	and.w	r3, r3, #7
 8006c74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	0f5b      	lsrs	r3, r3, #29
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	f003 0307 	and.w	r3, r3, #7
 8006c84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c86:	7bbb      	ldrb	r3, [r7, #14]
 8006c88:	7b3a      	ldrb	r2, [r7, #12]
 8006c8a:	4911      	ldr	r1, [pc, #68]	@ (8006cd0 <UARTEx_SetNbDataToProcess+0x94>)
 8006c8c:	5c8a      	ldrb	r2, [r1, r2]
 8006c8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c92:	7b3a      	ldrb	r2, [r7, #12]
 8006c94:	490f      	ldr	r1, [pc, #60]	@ (8006cd4 <UARTEx_SetNbDataToProcess+0x98>)
 8006c96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c98:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
 8006ca6:	7b7a      	ldrb	r2, [r7, #13]
 8006ca8:	4909      	ldr	r1, [pc, #36]	@ (8006cd0 <UARTEx_SetNbDataToProcess+0x94>)
 8006caa:	5c8a      	ldrb	r2, [r1, r2]
 8006cac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006cb0:	7b7a      	ldrb	r2, [r7, #13]
 8006cb2:	4908      	ldr	r1, [pc, #32]	@ (8006cd4 <UARTEx_SetNbDataToProcess+0x98>)
 8006cb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006cc2:	bf00      	nop
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	0800974c 	.word	0x0800974c
 8006cd4:	08009754 	.word	0x08009754

08006cd8 <malloc>:
 8006cd8:	4b02      	ldr	r3, [pc, #8]	@ (8006ce4 <malloc+0xc>)
 8006cda:	4601      	mov	r1, r0
 8006cdc:	6818      	ldr	r0, [r3, #0]
 8006cde:	f000 b825 	b.w	8006d2c <_malloc_r>
 8006ce2:	bf00      	nop
 8006ce4:	24000120 	.word	0x24000120

08006ce8 <sbrk_aligned>:
 8006ce8:	b570      	push	{r4, r5, r6, lr}
 8006cea:	4e0f      	ldr	r6, [pc, #60]	@ (8006d28 <sbrk_aligned+0x40>)
 8006cec:	460c      	mov	r4, r1
 8006cee:	6831      	ldr	r1, [r6, #0]
 8006cf0:	4605      	mov	r5, r0
 8006cf2:	b911      	cbnz	r1, 8006cfa <sbrk_aligned+0x12>
 8006cf4:	f000 fe4e 	bl	8007994 <_sbrk_r>
 8006cf8:	6030      	str	r0, [r6, #0]
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	f000 fe49 	bl	8007994 <_sbrk_r>
 8006d02:	1c43      	adds	r3, r0, #1
 8006d04:	d103      	bne.n	8006d0e <sbrk_aligned+0x26>
 8006d06:	f04f 34ff 	mov.w	r4, #4294967295
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	bd70      	pop	{r4, r5, r6, pc}
 8006d0e:	1cc4      	adds	r4, r0, #3
 8006d10:	f024 0403 	bic.w	r4, r4, #3
 8006d14:	42a0      	cmp	r0, r4
 8006d16:	d0f8      	beq.n	8006d0a <sbrk_aligned+0x22>
 8006d18:	1a21      	subs	r1, r4, r0
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	f000 fe3a 	bl	8007994 <_sbrk_r>
 8006d20:	3001      	adds	r0, #1
 8006d22:	d1f2      	bne.n	8006d0a <sbrk_aligned+0x22>
 8006d24:	e7ef      	b.n	8006d06 <sbrk_aligned+0x1e>
 8006d26:	bf00      	nop
 8006d28:	24000434 	.word	0x24000434

08006d2c <_malloc_r>:
 8006d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d30:	1ccd      	adds	r5, r1, #3
 8006d32:	f025 0503 	bic.w	r5, r5, #3
 8006d36:	3508      	adds	r5, #8
 8006d38:	2d0c      	cmp	r5, #12
 8006d3a:	bf38      	it	cc
 8006d3c:	250c      	movcc	r5, #12
 8006d3e:	2d00      	cmp	r5, #0
 8006d40:	4606      	mov	r6, r0
 8006d42:	db01      	blt.n	8006d48 <_malloc_r+0x1c>
 8006d44:	42a9      	cmp	r1, r5
 8006d46:	d904      	bls.n	8006d52 <_malloc_r+0x26>
 8006d48:	230c      	movs	r3, #12
 8006d4a:	6033      	str	r3, [r6, #0]
 8006d4c:	2000      	movs	r0, #0
 8006d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e28 <_malloc_r+0xfc>
 8006d56:	f000 f869 	bl	8006e2c <__malloc_lock>
 8006d5a:	f8d8 3000 	ldr.w	r3, [r8]
 8006d5e:	461c      	mov	r4, r3
 8006d60:	bb44      	cbnz	r4, 8006db4 <_malloc_r+0x88>
 8006d62:	4629      	mov	r1, r5
 8006d64:	4630      	mov	r0, r6
 8006d66:	f7ff ffbf 	bl	8006ce8 <sbrk_aligned>
 8006d6a:	1c43      	adds	r3, r0, #1
 8006d6c:	4604      	mov	r4, r0
 8006d6e:	d158      	bne.n	8006e22 <_malloc_r+0xf6>
 8006d70:	f8d8 4000 	ldr.w	r4, [r8]
 8006d74:	4627      	mov	r7, r4
 8006d76:	2f00      	cmp	r7, #0
 8006d78:	d143      	bne.n	8006e02 <_malloc_r+0xd6>
 8006d7a:	2c00      	cmp	r4, #0
 8006d7c:	d04b      	beq.n	8006e16 <_malloc_r+0xea>
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	4639      	mov	r1, r7
 8006d82:	4630      	mov	r0, r6
 8006d84:	eb04 0903 	add.w	r9, r4, r3
 8006d88:	f000 fe04 	bl	8007994 <_sbrk_r>
 8006d8c:	4581      	cmp	r9, r0
 8006d8e:	d142      	bne.n	8006e16 <_malloc_r+0xea>
 8006d90:	6821      	ldr	r1, [r4, #0]
 8006d92:	1a6d      	subs	r5, r5, r1
 8006d94:	4629      	mov	r1, r5
 8006d96:	4630      	mov	r0, r6
 8006d98:	f7ff ffa6 	bl	8006ce8 <sbrk_aligned>
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	d03a      	beq.n	8006e16 <_malloc_r+0xea>
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	442b      	add	r3, r5
 8006da4:	6023      	str	r3, [r4, #0]
 8006da6:	f8d8 3000 	ldr.w	r3, [r8]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	bb62      	cbnz	r2, 8006e08 <_malloc_r+0xdc>
 8006dae:	f8c8 7000 	str.w	r7, [r8]
 8006db2:	e00f      	b.n	8006dd4 <_malloc_r+0xa8>
 8006db4:	6822      	ldr	r2, [r4, #0]
 8006db6:	1b52      	subs	r2, r2, r5
 8006db8:	d420      	bmi.n	8006dfc <_malloc_r+0xd0>
 8006dba:	2a0b      	cmp	r2, #11
 8006dbc:	d917      	bls.n	8006dee <_malloc_r+0xc2>
 8006dbe:	1961      	adds	r1, r4, r5
 8006dc0:	42a3      	cmp	r3, r4
 8006dc2:	6025      	str	r5, [r4, #0]
 8006dc4:	bf18      	it	ne
 8006dc6:	6059      	strne	r1, [r3, #4]
 8006dc8:	6863      	ldr	r3, [r4, #4]
 8006dca:	bf08      	it	eq
 8006dcc:	f8c8 1000 	streq.w	r1, [r8]
 8006dd0:	5162      	str	r2, [r4, r5]
 8006dd2:	604b      	str	r3, [r1, #4]
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	f000 f82f 	bl	8006e38 <__malloc_unlock>
 8006dda:	f104 000b 	add.w	r0, r4, #11
 8006dde:	1d23      	adds	r3, r4, #4
 8006de0:	f020 0007 	bic.w	r0, r0, #7
 8006de4:	1ac2      	subs	r2, r0, r3
 8006de6:	bf1c      	itt	ne
 8006de8:	1a1b      	subne	r3, r3, r0
 8006dea:	50a3      	strne	r3, [r4, r2]
 8006dec:	e7af      	b.n	8006d4e <_malloc_r+0x22>
 8006dee:	6862      	ldr	r2, [r4, #4]
 8006df0:	42a3      	cmp	r3, r4
 8006df2:	bf0c      	ite	eq
 8006df4:	f8c8 2000 	streq.w	r2, [r8]
 8006df8:	605a      	strne	r2, [r3, #4]
 8006dfa:	e7eb      	b.n	8006dd4 <_malloc_r+0xa8>
 8006dfc:	4623      	mov	r3, r4
 8006dfe:	6864      	ldr	r4, [r4, #4]
 8006e00:	e7ae      	b.n	8006d60 <_malloc_r+0x34>
 8006e02:	463c      	mov	r4, r7
 8006e04:	687f      	ldr	r7, [r7, #4]
 8006e06:	e7b6      	b.n	8006d76 <_malloc_r+0x4a>
 8006e08:	461a      	mov	r2, r3
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	42a3      	cmp	r3, r4
 8006e0e:	d1fb      	bne.n	8006e08 <_malloc_r+0xdc>
 8006e10:	2300      	movs	r3, #0
 8006e12:	6053      	str	r3, [r2, #4]
 8006e14:	e7de      	b.n	8006dd4 <_malloc_r+0xa8>
 8006e16:	230c      	movs	r3, #12
 8006e18:	6033      	str	r3, [r6, #0]
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	f000 f80c 	bl	8006e38 <__malloc_unlock>
 8006e20:	e794      	b.n	8006d4c <_malloc_r+0x20>
 8006e22:	6005      	str	r5, [r0, #0]
 8006e24:	e7d6      	b.n	8006dd4 <_malloc_r+0xa8>
 8006e26:	bf00      	nop
 8006e28:	24000438 	.word	0x24000438

08006e2c <__malloc_lock>:
 8006e2c:	4801      	ldr	r0, [pc, #4]	@ (8006e34 <__malloc_lock+0x8>)
 8006e2e:	f000 bdfe 	b.w	8007a2e <__retarget_lock_acquire_recursive>
 8006e32:	bf00      	nop
 8006e34:	2400057c 	.word	0x2400057c

08006e38 <__malloc_unlock>:
 8006e38:	4801      	ldr	r0, [pc, #4]	@ (8006e40 <__malloc_unlock+0x8>)
 8006e3a:	f000 bdf9 	b.w	8007a30 <__retarget_lock_release_recursive>
 8006e3e:	bf00      	nop
 8006e40:	2400057c 	.word	0x2400057c

08006e44 <__cvt>:
 8006e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e46:	ed2d 8b02 	vpush	{d8}
 8006e4a:	eeb0 8b40 	vmov.f64	d8, d0
 8006e4e:	b085      	sub	sp, #20
 8006e50:	4617      	mov	r7, r2
 8006e52:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8006e54:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e56:	ee18 2a90 	vmov	r2, s17
 8006e5a:	f025 0520 	bic.w	r5, r5, #32
 8006e5e:	2a00      	cmp	r2, #0
 8006e60:	bfb6      	itet	lt
 8006e62:	222d      	movlt	r2, #45	@ 0x2d
 8006e64:	2200      	movge	r2, #0
 8006e66:	eeb1 8b40 	vneglt.f64	d8, d0
 8006e6a:	2d46      	cmp	r5, #70	@ 0x46
 8006e6c:	460c      	mov	r4, r1
 8006e6e:	701a      	strb	r2, [r3, #0]
 8006e70:	d004      	beq.n	8006e7c <__cvt+0x38>
 8006e72:	2d45      	cmp	r5, #69	@ 0x45
 8006e74:	d100      	bne.n	8006e78 <__cvt+0x34>
 8006e76:	3401      	adds	r4, #1
 8006e78:	2102      	movs	r1, #2
 8006e7a:	e000      	b.n	8006e7e <__cvt+0x3a>
 8006e7c:	2103      	movs	r1, #3
 8006e7e:	ab03      	add	r3, sp, #12
 8006e80:	9301      	str	r3, [sp, #4]
 8006e82:	ab02      	add	r3, sp, #8
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	4622      	mov	r2, r4
 8006e88:	4633      	mov	r3, r6
 8006e8a:	eeb0 0b48 	vmov.f64	d0, d8
 8006e8e:	f000 fe5b 	bl	8007b48 <_dtoa_r>
 8006e92:	2d47      	cmp	r5, #71	@ 0x47
 8006e94:	d114      	bne.n	8006ec0 <__cvt+0x7c>
 8006e96:	07fb      	lsls	r3, r7, #31
 8006e98:	d50a      	bpl.n	8006eb0 <__cvt+0x6c>
 8006e9a:	1902      	adds	r2, r0, r4
 8006e9c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ea4:	bf08      	it	eq
 8006ea6:	9203      	streq	r2, [sp, #12]
 8006ea8:	2130      	movs	r1, #48	@ 0x30
 8006eaa:	9b03      	ldr	r3, [sp, #12]
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d319      	bcc.n	8006ee4 <__cvt+0xa0>
 8006eb0:	9b03      	ldr	r3, [sp, #12]
 8006eb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006eb4:	1a1b      	subs	r3, r3, r0
 8006eb6:	6013      	str	r3, [r2, #0]
 8006eb8:	b005      	add	sp, #20
 8006eba:	ecbd 8b02 	vpop	{d8}
 8006ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ec0:	2d46      	cmp	r5, #70	@ 0x46
 8006ec2:	eb00 0204 	add.w	r2, r0, r4
 8006ec6:	d1e9      	bne.n	8006e9c <__cvt+0x58>
 8006ec8:	7803      	ldrb	r3, [r0, #0]
 8006eca:	2b30      	cmp	r3, #48	@ 0x30
 8006ecc:	d107      	bne.n	8006ede <__cvt+0x9a>
 8006ece:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed6:	bf1c      	itt	ne
 8006ed8:	f1c4 0401 	rsbne	r4, r4, #1
 8006edc:	6034      	strne	r4, [r6, #0]
 8006ede:	6833      	ldr	r3, [r6, #0]
 8006ee0:	441a      	add	r2, r3
 8006ee2:	e7db      	b.n	8006e9c <__cvt+0x58>
 8006ee4:	1c5c      	adds	r4, r3, #1
 8006ee6:	9403      	str	r4, [sp, #12]
 8006ee8:	7019      	strb	r1, [r3, #0]
 8006eea:	e7de      	b.n	8006eaa <__cvt+0x66>

08006eec <__exponent>:
 8006eec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006eee:	2900      	cmp	r1, #0
 8006ef0:	bfba      	itte	lt
 8006ef2:	4249      	neglt	r1, r1
 8006ef4:	232d      	movlt	r3, #45	@ 0x2d
 8006ef6:	232b      	movge	r3, #43	@ 0x2b
 8006ef8:	2909      	cmp	r1, #9
 8006efa:	7002      	strb	r2, [r0, #0]
 8006efc:	7043      	strb	r3, [r0, #1]
 8006efe:	dd29      	ble.n	8006f54 <__exponent+0x68>
 8006f00:	f10d 0307 	add.w	r3, sp, #7
 8006f04:	461d      	mov	r5, r3
 8006f06:	270a      	movs	r7, #10
 8006f08:	461a      	mov	r2, r3
 8006f0a:	fbb1 f6f7 	udiv	r6, r1, r7
 8006f0e:	fb07 1416 	mls	r4, r7, r6, r1
 8006f12:	3430      	adds	r4, #48	@ 0x30
 8006f14:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006f18:	460c      	mov	r4, r1
 8006f1a:	2c63      	cmp	r4, #99	@ 0x63
 8006f1c:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f20:	4631      	mov	r1, r6
 8006f22:	dcf1      	bgt.n	8006f08 <__exponent+0x1c>
 8006f24:	3130      	adds	r1, #48	@ 0x30
 8006f26:	1e94      	subs	r4, r2, #2
 8006f28:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006f2c:	1c41      	adds	r1, r0, #1
 8006f2e:	4623      	mov	r3, r4
 8006f30:	42ab      	cmp	r3, r5
 8006f32:	d30a      	bcc.n	8006f4a <__exponent+0x5e>
 8006f34:	f10d 0309 	add.w	r3, sp, #9
 8006f38:	1a9b      	subs	r3, r3, r2
 8006f3a:	42ac      	cmp	r4, r5
 8006f3c:	bf88      	it	hi
 8006f3e:	2300      	movhi	r3, #0
 8006f40:	3302      	adds	r3, #2
 8006f42:	4403      	add	r3, r0
 8006f44:	1a18      	subs	r0, r3, r0
 8006f46:	b003      	add	sp, #12
 8006f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f4a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006f4e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006f52:	e7ed      	b.n	8006f30 <__exponent+0x44>
 8006f54:	2330      	movs	r3, #48	@ 0x30
 8006f56:	3130      	adds	r1, #48	@ 0x30
 8006f58:	7083      	strb	r3, [r0, #2]
 8006f5a:	70c1      	strb	r1, [r0, #3]
 8006f5c:	1d03      	adds	r3, r0, #4
 8006f5e:	e7f1      	b.n	8006f44 <__exponent+0x58>

08006f60 <_printf_float>:
 8006f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f64:	b08d      	sub	sp, #52	@ 0x34
 8006f66:	460c      	mov	r4, r1
 8006f68:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006f6c:	4616      	mov	r6, r2
 8006f6e:	461f      	mov	r7, r3
 8006f70:	4605      	mov	r5, r0
 8006f72:	f000 fcd7 	bl	8007924 <_localeconv_r>
 8006f76:	f8d0 b000 	ldr.w	fp, [r0]
 8006f7a:	4658      	mov	r0, fp
 8006f7c:	f7f9 fa18 	bl	80003b0 <strlen>
 8006f80:	2300      	movs	r3, #0
 8006f82:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f84:	f8d8 3000 	ldr.w	r3, [r8]
 8006f88:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006f8c:	6822      	ldr	r2, [r4, #0]
 8006f8e:	9005      	str	r0, [sp, #20]
 8006f90:	3307      	adds	r3, #7
 8006f92:	f023 0307 	bic.w	r3, r3, #7
 8006f96:	f103 0108 	add.w	r1, r3, #8
 8006f9a:	f8c8 1000 	str.w	r1, [r8]
 8006f9e:	ed93 0b00 	vldr	d0, [r3]
 8006fa2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8007200 <_printf_float+0x2a0>
 8006fa6:	eeb0 7bc0 	vabs.f64	d7, d0
 8006faa:	eeb4 7b46 	vcmp.f64	d7, d6
 8006fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8006fb6:	dd24      	ble.n	8007002 <_printf_float+0xa2>
 8006fb8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fc0:	d502      	bpl.n	8006fc8 <_printf_float+0x68>
 8006fc2:	232d      	movs	r3, #45	@ 0x2d
 8006fc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fc8:	498f      	ldr	r1, [pc, #572]	@ (8007208 <_printf_float+0x2a8>)
 8006fca:	4b90      	ldr	r3, [pc, #576]	@ (800720c <_printf_float+0x2ac>)
 8006fcc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006fd0:	bf94      	ite	ls
 8006fd2:	4688      	movls	r8, r1
 8006fd4:	4698      	movhi	r8, r3
 8006fd6:	f022 0204 	bic.w	r2, r2, #4
 8006fda:	2303      	movs	r3, #3
 8006fdc:	6123      	str	r3, [r4, #16]
 8006fde:	6022      	str	r2, [r4, #0]
 8006fe0:	f04f 0a00 	mov.w	sl, #0
 8006fe4:	9700      	str	r7, [sp, #0]
 8006fe6:	4633      	mov	r3, r6
 8006fe8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006fea:	4621      	mov	r1, r4
 8006fec:	4628      	mov	r0, r5
 8006fee:	f000 f9d1 	bl	8007394 <_printf_common>
 8006ff2:	3001      	adds	r0, #1
 8006ff4:	f040 8089 	bne.w	800710a <_printf_float+0x1aa>
 8006ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffc:	b00d      	add	sp, #52	@ 0x34
 8006ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007002:	eeb4 0b40 	vcmp.f64	d0, d0
 8007006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800700a:	d709      	bvc.n	8007020 <_printf_float+0xc0>
 800700c:	ee10 3a90 	vmov	r3, s1
 8007010:	2b00      	cmp	r3, #0
 8007012:	bfbc      	itt	lt
 8007014:	232d      	movlt	r3, #45	@ 0x2d
 8007016:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800701a:	497d      	ldr	r1, [pc, #500]	@ (8007210 <_printf_float+0x2b0>)
 800701c:	4b7d      	ldr	r3, [pc, #500]	@ (8007214 <_printf_float+0x2b4>)
 800701e:	e7d5      	b.n	8006fcc <_printf_float+0x6c>
 8007020:	6863      	ldr	r3, [r4, #4]
 8007022:	1c59      	adds	r1, r3, #1
 8007024:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8007028:	d139      	bne.n	800709e <_printf_float+0x13e>
 800702a:	2306      	movs	r3, #6
 800702c:	6063      	str	r3, [r4, #4]
 800702e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007032:	2300      	movs	r3, #0
 8007034:	6022      	str	r2, [r4, #0]
 8007036:	9303      	str	r3, [sp, #12]
 8007038:	ab0a      	add	r3, sp, #40	@ 0x28
 800703a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800703e:	ab09      	add	r3, sp, #36	@ 0x24
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	6861      	ldr	r1, [r4, #4]
 8007044:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007048:	4628      	mov	r0, r5
 800704a:	f7ff fefb 	bl	8006e44 <__cvt>
 800704e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007052:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007054:	4680      	mov	r8, r0
 8007056:	d129      	bne.n	80070ac <_printf_float+0x14c>
 8007058:	1cc8      	adds	r0, r1, #3
 800705a:	db02      	blt.n	8007062 <_printf_float+0x102>
 800705c:	6863      	ldr	r3, [r4, #4]
 800705e:	4299      	cmp	r1, r3
 8007060:	dd41      	ble.n	80070e6 <_printf_float+0x186>
 8007062:	f1a9 0902 	sub.w	r9, r9, #2
 8007066:	fa5f f989 	uxtb.w	r9, r9
 800706a:	3901      	subs	r1, #1
 800706c:	464a      	mov	r2, r9
 800706e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007072:	9109      	str	r1, [sp, #36]	@ 0x24
 8007074:	f7ff ff3a 	bl	8006eec <__exponent>
 8007078:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800707a:	1813      	adds	r3, r2, r0
 800707c:	2a01      	cmp	r2, #1
 800707e:	4682      	mov	sl, r0
 8007080:	6123      	str	r3, [r4, #16]
 8007082:	dc02      	bgt.n	800708a <_printf_float+0x12a>
 8007084:	6822      	ldr	r2, [r4, #0]
 8007086:	07d2      	lsls	r2, r2, #31
 8007088:	d501      	bpl.n	800708e <_printf_float+0x12e>
 800708a:	3301      	adds	r3, #1
 800708c:	6123      	str	r3, [r4, #16]
 800708e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0a6      	beq.n	8006fe4 <_printf_float+0x84>
 8007096:	232d      	movs	r3, #45	@ 0x2d
 8007098:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800709c:	e7a2      	b.n	8006fe4 <_printf_float+0x84>
 800709e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80070a2:	d1c4      	bne.n	800702e <_printf_float+0xce>
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1c2      	bne.n	800702e <_printf_float+0xce>
 80070a8:	2301      	movs	r3, #1
 80070aa:	e7bf      	b.n	800702c <_printf_float+0xcc>
 80070ac:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80070b0:	d9db      	bls.n	800706a <_printf_float+0x10a>
 80070b2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80070b6:	d118      	bne.n	80070ea <_printf_float+0x18a>
 80070b8:	2900      	cmp	r1, #0
 80070ba:	6863      	ldr	r3, [r4, #4]
 80070bc:	dd0b      	ble.n	80070d6 <_printf_float+0x176>
 80070be:	6121      	str	r1, [r4, #16]
 80070c0:	b913      	cbnz	r3, 80070c8 <_printf_float+0x168>
 80070c2:	6822      	ldr	r2, [r4, #0]
 80070c4:	07d0      	lsls	r0, r2, #31
 80070c6:	d502      	bpl.n	80070ce <_printf_float+0x16e>
 80070c8:	3301      	adds	r3, #1
 80070ca:	440b      	add	r3, r1
 80070cc:	6123      	str	r3, [r4, #16]
 80070ce:	65a1      	str	r1, [r4, #88]	@ 0x58
 80070d0:	f04f 0a00 	mov.w	sl, #0
 80070d4:	e7db      	b.n	800708e <_printf_float+0x12e>
 80070d6:	b913      	cbnz	r3, 80070de <_printf_float+0x17e>
 80070d8:	6822      	ldr	r2, [r4, #0]
 80070da:	07d2      	lsls	r2, r2, #31
 80070dc:	d501      	bpl.n	80070e2 <_printf_float+0x182>
 80070de:	3302      	adds	r3, #2
 80070e0:	e7f4      	b.n	80070cc <_printf_float+0x16c>
 80070e2:	2301      	movs	r3, #1
 80070e4:	e7f2      	b.n	80070cc <_printf_float+0x16c>
 80070e6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80070ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070ec:	4299      	cmp	r1, r3
 80070ee:	db05      	blt.n	80070fc <_printf_float+0x19c>
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	6121      	str	r1, [r4, #16]
 80070f4:	07d8      	lsls	r0, r3, #31
 80070f6:	d5ea      	bpl.n	80070ce <_printf_float+0x16e>
 80070f8:	1c4b      	adds	r3, r1, #1
 80070fa:	e7e7      	b.n	80070cc <_printf_float+0x16c>
 80070fc:	2900      	cmp	r1, #0
 80070fe:	bfd4      	ite	le
 8007100:	f1c1 0202 	rsble	r2, r1, #2
 8007104:	2201      	movgt	r2, #1
 8007106:	4413      	add	r3, r2
 8007108:	e7e0      	b.n	80070cc <_printf_float+0x16c>
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	055a      	lsls	r2, r3, #21
 800710e:	d407      	bmi.n	8007120 <_printf_float+0x1c0>
 8007110:	6923      	ldr	r3, [r4, #16]
 8007112:	4642      	mov	r2, r8
 8007114:	4631      	mov	r1, r6
 8007116:	4628      	mov	r0, r5
 8007118:	47b8      	blx	r7
 800711a:	3001      	adds	r0, #1
 800711c:	d12a      	bne.n	8007174 <_printf_float+0x214>
 800711e:	e76b      	b.n	8006ff8 <_printf_float+0x98>
 8007120:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007124:	f240 80e0 	bls.w	80072e8 <_printf_float+0x388>
 8007128:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800712c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007134:	d133      	bne.n	800719e <_printf_float+0x23e>
 8007136:	4a38      	ldr	r2, [pc, #224]	@ (8007218 <_printf_float+0x2b8>)
 8007138:	2301      	movs	r3, #1
 800713a:	4631      	mov	r1, r6
 800713c:	4628      	mov	r0, r5
 800713e:	47b8      	blx	r7
 8007140:	3001      	adds	r0, #1
 8007142:	f43f af59 	beq.w	8006ff8 <_printf_float+0x98>
 8007146:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800714a:	4543      	cmp	r3, r8
 800714c:	db02      	blt.n	8007154 <_printf_float+0x1f4>
 800714e:	6823      	ldr	r3, [r4, #0]
 8007150:	07d8      	lsls	r0, r3, #31
 8007152:	d50f      	bpl.n	8007174 <_printf_float+0x214>
 8007154:	9b05      	ldr	r3, [sp, #20]
 8007156:	465a      	mov	r2, fp
 8007158:	4631      	mov	r1, r6
 800715a:	4628      	mov	r0, r5
 800715c:	47b8      	blx	r7
 800715e:	3001      	adds	r0, #1
 8007160:	f43f af4a 	beq.w	8006ff8 <_printf_float+0x98>
 8007164:	f04f 0900 	mov.w	r9, #0
 8007168:	f108 38ff 	add.w	r8, r8, #4294967295
 800716c:	f104 0a1a 	add.w	sl, r4, #26
 8007170:	45c8      	cmp	r8, r9
 8007172:	dc09      	bgt.n	8007188 <_printf_float+0x228>
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	079b      	lsls	r3, r3, #30
 8007178:	f100 8107 	bmi.w	800738a <_printf_float+0x42a>
 800717c:	68e0      	ldr	r0, [r4, #12]
 800717e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007180:	4298      	cmp	r0, r3
 8007182:	bfb8      	it	lt
 8007184:	4618      	movlt	r0, r3
 8007186:	e739      	b.n	8006ffc <_printf_float+0x9c>
 8007188:	2301      	movs	r3, #1
 800718a:	4652      	mov	r2, sl
 800718c:	4631      	mov	r1, r6
 800718e:	4628      	mov	r0, r5
 8007190:	47b8      	blx	r7
 8007192:	3001      	adds	r0, #1
 8007194:	f43f af30 	beq.w	8006ff8 <_printf_float+0x98>
 8007198:	f109 0901 	add.w	r9, r9, #1
 800719c:	e7e8      	b.n	8007170 <_printf_float+0x210>
 800719e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	dc3b      	bgt.n	800721c <_printf_float+0x2bc>
 80071a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007218 <_printf_float+0x2b8>)
 80071a6:	2301      	movs	r3, #1
 80071a8:	4631      	mov	r1, r6
 80071aa:	4628      	mov	r0, r5
 80071ac:	47b8      	blx	r7
 80071ae:	3001      	adds	r0, #1
 80071b0:	f43f af22 	beq.w	8006ff8 <_printf_float+0x98>
 80071b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80071b8:	ea59 0303 	orrs.w	r3, r9, r3
 80071bc:	d102      	bne.n	80071c4 <_printf_float+0x264>
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	07d9      	lsls	r1, r3, #31
 80071c2:	d5d7      	bpl.n	8007174 <_printf_float+0x214>
 80071c4:	9b05      	ldr	r3, [sp, #20]
 80071c6:	465a      	mov	r2, fp
 80071c8:	4631      	mov	r1, r6
 80071ca:	4628      	mov	r0, r5
 80071cc:	47b8      	blx	r7
 80071ce:	3001      	adds	r0, #1
 80071d0:	f43f af12 	beq.w	8006ff8 <_printf_float+0x98>
 80071d4:	f04f 0a00 	mov.w	sl, #0
 80071d8:	f104 0b1a 	add.w	fp, r4, #26
 80071dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071de:	425b      	negs	r3, r3
 80071e0:	4553      	cmp	r3, sl
 80071e2:	dc01      	bgt.n	80071e8 <_printf_float+0x288>
 80071e4:	464b      	mov	r3, r9
 80071e6:	e794      	b.n	8007112 <_printf_float+0x1b2>
 80071e8:	2301      	movs	r3, #1
 80071ea:	465a      	mov	r2, fp
 80071ec:	4631      	mov	r1, r6
 80071ee:	4628      	mov	r0, r5
 80071f0:	47b8      	blx	r7
 80071f2:	3001      	adds	r0, #1
 80071f4:	f43f af00 	beq.w	8006ff8 <_printf_float+0x98>
 80071f8:	f10a 0a01 	add.w	sl, sl, #1
 80071fc:	e7ee      	b.n	80071dc <_printf_float+0x27c>
 80071fe:	bf00      	nop
 8007200:	ffffffff 	.word	0xffffffff
 8007204:	7fefffff 	.word	0x7fefffff
 8007208:	0800975c 	.word	0x0800975c
 800720c:	08009760 	.word	0x08009760
 8007210:	08009764 	.word	0x08009764
 8007214:	08009768 	.word	0x08009768
 8007218:	0800976c 	.word	0x0800976c
 800721c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800721e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007222:	4553      	cmp	r3, sl
 8007224:	bfa8      	it	ge
 8007226:	4653      	movge	r3, sl
 8007228:	2b00      	cmp	r3, #0
 800722a:	4699      	mov	r9, r3
 800722c:	dc37      	bgt.n	800729e <_printf_float+0x33e>
 800722e:	2300      	movs	r3, #0
 8007230:	9307      	str	r3, [sp, #28]
 8007232:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007236:	f104 021a 	add.w	r2, r4, #26
 800723a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800723c:	9907      	ldr	r1, [sp, #28]
 800723e:	9306      	str	r3, [sp, #24]
 8007240:	eba3 0309 	sub.w	r3, r3, r9
 8007244:	428b      	cmp	r3, r1
 8007246:	dc31      	bgt.n	80072ac <_printf_float+0x34c>
 8007248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800724a:	459a      	cmp	sl, r3
 800724c:	dc3b      	bgt.n	80072c6 <_printf_float+0x366>
 800724e:	6823      	ldr	r3, [r4, #0]
 8007250:	07da      	lsls	r2, r3, #31
 8007252:	d438      	bmi.n	80072c6 <_printf_float+0x366>
 8007254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007256:	ebaa 0903 	sub.w	r9, sl, r3
 800725a:	9b06      	ldr	r3, [sp, #24]
 800725c:	ebaa 0303 	sub.w	r3, sl, r3
 8007260:	4599      	cmp	r9, r3
 8007262:	bfa8      	it	ge
 8007264:	4699      	movge	r9, r3
 8007266:	f1b9 0f00 	cmp.w	r9, #0
 800726a:	dc34      	bgt.n	80072d6 <_printf_float+0x376>
 800726c:	f04f 0800 	mov.w	r8, #0
 8007270:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007274:	f104 0b1a 	add.w	fp, r4, #26
 8007278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800727a:	ebaa 0303 	sub.w	r3, sl, r3
 800727e:	eba3 0309 	sub.w	r3, r3, r9
 8007282:	4543      	cmp	r3, r8
 8007284:	f77f af76 	ble.w	8007174 <_printf_float+0x214>
 8007288:	2301      	movs	r3, #1
 800728a:	465a      	mov	r2, fp
 800728c:	4631      	mov	r1, r6
 800728e:	4628      	mov	r0, r5
 8007290:	47b8      	blx	r7
 8007292:	3001      	adds	r0, #1
 8007294:	f43f aeb0 	beq.w	8006ff8 <_printf_float+0x98>
 8007298:	f108 0801 	add.w	r8, r8, #1
 800729c:	e7ec      	b.n	8007278 <_printf_float+0x318>
 800729e:	4642      	mov	r2, r8
 80072a0:	4631      	mov	r1, r6
 80072a2:	4628      	mov	r0, r5
 80072a4:	47b8      	blx	r7
 80072a6:	3001      	adds	r0, #1
 80072a8:	d1c1      	bne.n	800722e <_printf_float+0x2ce>
 80072aa:	e6a5      	b.n	8006ff8 <_printf_float+0x98>
 80072ac:	2301      	movs	r3, #1
 80072ae:	4631      	mov	r1, r6
 80072b0:	4628      	mov	r0, r5
 80072b2:	9206      	str	r2, [sp, #24]
 80072b4:	47b8      	blx	r7
 80072b6:	3001      	adds	r0, #1
 80072b8:	f43f ae9e 	beq.w	8006ff8 <_printf_float+0x98>
 80072bc:	9b07      	ldr	r3, [sp, #28]
 80072be:	9a06      	ldr	r2, [sp, #24]
 80072c0:	3301      	adds	r3, #1
 80072c2:	9307      	str	r3, [sp, #28]
 80072c4:	e7b9      	b.n	800723a <_printf_float+0x2da>
 80072c6:	9b05      	ldr	r3, [sp, #20]
 80072c8:	465a      	mov	r2, fp
 80072ca:	4631      	mov	r1, r6
 80072cc:	4628      	mov	r0, r5
 80072ce:	47b8      	blx	r7
 80072d0:	3001      	adds	r0, #1
 80072d2:	d1bf      	bne.n	8007254 <_printf_float+0x2f4>
 80072d4:	e690      	b.n	8006ff8 <_printf_float+0x98>
 80072d6:	9a06      	ldr	r2, [sp, #24]
 80072d8:	464b      	mov	r3, r9
 80072da:	4442      	add	r2, r8
 80072dc:	4631      	mov	r1, r6
 80072de:	4628      	mov	r0, r5
 80072e0:	47b8      	blx	r7
 80072e2:	3001      	adds	r0, #1
 80072e4:	d1c2      	bne.n	800726c <_printf_float+0x30c>
 80072e6:	e687      	b.n	8006ff8 <_printf_float+0x98>
 80072e8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80072ec:	f1b9 0f01 	cmp.w	r9, #1
 80072f0:	dc01      	bgt.n	80072f6 <_printf_float+0x396>
 80072f2:	07db      	lsls	r3, r3, #31
 80072f4:	d536      	bpl.n	8007364 <_printf_float+0x404>
 80072f6:	2301      	movs	r3, #1
 80072f8:	4642      	mov	r2, r8
 80072fa:	4631      	mov	r1, r6
 80072fc:	4628      	mov	r0, r5
 80072fe:	47b8      	blx	r7
 8007300:	3001      	adds	r0, #1
 8007302:	f43f ae79 	beq.w	8006ff8 <_printf_float+0x98>
 8007306:	9b05      	ldr	r3, [sp, #20]
 8007308:	465a      	mov	r2, fp
 800730a:	4631      	mov	r1, r6
 800730c:	4628      	mov	r0, r5
 800730e:	47b8      	blx	r7
 8007310:	3001      	adds	r0, #1
 8007312:	f43f ae71 	beq.w	8006ff8 <_printf_float+0x98>
 8007316:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800731a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800731e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007322:	f109 39ff 	add.w	r9, r9, #4294967295
 8007326:	d018      	beq.n	800735a <_printf_float+0x3fa>
 8007328:	464b      	mov	r3, r9
 800732a:	f108 0201 	add.w	r2, r8, #1
 800732e:	4631      	mov	r1, r6
 8007330:	4628      	mov	r0, r5
 8007332:	47b8      	blx	r7
 8007334:	3001      	adds	r0, #1
 8007336:	d10c      	bne.n	8007352 <_printf_float+0x3f2>
 8007338:	e65e      	b.n	8006ff8 <_printf_float+0x98>
 800733a:	2301      	movs	r3, #1
 800733c:	465a      	mov	r2, fp
 800733e:	4631      	mov	r1, r6
 8007340:	4628      	mov	r0, r5
 8007342:	47b8      	blx	r7
 8007344:	3001      	adds	r0, #1
 8007346:	f43f ae57 	beq.w	8006ff8 <_printf_float+0x98>
 800734a:	f108 0801 	add.w	r8, r8, #1
 800734e:	45c8      	cmp	r8, r9
 8007350:	dbf3      	blt.n	800733a <_printf_float+0x3da>
 8007352:	4653      	mov	r3, sl
 8007354:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007358:	e6dc      	b.n	8007114 <_printf_float+0x1b4>
 800735a:	f04f 0800 	mov.w	r8, #0
 800735e:	f104 0b1a 	add.w	fp, r4, #26
 8007362:	e7f4      	b.n	800734e <_printf_float+0x3ee>
 8007364:	2301      	movs	r3, #1
 8007366:	4642      	mov	r2, r8
 8007368:	e7e1      	b.n	800732e <_printf_float+0x3ce>
 800736a:	2301      	movs	r3, #1
 800736c:	464a      	mov	r2, r9
 800736e:	4631      	mov	r1, r6
 8007370:	4628      	mov	r0, r5
 8007372:	47b8      	blx	r7
 8007374:	3001      	adds	r0, #1
 8007376:	f43f ae3f 	beq.w	8006ff8 <_printf_float+0x98>
 800737a:	f108 0801 	add.w	r8, r8, #1
 800737e:	68e3      	ldr	r3, [r4, #12]
 8007380:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007382:	1a5b      	subs	r3, r3, r1
 8007384:	4543      	cmp	r3, r8
 8007386:	dcf0      	bgt.n	800736a <_printf_float+0x40a>
 8007388:	e6f8      	b.n	800717c <_printf_float+0x21c>
 800738a:	f04f 0800 	mov.w	r8, #0
 800738e:	f104 0919 	add.w	r9, r4, #25
 8007392:	e7f4      	b.n	800737e <_printf_float+0x41e>

08007394 <_printf_common>:
 8007394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007398:	4616      	mov	r6, r2
 800739a:	4698      	mov	r8, r3
 800739c:	688a      	ldr	r2, [r1, #8]
 800739e:	690b      	ldr	r3, [r1, #16]
 80073a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80073a4:	4293      	cmp	r3, r2
 80073a6:	bfb8      	it	lt
 80073a8:	4613      	movlt	r3, r2
 80073aa:	6033      	str	r3, [r6, #0]
 80073ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80073b0:	4607      	mov	r7, r0
 80073b2:	460c      	mov	r4, r1
 80073b4:	b10a      	cbz	r2, 80073ba <_printf_common+0x26>
 80073b6:	3301      	adds	r3, #1
 80073b8:	6033      	str	r3, [r6, #0]
 80073ba:	6823      	ldr	r3, [r4, #0]
 80073bc:	0699      	lsls	r1, r3, #26
 80073be:	bf42      	ittt	mi
 80073c0:	6833      	ldrmi	r3, [r6, #0]
 80073c2:	3302      	addmi	r3, #2
 80073c4:	6033      	strmi	r3, [r6, #0]
 80073c6:	6825      	ldr	r5, [r4, #0]
 80073c8:	f015 0506 	ands.w	r5, r5, #6
 80073cc:	d106      	bne.n	80073dc <_printf_common+0x48>
 80073ce:	f104 0a19 	add.w	sl, r4, #25
 80073d2:	68e3      	ldr	r3, [r4, #12]
 80073d4:	6832      	ldr	r2, [r6, #0]
 80073d6:	1a9b      	subs	r3, r3, r2
 80073d8:	42ab      	cmp	r3, r5
 80073da:	dc26      	bgt.n	800742a <_printf_common+0x96>
 80073dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073e0:	6822      	ldr	r2, [r4, #0]
 80073e2:	3b00      	subs	r3, #0
 80073e4:	bf18      	it	ne
 80073e6:	2301      	movne	r3, #1
 80073e8:	0692      	lsls	r2, r2, #26
 80073ea:	d42b      	bmi.n	8007444 <_printf_common+0xb0>
 80073ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80073f0:	4641      	mov	r1, r8
 80073f2:	4638      	mov	r0, r7
 80073f4:	47c8      	blx	r9
 80073f6:	3001      	adds	r0, #1
 80073f8:	d01e      	beq.n	8007438 <_printf_common+0xa4>
 80073fa:	6823      	ldr	r3, [r4, #0]
 80073fc:	6922      	ldr	r2, [r4, #16]
 80073fe:	f003 0306 	and.w	r3, r3, #6
 8007402:	2b04      	cmp	r3, #4
 8007404:	bf02      	ittt	eq
 8007406:	68e5      	ldreq	r5, [r4, #12]
 8007408:	6833      	ldreq	r3, [r6, #0]
 800740a:	1aed      	subeq	r5, r5, r3
 800740c:	68a3      	ldr	r3, [r4, #8]
 800740e:	bf0c      	ite	eq
 8007410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007414:	2500      	movne	r5, #0
 8007416:	4293      	cmp	r3, r2
 8007418:	bfc4      	itt	gt
 800741a:	1a9b      	subgt	r3, r3, r2
 800741c:	18ed      	addgt	r5, r5, r3
 800741e:	2600      	movs	r6, #0
 8007420:	341a      	adds	r4, #26
 8007422:	42b5      	cmp	r5, r6
 8007424:	d11a      	bne.n	800745c <_printf_common+0xc8>
 8007426:	2000      	movs	r0, #0
 8007428:	e008      	b.n	800743c <_printf_common+0xa8>
 800742a:	2301      	movs	r3, #1
 800742c:	4652      	mov	r2, sl
 800742e:	4641      	mov	r1, r8
 8007430:	4638      	mov	r0, r7
 8007432:	47c8      	blx	r9
 8007434:	3001      	adds	r0, #1
 8007436:	d103      	bne.n	8007440 <_printf_common+0xac>
 8007438:	f04f 30ff 	mov.w	r0, #4294967295
 800743c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007440:	3501      	adds	r5, #1
 8007442:	e7c6      	b.n	80073d2 <_printf_common+0x3e>
 8007444:	18e1      	adds	r1, r4, r3
 8007446:	1c5a      	adds	r2, r3, #1
 8007448:	2030      	movs	r0, #48	@ 0x30
 800744a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800744e:	4422      	add	r2, r4
 8007450:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007454:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007458:	3302      	adds	r3, #2
 800745a:	e7c7      	b.n	80073ec <_printf_common+0x58>
 800745c:	2301      	movs	r3, #1
 800745e:	4622      	mov	r2, r4
 8007460:	4641      	mov	r1, r8
 8007462:	4638      	mov	r0, r7
 8007464:	47c8      	blx	r9
 8007466:	3001      	adds	r0, #1
 8007468:	d0e6      	beq.n	8007438 <_printf_common+0xa4>
 800746a:	3601      	adds	r6, #1
 800746c:	e7d9      	b.n	8007422 <_printf_common+0x8e>
	...

08007470 <_printf_i>:
 8007470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007474:	7e0f      	ldrb	r7, [r1, #24]
 8007476:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007478:	2f78      	cmp	r7, #120	@ 0x78
 800747a:	4691      	mov	r9, r2
 800747c:	4680      	mov	r8, r0
 800747e:	460c      	mov	r4, r1
 8007480:	469a      	mov	sl, r3
 8007482:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007486:	d807      	bhi.n	8007498 <_printf_i+0x28>
 8007488:	2f62      	cmp	r7, #98	@ 0x62
 800748a:	d80a      	bhi.n	80074a2 <_printf_i+0x32>
 800748c:	2f00      	cmp	r7, #0
 800748e:	f000 80d2 	beq.w	8007636 <_printf_i+0x1c6>
 8007492:	2f58      	cmp	r7, #88	@ 0x58
 8007494:	f000 80b9 	beq.w	800760a <_printf_i+0x19a>
 8007498:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800749c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80074a0:	e03a      	b.n	8007518 <_printf_i+0xa8>
 80074a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80074a6:	2b15      	cmp	r3, #21
 80074a8:	d8f6      	bhi.n	8007498 <_printf_i+0x28>
 80074aa:	a101      	add	r1, pc, #4	@ (adr r1, 80074b0 <_printf_i+0x40>)
 80074ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074b0:	08007509 	.word	0x08007509
 80074b4:	0800751d 	.word	0x0800751d
 80074b8:	08007499 	.word	0x08007499
 80074bc:	08007499 	.word	0x08007499
 80074c0:	08007499 	.word	0x08007499
 80074c4:	08007499 	.word	0x08007499
 80074c8:	0800751d 	.word	0x0800751d
 80074cc:	08007499 	.word	0x08007499
 80074d0:	08007499 	.word	0x08007499
 80074d4:	08007499 	.word	0x08007499
 80074d8:	08007499 	.word	0x08007499
 80074dc:	0800761d 	.word	0x0800761d
 80074e0:	08007547 	.word	0x08007547
 80074e4:	080075d7 	.word	0x080075d7
 80074e8:	08007499 	.word	0x08007499
 80074ec:	08007499 	.word	0x08007499
 80074f0:	0800763f 	.word	0x0800763f
 80074f4:	08007499 	.word	0x08007499
 80074f8:	08007547 	.word	0x08007547
 80074fc:	08007499 	.word	0x08007499
 8007500:	08007499 	.word	0x08007499
 8007504:	080075df 	.word	0x080075df
 8007508:	6833      	ldr	r3, [r6, #0]
 800750a:	1d1a      	adds	r2, r3, #4
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6032      	str	r2, [r6, #0]
 8007510:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007514:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007518:	2301      	movs	r3, #1
 800751a:	e09d      	b.n	8007658 <_printf_i+0x1e8>
 800751c:	6833      	ldr	r3, [r6, #0]
 800751e:	6820      	ldr	r0, [r4, #0]
 8007520:	1d19      	adds	r1, r3, #4
 8007522:	6031      	str	r1, [r6, #0]
 8007524:	0606      	lsls	r6, r0, #24
 8007526:	d501      	bpl.n	800752c <_printf_i+0xbc>
 8007528:	681d      	ldr	r5, [r3, #0]
 800752a:	e003      	b.n	8007534 <_printf_i+0xc4>
 800752c:	0645      	lsls	r5, r0, #25
 800752e:	d5fb      	bpl.n	8007528 <_printf_i+0xb8>
 8007530:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007534:	2d00      	cmp	r5, #0
 8007536:	da03      	bge.n	8007540 <_printf_i+0xd0>
 8007538:	232d      	movs	r3, #45	@ 0x2d
 800753a:	426d      	negs	r5, r5
 800753c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007540:	4859      	ldr	r0, [pc, #356]	@ (80076a8 <_printf_i+0x238>)
 8007542:	230a      	movs	r3, #10
 8007544:	e011      	b.n	800756a <_printf_i+0xfa>
 8007546:	6821      	ldr	r1, [r4, #0]
 8007548:	6833      	ldr	r3, [r6, #0]
 800754a:	0608      	lsls	r0, r1, #24
 800754c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007550:	d402      	bmi.n	8007558 <_printf_i+0xe8>
 8007552:	0649      	lsls	r1, r1, #25
 8007554:	bf48      	it	mi
 8007556:	b2ad      	uxthmi	r5, r5
 8007558:	2f6f      	cmp	r7, #111	@ 0x6f
 800755a:	4853      	ldr	r0, [pc, #332]	@ (80076a8 <_printf_i+0x238>)
 800755c:	6033      	str	r3, [r6, #0]
 800755e:	bf14      	ite	ne
 8007560:	230a      	movne	r3, #10
 8007562:	2308      	moveq	r3, #8
 8007564:	2100      	movs	r1, #0
 8007566:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800756a:	6866      	ldr	r6, [r4, #4]
 800756c:	60a6      	str	r6, [r4, #8]
 800756e:	2e00      	cmp	r6, #0
 8007570:	bfa2      	ittt	ge
 8007572:	6821      	ldrge	r1, [r4, #0]
 8007574:	f021 0104 	bicge.w	r1, r1, #4
 8007578:	6021      	strge	r1, [r4, #0]
 800757a:	b90d      	cbnz	r5, 8007580 <_printf_i+0x110>
 800757c:	2e00      	cmp	r6, #0
 800757e:	d04b      	beq.n	8007618 <_printf_i+0x1a8>
 8007580:	4616      	mov	r6, r2
 8007582:	fbb5 f1f3 	udiv	r1, r5, r3
 8007586:	fb03 5711 	mls	r7, r3, r1, r5
 800758a:	5dc7      	ldrb	r7, [r0, r7]
 800758c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007590:	462f      	mov	r7, r5
 8007592:	42bb      	cmp	r3, r7
 8007594:	460d      	mov	r5, r1
 8007596:	d9f4      	bls.n	8007582 <_printf_i+0x112>
 8007598:	2b08      	cmp	r3, #8
 800759a:	d10b      	bne.n	80075b4 <_printf_i+0x144>
 800759c:	6823      	ldr	r3, [r4, #0]
 800759e:	07df      	lsls	r7, r3, #31
 80075a0:	d508      	bpl.n	80075b4 <_printf_i+0x144>
 80075a2:	6923      	ldr	r3, [r4, #16]
 80075a4:	6861      	ldr	r1, [r4, #4]
 80075a6:	4299      	cmp	r1, r3
 80075a8:	bfde      	ittt	le
 80075aa:	2330      	movle	r3, #48	@ 0x30
 80075ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075b4:	1b92      	subs	r2, r2, r6
 80075b6:	6122      	str	r2, [r4, #16]
 80075b8:	f8cd a000 	str.w	sl, [sp]
 80075bc:	464b      	mov	r3, r9
 80075be:	aa03      	add	r2, sp, #12
 80075c0:	4621      	mov	r1, r4
 80075c2:	4640      	mov	r0, r8
 80075c4:	f7ff fee6 	bl	8007394 <_printf_common>
 80075c8:	3001      	adds	r0, #1
 80075ca:	d14a      	bne.n	8007662 <_printf_i+0x1f2>
 80075cc:	f04f 30ff 	mov.w	r0, #4294967295
 80075d0:	b004      	add	sp, #16
 80075d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d6:	6823      	ldr	r3, [r4, #0]
 80075d8:	f043 0320 	orr.w	r3, r3, #32
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	4833      	ldr	r0, [pc, #204]	@ (80076ac <_printf_i+0x23c>)
 80075e0:	2778      	movs	r7, #120	@ 0x78
 80075e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075e6:	6823      	ldr	r3, [r4, #0]
 80075e8:	6831      	ldr	r1, [r6, #0]
 80075ea:	061f      	lsls	r7, r3, #24
 80075ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80075f0:	d402      	bmi.n	80075f8 <_printf_i+0x188>
 80075f2:	065f      	lsls	r7, r3, #25
 80075f4:	bf48      	it	mi
 80075f6:	b2ad      	uxthmi	r5, r5
 80075f8:	6031      	str	r1, [r6, #0]
 80075fa:	07d9      	lsls	r1, r3, #31
 80075fc:	bf44      	itt	mi
 80075fe:	f043 0320 	orrmi.w	r3, r3, #32
 8007602:	6023      	strmi	r3, [r4, #0]
 8007604:	b11d      	cbz	r5, 800760e <_printf_i+0x19e>
 8007606:	2310      	movs	r3, #16
 8007608:	e7ac      	b.n	8007564 <_printf_i+0xf4>
 800760a:	4827      	ldr	r0, [pc, #156]	@ (80076a8 <_printf_i+0x238>)
 800760c:	e7e9      	b.n	80075e2 <_printf_i+0x172>
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	f023 0320 	bic.w	r3, r3, #32
 8007614:	6023      	str	r3, [r4, #0]
 8007616:	e7f6      	b.n	8007606 <_printf_i+0x196>
 8007618:	4616      	mov	r6, r2
 800761a:	e7bd      	b.n	8007598 <_printf_i+0x128>
 800761c:	6833      	ldr	r3, [r6, #0]
 800761e:	6825      	ldr	r5, [r4, #0]
 8007620:	6961      	ldr	r1, [r4, #20]
 8007622:	1d18      	adds	r0, r3, #4
 8007624:	6030      	str	r0, [r6, #0]
 8007626:	062e      	lsls	r6, r5, #24
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	d501      	bpl.n	8007630 <_printf_i+0x1c0>
 800762c:	6019      	str	r1, [r3, #0]
 800762e:	e002      	b.n	8007636 <_printf_i+0x1c6>
 8007630:	0668      	lsls	r0, r5, #25
 8007632:	d5fb      	bpl.n	800762c <_printf_i+0x1bc>
 8007634:	8019      	strh	r1, [r3, #0]
 8007636:	2300      	movs	r3, #0
 8007638:	6123      	str	r3, [r4, #16]
 800763a:	4616      	mov	r6, r2
 800763c:	e7bc      	b.n	80075b8 <_printf_i+0x148>
 800763e:	6833      	ldr	r3, [r6, #0]
 8007640:	1d1a      	adds	r2, r3, #4
 8007642:	6032      	str	r2, [r6, #0]
 8007644:	681e      	ldr	r6, [r3, #0]
 8007646:	6862      	ldr	r2, [r4, #4]
 8007648:	2100      	movs	r1, #0
 800764a:	4630      	mov	r0, r6
 800764c:	f7f8 fe60 	bl	8000310 <memchr>
 8007650:	b108      	cbz	r0, 8007656 <_printf_i+0x1e6>
 8007652:	1b80      	subs	r0, r0, r6
 8007654:	6060      	str	r0, [r4, #4]
 8007656:	6863      	ldr	r3, [r4, #4]
 8007658:	6123      	str	r3, [r4, #16]
 800765a:	2300      	movs	r3, #0
 800765c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007660:	e7aa      	b.n	80075b8 <_printf_i+0x148>
 8007662:	6923      	ldr	r3, [r4, #16]
 8007664:	4632      	mov	r2, r6
 8007666:	4649      	mov	r1, r9
 8007668:	4640      	mov	r0, r8
 800766a:	47d0      	blx	sl
 800766c:	3001      	adds	r0, #1
 800766e:	d0ad      	beq.n	80075cc <_printf_i+0x15c>
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	079b      	lsls	r3, r3, #30
 8007674:	d413      	bmi.n	800769e <_printf_i+0x22e>
 8007676:	68e0      	ldr	r0, [r4, #12]
 8007678:	9b03      	ldr	r3, [sp, #12]
 800767a:	4298      	cmp	r0, r3
 800767c:	bfb8      	it	lt
 800767e:	4618      	movlt	r0, r3
 8007680:	e7a6      	b.n	80075d0 <_printf_i+0x160>
 8007682:	2301      	movs	r3, #1
 8007684:	4632      	mov	r2, r6
 8007686:	4649      	mov	r1, r9
 8007688:	4640      	mov	r0, r8
 800768a:	47d0      	blx	sl
 800768c:	3001      	adds	r0, #1
 800768e:	d09d      	beq.n	80075cc <_printf_i+0x15c>
 8007690:	3501      	adds	r5, #1
 8007692:	68e3      	ldr	r3, [r4, #12]
 8007694:	9903      	ldr	r1, [sp, #12]
 8007696:	1a5b      	subs	r3, r3, r1
 8007698:	42ab      	cmp	r3, r5
 800769a:	dcf2      	bgt.n	8007682 <_printf_i+0x212>
 800769c:	e7eb      	b.n	8007676 <_printf_i+0x206>
 800769e:	2500      	movs	r5, #0
 80076a0:	f104 0619 	add.w	r6, r4, #25
 80076a4:	e7f5      	b.n	8007692 <_printf_i+0x222>
 80076a6:	bf00      	nop
 80076a8:	0800976e 	.word	0x0800976e
 80076ac:	0800977f 	.word	0x0800977f

080076b0 <std>:
 80076b0:	2300      	movs	r3, #0
 80076b2:	b510      	push	{r4, lr}
 80076b4:	4604      	mov	r4, r0
 80076b6:	e9c0 3300 	strd	r3, r3, [r0]
 80076ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076be:	6083      	str	r3, [r0, #8]
 80076c0:	8181      	strh	r1, [r0, #12]
 80076c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80076c4:	81c2      	strh	r2, [r0, #14]
 80076c6:	6183      	str	r3, [r0, #24]
 80076c8:	4619      	mov	r1, r3
 80076ca:	2208      	movs	r2, #8
 80076cc:	305c      	adds	r0, #92	@ 0x5c
 80076ce:	f000 f920 	bl	8007912 <memset>
 80076d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007708 <std+0x58>)
 80076d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80076d6:	4b0d      	ldr	r3, [pc, #52]	@ (800770c <std+0x5c>)
 80076d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076da:	4b0d      	ldr	r3, [pc, #52]	@ (8007710 <std+0x60>)
 80076dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80076de:	4b0d      	ldr	r3, [pc, #52]	@ (8007714 <std+0x64>)
 80076e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80076e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007718 <std+0x68>)
 80076e4:	6224      	str	r4, [r4, #32]
 80076e6:	429c      	cmp	r4, r3
 80076e8:	d006      	beq.n	80076f8 <std+0x48>
 80076ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80076ee:	4294      	cmp	r4, r2
 80076f0:	d002      	beq.n	80076f8 <std+0x48>
 80076f2:	33d0      	adds	r3, #208	@ 0xd0
 80076f4:	429c      	cmp	r4, r3
 80076f6:	d105      	bne.n	8007704 <std+0x54>
 80076f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80076fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007700:	f000 b994 	b.w	8007a2c <__retarget_lock_init_recursive>
 8007704:	bd10      	pop	{r4, pc}
 8007706:	bf00      	nop
 8007708:	08007859 	.word	0x08007859
 800770c:	0800787b 	.word	0x0800787b
 8007710:	080078b3 	.word	0x080078b3
 8007714:	080078d7 	.word	0x080078d7
 8007718:	2400043c 	.word	0x2400043c

0800771c <stdio_exit_handler>:
 800771c:	4a02      	ldr	r2, [pc, #8]	@ (8007728 <stdio_exit_handler+0xc>)
 800771e:	4903      	ldr	r1, [pc, #12]	@ (800772c <stdio_exit_handler+0x10>)
 8007720:	4803      	ldr	r0, [pc, #12]	@ (8007730 <stdio_exit_handler+0x14>)
 8007722:	f000 b869 	b.w	80077f8 <_fwalk_sglue>
 8007726:	bf00      	nop
 8007728:	24000114 	.word	0x24000114
 800772c:	08009119 	.word	0x08009119
 8007730:	24000124 	.word	0x24000124

08007734 <cleanup_stdio>:
 8007734:	6841      	ldr	r1, [r0, #4]
 8007736:	4b0c      	ldr	r3, [pc, #48]	@ (8007768 <cleanup_stdio+0x34>)
 8007738:	4299      	cmp	r1, r3
 800773a:	b510      	push	{r4, lr}
 800773c:	4604      	mov	r4, r0
 800773e:	d001      	beq.n	8007744 <cleanup_stdio+0x10>
 8007740:	f001 fcea 	bl	8009118 <_fflush_r>
 8007744:	68a1      	ldr	r1, [r4, #8]
 8007746:	4b09      	ldr	r3, [pc, #36]	@ (800776c <cleanup_stdio+0x38>)
 8007748:	4299      	cmp	r1, r3
 800774a:	d002      	beq.n	8007752 <cleanup_stdio+0x1e>
 800774c:	4620      	mov	r0, r4
 800774e:	f001 fce3 	bl	8009118 <_fflush_r>
 8007752:	68e1      	ldr	r1, [r4, #12]
 8007754:	4b06      	ldr	r3, [pc, #24]	@ (8007770 <cleanup_stdio+0x3c>)
 8007756:	4299      	cmp	r1, r3
 8007758:	d004      	beq.n	8007764 <cleanup_stdio+0x30>
 800775a:	4620      	mov	r0, r4
 800775c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007760:	f001 bcda 	b.w	8009118 <_fflush_r>
 8007764:	bd10      	pop	{r4, pc}
 8007766:	bf00      	nop
 8007768:	2400043c 	.word	0x2400043c
 800776c:	240004a4 	.word	0x240004a4
 8007770:	2400050c 	.word	0x2400050c

08007774 <global_stdio_init.part.0>:
 8007774:	b510      	push	{r4, lr}
 8007776:	4b0b      	ldr	r3, [pc, #44]	@ (80077a4 <global_stdio_init.part.0+0x30>)
 8007778:	4c0b      	ldr	r4, [pc, #44]	@ (80077a8 <global_stdio_init.part.0+0x34>)
 800777a:	4a0c      	ldr	r2, [pc, #48]	@ (80077ac <global_stdio_init.part.0+0x38>)
 800777c:	601a      	str	r2, [r3, #0]
 800777e:	4620      	mov	r0, r4
 8007780:	2200      	movs	r2, #0
 8007782:	2104      	movs	r1, #4
 8007784:	f7ff ff94 	bl	80076b0 <std>
 8007788:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800778c:	2201      	movs	r2, #1
 800778e:	2109      	movs	r1, #9
 8007790:	f7ff ff8e 	bl	80076b0 <std>
 8007794:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007798:	2202      	movs	r2, #2
 800779a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800779e:	2112      	movs	r1, #18
 80077a0:	f7ff bf86 	b.w	80076b0 <std>
 80077a4:	24000574 	.word	0x24000574
 80077a8:	2400043c 	.word	0x2400043c
 80077ac:	0800771d 	.word	0x0800771d

080077b0 <__sfp_lock_acquire>:
 80077b0:	4801      	ldr	r0, [pc, #4]	@ (80077b8 <__sfp_lock_acquire+0x8>)
 80077b2:	f000 b93c 	b.w	8007a2e <__retarget_lock_acquire_recursive>
 80077b6:	bf00      	nop
 80077b8:	2400057d 	.word	0x2400057d

080077bc <__sfp_lock_release>:
 80077bc:	4801      	ldr	r0, [pc, #4]	@ (80077c4 <__sfp_lock_release+0x8>)
 80077be:	f000 b937 	b.w	8007a30 <__retarget_lock_release_recursive>
 80077c2:	bf00      	nop
 80077c4:	2400057d 	.word	0x2400057d

080077c8 <__sinit>:
 80077c8:	b510      	push	{r4, lr}
 80077ca:	4604      	mov	r4, r0
 80077cc:	f7ff fff0 	bl	80077b0 <__sfp_lock_acquire>
 80077d0:	6a23      	ldr	r3, [r4, #32]
 80077d2:	b11b      	cbz	r3, 80077dc <__sinit+0x14>
 80077d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077d8:	f7ff bff0 	b.w	80077bc <__sfp_lock_release>
 80077dc:	4b04      	ldr	r3, [pc, #16]	@ (80077f0 <__sinit+0x28>)
 80077de:	6223      	str	r3, [r4, #32]
 80077e0:	4b04      	ldr	r3, [pc, #16]	@ (80077f4 <__sinit+0x2c>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1f5      	bne.n	80077d4 <__sinit+0xc>
 80077e8:	f7ff ffc4 	bl	8007774 <global_stdio_init.part.0>
 80077ec:	e7f2      	b.n	80077d4 <__sinit+0xc>
 80077ee:	bf00      	nop
 80077f0:	08007735 	.word	0x08007735
 80077f4:	24000574 	.word	0x24000574

080077f8 <_fwalk_sglue>:
 80077f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077fc:	4607      	mov	r7, r0
 80077fe:	4688      	mov	r8, r1
 8007800:	4614      	mov	r4, r2
 8007802:	2600      	movs	r6, #0
 8007804:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007808:	f1b9 0901 	subs.w	r9, r9, #1
 800780c:	d505      	bpl.n	800781a <_fwalk_sglue+0x22>
 800780e:	6824      	ldr	r4, [r4, #0]
 8007810:	2c00      	cmp	r4, #0
 8007812:	d1f7      	bne.n	8007804 <_fwalk_sglue+0xc>
 8007814:	4630      	mov	r0, r6
 8007816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800781a:	89ab      	ldrh	r3, [r5, #12]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d907      	bls.n	8007830 <_fwalk_sglue+0x38>
 8007820:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007824:	3301      	adds	r3, #1
 8007826:	d003      	beq.n	8007830 <_fwalk_sglue+0x38>
 8007828:	4629      	mov	r1, r5
 800782a:	4638      	mov	r0, r7
 800782c:	47c0      	blx	r8
 800782e:	4306      	orrs	r6, r0
 8007830:	3568      	adds	r5, #104	@ 0x68
 8007832:	e7e9      	b.n	8007808 <_fwalk_sglue+0x10>

08007834 <iprintf>:
 8007834:	b40f      	push	{r0, r1, r2, r3}
 8007836:	b507      	push	{r0, r1, r2, lr}
 8007838:	4906      	ldr	r1, [pc, #24]	@ (8007854 <iprintf+0x20>)
 800783a:	ab04      	add	r3, sp, #16
 800783c:	6808      	ldr	r0, [r1, #0]
 800783e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007842:	6881      	ldr	r1, [r0, #8]
 8007844:	9301      	str	r3, [sp, #4]
 8007846:	f001 facb 	bl	8008de0 <_vfiprintf_r>
 800784a:	b003      	add	sp, #12
 800784c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007850:	b004      	add	sp, #16
 8007852:	4770      	bx	lr
 8007854:	24000120 	.word	0x24000120

08007858 <__sread>:
 8007858:	b510      	push	{r4, lr}
 800785a:	460c      	mov	r4, r1
 800785c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007860:	f000 f886 	bl	8007970 <_read_r>
 8007864:	2800      	cmp	r0, #0
 8007866:	bfab      	itete	ge
 8007868:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800786a:	89a3      	ldrhlt	r3, [r4, #12]
 800786c:	181b      	addge	r3, r3, r0
 800786e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007872:	bfac      	ite	ge
 8007874:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007876:	81a3      	strhlt	r3, [r4, #12]
 8007878:	bd10      	pop	{r4, pc}

0800787a <__swrite>:
 800787a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800787e:	461f      	mov	r7, r3
 8007880:	898b      	ldrh	r3, [r1, #12]
 8007882:	05db      	lsls	r3, r3, #23
 8007884:	4605      	mov	r5, r0
 8007886:	460c      	mov	r4, r1
 8007888:	4616      	mov	r6, r2
 800788a:	d505      	bpl.n	8007898 <__swrite+0x1e>
 800788c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007890:	2302      	movs	r3, #2
 8007892:	2200      	movs	r2, #0
 8007894:	f000 f85a 	bl	800794c <_lseek_r>
 8007898:	89a3      	ldrh	r3, [r4, #12]
 800789a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800789e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078a2:	81a3      	strh	r3, [r4, #12]
 80078a4:	4632      	mov	r2, r6
 80078a6:	463b      	mov	r3, r7
 80078a8:	4628      	mov	r0, r5
 80078aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ae:	f000 b881 	b.w	80079b4 <_write_r>

080078b2 <__sseek>:
 80078b2:	b510      	push	{r4, lr}
 80078b4:	460c      	mov	r4, r1
 80078b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ba:	f000 f847 	bl	800794c <_lseek_r>
 80078be:	1c43      	adds	r3, r0, #1
 80078c0:	89a3      	ldrh	r3, [r4, #12]
 80078c2:	bf15      	itete	ne
 80078c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80078c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80078ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80078ce:	81a3      	strheq	r3, [r4, #12]
 80078d0:	bf18      	it	ne
 80078d2:	81a3      	strhne	r3, [r4, #12]
 80078d4:	bd10      	pop	{r4, pc}

080078d6 <__sclose>:
 80078d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078da:	f000 b827 	b.w	800792c <_close_r>

080078de <memmove>:
 80078de:	4288      	cmp	r0, r1
 80078e0:	b510      	push	{r4, lr}
 80078e2:	eb01 0402 	add.w	r4, r1, r2
 80078e6:	d902      	bls.n	80078ee <memmove+0x10>
 80078e8:	4284      	cmp	r4, r0
 80078ea:	4623      	mov	r3, r4
 80078ec:	d807      	bhi.n	80078fe <memmove+0x20>
 80078ee:	1e43      	subs	r3, r0, #1
 80078f0:	42a1      	cmp	r1, r4
 80078f2:	d008      	beq.n	8007906 <memmove+0x28>
 80078f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078fc:	e7f8      	b.n	80078f0 <memmove+0x12>
 80078fe:	4402      	add	r2, r0
 8007900:	4601      	mov	r1, r0
 8007902:	428a      	cmp	r2, r1
 8007904:	d100      	bne.n	8007908 <memmove+0x2a>
 8007906:	bd10      	pop	{r4, pc}
 8007908:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800790c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007910:	e7f7      	b.n	8007902 <memmove+0x24>

08007912 <memset>:
 8007912:	4402      	add	r2, r0
 8007914:	4603      	mov	r3, r0
 8007916:	4293      	cmp	r3, r2
 8007918:	d100      	bne.n	800791c <memset+0xa>
 800791a:	4770      	bx	lr
 800791c:	f803 1b01 	strb.w	r1, [r3], #1
 8007920:	e7f9      	b.n	8007916 <memset+0x4>
	...

08007924 <_localeconv_r>:
 8007924:	4800      	ldr	r0, [pc, #0]	@ (8007928 <_localeconv_r+0x4>)
 8007926:	4770      	bx	lr
 8007928:	24000260 	.word	0x24000260

0800792c <_close_r>:
 800792c:	b538      	push	{r3, r4, r5, lr}
 800792e:	4d06      	ldr	r5, [pc, #24]	@ (8007948 <_close_r+0x1c>)
 8007930:	2300      	movs	r3, #0
 8007932:	4604      	mov	r4, r0
 8007934:	4608      	mov	r0, r1
 8007936:	602b      	str	r3, [r5, #0]
 8007938:	f7f9 fc40 	bl	80011bc <_close>
 800793c:	1c43      	adds	r3, r0, #1
 800793e:	d102      	bne.n	8007946 <_close_r+0x1a>
 8007940:	682b      	ldr	r3, [r5, #0]
 8007942:	b103      	cbz	r3, 8007946 <_close_r+0x1a>
 8007944:	6023      	str	r3, [r4, #0]
 8007946:	bd38      	pop	{r3, r4, r5, pc}
 8007948:	24000578 	.word	0x24000578

0800794c <_lseek_r>:
 800794c:	b538      	push	{r3, r4, r5, lr}
 800794e:	4d07      	ldr	r5, [pc, #28]	@ (800796c <_lseek_r+0x20>)
 8007950:	4604      	mov	r4, r0
 8007952:	4608      	mov	r0, r1
 8007954:	4611      	mov	r1, r2
 8007956:	2200      	movs	r2, #0
 8007958:	602a      	str	r2, [r5, #0]
 800795a:	461a      	mov	r2, r3
 800795c:	f7f9 fc55 	bl	800120a <_lseek>
 8007960:	1c43      	adds	r3, r0, #1
 8007962:	d102      	bne.n	800796a <_lseek_r+0x1e>
 8007964:	682b      	ldr	r3, [r5, #0]
 8007966:	b103      	cbz	r3, 800796a <_lseek_r+0x1e>
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	bd38      	pop	{r3, r4, r5, pc}
 800796c:	24000578 	.word	0x24000578

08007970 <_read_r>:
 8007970:	b538      	push	{r3, r4, r5, lr}
 8007972:	4d07      	ldr	r5, [pc, #28]	@ (8007990 <_read_r+0x20>)
 8007974:	4604      	mov	r4, r0
 8007976:	4608      	mov	r0, r1
 8007978:	4611      	mov	r1, r2
 800797a:	2200      	movs	r2, #0
 800797c:	602a      	str	r2, [r5, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	f7f9 fbff 	bl	8001182 <_read>
 8007984:	1c43      	adds	r3, r0, #1
 8007986:	d102      	bne.n	800798e <_read_r+0x1e>
 8007988:	682b      	ldr	r3, [r5, #0]
 800798a:	b103      	cbz	r3, 800798e <_read_r+0x1e>
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	bd38      	pop	{r3, r4, r5, pc}
 8007990:	24000578 	.word	0x24000578

08007994 <_sbrk_r>:
 8007994:	b538      	push	{r3, r4, r5, lr}
 8007996:	4d06      	ldr	r5, [pc, #24]	@ (80079b0 <_sbrk_r+0x1c>)
 8007998:	2300      	movs	r3, #0
 800799a:	4604      	mov	r4, r0
 800799c:	4608      	mov	r0, r1
 800799e:	602b      	str	r3, [r5, #0]
 80079a0:	f7f9 fc40 	bl	8001224 <_sbrk>
 80079a4:	1c43      	adds	r3, r0, #1
 80079a6:	d102      	bne.n	80079ae <_sbrk_r+0x1a>
 80079a8:	682b      	ldr	r3, [r5, #0]
 80079aa:	b103      	cbz	r3, 80079ae <_sbrk_r+0x1a>
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	bd38      	pop	{r3, r4, r5, pc}
 80079b0:	24000578 	.word	0x24000578

080079b4 <_write_r>:
 80079b4:	b538      	push	{r3, r4, r5, lr}
 80079b6:	4d07      	ldr	r5, [pc, #28]	@ (80079d4 <_write_r+0x20>)
 80079b8:	4604      	mov	r4, r0
 80079ba:	4608      	mov	r0, r1
 80079bc:	4611      	mov	r1, r2
 80079be:	2200      	movs	r2, #0
 80079c0:	602a      	str	r2, [r5, #0]
 80079c2:	461a      	mov	r2, r3
 80079c4:	f7f8 feec 	bl	80007a0 <_write>
 80079c8:	1c43      	adds	r3, r0, #1
 80079ca:	d102      	bne.n	80079d2 <_write_r+0x1e>
 80079cc:	682b      	ldr	r3, [r5, #0]
 80079ce:	b103      	cbz	r3, 80079d2 <_write_r+0x1e>
 80079d0:	6023      	str	r3, [r4, #0]
 80079d2:	bd38      	pop	{r3, r4, r5, pc}
 80079d4:	24000578 	.word	0x24000578

080079d8 <__errno>:
 80079d8:	4b01      	ldr	r3, [pc, #4]	@ (80079e0 <__errno+0x8>)
 80079da:	6818      	ldr	r0, [r3, #0]
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	24000120 	.word	0x24000120

080079e4 <__libc_init_array>:
 80079e4:	b570      	push	{r4, r5, r6, lr}
 80079e6:	4d0d      	ldr	r5, [pc, #52]	@ (8007a1c <__libc_init_array+0x38>)
 80079e8:	4c0d      	ldr	r4, [pc, #52]	@ (8007a20 <__libc_init_array+0x3c>)
 80079ea:	1b64      	subs	r4, r4, r5
 80079ec:	10a4      	asrs	r4, r4, #2
 80079ee:	2600      	movs	r6, #0
 80079f0:	42a6      	cmp	r6, r4
 80079f2:	d109      	bne.n	8007a08 <__libc_init_array+0x24>
 80079f4:	4d0b      	ldr	r5, [pc, #44]	@ (8007a24 <__libc_init_array+0x40>)
 80079f6:	4c0c      	ldr	r4, [pc, #48]	@ (8007a28 <__libc_init_array+0x44>)
 80079f8:	f001 fd8c 	bl	8009514 <_init>
 80079fc:	1b64      	subs	r4, r4, r5
 80079fe:	10a4      	asrs	r4, r4, #2
 8007a00:	2600      	movs	r6, #0
 8007a02:	42a6      	cmp	r6, r4
 8007a04:	d105      	bne.n	8007a12 <__libc_init_array+0x2e>
 8007a06:	bd70      	pop	{r4, r5, r6, pc}
 8007a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a0c:	4798      	blx	r3
 8007a0e:	3601      	adds	r6, #1
 8007a10:	e7ee      	b.n	80079f0 <__libc_init_array+0xc>
 8007a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a16:	4798      	blx	r3
 8007a18:	3601      	adds	r6, #1
 8007a1a:	e7f2      	b.n	8007a02 <__libc_init_array+0x1e>
 8007a1c:	08009ad8 	.word	0x08009ad8
 8007a20:	08009ad8 	.word	0x08009ad8
 8007a24:	08009ad8 	.word	0x08009ad8
 8007a28:	08009adc 	.word	0x08009adc

08007a2c <__retarget_lock_init_recursive>:
 8007a2c:	4770      	bx	lr

08007a2e <__retarget_lock_acquire_recursive>:
 8007a2e:	4770      	bx	lr

08007a30 <__retarget_lock_release_recursive>:
 8007a30:	4770      	bx	lr

08007a32 <quorem>:
 8007a32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a36:	6903      	ldr	r3, [r0, #16]
 8007a38:	690c      	ldr	r4, [r1, #16]
 8007a3a:	42a3      	cmp	r3, r4
 8007a3c:	4607      	mov	r7, r0
 8007a3e:	db7e      	blt.n	8007b3e <quorem+0x10c>
 8007a40:	3c01      	subs	r4, #1
 8007a42:	f101 0814 	add.w	r8, r1, #20
 8007a46:	00a3      	lsls	r3, r4, #2
 8007a48:	f100 0514 	add.w	r5, r0, #20
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a52:	9301      	str	r3, [sp, #4]
 8007a54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a64:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a68:	d32e      	bcc.n	8007ac8 <quorem+0x96>
 8007a6a:	f04f 0a00 	mov.w	sl, #0
 8007a6e:	46c4      	mov	ip, r8
 8007a70:	46ae      	mov	lr, r5
 8007a72:	46d3      	mov	fp, sl
 8007a74:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a78:	b298      	uxth	r0, r3
 8007a7a:	fb06 a000 	mla	r0, r6, r0, sl
 8007a7e:	0c02      	lsrs	r2, r0, #16
 8007a80:	0c1b      	lsrs	r3, r3, #16
 8007a82:	fb06 2303 	mla	r3, r6, r3, r2
 8007a86:	f8de 2000 	ldr.w	r2, [lr]
 8007a8a:	b280      	uxth	r0, r0
 8007a8c:	b292      	uxth	r2, r2
 8007a8e:	1a12      	subs	r2, r2, r0
 8007a90:	445a      	add	r2, fp
 8007a92:	f8de 0000 	ldr.w	r0, [lr]
 8007a96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007aa0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007aa4:	b292      	uxth	r2, r2
 8007aa6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007aaa:	45e1      	cmp	r9, ip
 8007aac:	f84e 2b04 	str.w	r2, [lr], #4
 8007ab0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007ab4:	d2de      	bcs.n	8007a74 <quorem+0x42>
 8007ab6:	9b00      	ldr	r3, [sp, #0]
 8007ab8:	58eb      	ldr	r3, [r5, r3]
 8007aba:	b92b      	cbnz	r3, 8007ac8 <quorem+0x96>
 8007abc:	9b01      	ldr	r3, [sp, #4]
 8007abe:	3b04      	subs	r3, #4
 8007ac0:	429d      	cmp	r5, r3
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	d32f      	bcc.n	8007b26 <quorem+0xf4>
 8007ac6:	613c      	str	r4, [r7, #16]
 8007ac8:	4638      	mov	r0, r7
 8007aca:	f001 f857 	bl	8008b7c <__mcmp>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	db25      	blt.n	8007b1e <quorem+0xec>
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	2000      	movs	r0, #0
 8007ad6:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ada:	f8d1 c000 	ldr.w	ip, [r1]
 8007ade:	fa1f fe82 	uxth.w	lr, r2
 8007ae2:	fa1f f38c 	uxth.w	r3, ip
 8007ae6:	eba3 030e 	sub.w	r3, r3, lr
 8007aea:	4403      	add	r3, r0
 8007aec:	0c12      	lsrs	r2, r2, #16
 8007aee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007af2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007afc:	45c1      	cmp	r9, r8
 8007afe:	f841 3b04 	str.w	r3, [r1], #4
 8007b02:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007b06:	d2e6      	bcs.n	8007ad6 <quorem+0xa4>
 8007b08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b10:	b922      	cbnz	r2, 8007b1c <quorem+0xea>
 8007b12:	3b04      	subs	r3, #4
 8007b14:	429d      	cmp	r5, r3
 8007b16:	461a      	mov	r2, r3
 8007b18:	d30b      	bcc.n	8007b32 <quorem+0x100>
 8007b1a:	613c      	str	r4, [r7, #16]
 8007b1c:	3601      	adds	r6, #1
 8007b1e:	4630      	mov	r0, r6
 8007b20:	b003      	add	sp, #12
 8007b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b26:	6812      	ldr	r2, [r2, #0]
 8007b28:	3b04      	subs	r3, #4
 8007b2a:	2a00      	cmp	r2, #0
 8007b2c:	d1cb      	bne.n	8007ac6 <quorem+0x94>
 8007b2e:	3c01      	subs	r4, #1
 8007b30:	e7c6      	b.n	8007ac0 <quorem+0x8e>
 8007b32:	6812      	ldr	r2, [r2, #0]
 8007b34:	3b04      	subs	r3, #4
 8007b36:	2a00      	cmp	r2, #0
 8007b38:	d1ef      	bne.n	8007b1a <quorem+0xe8>
 8007b3a:	3c01      	subs	r4, #1
 8007b3c:	e7ea      	b.n	8007b14 <quorem+0xe2>
 8007b3e:	2000      	movs	r0, #0
 8007b40:	e7ee      	b.n	8007b20 <quorem+0xee>
 8007b42:	0000      	movs	r0, r0
 8007b44:	0000      	movs	r0, r0
	...

08007b48 <_dtoa_r>:
 8007b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b4c:	ed2d 8b02 	vpush	{d8}
 8007b50:	69c7      	ldr	r7, [r0, #28]
 8007b52:	b091      	sub	sp, #68	@ 0x44
 8007b54:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007b58:	ec55 4b10 	vmov	r4, r5, d0
 8007b5c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8007b5e:	9107      	str	r1, [sp, #28]
 8007b60:	4681      	mov	r9, r0
 8007b62:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b64:	930d      	str	r3, [sp, #52]	@ 0x34
 8007b66:	b97f      	cbnz	r7, 8007b88 <_dtoa_r+0x40>
 8007b68:	2010      	movs	r0, #16
 8007b6a:	f7ff f8b5 	bl	8006cd8 <malloc>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	f8c9 001c 	str.w	r0, [r9, #28]
 8007b74:	b920      	cbnz	r0, 8007b80 <_dtoa_r+0x38>
 8007b76:	4ba0      	ldr	r3, [pc, #640]	@ (8007df8 <_dtoa_r+0x2b0>)
 8007b78:	21ef      	movs	r1, #239	@ 0xef
 8007b7a:	48a0      	ldr	r0, [pc, #640]	@ (8007dfc <_dtoa_r+0x2b4>)
 8007b7c:	f001 fb96 	bl	80092ac <__assert_func>
 8007b80:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007b84:	6007      	str	r7, [r0, #0]
 8007b86:	60c7      	str	r7, [r0, #12]
 8007b88:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007b8c:	6819      	ldr	r1, [r3, #0]
 8007b8e:	b159      	cbz	r1, 8007ba8 <_dtoa_r+0x60>
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	604a      	str	r2, [r1, #4]
 8007b94:	2301      	movs	r3, #1
 8007b96:	4093      	lsls	r3, r2
 8007b98:	608b      	str	r3, [r1, #8]
 8007b9a:	4648      	mov	r0, r9
 8007b9c:	f000 fdb4 	bl	8008708 <_Bfree>
 8007ba0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	601a      	str	r2, [r3, #0]
 8007ba8:	1e2b      	subs	r3, r5, #0
 8007baa:	bfbb      	ittet	lt
 8007bac:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007bb0:	9303      	strlt	r3, [sp, #12]
 8007bb2:	2300      	movge	r3, #0
 8007bb4:	2201      	movlt	r2, #1
 8007bb6:	bfac      	ite	ge
 8007bb8:	6033      	strge	r3, [r6, #0]
 8007bba:	6032      	strlt	r2, [r6, #0]
 8007bbc:	4b90      	ldr	r3, [pc, #576]	@ (8007e00 <_dtoa_r+0x2b8>)
 8007bbe:	9e03      	ldr	r6, [sp, #12]
 8007bc0:	43b3      	bics	r3, r6
 8007bc2:	d110      	bne.n	8007be6 <_dtoa_r+0x9e>
 8007bc4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007bc6:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007bca:	6013      	str	r3, [r2, #0]
 8007bcc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007bd0:	4323      	orrs	r3, r4
 8007bd2:	f000 84de 	beq.w	8008592 <_dtoa_r+0xa4a>
 8007bd6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007bd8:	4f8a      	ldr	r7, [pc, #552]	@ (8007e04 <_dtoa_r+0x2bc>)
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f000 84e0 	beq.w	80085a0 <_dtoa_r+0xa58>
 8007be0:	1cfb      	adds	r3, r7, #3
 8007be2:	f000 bcdb 	b.w	800859c <_dtoa_r+0xa54>
 8007be6:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007bea:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bf2:	d10a      	bne.n	8007c0a <_dtoa_r+0xc2>
 8007bf4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	6013      	str	r3, [r2, #0]
 8007bfa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007bfc:	b113      	cbz	r3, 8007c04 <_dtoa_r+0xbc>
 8007bfe:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007c00:	4b81      	ldr	r3, [pc, #516]	@ (8007e08 <_dtoa_r+0x2c0>)
 8007c02:	6013      	str	r3, [r2, #0]
 8007c04:	4f81      	ldr	r7, [pc, #516]	@ (8007e0c <_dtoa_r+0x2c4>)
 8007c06:	f000 bccb 	b.w	80085a0 <_dtoa_r+0xa58>
 8007c0a:	aa0e      	add	r2, sp, #56	@ 0x38
 8007c0c:	a90f      	add	r1, sp, #60	@ 0x3c
 8007c0e:	4648      	mov	r0, r9
 8007c10:	eeb0 0b48 	vmov.f64	d0, d8
 8007c14:	f001 f862 	bl	8008cdc <__d2b>
 8007c18:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8007c1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c1e:	9001      	str	r0, [sp, #4]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d045      	beq.n	8007cb0 <_dtoa_r+0x168>
 8007c24:	eeb0 7b48 	vmov.f64	d7, d8
 8007c28:	ee18 1a90 	vmov	r1, s17
 8007c2c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007c30:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8007c34:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007c38:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007c3c:	2500      	movs	r5, #0
 8007c3e:	ee07 1a90 	vmov	s15, r1
 8007c42:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8007c46:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007de0 <_dtoa_r+0x298>
 8007c4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007c4e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007de8 <_dtoa_r+0x2a0>
 8007c52:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007c56:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007df0 <_dtoa_r+0x2a8>
 8007c5a:	ee07 3a90 	vmov	s15, r3
 8007c5e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007c62:	eeb0 7b46 	vmov.f64	d7, d6
 8007c66:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007c6a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007c6e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c76:	ee16 8a90 	vmov	r8, s13
 8007c7a:	d508      	bpl.n	8007c8e <_dtoa_r+0x146>
 8007c7c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007c80:	eeb4 6b47 	vcmp.f64	d6, d7
 8007c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c88:	bf18      	it	ne
 8007c8a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8007c8e:	f1b8 0f16 	cmp.w	r8, #22
 8007c92:	d82b      	bhi.n	8007cec <_dtoa_r+0x1a4>
 8007c94:	495e      	ldr	r1, [pc, #376]	@ (8007e10 <_dtoa_r+0x2c8>)
 8007c96:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8007c9a:	ed91 7b00 	vldr	d7, [r1]
 8007c9e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ca6:	d501      	bpl.n	8007cac <_dtoa_r+0x164>
 8007ca8:	f108 38ff 	add.w	r8, r8, #4294967295
 8007cac:	2100      	movs	r1, #0
 8007cae:	e01e      	b.n	8007cee <_dtoa_r+0x1a6>
 8007cb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007cb8:	2920      	cmp	r1, #32
 8007cba:	bfc1      	itttt	gt
 8007cbc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007cc0:	408e      	lslgt	r6, r1
 8007cc2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8007cc6:	fa24 f101 	lsrgt.w	r1, r4, r1
 8007cca:	bfd6      	itet	le
 8007ccc:	f1c1 0120 	rsble	r1, r1, #32
 8007cd0:	4331      	orrgt	r1, r6
 8007cd2:	fa04 f101 	lslle.w	r1, r4, r1
 8007cd6:	ee07 1a90 	vmov	s15, r1
 8007cda:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	ee17 1a90 	vmov	r1, s15
 8007ce4:	2501      	movs	r5, #1
 8007ce6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8007cea:	e7a8      	b.n	8007c3e <_dtoa_r+0xf6>
 8007cec:	2101      	movs	r1, #1
 8007cee:	1ad2      	subs	r2, r2, r3
 8007cf0:	1e53      	subs	r3, r2, #1
 8007cf2:	9306      	str	r3, [sp, #24]
 8007cf4:	bf45      	ittet	mi
 8007cf6:	f1c2 0301 	rsbmi	r3, r2, #1
 8007cfa:	9305      	strmi	r3, [sp, #20]
 8007cfc:	2300      	movpl	r3, #0
 8007cfe:	2300      	movmi	r3, #0
 8007d00:	bf4c      	ite	mi
 8007d02:	9306      	strmi	r3, [sp, #24]
 8007d04:	9305      	strpl	r3, [sp, #20]
 8007d06:	f1b8 0f00 	cmp.w	r8, #0
 8007d0a:	910c      	str	r1, [sp, #48]	@ 0x30
 8007d0c:	db18      	blt.n	8007d40 <_dtoa_r+0x1f8>
 8007d0e:	9b06      	ldr	r3, [sp, #24]
 8007d10:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007d14:	4443      	add	r3, r8
 8007d16:	9306      	str	r3, [sp, #24]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	9a07      	ldr	r2, [sp, #28]
 8007d1c:	2a09      	cmp	r2, #9
 8007d1e:	d849      	bhi.n	8007db4 <_dtoa_r+0x26c>
 8007d20:	2a05      	cmp	r2, #5
 8007d22:	bfc4      	itt	gt
 8007d24:	3a04      	subgt	r2, #4
 8007d26:	9207      	strgt	r2, [sp, #28]
 8007d28:	9a07      	ldr	r2, [sp, #28]
 8007d2a:	f1a2 0202 	sub.w	r2, r2, #2
 8007d2e:	bfcc      	ite	gt
 8007d30:	2400      	movgt	r4, #0
 8007d32:	2401      	movle	r4, #1
 8007d34:	2a03      	cmp	r2, #3
 8007d36:	d848      	bhi.n	8007dca <_dtoa_r+0x282>
 8007d38:	e8df f002 	tbb	[pc, r2]
 8007d3c:	3a2c2e0b 	.word	0x3a2c2e0b
 8007d40:	9b05      	ldr	r3, [sp, #20]
 8007d42:	2200      	movs	r2, #0
 8007d44:	eba3 0308 	sub.w	r3, r3, r8
 8007d48:	9305      	str	r3, [sp, #20]
 8007d4a:	920a      	str	r2, [sp, #40]	@ 0x28
 8007d4c:	f1c8 0300 	rsb	r3, r8, #0
 8007d50:	e7e3      	b.n	8007d1a <_dtoa_r+0x1d2>
 8007d52:	2200      	movs	r2, #0
 8007d54:	9208      	str	r2, [sp, #32]
 8007d56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d58:	2a00      	cmp	r2, #0
 8007d5a:	dc39      	bgt.n	8007dd0 <_dtoa_r+0x288>
 8007d5c:	f04f 0b01 	mov.w	fp, #1
 8007d60:	46da      	mov	sl, fp
 8007d62:	465a      	mov	r2, fp
 8007d64:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8007d68:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	2004      	movs	r0, #4
 8007d70:	f100 0614 	add.w	r6, r0, #20
 8007d74:	4296      	cmp	r6, r2
 8007d76:	d930      	bls.n	8007dda <_dtoa_r+0x292>
 8007d78:	6079      	str	r1, [r7, #4]
 8007d7a:	4648      	mov	r0, r9
 8007d7c:	9304      	str	r3, [sp, #16]
 8007d7e:	f000 fc83 	bl	8008688 <_Balloc>
 8007d82:	9b04      	ldr	r3, [sp, #16]
 8007d84:	4607      	mov	r7, r0
 8007d86:	2800      	cmp	r0, #0
 8007d88:	d146      	bne.n	8007e18 <_dtoa_r+0x2d0>
 8007d8a:	4b22      	ldr	r3, [pc, #136]	@ (8007e14 <_dtoa_r+0x2cc>)
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007d92:	e6f2      	b.n	8007b7a <_dtoa_r+0x32>
 8007d94:	2201      	movs	r2, #1
 8007d96:	e7dd      	b.n	8007d54 <_dtoa_r+0x20c>
 8007d98:	2200      	movs	r2, #0
 8007d9a:	9208      	str	r2, [sp, #32]
 8007d9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d9e:	eb08 0b02 	add.w	fp, r8, r2
 8007da2:	f10b 0a01 	add.w	sl, fp, #1
 8007da6:	4652      	mov	r2, sl
 8007da8:	2a01      	cmp	r2, #1
 8007daa:	bfb8      	it	lt
 8007dac:	2201      	movlt	r2, #1
 8007dae:	e7db      	b.n	8007d68 <_dtoa_r+0x220>
 8007db0:	2201      	movs	r2, #1
 8007db2:	e7f2      	b.n	8007d9a <_dtoa_r+0x252>
 8007db4:	2401      	movs	r4, #1
 8007db6:	2200      	movs	r2, #0
 8007db8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007dbc:	f04f 3bff 	mov.w	fp, #4294967295
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	46da      	mov	sl, fp
 8007dc4:	2212      	movs	r2, #18
 8007dc6:	9109      	str	r1, [sp, #36]	@ 0x24
 8007dc8:	e7ce      	b.n	8007d68 <_dtoa_r+0x220>
 8007dca:	2201      	movs	r2, #1
 8007dcc:	9208      	str	r2, [sp, #32]
 8007dce:	e7f5      	b.n	8007dbc <_dtoa_r+0x274>
 8007dd0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8007dd4:	46da      	mov	sl, fp
 8007dd6:	465a      	mov	r2, fp
 8007dd8:	e7c6      	b.n	8007d68 <_dtoa_r+0x220>
 8007dda:	3101      	adds	r1, #1
 8007ddc:	0040      	lsls	r0, r0, #1
 8007dde:	e7c7      	b.n	8007d70 <_dtoa_r+0x228>
 8007de0:	636f4361 	.word	0x636f4361
 8007de4:	3fd287a7 	.word	0x3fd287a7
 8007de8:	8b60c8b3 	.word	0x8b60c8b3
 8007dec:	3fc68a28 	.word	0x3fc68a28
 8007df0:	509f79fb 	.word	0x509f79fb
 8007df4:	3fd34413 	.word	0x3fd34413
 8007df8:	0800979d 	.word	0x0800979d
 8007dfc:	080097b4 	.word	0x080097b4
 8007e00:	7ff00000 	.word	0x7ff00000
 8007e04:	08009799 	.word	0x08009799
 8007e08:	0800976d 	.word	0x0800976d
 8007e0c:	0800976c 	.word	0x0800976c
 8007e10:	080098b0 	.word	0x080098b0
 8007e14:	0800980c 	.word	0x0800980c
 8007e18:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8007e1c:	f1ba 0f0e 	cmp.w	sl, #14
 8007e20:	6010      	str	r0, [r2, #0]
 8007e22:	d86f      	bhi.n	8007f04 <_dtoa_r+0x3bc>
 8007e24:	2c00      	cmp	r4, #0
 8007e26:	d06d      	beq.n	8007f04 <_dtoa_r+0x3bc>
 8007e28:	f1b8 0f00 	cmp.w	r8, #0
 8007e2c:	f340 80c2 	ble.w	8007fb4 <_dtoa_r+0x46c>
 8007e30:	4aca      	ldr	r2, [pc, #808]	@ (800815c <_dtoa_r+0x614>)
 8007e32:	f008 010f 	and.w	r1, r8, #15
 8007e36:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007e3a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8007e3e:	ed92 7b00 	vldr	d7, [r2]
 8007e42:	ea4f 1128 	mov.w	r1, r8, asr #4
 8007e46:	f000 80a9 	beq.w	8007f9c <_dtoa_r+0x454>
 8007e4a:	4ac5      	ldr	r2, [pc, #788]	@ (8008160 <_dtoa_r+0x618>)
 8007e4c:	ed92 6b08 	vldr	d6, [r2, #32]
 8007e50:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007e54:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007e58:	f001 010f 	and.w	r1, r1, #15
 8007e5c:	2203      	movs	r2, #3
 8007e5e:	48c0      	ldr	r0, [pc, #768]	@ (8008160 <_dtoa_r+0x618>)
 8007e60:	2900      	cmp	r1, #0
 8007e62:	f040 809d 	bne.w	8007fa0 <_dtoa_r+0x458>
 8007e66:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007e6a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007e6e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007e72:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007e74:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e78:	2900      	cmp	r1, #0
 8007e7a:	f000 80c1 	beq.w	8008000 <_dtoa_r+0x4b8>
 8007e7e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007e82:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e8a:	f140 80b9 	bpl.w	8008000 <_dtoa_r+0x4b8>
 8007e8e:	f1ba 0f00 	cmp.w	sl, #0
 8007e92:	f000 80b5 	beq.w	8008000 <_dtoa_r+0x4b8>
 8007e96:	f1bb 0f00 	cmp.w	fp, #0
 8007e9a:	dd31      	ble.n	8007f00 <_dtoa_r+0x3b8>
 8007e9c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007ea0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007ea4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ea8:	f108 31ff 	add.w	r1, r8, #4294967295
 8007eac:	9104      	str	r1, [sp, #16]
 8007eae:	3201      	adds	r2, #1
 8007eb0:	465c      	mov	r4, fp
 8007eb2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007eb6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8007eba:	ee07 2a90 	vmov	s15, r2
 8007ebe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007ec2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007ec6:	ee15 2a90 	vmov	r2, s11
 8007eca:	ec51 0b15 	vmov	r0, r1, d5
 8007ece:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8007ed2:	2c00      	cmp	r4, #0
 8007ed4:	f040 8098 	bne.w	8008008 <_dtoa_r+0x4c0>
 8007ed8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007edc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007ee0:	ec41 0b17 	vmov	d7, r0, r1
 8007ee4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eec:	f300 8261 	bgt.w	80083b2 <_dtoa_r+0x86a>
 8007ef0:	eeb1 7b47 	vneg.f64	d7, d7
 8007ef4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007efc:	f100 80f5 	bmi.w	80080ea <_dtoa_r+0x5a2>
 8007f00:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007f04:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007f06:	2a00      	cmp	r2, #0
 8007f08:	f2c0 812c 	blt.w	8008164 <_dtoa_r+0x61c>
 8007f0c:	f1b8 0f0e 	cmp.w	r8, #14
 8007f10:	f300 8128 	bgt.w	8008164 <_dtoa_r+0x61c>
 8007f14:	4b91      	ldr	r3, [pc, #580]	@ (800815c <_dtoa_r+0x614>)
 8007f16:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007f1a:	ed93 6b00 	vldr	d6, [r3]
 8007f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	da03      	bge.n	8007f2c <_dtoa_r+0x3e4>
 8007f24:	f1ba 0f00 	cmp.w	sl, #0
 8007f28:	f340 80d2 	ble.w	80080d0 <_dtoa_r+0x588>
 8007f2c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8007f30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f34:	463e      	mov	r6, r7
 8007f36:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007f3a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007f3e:	ee15 3a10 	vmov	r3, s10
 8007f42:	3330      	adds	r3, #48	@ 0x30
 8007f44:	f806 3b01 	strb.w	r3, [r6], #1
 8007f48:	1bf3      	subs	r3, r6, r7
 8007f4a:	459a      	cmp	sl, r3
 8007f4c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007f50:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007f54:	f040 80f8 	bne.w	8008148 <_dtoa_r+0x600>
 8007f58:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007f5c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f64:	f300 80dd 	bgt.w	8008122 <_dtoa_r+0x5da>
 8007f68:	eeb4 7b46 	vcmp.f64	d7, d6
 8007f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f70:	d104      	bne.n	8007f7c <_dtoa_r+0x434>
 8007f72:	ee15 3a10 	vmov	r3, s10
 8007f76:	07db      	lsls	r3, r3, #31
 8007f78:	f100 80d3 	bmi.w	8008122 <_dtoa_r+0x5da>
 8007f7c:	9901      	ldr	r1, [sp, #4]
 8007f7e:	4648      	mov	r0, r9
 8007f80:	f000 fbc2 	bl	8008708 <_Bfree>
 8007f84:	2300      	movs	r3, #0
 8007f86:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007f88:	7033      	strb	r3, [r6, #0]
 8007f8a:	f108 0301 	add.w	r3, r8, #1
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f000 8304 	beq.w	80085a0 <_dtoa_r+0xa58>
 8007f98:	601e      	str	r6, [r3, #0]
 8007f9a:	e301      	b.n	80085a0 <_dtoa_r+0xa58>
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	e75e      	b.n	8007e5e <_dtoa_r+0x316>
 8007fa0:	07cc      	lsls	r4, r1, #31
 8007fa2:	d504      	bpl.n	8007fae <_dtoa_r+0x466>
 8007fa4:	ed90 6b00 	vldr	d6, [r0]
 8007fa8:	3201      	adds	r2, #1
 8007faa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007fae:	1049      	asrs	r1, r1, #1
 8007fb0:	3008      	adds	r0, #8
 8007fb2:	e755      	b.n	8007e60 <_dtoa_r+0x318>
 8007fb4:	d022      	beq.n	8007ffc <_dtoa_r+0x4b4>
 8007fb6:	f1c8 0100 	rsb	r1, r8, #0
 8007fba:	4a68      	ldr	r2, [pc, #416]	@ (800815c <_dtoa_r+0x614>)
 8007fbc:	f001 000f 	and.w	r0, r1, #15
 8007fc0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007fc4:	ed92 7b00 	vldr	d7, [r2]
 8007fc8:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007fcc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007fd0:	4863      	ldr	r0, [pc, #396]	@ (8008160 <_dtoa_r+0x618>)
 8007fd2:	1109      	asrs	r1, r1, #4
 8007fd4:	2400      	movs	r4, #0
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	b929      	cbnz	r1, 8007fe6 <_dtoa_r+0x49e>
 8007fda:	2c00      	cmp	r4, #0
 8007fdc:	f43f af49 	beq.w	8007e72 <_dtoa_r+0x32a>
 8007fe0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007fe4:	e745      	b.n	8007e72 <_dtoa_r+0x32a>
 8007fe6:	07ce      	lsls	r6, r1, #31
 8007fe8:	d505      	bpl.n	8007ff6 <_dtoa_r+0x4ae>
 8007fea:	ed90 6b00 	vldr	d6, [r0]
 8007fee:	3201      	adds	r2, #1
 8007ff0:	2401      	movs	r4, #1
 8007ff2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007ff6:	1049      	asrs	r1, r1, #1
 8007ff8:	3008      	adds	r0, #8
 8007ffa:	e7ed      	b.n	8007fd8 <_dtoa_r+0x490>
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	e738      	b.n	8007e72 <_dtoa_r+0x32a>
 8008000:	f8cd 8010 	str.w	r8, [sp, #16]
 8008004:	4654      	mov	r4, sl
 8008006:	e754      	b.n	8007eb2 <_dtoa_r+0x36a>
 8008008:	4a54      	ldr	r2, [pc, #336]	@ (800815c <_dtoa_r+0x614>)
 800800a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800800e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008012:	9a08      	ldr	r2, [sp, #32]
 8008014:	ec41 0b17 	vmov	d7, r0, r1
 8008018:	443c      	add	r4, r7
 800801a:	b34a      	cbz	r2, 8008070 <_dtoa_r+0x528>
 800801c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8008020:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8008024:	463e      	mov	r6, r7
 8008026:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800802a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800802e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008032:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008036:	ee14 2a90 	vmov	r2, s9
 800803a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800803e:	3230      	adds	r2, #48	@ 0x30
 8008040:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008044:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800804c:	f806 2b01 	strb.w	r2, [r6], #1
 8008050:	d438      	bmi.n	80080c4 <_dtoa_r+0x57c>
 8008052:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008056:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800805a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800805e:	d462      	bmi.n	8008126 <_dtoa_r+0x5de>
 8008060:	42a6      	cmp	r6, r4
 8008062:	f43f af4d 	beq.w	8007f00 <_dtoa_r+0x3b8>
 8008066:	ee27 7b03 	vmul.f64	d7, d7, d3
 800806a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800806e:	e7e0      	b.n	8008032 <_dtoa_r+0x4ea>
 8008070:	4621      	mov	r1, r4
 8008072:	463e      	mov	r6, r7
 8008074:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008078:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800807c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008080:	ee14 2a90 	vmov	r2, s9
 8008084:	3230      	adds	r2, #48	@ 0x30
 8008086:	f806 2b01 	strb.w	r2, [r6], #1
 800808a:	42a6      	cmp	r6, r4
 800808c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008090:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008094:	d119      	bne.n	80080ca <_dtoa_r+0x582>
 8008096:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800809a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800809e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80080a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080a6:	dc3e      	bgt.n	8008126 <_dtoa_r+0x5de>
 80080a8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80080ac:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80080b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080b4:	f57f af24 	bpl.w	8007f00 <_dtoa_r+0x3b8>
 80080b8:	460e      	mov	r6, r1
 80080ba:	3901      	subs	r1, #1
 80080bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80080c0:	2b30      	cmp	r3, #48	@ 0x30
 80080c2:	d0f9      	beq.n	80080b8 <_dtoa_r+0x570>
 80080c4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80080c8:	e758      	b.n	8007f7c <_dtoa_r+0x434>
 80080ca:	ee26 6b03 	vmul.f64	d6, d6, d3
 80080ce:	e7d5      	b.n	800807c <_dtoa_r+0x534>
 80080d0:	d10b      	bne.n	80080ea <_dtoa_r+0x5a2>
 80080d2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80080d6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80080da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80080de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80080e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e6:	f2c0 8161 	blt.w	80083ac <_dtoa_r+0x864>
 80080ea:	2400      	movs	r4, #0
 80080ec:	4625      	mov	r5, r4
 80080ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080f0:	43db      	mvns	r3, r3
 80080f2:	9304      	str	r3, [sp, #16]
 80080f4:	463e      	mov	r6, r7
 80080f6:	f04f 0800 	mov.w	r8, #0
 80080fa:	4621      	mov	r1, r4
 80080fc:	4648      	mov	r0, r9
 80080fe:	f000 fb03 	bl	8008708 <_Bfree>
 8008102:	2d00      	cmp	r5, #0
 8008104:	d0de      	beq.n	80080c4 <_dtoa_r+0x57c>
 8008106:	f1b8 0f00 	cmp.w	r8, #0
 800810a:	d005      	beq.n	8008118 <_dtoa_r+0x5d0>
 800810c:	45a8      	cmp	r8, r5
 800810e:	d003      	beq.n	8008118 <_dtoa_r+0x5d0>
 8008110:	4641      	mov	r1, r8
 8008112:	4648      	mov	r0, r9
 8008114:	f000 faf8 	bl	8008708 <_Bfree>
 8008118:	4629      	mov	r1, r5
 800811a:	4648      	mov	r0, r9
 800811c:	f000 faf4 	bl	8008708 <_Bfree>
 8008120:	e7d0      	b.n	80080c4 <_dtoa_r+0x57c>
 8008122:	f8cd 8010 	str.w	r8, [sp, #16]
 8008126:	4633      	mov	r3, r6
 8008128:	461e      	mov	r6, r3
 800812a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800812e:	2a39      	cmp	r2, #57	@ 0x39
 8008130:	d106      	bne.n	8008140 <_dtoa_r+0x5f8>
 8008132:	429f      	cmp	r7, r3
 8008134:	d1f8      	bne.n	8008128 <_dtoa_r+0x5e0>
 8008136:	9a04      	ldr	r2, [sp, #16]
 8008138:	3201      	adds	r2, #1
 800813a:	9204      	str	r2, [sp, #16]
 800813c:	2230      	movs	r2, #48	@ 0x30
 800813e:	703a      	strb	r2, [r7, #0]
 8008140:	781a      	ldrb	r2, [r3, #0]
 8008142:	3201      	adds	r2, #1
 8008144:	701a      	strb	r2, [r3, #0]
 8008146:	e7bd      	b.n	80080c4 <_dtoa_r+0x57c>
 8008148:	ee27 7b04 	vmul.f64	d7, d7, d4
 800814c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008154:	f47f aeef 	bne.w	8007f36 <_dtoa_r+0x3ee>
 8008158:	e710      	b.n	8007f7c <_dtoa_r+0x434>
 800815a:	bf00      	nop
 800815c:	080098b0 	.word	0x080098b0
 8008160:	08009888 	.word	0x08009888
 8008164:	9908      	ldr	r1, [sp, #32]
 8008166:	2900      	cmp	r1, #0
 8008168:	f000 80e3 	beq.w	8008332 <_dtoa_r+0x7ea>
 800816c:	9907      	ldr	r1, [sp, #28]
 800816e:	2901      	cmp	r1, #1
 8008170:	f300 80c8 	bgt.w	8008304 <_dtoa_r+0x7bc>
 8008174:	2d00      	cmp	r5, #0
 8008176:	f000 80c1 	beq.w	80082fc <_dtoa_r+0x7b4>
 800817a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800817e:	9e05      	ldr	r6, [sp, #20]
 8008180:	461c      	mov	r4, r3
 8008182:	9304      	str	r3, [sp, #16]
 8008184:	9b05      	ldr	r3, [sp, #20]
 8008186:	4413      	add	r3, r2
 8008188:	9305      	str	r3, [sp, #20]
 800818a:	9b06      	ldr	r3, [sp, #24]
 800818c:	2101      	movs	r1, #1
 800818e:	4413      	add	r3, r2
 8008190:	4648      	mov	r0, r9
 8008192:	9306      	str	r3, [sp, #24]
 8008194:	f000 fb6c 	bl	8008870 <__i2b>
 8008198:	9b04      	ldr	r3, [sp, #16]
 800819a:	4605      	mov	r5, r0
 800819c:	b166      	cbz	r6, 80081b8 <_dtoa_r+0x670>
 800819e:	9a06      	ldr	r2, [sp, #24]
 80081a0:	2a00      	cmp	r2, #0
 80081a2:	dd09      	ble.n	80081b8 <_dtoa_r+0x670>
 80081a4:	42b2      	cmp	r2, r6
 80081a6:	9905      	ldr	r1, [sp, #20]
 80081a8:	bfa8      	it	ge
 80081aa:	4632      	movge	r2, r6
 80081ac:	1a89      	subs	r1, r1, r2
 80081ae:	9105      	str	r1, [sp, #20]
 80081b0:	9906      	ldr	r1, [sp, #24]
 80081b2:	1ab6      	subs	r6, r6, r2
 80081b4:	1a8a      	subs	r2, r1, r2
 80081b6:	9206      	str	r2, [sp, #24]
 80081b8:	b1fb      	cbz	r3, 80081fa <_dtoa_r+0x6b2>
 80081ba:	9a08      	ldr	r2, [sp, #32]
 80081bc:	2a00      	cmp	r2, #0
 80081be:	f000 80bc 	beq.w	800833a <_dtoa_r+0x7f2>
 80081c2:	b19c      	cbz	r4, 80081ec <_dtoa_r+0x6a4>
 80081c4:	4629      	mov	r1, r5
 80081c6:	4622      	mov	r2, r4
 80081c8:	4648      	mov	r0, r9
 80081ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081cc:	f000 fc10 	bl	80089f0 <__pow5mult>
 80081d0:	9a01      	ldr	r2, [sp, #4]
 80081d2:	4601      	mov	r1, r0
 80081d4:	4605      	mov	r5, r0
 80081d6:	4648      	mov	r0, r9
 80081d8:	f000 fb60 	bl	800889c <__multiply>
 80081dc:	9901      	ldr	r1, [sp, #4]
 80081de:	9004      	str	r0, [sp, #16]
 80081e0:	4648      	mov	r0, r9
 80081e2:	f000 fa91 	bl	8008708 <_Bfree>
 80081e6:	9a04      	ldr	r2, [sp, #16]
 80081e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081ea:	9201      	str	r2, [sp, #4]
 80081ec:	1b1a      	subs	r2, r3, r4
 80081ee:	d004      	beq.n	80081fa <_dtoa_r+0x6b2>
 80081f0:	9901      	ldr	r1, [sp, #4]
 80081f2:	4648      	mov	r0, r9
 80081f4:	f000 fbfc 	bl	80089f0 <__pow5mult>
 80081f8:	9001      	str	r0, [sp, #4]
 80081fa:	2101      	movs	r1, #1
 80081fc:	4648      	mov	r0, r9
 80081fe:	f000 fb37 	bl	8008870 <__i2b>
 8008202:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008204:	4604      	mov	r4, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	f000 81d0 	beq.w	80085ac <_dtoa_r+0xa64>
 800820c:	461a      	mov	r2, r3
 800820e:	4601      	mov	r1, r0
 8008210:	4648      	mov	r0, r9
 8008212:	f000 fbed 	bl	80089f0 <__pow5mult>
 8008216:	9b07      	ldr	r3, [sp, #28]
 8008218:	2b01      	cmp	r3, #1
 800821a:	4604      	mov	r4, r0
 800821c:	f300 8095 	bgt.w	800834a <_dtoa_r+0x802>
 8008220:	9b02      	ldr	r3, [sp, #8]
 8008222:	2b00      	cmp	r3, #0
 8008224:	f040 808b 	bne.w	800833e <_dtoa_r+0x7f6>
 8008228:	9b03      	ldr	r3, [sp, #12]
 800822a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800822e:	2a00      	cmp	r2, #0
 8008230:	f040 8087 	bne.w	8008342 <_dtoa_r+0x7fa>
 8008234:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008238:	0d12      	lsrs	r2, r2, #20
 800823a:	0512      	lsls	r2, r2, #20
 800823c:	2a00      	cmp	r2, #0
 800823e:	f000 8082 	beq.w	8008346 <_dtoa_r+0x7fe>
 8008242:	9b05      	ldr	r3, [sp, #20]
 8008244:	3301      	adds	r3, #1
 8008246:	9305      	str	r3, [sp, #20]
 8008248:	9b06      	ldr	r3, [sp, #24]
 800824a:	3301      	adds	r3, #1
 800824c:	9306      	str	r3, [sp, #24]
 800824e:	2301      	movs	r3, #1
 8008250:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008252:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008254:	2b00      	cmp	r3, #0
 8008256:	f000 81af 	beq.w	80085b8 <_dtoa_r+0xa70>
 800825a:	6922      	ldr	r2, [r4, #16]
 800825c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008260:	6910      	ldr	r0, [r2, #16]
 8008262:	f000 fab9 	bl	80087d8 <__hi0bits>
 8008266:	f1c0 0020 	rsb	r0, r0, #32
 800826a:	9b06      	ldr	r3, [sp, #24]
 800826c:	4418      	add	r0, r3
 800826e:	f010 001f 	ands.w	r0, r0, #31
 8008272:	d076      	beq.n	8008362 <_dtoa_r+0x81a>
 8008274:	f1c0 0220 	rsb	r2, r0, #32
 8008278:	2a04      	cmp	r2, #4
 800827a:	dd69      	ble.n	8008350 <_dtoa_r+0x808>
 800827c:	9b05      	ldr	r3, [sp, #20]
 800827e:	f1c0 001c 	rsb	r0, r0, #28
 8008282:	4403      	add	r3, r0
 8008284:	9305      	str	r3, [sp, #20]
 8008286:	9b06      	ldr	r3, [sp, #24]
 8008288:	4406      	add	r6, r0
 800828a:	4403      	add	r3, r0
 800828c:	9306      	str	r3, [sp, #24]
 800828e:	9b05      	ldr	r3, [sp, #20]
 8008290:	2b00      	cmp	r3, #0
 8008292:	dd05      	ble.n	80082a0 <_dtoa_r+0x758>
 8008294:	9901      	ldr	r1, [sp, #4]
 8008296:	461a      	mov	r2, r3
 8008298:	4648      	mov	r0, r9
 800829a:	f000 fc03 	bl	8008aa4 <__lshift>
 800829e:	9001      	str	r0, [sp, #4]
 80082a0:	9b06      	ldr	r3, [sp, #24]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	dd05      	ble.n	80082b2 <_dtoa_r+0x76a>
 80082a6:	4621      	mov	r1, r4
 80082a8:	461a      	mov	r2, r3
 80082aa:	4648      	mov	r0, r9
 80082ac:	f000 fbfa 	bl	8008aa4 <__lshift>
 80082b0:	4604      	mov	r4, r0
 80082b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d056      	beq.n	8008366 <_dtoa_r+0x81e>
 80082b8:	9801      	ldr	r0, [sp, #4]
 80082ba:	4621      	mov	r1, r4
 80082bc:	f000 fc5e 	bl	8008b7c <__mcmp>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	da50      	bge.n	8008366 <_dtoa_r+0x81e>
 80082c4:	f108 33ff 	add.w	r3, r8, #4294967295
 80082c8:	9304      	str	r3, [sp, #16]
 80082ca:	9901      	ldr	r1, [sp, #4]
 80082cc:	2300      	movs	r3, #0
 80082ce:	220a      	movs	r2, #10
 80082d0:	4648      	mov	r0, r9
 80082d2:	f000 fa3b 	bl	800874c <__multadd>
 80082d6:	9b08      	ldr	r3, [sp, #32]
 80082d8:	9001      	str	r0, [sp, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 816e 	beq.w	80085bc <_dtoa_r+0xa74>
 80082e0:	4629      	mov	r1, r5
 80082e2:	2300      	movs	r3, #0
 80082e4:	220a      	movs	r2, #10
 80082e6:	4648      	mov	r0, r9
 80082e8:	f000 fa30 	bl	800874c <__multadd>
 80082ec:	f1bb 0f00 	cmp.w	fp, #0
 80082f0:	4605      	mov	r5, r0
 80082f2:	dc64      	bgt.n	80083be <_dtoa_r+0x876>
 80082f4:	9b07      	ldr	r3, [sp, #28]
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	dc3e      	bgt.n	8008378 <_dtoa_r+0x830>
 80082fa:	e060      	b.n	80083be <_dtoa_r+0x876>
 80082fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082fe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008302:	e73c      	b.n	800817e <_dtoa_r+0x636>
 8008304:	f10a 34ff 	add.w	r4, sl, #4294967295
 8008308:	42a3      	cmp	r3, r4
 800830a:	bfbf      	itttt	lt
 800830c:	1ae2      	sublt	r2, r4, r3
 800830e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008310:	189b      	addlt	r3, r3, r2
 8008312:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8008314:	bfae      	itee	ge
 8008316:	1b1c      	subge	r4, r3, r4
 8008318:	4623      	movlt	r3, r4
 800831a:	2400      	movlt	r4, #0
 800831c:	f1ba 0f00 	cmp.w	sl, #0
 8008320:	bfb5      	itete	lt
 8008322:	9a05      	ldrlt	r2, [sp, #20]
 8008324:	9e05      	ldrge	r6, [sp, #20]
 8008326:	eba2 060a 	sublt.w	r6, r2, sl
 800832a:	4652      	movge	r2, sl
 800832c:	bfb8      	it	lt
 800832e:	2200      	movlt	r2, #0
 8008330:	e727      	b.n	8008182 <_dtoa_r+0x63a>
 8008332:	9e05      	ldr	r6, [sp, #20]
 8008334:	9d08      	ldr	r5, [sp, #32]
 8008336:	461c      	mov	r4, r3
 8008338:	e730      	b.n	800819c <_dtoa_r+0x654>
 800833a:	461a      	mov	r2, r3
 800833c:	e758      	b.n	80081f0 <_dtoa_r+0x6a8>
 800833e:	2300      	movs	r3, #0
 8008340:	e786      	b.n	8008250 <_dtoa_r+0x708>
 8008342:	9b02      	ldr	r3, [sp, #8]
 8008344:	e784      	b.n	8008250 <_dtoa_r+0x708>
 8008346:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008348:	e783      	b.n	8008252 <_dtoa_r+0x70a>
 800834a:	2300      	movs	r3, #0
 800834c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800834e:	e784      	b.n	800825a <_dtoa_r+0x712>
 8008350:	d09d      	beq.n	800828e <_dtoa_r+0x746>
 8008352:	9b05      	ldr	r3, [sp, #20]
 8008354:	321c      	adds	r2, #28
 8008356:	4413      	add	r3, r2
 8008358:	9305      	str	r3, [sp, #20]
 800835a:	9b06      	ldr	r3, [sp, #24]
 800835c:	4416      	add	r6, r2
 800835e:	4413      	add	r3, r2
 8008360:	e794      	b.n	800828c <_dtoa_r+0x744>
 8008362:	4602      	mov	r2, r0
 8008364:	e7f5      	b.n	8008352 <_dtoa_r+0x80a>
 8008366:	f1ba 0f00 	cmp.w	sl, #0
 800836a:	f8cd 8010 	str.w	r8, [sp, #16]
 800836e:	46d3      	mov	fp, sl
 8008370:	dc21      	bgt.n	80083b6 <_dtoa_r+0x86e>
 8008372:	9b07      	ldr	r3, [sp, #28]
 8008374:	2b02      	cmp	r3, #2
 8008376:	dd1e      	ble.n	80083b6 <_dtoa_r+0x86e>
 8008378:	f1bb 0f00 	cmp.w	fp, #0
 800837c:	f47f aeb7 	bne.w	80080ee <_dtoa_r+0x5a6>
 8008380:	4621      	mov	r1, r4
 8008382:	465b      	mov	r3, fp
 8008384:	2205      	movs	r2, #5
 8008386:	4648      	mov	r0, r9
 8008388:	f000 f9e0 	bl	800874c <__multadd>
 800838c:	4601      	mov	r1, r0
 800838e:	4604      	mov	r4, r0
 8008390:	9801      	ldr	r0, [sp, #4]
 8008392:	f000 fbf3 	bl	8008b7c <__mcmp>
 8008396:	2800      	cmp	r0, #0
 8008398:	f77f aea9 	ble.w	80080ee <_dtoa_r+0x5a6>
 800839c:	463e      	mov	r6, r7
 800839e:	2331      	movs	r3, #49	@ 0x31
 80083a0:	f806 3b01 	strb.w	r3, [r6], #1
 80083a4:	9b04      	ldr	r3, [sp, #16]
 80083a6:	3301      	adds	r3, #1
 80083a8:	9304      	str	r3, [sp, #16]
 80083aa:	e6a4      	b.n	80080f6 <_dtoa_r+0x5ae>
 80083ac:	f8cd 8010 	str.w	r8, [sp, #16]
 80083b0:	4654      	mov	r4, sl
 80083b2:	4625      	mov	r5, r4
 80083b4:	e7f2      	b.n	800839c <_dtoa_r+0x854>
 80083b6:	9b08      	ldr	r3, [sp, #32]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f000 8103 	beq.w	80085c4 <_dtoa_r+0xa7c>
 80083be:	2e00      	cmp	r6, #0
 80083c0:	dd05      	ble.n	80083ce <_dtoa_r+0x886>
 80083c2:	4629      	mov	r1, r5
 80083c4:	4632      	mov	r2, r6
 80083c6:	4648      	mov	r0, r9
 80083c8:	f000 fb6c 	bl	8008aa4 <__lshift>
 80083cc:	4605      	mov	r5, r0
 80083ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d058      	beq.n	8008486 <_dtoa_r+0x93e>
 80083d4:	6869      	ldr	r1, [r5, #4]
 80083d6:	4648      	mov	r0, r9
 80083d8:	f000 f956 	bl	8008688 <_Balloc>
 80083dc:	4606      	mov	r6, r0
 80083de:	b928      	cbnz	r0, 80083ec <_dtoa_r+0x8a4>
 80083e0:	4b82      	ldr	r3, [pc, #520]	@ (80085ec <_dtoa_r+0xaa4>)
 80083e2:	4602      	mov	r2, r0
 80083e4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80083e8:	f7ff bbc7 	b.w	8007b7a <_dtoa_r+0x32>
 80083ec:	692a      	ldr	r2, [r5, #16]
 80083ee:	3202      	adds	r2, #2
 80083f0:	0092      	lsls	r2, r2, #2
 80083f2:	f105 010c 	add.w	r1, r5, #12
 80083f6:	300c      	adds	r0, #12
 80083f8:	f000 ff4a 	bl	8009290 <memcpy>
 80083fc:	2201      	movs	r2, #1
 80083fe:	4631      	mov	r1, r6
 8008400:	4648      	mov	r0, r9
 8008402:	f000 fb4f 	bl	8008aa4 <__lshift>
 8008406:	1c7b      	adds	r3, r7, #1
 8008408:	9305      	str	r3, [sp, #20]
 800840a:	eb07 030b 	add.w	r3, r7, fp
 800840e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008410:	9b02      	ldr	r3, [sp, #8]
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	46a8      	mov	r8, r5
 8008418:	9308      	str	r3, [sp, #32]
 800841a:	4605      	mov	r5, r0
 800841c:	9b05      	ldr	r3, [sp, #20]
 800841e:	9801      	ldr	r0, [sp, #4]
 8008420:	4621      	mov	r1, r4
 8008422:	f103 3bff 	add.w	fp, r3, #4294967295
 8008426:	f7ff fb04 	bl	8007a32 <quorem>
 800842a:	4641      	mov	r1, r8
 800842c:	9002      	str	r0, [sp, #8]
 800842e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8008432:	9801      	ldr	r0, [sp, #4]
 8008434:	f000 fba2 	bl	8008b7c <__mcmp>
 8008438:	462a      	mov	r2, r5
 800843a:	9006      	str	r0, [sp, #24]
 800843c:	4621      	mov	r1, r4
 800843e:	4648      	mov	r0, r9
 8008440:	f000 fbb8 	bl	8008bb4 <__mdiff>
 8008444:	68c2      	ldr	r2, [r0, #12]
 8008446:	4606      	mov	r6, r0
 8008448:	b9fa      	cbnz	r2, 800848a <_dtoa_r+0x942>
 800844a:	4601      	mov	r1, r0
 800844c:	9801      	ldr	r0, [sp, #4]
 800844e:	f000 fb95 	bl	8008b7c <__mcmp>
 8008452:	4602      	mov	r2, r0
 8008454:	4631      	mov	r1, r6
 8008456:	4648      	mov	r0, r9
 8008458:	920a      	str	r2, [sp, #40]	@ 0x28
 800845a:	f000 f955 	bl	8008708 <_Bfree>
 800845e:	9b07      	ldr	r3, [sp, #28]
 8008460:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008462:	9e05      	ldr	r6, [sp, #20]
 8008464:	ea43 0102 	orr.w	r1, r3, r2
 8008468:	9b08      	ldr	r3, [sp, #32]
 800846a:	4319      	orrs	r1, r3
 800846c:	d10f      	bne.n	800848e <_dtoa_r+0x946>
 800846e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008472:	d028      	beq.n	80084c6 <_dtoa_r+0x97e>
 8008474:	9b06      	ldr	r3, [sp, #24]
 8008476:	2b00      	cmp	r3, #0
 8008478:	dd02      	ble.n	8008480 <_dtoa_r+0x938>
 800847a:	9b02      	ldr	r3, [sp, #8]
 800847c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8008480:	f88b a000 	strb.w	sl, [fp]
 8008484:	e639      	b.n	80080fa <_dtoa_r+0x5b2>
 8008486:	4628      	mov	r0, r5
 8008488:	e7bd      	b.n	8008406 <_dtoa_r+0x8be>
 800848a:	2201      	movs	r2, #1
 800848c:	e7e2      	b.n	8008454 <_dtoa_r+0x90c>
 800848e:	9b06      	ldr	r3, [sp, #24]
 8008490:	2b00      	cmp	r3, #0
 8008492:	db04      	blt.n	800849e <_dtoa_r+0x956>
 8008494:	9907      	ldr	r1, [sp, #28]
 8008496:	430b      	orrs	r3, r1
 8008498:	9908      	ldr	r1, [sp, #32]
 800849a:	430b      	orrs	r3, r1
 800849c:	d120      	bne.n	80084e0 <_dtoa_r+0x998>
 800849e:	2a00      	cmp	r2, #0
 80084a0:	ddee      	ble.n	8008480 <_dtoa_r+0x938>
 80084a2:	9901      	ldr	r1, [sp, #4]
 80084a4:	2201      	movs	r2, #1
 80084a6:	4648      	mov	r0, r9
 80084a8:	f000 fafc 	bl	8008aa4 <__lshift>
 80084ac:	4621      	mov	r1, r4
 80084ae:	9001      	str	r0, [sp, #4]
 80084b0:	f000 fb64 	bl	8008b7c <__mcmp>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	dc03      	bgt.n	80084c0 <_dtoa_r+0x978>
 80084b8:	d1e2      	bne.n	8008480 <_dtoa_r+0x938>
 80084ba:	f01a 0f01 	tst.w	sl, #1
 80084be:	d0df      	beq.n	8008480 <_dtoa_r+0x938>
 80084c0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80084c4:	d1d9      	bne.n	800847a <_dtoa_r+0x932>
 80084c6:	2339      	movs	r3, #57	@ 0x39
 80084c8:	f88b 3000 	strb.w	r3, [fp]
 80084cc:	4633      	mov	r3, r6
 80084ce:	461e      	mov	r6, r3
 80084d0:	3b01      	subs	r3, #1
 80084d2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80084d6:	2a39      	cmp	r2, #57	@ 0x39
 80084d8:	d053      	beq.n	8008582 <_dtoa_r+0xa3a>
 80084da:	3201      	adds	r2, #1
 80084dc:	701a      	strb	r2, [r3, #0]
 80084de:	e60c      	b.n	80080fa <_dtoa_r+0x5b2>
 80084e0:	2a00      	cmp	r2, #0
 80084e2:	dd07      	ble.n	80084f4 <_dtoa_r+0x9ac>
 80084e4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80084e8:	d0ed      	beq.n	80084c6 <_dtoa_r+0x97e>
 80084ea:	f10a 0301 	add.w	r3, sl, #1
 80084ee:	f88b 3000 	strb.w	r3, [fp]
 80084f2:	e602      	b.n	80080fa <_dtoa_r+0x5b2>
 80084f4:	9b05      	ldr	r3, [sp, #20]
 80084f6:	9a05      	ldr	r2, [sp, #20]
 80084f8:	f803 ac01 	strb.w	sl, [r3, #-1]
 80084fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084fe:	4293      	cmp	r3, r2
 8008500:	d029      	beq.n	8008556 <_dtoa_r+0xa0e>
 8008502:	9901      	ldr	r1, [sp, #4]
 8008504:	2300      	movs	r3, #0
 8008506:	220a      	movs	r2, #10
 8008508:	4648      	mov	r0, r9
 800850a:	f000 f91f 	bl	800874c <__multadd>
 800850e:	45a8      	cmp	r8, r5
 8008510:	9001      	str	r0, [sp, #4]
 8008512:	f04f 0300 	mov.w	r3, #0
 8008516:	f04f 020a 	mov.w	r2, #10
 800851a:	4641      	mov	r1, r8
 800851c:	4648      	mov	r0, r9
 800851e:	d107      	bne.n	8008530 <_dtoa_r+0x9e8>
 8008520:	f000 f914 	bl	800874c <__multadd>
 8008524:	4680      	mov	r8, r0
 8008526:	4605      	mov	r5, r0
 8008528:	9b05      	ldr	r3, [sp, #20]
 800852a:	3301      	adds	r3, #1
 800852c:	9305      	str	r3, [sp, #20]
 800852e:	e775      	b.n	800841c <_dtoa_r+0x8d4>
 8008530:	f000 f90c 	bl	800874c <__multadd>
 8008534:	4629      	mov	r1, r5
 8008536:	4680      	mov	r8, r0
 8008538:	2300      	movs	r3, #0
 800853a:	220a      	movs	r2, #10
 800853c:	4648      	mov	r0, r9
 800853e:	f000 f905 	bl	800874c <__multadd>
 8008542:	4605      	mov	r5, r0
 8008544:	e7f0      	b.n	8008528 <_dtoa_r+0x9e0>
 8008546:	f1bb 0f00 	cmp.w	fp, #0
 800854a:	bfcc      	ite	gt
 800854c:	465e      	movgt	r6, fp
 800854e:	2601      	movle	r6, #1
 8008550:	443e      	add	r6, r7
 8008552:	f04f 0800 	mov.w	r8, #0
 8008556:	9901      	ldr	r1, [sp, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	4648      	mov	r0, r9
 800855c:	f000 faa2 	bl	8008aa4 <__lshift>
 8008560:	4621      	mov	r1, r4
 8008562:	9001      	str	r0, [sp, #4]
 8008564:	f000 fb0a 	bl	8008b7c <__mcmp>
 8008568:	2800      	cmp	r0, #0
 800856a:	dcaf      	bgt.n	80084cc <_dtoa_r+0x984>
 800856c:	d102      	bne.n	8008574 <_dtoa_r+0xa2c>
 800856e:	f01a 0f01 	tst.w	sl, #1
 8008572:	d1ab      	bne.n	80084cc <_dtoa_r+0x984>
 8008574:	4633      	mov	r3, r6
 8008576:	461e      	mov	r6, r3
 8008578:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800857c:	2a30      	cmp	r2, #48	@ 0x30
 800857e:	d0fa      	beq.n	8008576 <_dtoa_r+0xa2e>
 8008580:	e5bb      	b.n	80080fa <_dtoa_r+0x5b2>
 8008582:	429f      	cmp	r7, r3
 8008584:	d1a3      	bne.n	80084ce <_dtoa_r+0x986>
 8008586:	9b04      	ldr	r3, [sp, #16]
 8008588:	3301      	adds	r3, #1
 800858a:	9304      	str	r3, [sp, #16]
 800858c:	2331      	movs	r3, #49	@ 0x31
 800858e:	703b      	strb	r3, [r7, #0]
 8008590:	e5b3      	b.n	80080fa <_dtoa_r+0x5b2>
 8008592:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008594:	4f16      	ldr	r7, [pc, #88]	@ (80085f0 <_dtoa_r+0xaa8>)
 8008596:	b11b      	cbz	r3, 80085a0 <_dtoa_r+0xa58>
 8008598:	f107 0308 	add.w	r3, r7, #8
 800859c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800859e:	6013      	str	r3, [r2, #0]
 80085a0:	4638      	mov	r0, r7
 80085a2:	b011      	add	sp, #68	@ 0x44
 80085a4:	ecbd 8b02 	vpop	{d8}
 80085a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ac:	9b07      	ldr	r3, [sp, #28]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	f77f ae36 	ble.w	8008220 <_dtoa_r+0x6d8>
 80085b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085b8:	2001      	movs	r0, #1
 80085ba:	e656      	b.n	800826a <_dtoa_r+0x722>
 80085bc:	f1bb 0f00 	cmp.w	fp, #0
 80085c0:	f77f aed7 	ble.w	8008372 <_dtoa_r+0x82a>
 80085c4:	463e      	mov	r6, r7
 80085c6:	9801      	ldr	r0, [sp, #4]
 80085c8:	4621      	mov	r1, r4
 80085ca:	f7ff fa32 	bl	8007a32 <quorem>
 80085ce:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80085d2:	f806 ab01 	strb.w	sl, [r6], #1
 80085d6:	1bf2      	subs	r2, r6, r7
 80085d8:	4593      	cmp	fp, r2
 80085da:	ddb4      	ble.n	8008546 <_dtoa_r+0x9fe>
 80085dc:	9901      	ldr	r1, [sp, #4]
 80085de:	2300      	movs	r3, #0
 80085e0:	220a      	movs	r2, #10
 80085e2:	4648      	mov	r0, r9
 80085e4:	f000 f8b2 	bl	800874c <__multadd>
 80085e8:	9001      	str	r0, [sp, #4]
 80085ea:	e7ec      	b.n	80085c6 <_dtoa_r+0xa7e>
 80085ec:	0800980c 	.word	0x0800980c
 80085f0:	08009790 	.word	0x08009790

080085f4 <_free_r>:
 80085f4:	b538      	push	{r3, r4, r5, lr}
 80085f6:	4605      	mov	r5, r0
 80085f8:	2900      	cmp	r1, #0
 80085fa:	d041      	beq.n	8008680 <_free_r+0x8c>
 80085fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008600:	1f0c      	subs	r4, r1, #4
 8008602:	2b00      	cmp	r3, #0
 8008604:	bfb8      	it	lt
 8008606:	18e4      	addlt	r4, r4, r3
 8008608:	f7fe fc10 	bl	8006e2c <__malloc_lock>
 800860c:	4a1d      	ldr	r2, [pc, #116]	@ (8008684 <_free_r+0x90>)
 800860e:	6813      	ldr	r3, [r2, #0]
 8008610:	b933      	cbnz	r3, 8008620 <_free_r+0x2c>
 8008612:	6063      	str	r3, [r4, #4]
 8008614:	6014      	str	r4, [r2, #0]
 8008616:	4628      	mov	r0, r5
 8008618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800861c:	f7fe bc0c 	b.w	8006e38 <__malloc_unlock>
 8008620:	42a3      	cmp	r3, r4
 8008622:	d908      	bls.n	8008636 <_free_r+0x42>
 8008624:	6820      	ldr	r0, [r4, #0]
 8008626:	1821      	adds	r1, r4, r0
 8008628:	428b      	cmp	r3, r1
 800862a:	bf01      	itttt	eq
 800862c:	6819      	ldreq	r1, [r3, #0]
 800862e:	685b      	ldreq	r3, [r3, #4]
 8008630:	1809      	addeq	r1, r1, r0
 8008632:	6021      	streq	r1, [r4, #0]
 8008634:	e7ed      	b.n	8008612 <_free_r+0x1e>
 8008636:	461a      	mov	r2, r3
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	b10b      	cbz	r3, 8008640 <_free_r+0x4c>
 800863c:	42a3      	cmp	r3, r4
 800863e:	d9fa      	bls.n	8008636 <_free_r+0x42>
 8008640:	6811      	ldr	r1, [r2, #0]
 8008642:	1850      	adds	r0, r2, r1
 8008644:	42a0      	cmp	r0, r4
 8008646:	d10b      	bne.n	8008660 <_free_r+0x6c>
 8008648:	6820      	ldr	r0, [r4, #0]
 800864a:	4401      	add	r1, r0
 800864c:	1850      	adds	r0, r2, r1
 800864e:	4283      	cmp	r3, r0
 8008650:	6011      	str	r1, [r2, #0]
 8008652:	d1e0      	bne.n	8008616 <_free_r+0x22>
 8008654:	6818      	ldr	r0, [r3, #0]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	6053      	str	r3, [r2, #4]
 800865a:	4408      	add	r0, r1
 800865c:	6010      	str	r0, [r2, #0]
 800865e:	e7da      	b.n	8008616 <_free_r+0x22>
 8008660:	d902      	bls.n	8008668 <_free_r+0x74>
 8008662:	230c      	movs	r3, #12
 8008664:	602b      	str	r3, [r5, #0]
 8008666:	e7d6      	b.n	8008616 <_free_r+0x22>
 8008668:	6820      	ldr	r0, [r4, #0]
 800866a:	1821      	adds	r1, r4, r0
 800866c:	428b      	cmp	r3, r1
 800866e:	bf04      	itt	eq
 8008670:	6819      	ldreq	r1, [r3, #0]
 8008672:	685b      	ldreq	r3, [r3, #4]
 8008674:	6063      	str	r3, [r4, #4]
 8008676:	bf04      	itt	eq
 8008678:	1809      	addeq	r1, r1, r0
 800867a:	6021      	streq	r1, [r4, #0]
 800867c:	6054      	str	r4, [r2, #4]
 800867e:	e7ca      	b.n	8008616 <_free_r+0x22>
 8008680:	bd38      	pop	{r3, r4, r5, pc}
 8008682:	bf00      	nop
 8008684:	24000438 	.word	0x24000438

08008688 <_Balloc>:
 8008688:	b570      	push	{r4, r5, r6, lr}
 800868a:	69c6      	ldr	r6, [r0, #28]
 800868c:	4604      	mov	r4, r0
 800868e:	460d      	mov	r5, r1
 8008690:	b976      	cbnz	r6, 80086b0 <_Balloc+0x28>
 8008692:	2010      	movs	r0, #16
 8008694:	f7fe fb20 	bl	8006cd8 <malloc>
 8008698:	4602      	mov	r2, r0
 800869a:	61e0      	str	r0, [r4, #28]
 800869c:	b920      	cbnz	r0, 80086a8 <_Balloc+0x20>
 800869e:	4b18      	ldr	r3, [pc, #96]	@ (8008700 <_Balloc+0x78>)
 80086a0:	4818      	ldr	r0, [pc, #96]	@ (8008704 <_Balloc+0x7c>)
 80086a2:	216b      	movs	r1, #107	@ 0x6b
 80086a4:	f000 fe02 	bl	80092ac <__assert_func>
 80086a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086ac:	6006      	str	r6, [r0, #0]
 80086ae:	60c6      	str	r6, [r0, #12]
 80086b0:	69e6      	ldr	r6, [r4, #28]
 80086b2:	68f3      	ldr	r3, [r6, #12]
 80086b4:	b183      	cbz	r3, 80086d8 <_Balloc+0x50>
 80086b6:	69e3      	ldr	r3, [r4, #28]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086be:	b9b8      	cbnz	r0, 80086f0 <_Balloc+0x68>
 80086c0:	2101      	movs	r1, #1
 80086c2:	fa01 f605 	lsl.w	r6, r1, r5
 80086c6:	1d72      	adds	r2, r6, #5
 80086c8:	0092      	lsls	r2, r2, #2
 80086ca:	4620      	mov	r0, r4
 80086cc:	f000 fe0c 	bl	80092e8 <_calloc_r>
 80086d0:	b160      	cbz	r0, 80086ec <_Balloc+0x64>
 80086d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80086d6:	e00e      	b.n	80086f6 <_Balloc+0x6e>
 80086d8:	2221      	movs	r2, #33	@ 0x21
 80086da:	2104      	movs	r1, #4
 80086dc:	4620      	mov	r0, r4
 80086de:	f000 fe03 	bl	80092e8 <_calloc_r>
 80086e2:	69e3      	ldr	r3, [r4, #28]
 80086e4:	60f0      	str	r0, [r6, #12]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1e4      	bne.n	80086b6 <_Balloc+0x2e>
 80086ec:	2000      	movs	r0, #0
 80086ee:	bd70      	pop	{r4, r5, r6, pc}
 80086f0:	6802      	ldr	r2, [r0, #0]
 80086f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80086f6:	2300      	movs	r3, #0
 80086f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80086fc:	e7f7      	b.n	80086ee <_Balloc+0x66>
 80086fe:	bf00      	nop
 8008700:	0800979d 	.word	0x0800979d
 8008704:	0800981d 	.word	0x0800981d

08008708 <_Bfree>:
 8008708:	b570      	push	{r4, r5, r6, lr}
 800870a:	69c6      	ldr	r6, [r0, #28]
 800870c:	4605      	mov	r5, r0
 800870e:	460c      	mov	r4, r1
 8008710:	b976      	cbnz	r6, 8008730 <_Bfree+0x28>
 8008712:	2010      	movs	r0, #16
 8008714:	f7fe fae0 	bl	8006cd8 <malloc>
 8008718:	4602      	mov	r2, r0
 800871a:	61e8      	str	r0, [r5, #28]
 800871c:	b920      	cbnz	r0, 8008728 <_Bfree+0x20>
 800871e:	4b09      	ldr	r3, [pc, #36]	@ (8008744 <_Bfree+0x3c>)
 8008720:	4809      	ldr	r0, [pc, #36]	@ (8008748 <_Bfree+0x40>)
 8008722:	218f      	movs	r1, #143	@ 0x8f
 8008724:	f000 fdc2 	bl	80092ac <__assert_func>
 8008728:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800872c:	6006      	str	r6, [r0, #0]
 800872e:	60c6      	str	r6, [r0, #12]
 8008730:	b13c      	cbz	r4, 8008742 <_Bfree+0x3a>
 8008732:	69eb      	ldr	r3, [r5, #28]
 8008734:	6862      	ldr	r2, [r4, #4]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800873c:	6021      	str	r1, [r4, #0]
 800873e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008742:	bd70      	pop	{r4, r5, r6, pc}
 8008744:	0800979d 	.word	0x0800979d
 8008748:	0800981d 	.word	0x0800981d

0800874c <__multadd>:
 800874c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008750:	690d      	ldr	r5, [r1, #16]
 8008752:	4607      	mov	r7, r0
 8008754:	460c      	mov	r4, r1
 8008756:	461e      	mov	r6, r3
 8008758:	f101 0c14 	add.w	ip, r1, #20
 800875c:	2000      	movs	r0, #0
 800875e:	f8dc 3000 	ldr.w	r3, [ip]
 8008762:	b299      	uxth	r1, r3
 8008764:	fb02 6101 	mla	r1, r2, r1, r6
 8008768:	0c1e      	lsrs	r6, r3, #16
 800876a:	0c0b      	lsrs	r3, r1, #16
 800876c:	fb02 3306 	mla	r3, r2, r6, r3
 8008770:	b289      	uxth	r1, r1
 8008772:	3001      	adds	r0, #1
 8008774:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008778:	4285      	cmp	r5, r0
 800877a:	f84c 1b04 	str.w	r1, [ip], #4
 800877e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008782:	dcec      	bgt.n	800875e <__multadd+0x12>
 8008784:	b30e      	cbz	r6, 80087ca <__multadd+0x7e>
 8008786:	68a3      	ldr	r3, [r4, #8]
 8008788:	42ab      	cmp	r3, r5
 800878a:	dc19      	bgt.n	80087c0 <__multadd+0x74>
 800878c:	6861      	ldr	r1, [r4, #4]
 800878e:	4638      	mov	r0, r7
 8008790:	3101      	adds	r1, #1
 8008792:	f7ff ff79 	bl	8008688 <_Balloc>
 8008796:	4680      	mov	r8, r0
 8008798:	b928      	cbnz	r0, 80087a6 <__multadd+0x5a>
 800879a:	4602      	mov	r2, r0
 800879c:	4b0c      	ldr	r3, [pc, #48]	@ (80087d0 <__multadd+0x84>)
 800879e:	480d      	ldr	r0, [pc, #52]	@ (80087d4 <__multadd+0x88>)
 80087a0:	21ba      	movs	r1, #186	@ 0xba
 80087a2:	f000 fd83 	bl	80092ac <__assert_func>
 80087a6:	6922      	ldr	r2, [r4, #16]
 80087a8:	3202      	adds	r2, #2
 80087aa:	f104 010c 	add.w	r1, r4, #12
 80087ae:	0092      	lsls	r2, r2, #2
 80087b0:	300c      	adds	r0, #12
 80087b2:	f000 fd6d 	bl	8009290 <memcpy>
 80087b6:	4621      	mov	r1, r4
 80087b8:	4638      	mov	r0, r7
 80087ba:	f7ff ffa5 	bl	8008708 <_Bfree>
 80087be:	4644      	mov	r4, r8
 80087c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80087c4:	3501      	adds	r5, #1
 80087c6:	615e      	str	r6, [r3, #20]
 80087c8:	6125      	str	r5, [r4, #16]
 80087ca:	4620      	mov	r0, r4
 80087cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087d0:	0800980c 	.word	0x0800980c
 80087d4:	0800981d 	.word	0x0800981d

080087d8 <__hi0bits>:
 80087d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80087dc:	4603      	mov	r3, r0
 80087de:	bf36      	itet	cc
 80087e0:	0403      	lslcc	r3, r0, #16
 80087e2:	2000      	movcs	r0, #0
 80087e4:	2010      	movcc	r0, #16
 80087e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80087ea:	bf3c      	itt	cc
 80087ec:	021b      	lslcc	r3, r3, #8
 80087ee:	3008      	addcc	r0, #8
 80087f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087f4:	bf3c      	itt	cc
 80087f6:	011b      	lslcc	r3, r3, #4
 80087f8:	3004      	addcc	r0, #4
 80087fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087fe:	bf3c      	itt	cc
 8008800:	009b      	lslcc	r3, r3, #2
 8008802:	3002      	addcc	r0, #2
 8008804:	2b00      	cmp	r3, #0
 8008806:	db05      	blt.n	8008814 <__hi0bits+0x3c>
 8008808:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800880c:	f100 0001 	add.w	r0, r0, #1
 8008810:	bf08      	it	eq
 8008812:	2020      	moveq	r0, #32
 8008814:	4770      	bx	lr

08008816 <__lo0bits>:
 8008816:	6803      	ldr	r3, [r0, #0]
 8008818:	4602      	mov	r2, r0
 800881a:	f013 0007 	ands.w	r0, r3, #7
 800881e:	d00b      	beq.n	8008838 <__lo0bits+0x22>
 8008820:	07d9      	lsls	r1, r3, #31
 8008822:	d421      	bmi.n	8008868 <__lo0bits+0x52>
 8008824:	0798      	lsls	r0, r3, #30
 8008826:	bf49      	itett	mi
 8008828:	085b      	lsrmi	r3, r3, #1
 800882a:	089b      	lsrpl	r3, r3, #2
 800882c:	2001      	movmi	r0, #1
 800882e:	6013      	strmi	r3, [r2, #0]
 8008830:	bf5c      	itt	pl
 8008832:	6013      	strpl	r3, [r2, #0]
 8008834:	2002      	movpl	r0, #2
 8008836:	4770      	bx	lr
 8008838:	b299      	uxth	r1, r3
 800883a:	b909      	cbnz	r1, 8008840 <__lo0bits+0x2a>
 800883c:	0c1b      	lsrs	r3, r3, #16
 800883e:	2010      	movs	r0, #16
 8008840:	b2d9      	uxtb	r1, r3
 8008842:	b909      	cbnz	r1, 8008848 <__lo0bits+0x32>
 8008844:	3008      	adds	r0, #8
 8008846:	0a1b      	lsrs	r3, r3, #8
 8008848:	0719      	lsls	r1, r3, #28
 800884a:	bf04      	itt	eq
 800884c:	091b      	lsreq	r3, r3, #4
 800884e:	3004      	addeq	r0, #4
 8008850:	0799      	lsls	r1, r3, #30
 8008852:	bf04      	itt	eq
 8008854:	089b      	lsreq	r3, r3, #2
 8008856:	3002      	addeq	r0, #2
 8008858:	07d9      	lsls	r1, r3, #31
 800885a:	d403      	bmi.n	8008864 <__lo0bits+0x4e>
 800885c:	085b      	lsrs	r3, r3, #1
 800885e:	f100 0001 	add.w	r0, r0, #1
 8008862:	d003      	beq.n	800886c <__lo0bits+0x56>
 8008864:	6013      	str	r3, [r2, #0]
 8008866:	4770      	bx	lr
 8008868:	2000      	movs	r0, #0
 800886a:	4770      	bx	lr
 800886c:	2020      	movs	r0, #32
 800886e:	4770      	bx	lr

08008870 <__i2b>:
 8008870:	b510      	push	{r4, lr}
 8008872:	460c      	mov	r4, r1
 8008874:	2101      	movs	r1, #1
 8008876:	f7ff ff07 	bl	8008688 <_Balloc>
 800887a:	4602      	mov	r2, r0
 800887c:	b928      	cbnz	r0, 800888a <__i2b+0x1a>
 800887e:	4b05      	ldr	r3, [pc, #20]	@ (8008894 <__i2b+0x24>)
 8008880:	4805      	ldr	r0, [pc, #20]	@ (8008898 <__i2b+0x28>)
 8008882:	f240 1145 	movw	r1, #325	@ 0x145
 8008886:	f000 fd11 	bl	80092ac <__assert_func>
 800888a:	2301      	movs	r3, #1
 800888c:	6144      	str	r4, [r0, #20]
 800888e:	6103      	str	r3, [r0, #16]
 8008890:	bd10      	pop	{r4, pc}
 8008892:	bf00      	nop
 8008894:	0800980c 	.word	0x0800980c
 8008898:	0800981d 	.word	0x0800981d

0800889c <__multiply>:
 800889c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a0:	4614      	mov	r4, r2
 80088a2:	690a      	ldr	r2, [r1, #16]
 80088a4:	6923      	ldr	r3, [r4, #16]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	bfa8      	it	ge
 80088aa:	4623      	movge	r3, r4
 80088ac:	460f      	mov	r7, r1
 80088ae:	bfa4      	itt	ge
 80088b0:	460c      	movge	r4, r1
 80088b2:	461f      	movge	r7, r3
 80088b4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80088b8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80088bc:	68a3      	ldr	r3, [r4, #8]
 80088be:	6861      	ldr	r1, [r4, #4]
 80088c0:	eb0a 0609 	add.w	r6, sl, r9
 80088c4:	42b3      	cmp	r3, r6
 80088c6:	b085      	sub	sp, #20
 80088c8:	bfb8      	it	lt
 80088ca:	3101      	addlt	r1, #1
 80088cc:	f7ff fedc 	bl	8008688 <_Balloc>
 80088d0:	b930      	cbnz	r0, 80088e0 <__multiply+0x44>
 80088d2:	4602      	mov	r2, r0
 80088d4:	4b44      	ldr	r3, [pc, #272]	@ (80089e8 <__multiply+0x14c>)
 80088d6:	4845      	ldr	r0, [pc, #276]	@ (80089ec <__multiply+0x150>)
 80088d8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80088dc:	f000 fce6 	bl	80092ac <__assert_func>
 80088e0:	f100 0514 	add.w	r5, r0, #20
 80088e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80088e8:	462b      	mov	r3, r5
 80088ea:	2200      	movs	r2, #0
 80088ec:	4543      	cmp	r3, r8
 80088ee:	d321      	bcc.n	8008934 <__multiply+0x98>
 80088f0:	f107 0114 	add.w	r1, r7, #20
 80088f4:	f104 0214 	add.w	r2, r4, #20
 80088f8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80088fc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008900:	9302      	str	r3, [sp, #8]
 8008902:	1b13      	subs	r3, r2, r4
 8008904:	3b15      	subs	r3, #21
 8008906:	f023 0303 	bic.w	r3, r3, #3
 800890a:	3304      	adds	r3, #4
 800890c:	f104 0715 	add.w	r7, r4, #21
 8008910:	42ba      	cmp	r2, r7
 8008912:	bf38      	it	cc
 8008914:	2304      	movcc	r3, #4
 8008916:	9301      	str	r3, [sp, #4]
 8008918:	9b02      	ldr	r3, [sp, #8]
 800891a:	9103      	str	r1, [sp, #12]
 800891c:	428b      	cmp	r3, r1
 800891e:	d80c      	bhi.n	800893a <__multiply+0x9e>
 8008920:	2e00      	cmp	r6, #0
 8008922:	dd03      	ble.n	800892c <__multiply+0x90>
 8008924:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008928:	2b00      	cmp	r3, #0
 800892a:	d05b      	beq.n	80089e4 <__multiply+0x148>
 800892c:	6106      	str	r6, [r0, #16]
 800892e:	b005      	add	sp, #20
 8008930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008934:	f843 2b04 	str.w	r2, [r3], #4
 8008938:	e7d8      	b.n	80088ec <__multiply+0x50>
 800893a:	f8b1 a000 	ldrh.w	sl, [r1]
 800893e:	f1ba 0f00 	cmp.w	sl, #0
 8008942:	d024      	beq.n	800898e <__multiply+0xf2>
 8008944:	f104 0e14 	add.w	lr, r4, #20
 8008948:	46a9      	mov	r9, r5
 800894a:	f04f 0c00 	mov.w	ip, #0
 800894e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008952:	f8d9 3000 	ldr.w	r3, [r9]
 8008956:	fa1f fb87 	uxth.w	fp, r7
 800895a:	b29b      	uxth	r3, r3
 800895c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008960:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008964:	f8d9 7000 	ldr.w	r7, [r9]
 8008968:	4463      	add	r3, ip
 800896a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800896e:	fb0a c70b 	mla	r7, sl, fp, ip
 8008972:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008976:	b29b      	uxth	r3, r3
 8008978:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800897c:	4572      	cmp	r2, lr
 800897e:	f849 3b04 	str.w	r3, [r9], #4
 8008982:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008986:	d8e2      	bhi.n	800894e <__multiply+0xb2>
 8008988:	9b01      	ldr	r3, [sp, #4]
 800898a:	f845 c003 	str.w	ip, [r5, r3]
 800898e:	9b03      	ldr	r3, [sp, #12]
 8008990:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008994:	3104      	adds	r1, #4
 8008996:	f1b9 0f00 	cmp.w	r9, #0
 800899a:	d021      	beq.n	80089e0 <__multiply+0x144>
 800899c:	682b      	ldr	r3, [r5, #0]
 800899e:	f104 0c14 	add.w	ip, r4, #20
 80089a2:	46ae      	mov	lr, r5
 80089a4:	f04f 0a00 	mov.w	sl, #0
 80089a8:	f8bc b000 	ldrh.w	fp, [ip]
 80089ac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80089b0:	fb09 770b 	mla	r7, r9, fp, r7
 80089b4:	4457      	add	r7, sl
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80089bc:	f84e 3b04 	str.w	r3, [lr], #4
 80089c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80089c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089c8:	f8be 3000 	ldrh.w	r3, [lr]
 80089cc:	fb09 330a 	mla	r3, r9, sl, r3
 80089d0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80089d4:	4562      	cmp	r2, ip
 80089d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089da:	d8e5      	bhi.n	80089a8 <__multiply+0x10c>
 80089dc:	9f01      	ldr	r7, [sp, #4]
 80089de:	51eb      	str	r3, [r5, r7]
 80089e0:	3504      	adds	r5, #4
 80089e2:	e799      	b.n	8008918 <__multiply+0x7c>
 80089e4:	3e01      	subs	r6, #1
 80089e6:	e79b      	b.n	8008920 <__multiply+0x84>
 80089e8:	0800980c 	.word	0x0800980c
 80089ec:	0800981d 	.word	0x0800981d

080089f0 <__pow5mult>:
 80089f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089f4:	4615      	mov	r5, r2
 80089f6:	f012 0203 	ands.w	r2, r2, #3
 80089fa:	4607      	mov	r7, r0
 80089fc:	460e      	mov	r6, r1
 80089fe:	d007      	beq.n	8008a10 <__pow5mult+0x20>
 8008a00:	4c25      	ldr	r4, [pc, #148]	@ (8008a98 <__pow5mult+0xa8>)
 8008a02:	3a01      	subs	r2, #1
 8008a04:	2300      	movs	r3, #0
 8008a06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a0a:	f7ff fe9f 	bl	800874c <__multadd>
 8008a0e:	4606      	mov	r6, r0
 8008a10:	10ad      	asrs	r5, r5, #2
 8008a12:	d03d      	beq.n	8008a90 <__pow5mult+0xa0>
 8008a14:	69fc      	ldr	r4, [r7, #28]
 8008a16:	b97c      	cbnz	r4, 8008a38 <__pow5mult+0x48>
 8008a18:	2010      	movs	r0, #16
 8008a1a:	f7fe f95d 	bl	8006cd8 <malloc>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	61f8      	str	r0, [r7, #28]
 8008a22:	b928      	cbnz	r0, 8008a30 <__pow5mult+0x40>
 8008a24:	4b1d      	ldr	r3, [pc, #116]	@ (8008a9c <__pow5mult+0xac>)
 8008a26:	481e      	ldr	r0, [pc, #120]	@ (8008aa0 <__pow5mult+0xb0>)
 8008a28:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008a2c:	f000 fc3e 	bl	80092ac <__assert_func>
 8008a30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a34:	6004      	str	r4, [r0, #0]
 8008a36:	60c4      	str	r4, [r0, #12]
 8008a38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008a3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a40:	b94c      	cbnz	r4, 8008a56 <__pow5mult+0x66>
 8008a42:	f240 2171 	movw	r1, #625	@ 0x271
 8008a46:	4638      	mov	r0, r7
 8008a48:	f7ff ff12 	bl	8008870 <__i2b>
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a52:	4604      	mov	r4, r0
 8008a54:	6003      	str	r3, [r0, #0]
 8008a56:	f04f 0900 	mov.w	r9, #0
 8008a5a:	07eb      	lsls	r3, r5, #31
 8008a5c:	d50a      	bpl.n	8008a74 <__pow5mult+0x84>
 8008a5e:	4631      	mov	r1, r6
 8008a60:	4622      	mov	r2, r4
 8008a62:	4638      	mov	r0, r7
 8008a64:	f7ff ff1a 	bl	800889c <__multiply>
 8008a68:	4631      	mov	r1, r6
 8008a6a:	4680      	mov	r8, r0
 8008a6c:	4638      	mov	r0, r7
 8008a6e:	f7ff fe4b 	bl	8008708 <_Bfree>
 8008a72:	4646      	mov	r6, r8
 8008a74:	106d      	asrs	r5, r5, #1
 8008a76:	d00b      	beq.n	8008a90 <__pow5mult+0xa0>
 8008a78:	6820      	ldr	r0, [r4, #0]
 8008a7a:	b938      	cbnz	r0, 8008a8c <__pow5mult+0x9c>
 8008a7c:	4622      	mov	r2, r4
 8008a7e:	4621      	mov	r1, r4
 8008a80:	4638      	mov	r0, r7
 8008a82:	f7ff ff0b 	bl	800889c <__multiply>
 8008a86:	6020      	str	r0, [r4, #0]
 8008a88:	f8c0 9000 	str.w	r9, [r0]
 8008a8c:	4604      	mov	r4, r0
 8008a8e:	e7e4      	b.n	8008a5a <__pow5mult+0x6a>
 8008a90:	4630      	mov	r0, r6
 8008a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a96:	bf00      	nop
 8008a98:	08009878 	.word	0x08009878
 8008a9c:	0800979d 	.word	0x0800979d
 8008aa0:	0800981d 	.word	0x0800981d

08008aa4 <__lshift>:
 8008aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aa8:	460c      	mov	r4, r1
 8008aaa:	6849      	ldr	r1, [r1, #4]
 8008aac:	6923      	ldr	r3, [r4, #16]
 8008aae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ab2:	68a3      	ldr	r3, [r4, #8]
 8008ab4:	4607      	mov	r7, r0
 8008ab6:	4691      	mov	r9, r2
 8008ab8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008abc:	f108 0601 	add.w	r6, r8, #1
 8008ac0:	42b3      	cmp	r3, r6
 8008ac2:	db0b      	blt.n	8008adc <__lshift+0x38>
 8008ac4:	4638      	mov	r0, r7
 8008ac6:	f7ff fddf 	bl	8008688 <_Balloc>
 8008aca:	4605      	mov	r5, r0
 8008acc:	b948      	cbnz	r0, 8008ae2 <__lshift+0x3e>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	4b28      	ldr	r3, [pc, #160]	@ (8008b74 <__lshift+0xd0>)
 8008ad2:	4829      	ldr	r0, [pc, #164]	@ (8008b78 <__lshift+0xd4>)
 8008ad4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008ad8:	f000 fbe8 	bl	80092ac <__assert_func>
 8008adc:	3101      	adds	r1, #1
 8008ade:	005b      	lsls	r3, r3, #1
 8008ae0:	e7ee      	b.n	8008ac0 <__lshift+0x1c>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	f100 0114 	add.w	r1, r0, #20
 8008ae8:	f100 0210 	add.w	r2, r0, #16
 8008aec:	4618      	mov	r0, r3
 8008aee:	4553      	cmp	r3, sl
 8008af0:	db33      	blt.n	8008b5a <__lshift+0xb6>
 8008af2:	6920      	ldr	r0, [r4, #16]
 8008af4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008af8:	f104 0314 	add.w	r3, r4, #20
 8008afc:	f019 091f 	ands.w	r9, r9, #31
 8008b00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b08:	d02b      	beq.n	8008b62 <__lshift+0xbe>
 8008b0a:	f1c9 0e20 	rsb	lr, r9, #32
 8008b0e:	468a      	mov	sl, r1
 8008b10:	2200      	movs	r2, #0
 8008b12:	6818      	ldr	r0, [r3, #0]
 8008b14:	fa00 f009 	lsl.w	r0, r0, r9
 8008b18:	4310      	orrs	r0, r2
 8008b1a:	f84a 0b04 	str.w	r0, [sl], #4
 8008b1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b22:	459c      	cmp	ip, r3
 8008b24:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b28:	d8f3      	bhi.n	8008b12 <__lshift+0x6e>
 8008b2a:	ebac 0304 	sub.w	r3, ip, r4
 8008b2e:	3b15      	subs	r3, #21
 8008b30:	f023 0303 	bic.w	r3, r3, #3
 8008b34:	3304      	adds	r3, #4
 8008b36:	f104 0015 	add.w	r0, r4, #21
 8008b3a:	4584      	cmp	ip, r0
 8008b3c:	bf38      	it	cc
 8008b3e:	2304      	movcc	r3, #4
 8008b40:	50ca      	str	r2, [r1, r3]
 8008b42:	b10a      	cbz	r2, 8008b48 <__lshift+0xa4>
 8008b44:	f108 0602 	add.w	r6, r8, #2
 8008b48:	3e01      	subs	r6, #1
 8008b4a:	4638      	mov	r0, r7
 8008b4c:	612e      	str	r6, [r5, #16]
 8008b4e:	4621      	mov	r1, r4
 8008b50:	f7ff fdda 	bl	8008708 <_Bfree>
 8008b54:	4628      	mov	r0, r5
 8008b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b5e:	3301      	adds	r3, #1
 8008b60:	e7c5      	b.n	8008aee <__lshift+0x4a>
 8008b62:	3904      	subs	r1, #4
 8008b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b68:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b6c:	459c      	cmp	ip, r3
 8008b6e:	d8f9      	bhi.n	8008b64 <__lshift+0xc0>
 8008b70:	e7ea      	b.n	8008b48 <__lshift+0xa4>
 8008b72:	bf00      	nop
 8008b74:	0800980c 	.word	0x0800980c
 8008b78:	0800981d 	.word	0x0800981d

08008b7c <__mcmp>:
 8008b7c:	690a      	ldr	r2, [r1, #16]
 8008b7e:	4603      	mov	r3, r0
 8008b80:	6900      	ldr	r0, [r0, #16]
 8008b82:	1a80      	subs	r0, r0, r2
 8008b84:	b530      	push	{r4, r5, lr}
 8008b86:	d10e      	bne.n	8008ba6 <__mcmp+0x2a>
 8008b88:	3314      	adds	r3, #20
 8008b8a:	3114      	adds	r1, #20
 8008b8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008b90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008b94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008b9c:	4295      	cmp	r5, r2
 8008b9e:	d003      	beq.n	8008ba8 <__mcmp+0x2c>
 8008ba0:	d205      	bcs.n	8008bae <__mcmp+0x32>
 8008ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba6:	bd30      	pop	{r4, r5, pc}
 8008ba8:	42a3      	cmp	r3, r4
 8008baa:	d3f3      	bcc.n	8008b94 <__mcmp+0x18>
 8008bac:	e7fb      	b.n	8008ba6 <__mcmp+0x2a>
 8008bae:	2001      	movs	r0, #1
 8008bb0:	e7f9      	b.n	8008ba6 <__mcmp+0x2a>
	...

08008bb4 <__mdiff>:
 8008bb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb8:	4689      	mov	r9, r1
 8008bba:	4606      	mov	r6, r0
 8008bbc:	4611      	mov	r1, r2
 8008bbe:	4648      	mov	r0, r9
 8008bc0:	4614      	mov	r4, r2
 8008bc2:	f7ff ffdb 	bl	8008b7c <__mcmp>
 8008bc6:	1e05      	subs	r5, r0, #0
 8008bc8:	d112      	bne.n	8008bf0 <__mdiff+0x3c>
 8008bca:	4629      	mov	r1, r5
 8008bcc:	4630      	mov	r0, r6
 8008bce:	f7ff fd5b 	bl	8008688 <_Balloc>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	b928      	cbnz	r0, 8008be2 <__mdiff+0x2e>
 8008bd6:	4b3f      	ldr	r3, [pc, #252]	@ (8008cd4 <__mdiff+0x120>)
 8008bd8:	f240 2137 	movw	r1, #567	@ 0x237
 8008bdc:	483e      	ldr	r0, [pc, #248]	@ (8008cd8 <__mdiff+0x124>)
 8008bde:	f000 fb65 	bl	80092ac <__assert_func>
 8008be2:	2301      	movs	r3, #1
 8008be4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008be8:	4610      	mov	r0, r2
 8008bea:	b003      	add	sp, #12
 8008bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bf0:	bfbc      	itt	lt
 8008bf2:	464b      	movlt	r3, r9
 8008bf4:	46a1      	movlt	r9, r4
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008bfc:	bfba      	itte	lt
 8008bfe:	461c      	movlt	r4, r3
 8008c00:	2501      	movlt	r5, #1
 8008c02:	2500      	movge	r5, #0
 8008c04:	f7ff fd40 	bl	8008688 <_Balloc>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	b918      	cbnz	r0, 8008c14 <__mdiff+0x60>
 8008c0c:	4b31      	ldr	r3, [pc, #196]	@ (8008cd4 <__mdiff+0x120>)
 8008c0e:	f240 2145 	movw	r1, #581	@ 0x245
 8008c12:	e7e3      	b.n	8008bdc <__mdiff+0x28>
 8008c14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008c18:	6926      	ldr	r6, [r4, #16]
 8008c1a:	60c5      	str	r5, [r0, #12]
 8008c1c:	f109 0310 	add.w	r3, r9, #16
 8008c20:	f109 0514 	add.w	r5, r9, #20
 8008c24:	f104 0e14 	add.w	lr, r4, #20
 8008c28:	f100 0b14 	add.w	fp, r0, #20
 8008c2c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008c30:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008c34:	9301      	str	r3, [sp, #4]
 8008c36:	46d9      	mov	r9, fp
 8008c38:	f04f 0c00 	mov.w	ip, #0
 8008c3c:	9b01      	ldr	r3, [sp, #4]
 8008c3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008c42:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008c46:	9301      	str	r3, [sp, #4]
 8008c48:	fa1f f38a 	uxth.w	r3, sl
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	b283      	uxth	r3, r0
 8008c50:	1acb      	subs	r3, r1, r3
 8008c52:	0c00      	lsrs	r0, r0, #16
 8008c54:	4463      	add	r3, ip
 8008c56:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008c5a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008c64:	4576      	cmp	r6, lr
 8008c66:	f849 3b04 	str.w	r3, [r9], #4
 8008c6a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c6e:	d8e5      	bhi.n	8008c3c <__mdiff+0x88>
 8008c70:	1b33      	subs	r3, r6, r4
 8008c72:	3b15      	subs	r3, #21
 8008c74:	f023 0303 	bic.w	r3, r3, #3
 8008c78:	3415      	adds	r4, #21
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	42a6      	cmp	r6, r4
 8008c7e:	bf38      	it	cc
 8008c80:	2304      	movcc	r3, #4
 8008c82:	441d      	add	r5, r3
 8008c84:	445b      	add	r3, fp
 8008c86:	461e      	mov	r6, r3
 8008c88:	462c      	mov	r4, r5
 8008c8a:	4544      	cmp	r4, r8
 8008c8c:	d30e      	bcc.n	8008cac <__mdiff+0xf8>
 8008c8e:	f108 0103 	add.w	r1, r8, #3
 8008c92:	1b49      	subs	r1, r1, r5
 8008c94:	f021 0103 	bic.w	r1, r1, #3
 8008c98:	3d03      	subs	r5, #3
 8008c9a:	45a8      	cmp	r8, r5
 8008c9c:	bf38      	it	cc
 8008c9e:	2100      	movcc	r1, #0
 8008ca0:	440b      	add	r3, r1
 8008ca2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ca6:	b191      	cbz	r1, 8008cce <__mdiff+0x11a>
 8008ca8:	6117      	str	r7, [r2, #16]
 8008caa:	e79d      	b.n	8008be8 <__mdiff+0x34>
 8008cac:	f854 1b04 	ldr.w	r1, [r4], #4
 8008cb0:	46e6      	mov	lr, ip
 8008cb2:	0c08      	lsrs	r0, r1, #16
 8008cb4:	fa1c fc81 	uxtah	ip, ip, r1
 8008cb8:	4471      	add	r1, lr
 8008cba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008cbe:	b289      	uxth	r1, r1
 8008cc0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008cc4:	f846 1b04 	str.w	r1, [r6], #4
 8008cc8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ccc:	e7dd      	b.n	8008c8a <__mdiff+0xd6>
 8008cce:	3f01      	subs	r7, #1
 8008cd0:	e7e7      	b.n	8008ca2 <__mdiff+0xee>
 8008cd2:	bf00      	nop
 8008cd4:	0800980c 	.word	0x0800980c
 8008cd8:	0800981d 	.word	0x0800981d

08008cdc <__d2b>:
 8008cdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ce0:	460f      	mov	r7, r1
 8008ce2:	2101      	movs	r1, #1
 8008ce4:	ec59 8b10 	vmov	r8, r9, d0
 8008ce8:	4616      	mov	r6, r2
 8008cea:	f7ff fccd 	bl	8008688 <_Balloc>
 8008cee:	4604      	mov	r4, r0
 8008cf0:	b930      	cbnz	r0, 8008d00 <__d2b+0x24>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	4b23      	ldr	r3, [pc, #140]	@ (8008d84 <__d2b+0xa8>)
 8008cf6:	4824      	ldr	r0, [pc, #144]	@ (8008d88 <__d2b+0xac>)
 8008cf8:	f240 310f 	movw	r1, #783	@ 0x30f
 8008cfc:	f000 fad6 	bl	80092ac <__assert_func>
 8008d00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d08:	b10d      	cbz	r5, 8008d0e <__d2b+0x32>
 8008d0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d0e:	9301      	str	r3, [sp, #4]
 8008d10:	f1b8 0300 	subs.w	r3, r8, #0
 8008d14:	d023      	beq.n	8008d5e <__d2b+0x82>
 8008d16:	4668      	mov	r0, sp
 8008d18:	9300      	str	r3, [sp, #0]
 8008d1a:	f7ff fd7c 	bl	8008816 <__lo0bits>
 8008d1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008d22:	b1d0      	cbz	r0, 8008d5a <__d2b+0x7e>
 8008d24:	f1c0 0320 	rsb	r3, r0, #32
 8008d28:	fa02 f303 	lsl.w	r3, r2, r3
 8008d2c:	430b      	orrs	r3, r1
 8008d2e:	40c2      	lsrs	r2, r0
 8008d30:	6163      	str	r3, [r4, #20]
 8008d32:	9201      	str	r2, [sp, #4]
 8008d34:	9b01      	ldr	r3, [sp, #4]
 8008d36:	61a3      	str	r3, [r4, #24]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	bf0c      	ite	eq
 8008d3c:	2201      	moveq	r2, #1
 8008d3e:	2202      	movne	r2, #2
 8008d40:	6122      	str	r2, [r4, #16]
 8008d42:	b1a5      	cbz	r5, 8008d6e <__d2b+0x92>
 8008d44:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008d48:	4405      	add	r5, r0
 8008d4a:	603d      	str	r5, [r7, #0]
 8008d4c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008d50:	6030      	str	r0, [r6, #0]
 8008d52:	4620      	mov	r0, r4
 8008d54:	b003      	add	sp, #12
 8008d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d5a:	6161      	str	r1, [r4, #20]
 8008d5c:	e7ea      	b.n	8008d34 <__d2b+0x58>
 8008d5e:	a801      	add	r0, sp, #4
 8008d60:	f7ff fd59 	bl	8008816 <__lo0bits>
 8008d64:	9b01      	ldr	r3, [sp, #4]
 8008d66:	6163      	str	r3, [r4, #20]
 8008d68:	3020      	adds	r0, #32
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	e7e8      	b.n	8008d40 <__d2b+0x64>
 8008d6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d72:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008d76:	6038      	str	r0, [r7, #0]
 8008d78:	6918      	ldr	r0, [r3, #16]
 8008d7a:	f7ff fd2d 	bl	80087d8 <__hi0bits>
 8008d7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d82:	e7e5      	b.n	8008d50 <__d2b+0x74>
 8008d84:	0800980c 	.word	0x0800980c
 8008d88:	0800981d 	.word	0x0800981d

08008d8c <__sfputc_r>:
 8008d8c:	6893      	ldr	r3, [r2, #8]
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	b410      	push	{r4}
 8008d94:	6093      	str	r3, [r2, #8]
 8008d96:	da08      	bge.n	8008daa <__sfputc_r+0x1e>
 8008d98:	6994      	ldr	r4, [r2, #24]
 8008d9a:	42a3      	cmp	r3, r4
 8008d9c:	db01      	blt.n	8008da2 <__sfputc_r+0x16>
 8008d9e:	290a      	cmp	r1, #10
 8008da0:	d103      	bne.n	8008daa <__sfputc_r+0x1e>
 8008da2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008da6:	f000 b9df 	b.w	8009168 <__swbuf_r>
 8008daa:	6813      	ldr	r3, [r2, #0]
 8008dac:	1c58      	adds	r0, r3, #1
 8008dae:	6010      	str	r0, [r2, #0]
 8008db0:	7019      	strb	r1, [r3, #0]
 8008db2:	4608      	mov	r0, r1
 8008db4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <__sfputs_r>:
 8008dba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dbc:	4606      	mov	r6, r0
 8008dbe:	460f      	mov	r7, r1
 8008dc0:	4614      	mov	r4, r2
 8008dc2:	18d5      	adds	r5, r2, r3
 8008dc4:	42ac      	cmp	r4, r5
 8008dc6:	d101      	bne.n	8008dcc <__sfputs_r+0x12>
 8008dc8:	2000      	movs	r0, #0
 8008dca:	e007      	b.n	8008ddc <__sfputs_r+0x22>
 8008dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dd0:	463a      	mov	r2, r7
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	f7ff ffda 	bl	8008d8c <__sfputc_r>
 8008dd8:	1c43      	adds	r3, r0, #1
 8008dda:	d1f3      	bne.n	8008dc4 <__sfputs_r+0xa>
 8008ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008de0 <_vfiprintf_r>:
 8008de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de4:	460d      	mov	r5, r1
 8008de6:	b09d      	sub	sp, #116	@ 0x74
 8008de8:	4614      	mov	r4, r2
 8008dea:	4698      	mov	r8, r3
 8008dec:	4606      	mov	r6, r0
 8008dee:	b118      	cbz	r0, 8008df8 <_vfiprintf_r+0x18>
 8008df0:	6a03      	ldr	r3, [r0, #32]
 8008df2:	b90b      	cbnz	r3, 8008df8 <_vfiprintf_r+0x18>
 8008df4:	f7fe fce8 	bl	80077c8 <__sinit>
 8008df8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dfa:	07d9      	lsls	r1, r3, #31
 8008dfc:	d405      	bmi.n	8008e0a <_vfiprintf_r+0x2a>
 8008dfe:	89ab      	ldrh	r3, [r5, #12]
 8008e00:	059a      	lsls	r2, r3, #22
 8008e02:	d402      	bmi.n	8008e0a <_vfiprintf_r+0x2a>
 8008e04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e06:	f7fe fe12 	bl	8007a2e <__retarget_lock_acquire_recursive>
 8008e0a:	89ab      	ldrh	r3, [r5, #12]
 8008e0c:	071b      	lsls	r3, r3, #28
 8008e0e:	d501      	bpl.n	8008e14 <_vfiprintf_r+0x34>
 8008e10:	692b      	ldr	r3, [r5, #16]
 8008e12:	b99b      	cbnz	r3, 8008e3c <_vfiprintf_r+0x5c>
 8008e14:	4629      	mov	r1, r5
 8008e16:	4630      	mov	r0, r6
 8008e18:	f000 f9e4 	bl	80091e4 <__swsetup_r>
 8008e1c:	b170      	cbz	r0, 8008e3c <_vfiprintf_r+0x5c>
 8008e1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e20:	07dc      	lsls	r4, r3, #31
 8008e22:	d504      	bpl.n	8008e2e <_vfiprintf_r+0x4e>
 8008e24:	f04f 30ff 	mov.w	r0, #4294967295
 8008e28:	b01d      	add	sp, #116	@ 0x74
 8008e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e2e:	89ab      	ldrh	r3, [r5, #12]
 8008e30:	0598      	lsls	r0, r3, #22
 8008e32:	d4f7      	bmi.n	8008e24 <_vfiprintf_r+0x44>
 8008e34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e36:	f7fe fdfb 	bl	8007a30 <__retarget_lock_release_recursive>
 8008e3a:	e7f3      	b.n	8008e24 <_vfiprintf_r+0x44>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e40:	2320      	movs	r3, #32
 8008e42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e46:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e4a:	2330      	movs	r3, #48	@ 0x30
 8008e4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ffc <_vfiprintf_r+0x21c>
 8008e50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e54:	f04f 0901 	mov.w	r9, #1
 8008e58:	4623      	mov	r3, r4
 8008e5a:	469a      	mov	sl, r3
 8008e5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e60:	b10a      	cbz	r2, 8008e66 <_vfiprintf_r+0x86>
 8008e62:	2a25      	cmp	r2, #37	@ 0x25
 8008e64:	d1f9      	bne.n	8008e5a <_vfiprintf_r+0x7a>
 8008e66:	ebba 0b04 	subs.w	fp, sl, r4
 8008e6a:	d00b      	beq.n	8008e84 <_vfiprintf_r+0xa4>
 8008e6c:	465b      	mov	r3, fp
 8008e6e:	4622      	mov	r2, r4
 8008e70:	4629      	mov	r1, r5
 8008e72:	4630      	mov	r0, r6
 8008e74:	f7ff ffa1 	bl	8008dba <__sfputs_r>
 8008e78:	3001      	adds	r0, #1
 8008e7a:	f000 80a7 	beq.w	8008fcc <_vfiprintf_r+0x1ec>
 8008e7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e80:	445a      	add	r2, fp
 8008e82:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e84:	f89a 3000 	ldrb.w	r3, [sl]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f000 809f 	beq.w	8008fcc <_vfiprintf_r+0x1ec>
 8008e8e:	2300      	movs	r3, #0
 8008e90:	f04f 32ff 	mov.w	r2, #4294967295
 8008e94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e98:	f10a 0a01 	add.w	sl, sl, #1
 8008e9c:	9304      	str	r3, [sp, #16]
 8008e9e:	9307      	str	r3, [sp, #28]
 8008ea0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ea4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ea6:	4654      	mov	r4, sl
 8008ea8:	2205      	movs	r2, #5
 8008eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eae:	4853      	ldr	r0, [pc, #332]	@ (8008ffc <_vfiprintf_r+0x21c>)
 8008eb0:	f7f7 fa2e 	bl	8000310 <memchr>
 8008eb4:	9a04      	ldr	r2, [sp, #16]
 8008eb6:	b9d8      	cbnz	r0, 8008ef0 <_vfiprintf_r+0x110>
 8008eb8:	06d1      	lsls	r1, r2, #27
 8008eba:	bf44      	itt	mi
 8008ebc:	2320      	movmi	r3, #32
 8008ebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ec2:	0713      	lsls	r3, r2, #28
 8008ec4:	bf44      	itt	mi
 8008ec6:	232b      	movmi	r3, #43	@ 0x2b
 8008ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8008ed0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ed2:	d015      	beq.n	8008f00 <_vfiprintf_r+0x120>
 8008ed4:	9a07      	ldr	r2, [sp, #28]
 8008ed6:	4654      	mov	r4, sl
 8008ed8:	2000      	movs	r0, #0
 8008eda:	f04f 0c0a 	mov.w	ip, #10
 8008ede:	4621      	mov	r1, r4
 8008ee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ee4:	3b30      	subs	r3, #48	@ 0x30
 8008ee6:	2b09      	cmp	r3, #9
 8008ee8:	d94b      	bls.n	8008f82 <_vfiprintf_r+0x1a2>
 8008eea:	b1b0      	cbz	r0, 8008f1a <_vfiprintf_r+0x13a>
 8008eec:	9207      	str	r2, [sp, #28]
 8008eee:	e014      	b.n	8008f1a <_vfiprintf_r+0x13a>
 8008ef0:	eba0 0308 	sub.w	r3, r0, r8
 8008ef4:	fa09 f303 	lsl.w	r3, r9, r3
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	9304      	str	r3, [sp, #16]
 8008efc:	46a2      	mov	sl, r4
 8008efe:	e7d2      	b.n	8008ea6 <_vfiprintf_r+0xc6>
 8008f00:	9b03      	ldr	r3, [sp, #12]
 8008f02:	1d19      	adds	r1, r3, #4
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	9103      	str	r1, [sp, #12]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	bfbb      	ittet	lt
 8008f0c:	425b      	neglt	r3, r3
 8008f0e:	f042 0202 	orrlt.w	r2, r2, #2
 8008f12:	9307      	strge	r3, [sp, #28]
 8008f14:	9307      	strlt	r3, [sp, #28]
 8008f16:	bfb8      	it	lt
 8008f18:	9204      	strlt	r2, [sp, #16]
 8008f1a:	7823      	ldrb	r3, [r4, #0]
 8008f1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f1e:	d10a      	bne.n	8008f36 <_vfiprintf_r+0x156>
 8008f20:	7863      	ldrb	r3, [r4, #1]
 8008f22:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f24:	d132      	bne.n	8008f8c <_vfiprintf_r+0x1ac>
 8008f26:	9b03      	ldr	r3, [sp, #12]
 8008f28:	1d1a      	adds	r2, r3, #4
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	9203      	str	r2, [sp, #12]
 8008f2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f32:	3402      	adds	r4, #2
 8008f34:	9305      	str	r3, [sp, #20]
 8008f36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800900c <_vfiprintf_r+0x22c>
 8008f3a:	7821      	ldrb	r1, [r4, #0]
 8008f3c:	2203      	movs	r2, #3
 8008f3e:	4650      	mov	r0, sl
 8008f40:	f7f7 f9e6 	bl	8000310 <memchr>
 8008f44:	b138      	cbz	r0, 8008f56 <_vfiprintf_r+0x176>
 8008f46:	9b04      	ldr	r3, [sp, #16]
 8008f48:	eba0 000a 	sub.w	r0, r0, sl
 8008f4c:	2240      	movs	r2, #64	@ 0x40
 8008f4e:	4082      	lsls	r2, r0
 8008f50:	4313      	orrs	r3, r2
 8008f52:	3401      	adds	r4, #1
 8008f54:	9304      	str	r3, [sp, #16]
 8008f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f5a:	4829      	ldr	r0, [pc, #164]	@ (8009000 <_vfiprintf_r+0x220>)
 8008f5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f60:	2206      	movs	r2, #6
 8008f62:	f7f7 f9d5 	bl	8000310 <memchr>
 8008f66:	2800      	cmp	r0, #0
 8008f68:	d03f      	beq.n	8008fea <_vfiprintf_r+0x20a>
 8008f6a:	4b26      	ldr	r3, [pc, #152]	@ (8009004 <_vfiprintf_r+0x224>)
 8008f6c:	bb1b      	cbnz	r3, 8008fb6 <_vfiprintf_r+0x1d6>
 8008f6e:	9b03      	ldr	r3, [sp, #12]
 8008f70:	3307      	adds	r3, #7
 8008f72:	f023 0307 	bic.w	r3, r3, #7
 8008f76:	3308      	adds	r3, #8
 8008f78:	9303      	str	r3, [sp, #12]
 8008f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f7c:	443b      	add	r3, r7
 8008f7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f80:	e76a      	b.n	8008e58 <_vfiprintf_r+0x78>
 8008f82:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f86:	460c      	mov	r4, r1
 8008f88:	2001      	movs	r0, #1
 8008f8a:	e7a8      	b.n	8008ede <_vfiprintf_r+0xfe>
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	3401      	adds	r4, #1
 8008f90:	9305      	str	r3, [sp, #20]
 8008f92:	4619      	mov	r1, r3
 8008f94:	f04f 0c0a 	mov.w	ip, #10
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f9e:	3a30      	subs	r2, #48	@ 0x30
 8008fa0:	2a09      	cmp	r2, #9
 8008fa2:	d903      	bls.n	8008fac <_vfiprintf_r+0x1cc>
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d0c6      	beq.n	8008f36 <_vfiprintf_r+0x156>
 8008fa8:	9105      	str	r1, [sp, #20]
 8008faa:	e7c4      	b.n	8008f36 <_vfiprintf_r+0x156>
 8008fac:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fb0:	4604      	mov	r4, r0
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e7f0      	b.n	8008f98 <_vfiprintf_r+0x1b8>
 8008fb6:	ab03      	add	r3, sp, #12
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	462a      	mov	r2, r5
 8008fbc:	4b12      	ldr	r3, [pc, #72]	@ (8009008 <_vfiprintf_r+0x228>)
 8008fbe:	a904      	add	r1, sp, #16
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	f7fd ffcd 	bl	8006f60 <_printf_float>
 8008fc6:	4607      	mov	r7, r0
 8008fc8:	1c78      	adds	r0, r7, #1
 8008fca:	d1d6      	bne.n	8008f7a <_vfiprintf_r+0x19a>
 8008fcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fce:	07d9      	lsls	r1, r3, #31
 8008fd0:	d405      	bmi.n	8008fde <_vfiprintf_r+0x1fe>
 8008fd2:	89ab      	ldrh	r3, [r5, #12]
 8008fd4:	059a      	lsls	r2, r3, #22
 8008fd6:	d402      	bmi.n	8008fde <_vfiprintf_r+0x1fe>
 8008fd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fda:	f7fe fd29 	bl	8007a30 <__retarget_lock_release_recursive>
 8008fde:	89ab      	ldrh	r3, [r5, #12]
 8008fe0:	065b      	lsls	r3, r3, #25
 8008fe2:	f53f af1f 	bmi.w	8008e24 <_vfiprintf_r+0x44>
 8008fe6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fe8:	e71e      	b.n	8008e28 <_vfiprintf_r+0x48>
 8008fea:	ab03      	add	r3, sp, #12
 8008fec:	9300      	str	r3, [sp, #0]
 8008fee:	462a      	mov	r2, r5
 8008ff0:	4b05      	ldr	r3, [pc, #20]	@ (8009008 <_vfiprintf_r+0x228>)
 8008ff2:	a904      	add	r1, sp, #16
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	f7fe fa3b 	bl	8007470 <_printf_i>
 8008ffa:	e7e4      	b.n	8008fc6 <_vfiprintf_r+0x1e6>
 8008ffc:	08009978 	.word	0x08009978
 8009000:	08009982 	.word	0x08009982
 8009004:	08006f61 	.word	0x08006f61
 8009008:	08008dbb 	.word	0x08008dbb
 800900c:	0800997e 	.word	0x0800997e

08009010 <__sflush_r>:
 8009010:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009018:	0716      	lsls	r6, r2, #28
 800901a:	4605      	mov	r5, r0
 800901c:	460c      	mov	r4, r1
 800901e:	d454      	bmi.n	80090ca <__sflush_r+0xba>
 8009020:	684b      	ldr	r3, [r1, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	dc02      	bgt.n	800902c <__sflush_r+0x1c>
 8009026:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009028:	2b00      	cmp	r3, #0
 800902a:	dd48      	ble.n	80090be <__sflush_r+0xae>
 800902c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800902e:	2e00      	cmp	r6, #0
 8009030:	d045      	beq.n	80090be <__sflush_r+0xae>
 8009032:	2300      	movs	r3, #0
 8009034:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009038:	682f      	ldr	r7, [r5, #0]
 800903a:	6a21      	ldr	r1, [r4, #32]
 800903c:	602b      	str	r3, [r5, #0]
 800903e:	d030      	beq.n	80090a2 <__sflush_r+0x92>
 8009040:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009042:	89a3      	ldrh	r3, [r4, #12]
 8009044:	0759      	lsls	r1, r3, #29
 8009046:	d505      	bpl.n	8009054 <__sflush_r+0x44>
 8009048:	6863      	ldr	r3, [r4, #4]
 800904a:	1ad2      	subs	r2, r2, r3
 800904c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800904e:	b10b      	cbz	r3, 8009054 <__sflush_r+0x44>
 8009050:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009052:	1ad2      	subs	r2, r2, r3
 8009054:	2300      	movs	r3, #0
 8009056:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009058:	6a21      	ldr	r1, [r4, #32]
 800905a:	4628      	mov	r0, r5
 800905c:	47b0      	blx	r6
 800905e:	1c43      	adds	r3, r0, #1
 8009060:	89a3      	ldrh	r3, [r4, #12]
 8009062:	d106      	bne.n	8009072 <__sflush_r+0x62>
 8009064:	6829      	ldr	r1, [r5, #0]
 8009066:	291d      	cmp	r1, #29
 8009068:	d82b      	bhi.n	80090c2 <__sflush_r+0xb2>
 800906a:	4a2a      	ldr	r2, [pc, #168]	@ (8009114 <__sflush_r+0x104>)
 800906c:	410a      	asrs	r2, r1
 800906e:	07d6      	lsls	r6, r2, #31
 8009070:	d427      	bmi.n	80090c2 <__sflush_r+0xb2>
 8009072:	2200      	movs	r2, #0
 8009074:	6062      	str	r2, [r4, #4]
 8009076:	04d9      	lsls	r1, r3, #19
 8009078:	6922      	ldr	r2, [r4, #16]
 800907a:	6022      	str	r2, [r4, #0]
 800907c:	d504      	bpl.n	8009088 <__sflush_r+0x78>
 800907e:	1c42      	adds	r2, r0, #1
 8009080:	d101      	bne.n	8009086 <__sflush_r+0x76>
 8009082:	682b      	ldr	r3, [r5, #0]
 8009084:	b903      	cbnz	r3, 8009088 <__sflush_r+0x78>
 8009086:	6560      	str	r0, [r4, #84]	@ 0x54
 8009088:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800908a:	602f      	str	r7, [r5, #0]
 800908c:	b1b9      	cbz	r1, 80090be <__sflush_r+0xae>
 800908e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009092:	4299      	cmp	r1, r3
 8009094:	d002      	beq.n	800909c <__sflush_r+0x8c>
 8009096:	4628      	mov	r0, r5
 8009098:	f7ff faac 	bl	80085f4 <_free_r>
 800909c:	2300      	movs	r3, #0
 800909e:	6363      	str	r3, [r4, #52]	@ 0x34
 80090a0:	e00d      	b.n	80090be <__sflush_r+0xae>
 80090a2:	2301      	movs	r3, #1
 80090a4:	4628      	mov	r0, r5
 80090a6:	47b0      	blx	r6
 80090a8:	4602      	mov	r2, r0
 80090aa:	1c50      	adds	r0, r2, #1
 80090ac:	d1c9      	bne.n	8009042 <__sflush_r+0x32>
 80090ae:	682b      	ldr	r3, [r5, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d0c6      	beq.n	8009042 <__sflush_r+0x32>
 80090b4:	2b1d      	cmp	r3, #29
 80090b6:	d001      	beq.n	80090bc <__sflush_r+0xac>
 80090b8:	2b16      	cmp	r3, #22
 80090ba:	d11e      	bne.n	80090fa <__sflush_r+0xea>
 80090bc:	602f      	str	r7, [r5, #0]
 80090be:	2000      	movs	r0, #0
 80090c0:	e022      	b.n	8009108 <__sflush_r+0xf8>
 80090c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090c6:	b21b      	sxth	r3, r3
 80090c8:	e01b      	b.n	8009102 <__sflush_r+0xf2>
 80090ca:	690f      	ldr	r7, [r1, #16]
 80090cc:	2f00      	cmp	r7, #0
 80090ce:	d0f6      	beq.n	80090be <__sflush_r+0xae>
 80090d0:	0793      	lsls	r3, r2, #30
 80090d2:	680e      	ldr	r6, [r1, #0]
 80090d4:	bf08      	it	eq
 80090d6:	694b      	ldreq	r3, [r1, #20]
 80090d8:	600f      	str	r7, [r1, #0]
 80090da:	bf18      	it	ne
 80090dc:	2300      	movne	r3, #0
 80090de:	eba6 0807 	sub.w	r8, r6, r7
 80090e2:	608b      	str	r3, [r1, #8]
 80090e4:	f1b8 0f00 	cmp.w	r8, #0
 80090e8:	dde9      	ble.n	80090be <__sflush_r+0xae>
 80090ea:	6a21      	ldr	r1, [r4, #32]
 80090ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80090ee:	4643      	mov	r3, r8
 80090f0:	463a      	mov	r2, r7
 80090f2:	4628      	mov	r0, r5
 80090f4:	47b0      	blx	r6
 80090f6:	2800      	cmp	r0, #0
 80090f8:	dc08      	bgt.n	800910c <__sflush_r+0xfc>
 80090fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009102:	81a3      	strh	r3, [r4, #12]
 8009104:	f04f 30ff 	mov.w	r0, #4294967295
 8009108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800910c:	4407      	add	r7, r0
 800910e:	eba8 0800 	sub.w	r8, r8, r0
 8009112:	e7e7      	b.n	80090e4 <__sflush_r+0xd4>
 8009114:	dfbffffe 	.word	0xdfbffffe

08009118 <_fflush_r>:
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	690b      	ldr	r3, [r1, #16]
 800911c:	4605      	mov	r5, r0
 800911e:	460c      	mov	r4, r1
 8009120:	b913      	cbnz	r3, 8009128 <_fflush_r+0x10>
 8009122:	2500      	movs	r5, #0
 8009124:	4628      	mov	r0, r5
 8009126:	bd38      	pop	{r3, r4, r5, pc}
 8009128:	b118      	cbz	r0, 8009132 <_fflush_r+0x1a>
 800912a:	6a03      	ldr	r3, [r0, #32]
 800912c:	b90b      	cbnz	r3, 8009132 <_fflush_r+0x1a>
 800912e:	f7fe fb4b 	bl	80077c8 <__sinit>
 8009132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d0f3      	beq.n	8009122 <_fflush_r+0xa>
 800913a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800913c:	07d0      	lsls	r0, r2, #31
 800913e:	d404      	bmi.n	800914a <_fflush_r+0x32>
 8009140:	0599      	lsls	r1, r3, #22
 8009142:	d402      	bmi.n	800914a <_fflush_r+0x32>
 8009144:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009146:	f7fe fc72 	bl	8007a2e <__retarget_lock_acquire_recursive>
 800914a:	4628      	mov	r0, r5
 800914c:	4621      	mov	r1, r4
 800914e:	f7ff ff5f 	bl	8009010 <__sflush_r>
 8009152:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009154:	07da      	lsls	r2, r3, #31
 8009156:	4605      	mov	r5, r0
 8009158:	d4e4      	bmi.n	8009124 <_fflush_r+0xc>
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	059b      	lsls	r3, r3, #22
 800915e:	d4e1      	bmi.n	8009124 <_fflush_r+0xc>
 8009160:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009162:	f7fe fc65 	bl	8007a30 <__retarget_lock_release_recursive>
 8009166:	e7dd      	b.n	8009124 <_fflush_r+0xc>

08009168 <__swbuf_r>:
 8009168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916a:	460e      	mov	r6, r1
 800916c:	4614      	mov	r4, r2
 800916e:	4605      	mov	r5, r0
 8009170:	b118      	cbz	r0, 800917a <__swbuf_r+0x12>
 8009172:	6a03      	ldr	r3, [r0, #32]
 8009174:	b90b      	cbnz	r3, 800917a <__swbuf_r+0x12>
 8009176:	f7fe fb27 	bl	80077c8 <__sinit>
 800917a:	69a3      	ldr	r3, [r4, #24]
 800917c:	60a3      	str	r3, [r4, #8]
 800917e:	89a3      	ldrh	r3, [r4, #12]
 8009180:	071a      	lsls	r2, r3, #28
 8009182:	d501      	bpl.n	8009188 <__swbuf_r+0x20>
 8009184:	6923      	ldr	r3, [r4, #16]
 8009186:	b943      	cbnz	r3, 800919a <__swbuf_r+0x32>
 8009188:	4621      	mov	r1, r4
 800918a:	4628      	mov	r0, r5
 800918c:	f000 f82a 	bl	80091e4 <__swsetup_r>
 8009190:	b118      	cbz	r0, 800919a <__swbuf_r+0x32>
 8009192:	f04f 37ff 	mov.w	r7, #4294967295
 8009196:	4638      	mov	r0, r7
 8009198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	6922      	ldr	r2, [r4, #16]
 800919e:	1a98      	subs	r0, r3, r2
 80091a0:	6963      	ldr	r3, [r4, #20]
 80091a2:	b2f6      	uxtb	r6, r6
 80091a4:	4283      	cmp	r3, r0
 80091a6:	4637      	mov	r7, r6
 80091a8:	dc05      	bgt.n	80091b6 <__swbuf_r+0x4e>
 80091aa:	4621      	mov	r1, r4
 80091ac:	4628      	mov	r0, r5
 80091ae:	f7ff ffb3 	bl	8009118 <_fflush_r>
 80091b2:	2800      	cmp	r0, #0
 80091b4:	d1ed      	bne.n	8009192 <__swbuf_r+0x2a>
 80091b6:	68a3      	ldr	r3, [r4, #8]
 80091b8:	3b01      	subs	r3, #1
 80091ba:	60a3      	str	r3, [r4, #8]
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	1c5a      	adds	r2, r3, #1
 80091c0:	6022      	str	r2, [r4, #0]
 80091c2:	701e      	strb	r6, [r3, #0]
 80091c4:	6962      	ldr	r2, [r4, #20]
 80091c6:	1c43      	adds	r3, r0, #1
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d004      	beq.n	80091d6 <__swbuf_r+0x6e>
 80091cc:	89a3      	ldrh	r3, [r4, #12]
 80091ce:	07db      	lsls	r3, r3, #31
 80091d0:	d5e1      	bpl.n	8009196 <__swbuf_r+0x2e>
 80091d2:	2e0a      	cmp	r6, #10
 80091d4:	d1df      	bne.n	8009196 <__swbuf_r+0x2e>
 80091d6:	4621      	mov	r1, r4
 80091d8:	4628      	mov	r0, r5
 80091da:	f7ff ff9d 	bl	8009118 <_fflush_r>
 80091de:	2800      	cmp	r0, #0
 80091e0:	d0d9      	beq.n	8009196 <__swbuf_r+0x2e>
 80091e2:	e7d6      	b.n	8009192 <__swbuf_r+0x2a>

080091e4 <__swsetup_r>:
 80091e4:	b538      	push	{r3, r4, r5, lr}
 80091e6:	4b29      	ldr	r3, [pc, #164]	@ (800928c <__swsetup_r+0xa8>)
 80091e8:	4605      	mov	r5, r0
 80091ea:	6818      	ldr	r0, [r3, #0]
 80091ec:	460c      	mov	r4, r1
 80091ee:	b118      	cbz	r0, 80091f8 <__swsetup_r+0x14>
 80091f0:	6a03      	ldr	r3, [r0, #32]
 80091f2:	b90b      	cbnz	r3, 80091f8 <__swsetup_r+0x14>
 80091f4:	f7fe fae8 	bl	80077c8 <__sinit>
 80091f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091fc:	0719      	lsls	r1, r3, #28
 80091fe:	d422      	bmi.n	8009246 <__swsetup_r+0x62>
 8009200:	06da      	lsls	r2, r3, #27
 8009202:	d407      	bmi.n	8009214 <__swsetup_r+0x30>
 8009204:	2209      	movs	r2, #9
 8009206:	602a      	str	r2, [r5, #0]
 8009208:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800920c:	81a3      	strh	r3, [r4, #12]
 800920e:	f04f 30ff 	mov.w	r0, #4294967295
 8009212:	e033      	b.n	800927c <__swsetup_r+0x98>
 8009214:	0758      	lsls	r0, r3, #29
 8009216:	d512      	bpl.n	800923e <__swsetup_r+0x5a>
 8009218:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800921a:	b141      	cbz	r1, 800922e <__swsetup_r+0x4a>
 800921c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009220:	4299      	cmp	r1, r3
 8009222:	d002      	beq.n	800922a <__swsetup_r+0x46>
 8009224:	4628      	mov	r0, r5
 8009226:	f7ff f9e5 	bl	80085f4 <_free_r>
 800922a:	2300      	movs	r3, #0
 800922c:	6363      	str	r3, [r4, #52]	@ 0x34
 800922e:	89a3      	ldrh	r3, [r4, #12]
 8009230:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009234:	81a3      	strh	r3, [r4, #12]
 8009236:	2300      	movs	r3, #0
 8009238:	6063      	str	r3, [r4, #4]
 800923a:	6923      	ldr	r3, [r4, #16]
 800923c:	6023      	str	r3, [r4, #0]
 800923e:	89a3      	ldrh	r3, [r4, #12]
 8009240:	f043 0308 	orr.w	r3, r3, #8
 8009244:	81a3      	strh	r3, [r4, #12]
 8009246:	6923      	ldr	r3, [r4, #16]
 8009248:	b94b      	cbnz	r3, 800925e <__swsetup_r+0x7a>
 800924a:	89a3      	ldrh	r3, [r4, #12]
 800924c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009254:	d003      	beq.n	800925e <__swsetup_r+0x7a>
 8009256:	4621      	mov	r1, r4
 8009258:	4628      	mov	r0, r5
 800925a:	f000 f8b1 	bl	80093c0 <__smakebuf_r>
 800925e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009262:	f013 0201 	ands.w	r2, r3, #1
 8009266:	d00a      	beq.n	800927e <__swsetup_r+0x9a>
 8009268:	2200      	movs	r2, #0
 800926a:	60a2      	str	r2, [r4, #8]
 800926c:	6962      	ldr	r2, [r4, #20]
 800926e:	4252      	negs	r2, r2
 8009270:	61a2      	str	r2, [r4, #24]
 8009272:	6922      	ldr	r2, [r4, #16]
 8009274:	b942      	cbnz	r2, 8009288 <__swsetup_r+0xa4>
 8009276:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800927a:	d1c5      	bne.n	8009208 <__swsetup_r+0x24>
 800927c:	bd38      	pop	{r3, r4, r5, pc}
 800927e:	0799      	lsls	r1, r3, #30
 8009280:	bf58      	it	pl
 8009282:	6962      	ldrpl	r2, [r4, #20]
 8009284:	60a2      	str	r2, [r4, #8]
 8009286:	e7f4      	b.n	8009272 <__swsetup_r+0x8e>
 8009288:	2000      	movs	r0, #0
 800928a:	e7f7      	b.n	800927c <__swsetup_r+0x98>
 800928c:	24000120 	.word	0x24000120

08009290 <memcpy>:
 8009290:	440a      	add	r2, r1
 8009292:	4291      	cmp	r1, r2
 8009294:	f100 33ff 	add.w	r3, r0, #4294967295
 8009298:	d100      	bne.n	800929c <memcpy+0xc>
 800929a:	4770      	bx	lr
 800929c:	b510      	push	{r4, lr}
 800929e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092a6:	4291      	cmp	r1, r2
 80092a8:	d1f9      	bne.n	800929e <memcpy+0xe>
 80092aa:	bd10      	pop	{r4, pc}

080092ac <__assert_func>:
 80092ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092ae:	4614      	mov	r4, r2
 80092b0:	461a      	mov	r2, r3
 80092b2:	4b09      	ldr	r3, [pc, #36]	@ (80092d8 <__assert_func+0x2c>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4605      	mov	r5, r0
 80092b8:	68d8      	ldr	r0, [r3, #12]
 80092ba:	b954      	cbnz	r4, 80092d2 <__assert_func+0x26>
 80092bc:	4b07      	ldr	r3, [pc, #28]	@ (80092dc <__assert_func+0x30>)
 80092be:	461c      	mov	r4, r3
 80092c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092c4:	9100      	str	r1, [sp, #0]
 80092c6:	462b      	mov	r3, r5
 80092c8:	4905      	ldr	r1, [pc, #20]	@ (80092e0 <__assert_func+0x34>)
 80092ca:	f000 f841 	bl	8009350 <fiprintf>
 80092ce:	f000 f8d5 	bl	800947c <abort>
 80092d2:	4b04      	ldr	r3, [pc, #16]	@ (80092e4 <__assert_func+0x38>)
 80092d4:	e7f4      	b.n	80092c0 <__assert_func+0x14>
 80092d6:	bf00      	nop
 80092d8:	24000120 	.word	0x24000120
 80092dc:	080099ce 	.word	0x080099ce
 80092e0:	080099a0 	.word	0x080099a0
 80092e4:	08009993 	.word	0x08009993

080092e8 <_calloc_r>:
 80092e8:	b570      	push	{r4, r5, r6, lr}
 80092ea:	fba1 5402 	umull	r5, r4, r1, r2
 80092ee:	b93c      	cbnz	r4, 8009300 <_calloc_r+0x18>
 80092f0:	4629      	mov	r1, r5
 80092f2:	f7fd fd1b 	bl	8006d2c <_malloc_r>
 80092f6:	4606      	mov	r6, r0
 80092f8:	b928      	cbnz	r0, 8009306 <_calloc_r+0x1e>
 80092fa:	2600      	movs	r6, #0
 80092fc:	4630      	mov	r0, r6
 80092fe:	bd70      	pop	{r4, r5, r6, pc}
 8009300:	220c      	movs	r2, #12
 8009302:	6002      	str	r2, [r0, #0]
 8009304:	e7f9      	b.n	80092fa <_calloc_r+0x12>
 8009306:	462a      	mov	r2, r5
 8009308:	4621      	mov	r1, r4
 800930a:	f7fe fb02 	bl	8007912 <memset>
 800930e:	e7f5      	b.n	80092fc <_calloc_r+0x14>

08009310 <__ascii_mbtowc>:
 8009310:	b082      	sub	sp, #8
 8009312:	b901      	cbnz	r1, 8009316 <__ascii_mbtowc+0x6>
 8009314:	a901      	add	r1, sp, #4
 8009316:	b142      	cbz	r2, 800932a <__ascii_mbtowc+0x1a>
 8009318:	b14b      	cbz	r3, 800932e <__ascii_mbtowc+0x1e>
 800931a:	7813      	ldrb	r3, [r2, #0]
 800931c:	600b      	str	r3, [r1, #0]
 800931e:	7812      	ldrb	r2, [r2, #0]
 8009320:	1e10      	subs	r0, r2, #0
 8009322:	bf18      	it	ne
 8009324:	2001      	movne	r0, #1
 8009326:	b002      	add	sp, #8
 8009328:	4770      	bx	lr
 800932a:	4610      	mov	r0, r2
 800932c:	e7fb      	b.n	8009326 <__ascii_mbtowc+0x16>
 800932e:	f06f 0001 	mvn.w	r0, #1
 8009332:	e7f8      	b.n	8009326 <__ascii_mbtowc+0x16>

08009334 <__ascii_wctomb>:
 8009334:	4603      	mov	r3, r0
 8009336:	4608      	mov	r0, r1
 8009338:	b141      	cbz	r1, 800934c <__ascii_wctomb+0x18>
 800933a:	2aff      	cmp	r2, #255	@ 0xff
 800933c:	d904      	bls.n	8009348 <__ascii_wctomb+0x14>
 800933e:	228a      	movs	r2, #138	@ 0x8a
 8009340:	601a      	str	r2, [r3, #0]
 8009342:	f04f 30ff 	mov.w	r0, #4294967295
 8009346:	4770      	bx	lr
 8009348:	700a      	strb	r2, [r1, #0]
 800934a:	2001      	movs	r0, #1
 800934c:	4770      	bx	lr
	...

08009350 <fiprintf>:
 8009350:	b40e      	push	{r1, r2, r3}
 8009352:	b503      	push	{r0, r1, lr}
 8009354:	4601      	mov	r1, r0
 8009356:	ab03      	add	r3, sp, #12
 8009358:	4805      	ldr	r0, [pc, #20]	@ (8009370 <fiprintf+0x20>)
 800935a:	f853 2b04 	ldr.w	r2, [r3], #4
 800935e:	6800      	ldr	r0, [r0, #0]
 8009360:	9301      	str	r3, [sp, #4]
 8009362:	f7ff fd3d 	bl	8008de0 <_vfiprintf_r>
 8009366:	b002      	add	sp, #8
 8009368:	f85d eb04 	ldr.w	lr, [sp], #4
 800936c:	b003      	add	sp, #12
 800936e:	4770      	bx	lr
 8009370:	24000120 	.word	0x24000120

08009374 <__swhatbuf_r>:
 8009374:	b570      	push	{r4, r5, r6, lr}
 8009376:	460c      	mov	r4, r1
 8009378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800937c:	2900      	cmp	r1, #0
 800937e:	b096      	sub	sp, #88	@ 0x58
 8009380:	4615      	mov	r5, r2
 8009382:	461e      	mov	r6, r3
 8009384:	da0d      	bge.n	80093a2 <__swhatbuf_r+0x2e>
 8009386:	89a3      	ldrh	r3, [r4, #12]
 8009388:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800938c:	f04f 0100 	mov.w	r1, #0
 8009390:	bf14      	ite	ne
 8009392:	2340      	movne	r3, #64	@ 0x40
 8009394:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009398:	2000      	movs	r0, #0
 800939a:	6031      	str	r1, [r6, #0]
 800939c:	602b      	str	r3, [r5, #0]
 800939e:	b016      	add	sp, #88	@ 0x58
 80093a0:	bd70      	pop	{r4, r5, r6, pc}
 80093a2:	466a      	mov	r2, sp
 80093a4:	f000 f848 	bl	8009438 <_fstat_r>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	dbec      	blt.n	8009386 <__swhatbuf_r+0x12>
 80093ac:	9901      	ldr	r1, [sp, #4]
 80093ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80093b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80093b6:	4259      	negs	r1, r3
 80093b8:	4159      	adcs	r1, r3
 80093ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093be:	e7eb      	b.n	8009398 <__swhatbuf_r+0x24>

080093c0 <__smakebuf_r>:
 80093c0:	898b      	ldrh	r3, [r1, #12]
 80093c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093c4:	079d      	lsls	r5, r3, #30
 80093c6:	4606      	mov	r6, r0
 80093c8:	460c      	mov	r4, r1
 80093ca:	d507      	bpl.n	80093dc <__smakebuf_r+0x1c>
 80093cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	6123      	str	r3, [r4, #16]
 80093d4:	2301      	movs	r3, #1
 80093d6:	6163      	str	r3, [r4, #20]
 80093d8:	b003      	add	sp, #12
 80093da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093dc:	ab01      	add	r3, sp, #4
 80093de:	466a      	mov	r2, sp
 80093e0:	f7ff ffc8 	bl	8009374 <__swhatbuf_r>
 80093e4:	9f00      	ldr	r7, [sp, #0]
 80093e6:	4605      	mov	r5, r0
 80093e8:	4639      	mov	r1, r7
 80093ea:	4630      	mov	r0, r6
 80093ec:	f7fd fc9e 	bl	8006d2c <_malloc_r>
 80093f0:	b948      	cbnz	r0, 8009406 <__smakebuf_r+0x46>
 80093f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093f6:	059a      	lsls	r2, r3, #22
 80093f8:	d4ee      	bmi.n	80093d8 <__smakebuf_r+0x18>
 80093fa:	f023 0303 	bic.w	r3, r3, #3
 80093fe:	f043 0302 	orr.w	r3, r3, #2
 8009402:	81a3      	strh	r3, [r4, #12]
 8009404:	e7e2      	b.n	80093cc <__smakebuf_r+0xc>
 8009406:	89a3      	ldrh	r3, [r4, #12]
 8009408:	6020      	str	r0, [r4, #0]
 800940a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800940e:	81a3      	strh	r3, [r4, #12]
 8009410:	9b01      	ldr	r3, [sp, #4]
 8009412:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009416:	b15b      	cbz	r3, 8009430 <__smakebuf_r+0x70>
 8009418:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800941c:	4630      	mov	r0, r6
 800941e:	f000 f81d 	bl	800945c <_isatty_r>
 8009422:	b128      	cbz	r0, 8009430 <__smakebuf_r+0x70>
 8009424:	89a3      	ldrh	r3, [r4, #12]
 8009426:	f023 0303 	bic.w	r3, r3, #3
 800942a:	f043 0301 	orr.w	r3, r3, #1
 800942e:	81a3      	strh	r3, [r4, #12]
 8009430:	89a3      	ldrh	r3, [r4, #12]
 8009432:	431d      	orrs	r5, r3
 8009434:	81a5      	strh	r5, [r4, #12]
 8009436:	e7cf      	b.n	80093d8 <__smakebuf_r+0x18>

08009438 <_fstat_r>:
 8009438:	b538      	push	{r3, r4, r5, lr}
 800943a:	4d07      	ldr	r5, [pc, #28]	@ (8009458 <_fstat_r+0x20>)
 800943c:	2300      	movs	r3, #0
 800943e:	4604      	mov	r4, r0
 8009440:	4608      	mov	r0, r1
 8009442:	4611      	mov	r1, r2
 8009444:	602b      	str	r3, [r5, #0]
 8009446:	f7f7 fec5 	bl	80011d4 <_fstat>
 800944a:	1c43      	adds	r3, r0, #1
 800944c:	d102      	bne.n	8009454 <_fstat_r+0x1c>
 800944e:	682b      	ldr	r3, [r5, #0]
 8009450:	b103      	cbz	r3, 8009454 <_fstat_r+0x1c>
 8009452:	6023      	str	r3, [r4, #0]
 8009454:	bd38      	pop	{r3, r4, r5, pc}
 8009456:	bf00      	nop
 8009458:	24000578 	.word	0x24000578

0800945c <_isatty_r>:
 800945c:	b538      	push	{r3, r4, r5, lr}
 800945e:	4d06      	ldr	r5, [pc, #24]	@ (8009478 <_isatty_r+0x1c>)
 8009460:	2300      	movs	r3, #0
 8009462:	4604      	mov	r4, r0
 8009464:	4608      	mov	r0, r1
 8009466:	602b      	str	r3, [r5, #0]
 8009468:	f7f7 fec4 	bl	80011f4 <_isatty>
 800946c:	1c43      	adds	r3, r0, #1
 800946e:	d102      	bne.n	8009476 <_isatty_r+0x1a>
 8009470:	682b      	ldr	r3, [r5, #0]
 8009472:	b103      	cbz	r3, 8009476 <_isatty_r+0x1a>
 8009474:	6023      	str	r3, [r4, #0]
 8009476:	bd38      	pop	{r3, r4, r5, pc}
 8009478:	24000578 	.word	0x24000578

0800947c <abort>:
 800947c:	b508      	push	{r3, lr}
 800947e:	2006      	movs	r0, #6
 8009480:	f000 f82c 	bl	80094dc <raise>
 8009484:	2001      	movs	r0, #1
 8009486:	f7f7 fe71 	bl	800116c <_exit>

0800948a <_raise_r>:
 800948a:	291f      	cmp	r1, #31
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	4605      	mov	r5, r0
 8009490:	460c      	mov	r4, r1
 8009492:	d904      	bls.n	800949e <_raise_r+0x14>
 8009494:	2316      	movs	r3, #22
 8009496:	6003      	str	r3, [r0, #0]
 8009498:	f04f 30ff 	mov.w	r0, #4294967295
 800949c:	bd38      	pop	{r3, r4, r5, pc}
 800949e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80094a0:	b112      	cbz	r2, 80094a8 <_raise_r+0x1e>
 80094a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094a6:	b94b      	cbnz	r3, 80094bc <_raise_r+0x32>
 80094a8:	4628      	mov	r0, r5
 80094aa:	f000 f831 	bl	8009510 <_getpid_r>
 80094ae:	4622      	mov	r2, r4
 80094b0:	4601      	mov	r1, r0
 80094b2:	4628      	mov	r0, r5
 80094b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094b8:	f000 b818 	b.w	80094ec <_kill_r>
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d00a      	beq.n	80094d6 <_raise_r+0x4c>
 80094c0:	1c59      	adds	r1, r3, #1
 80094c2:	d103      	bne.n	80094cc <_raise_r+0x42>
 80094c4:	2316      	movs	r3, #22
 80094c6:	6003      	str	r3, [r0, #0]
 80094c8:	2001      	movs	r0, #1
 80094ca:	e7e7      	b.n	800949c <_raise_r+0x12>
 80094cc:	2100      	movs	r1, #0
 80094ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80094d2:	4620      	mov	r0, r4
 80094d4:	4798      	blx	r3
 80094d6:	2000      	movs	r0, #0
 80094d8:	e7e0      	b.n	800949c <_raise_r+0x12>
	...

080094dc <raise>:
 80094dc:	4b02      	ldr	r3, [pc, #8]	@ (80094e8 <raise+0xc>)
 80094de:	4601      	mov	r1, r0
 80094e0:	6818      	ldr	r0, [r3, #0]
 80094e2:	f7ff bfd2 	b.w	800948a <_raise_r>
 80094e6:	bf00      	nop
 80094e8:	24000120 	.word	0x24000120

080094ec <_kill_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4d07      	ldr	r5, [pc, #28]	@ (800950c <_kill_r+0x20>)
 80094f0:	2300      	movs	r3, #0
 80094f2:	4604      	mov	r4, r0
 80094f4:	4608      	mov	r0, r1
 80094f6:	4611      	mov	r1, r2
 80094f8:	602b      	str	r3, [r5, #0]
 80094fa:	f7f7 fe27 	bl	800114c <_kill>
 80094fe:	1c43      	adds	r3, r0, #1
 8009500:	d102      	bne.n	8009508 <_kill_r+0x1c>
 8009502:	682b      	ldr	r3, [r5, #0]
 8009504:	b103      	cbz	r3, 8009508 <_kill_r+0x1c>
 8009506:	6023      	str	r3, [r4, #0]
 8009508:	bd38      	pop	{r3, r4, r5, pc}
 800950a:	bf00      	nop
 800950c:	24000578 	.word	0x24000578

08009510 <_getpid_r>:
 8009510:	f7f7 be14 	b.w	800113c <_getpid>

08009514 <_init>:
 8009514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009516:	bf00      	nop
 8009518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800951a:	bc08      	pop	{r3}
 800951c:	469e      	mov	lr, r3
 800951e:	4770      	bx	lr

08009520 <_fini>:
 8009520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009522:	bf00      	nop
 8009524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009526:	bc08      	pop	{r3}
 8009528:	469e      	mov	lr, r3
 800952a:	4770      	bx	lr
