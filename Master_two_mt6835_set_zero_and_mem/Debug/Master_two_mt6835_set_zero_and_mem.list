
Master_two_mt6835_set_zero_and_mem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e94  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  08009168  08009168  0000a168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009660  08009660  0000a660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009668  08009668  0000a668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800966c  0800966c  0000a66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  08009670  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000028c  240001dc  0800984c  0000b1dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000468  0800984c  0000b468  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   000144e9  00000000  00000000  0000b20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002cbc  00000000  00000000  0001f6f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ea0  00000000  00000000  000223b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b33  00000000  00000000  00023250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033c89  00000000  00000000  00023d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000162a5  00000000  00000000  00057a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001463a0  00000000  00000000  0006dcb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b4051  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004a18  00000000  00000000  001b4094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  001b8aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001dc 	.word	0x240001dc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800914c 	.word	0x0800914c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001e0 	.word	0x240001e0
 800030c:	0800914c 	.word	0x0800914c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	@ 0x28
 80006b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006c6:	4b33      	ldr	r3, [pc, #204]	@ (8000794 <MX_GPIO_Init+0xe4>)
 80006c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006cc:	4a31      	ldr	r2, [pc, #196]	@ (8000794 <MX_GPIO_Init+0xe4>)
 80006ce:	f043 0320 	orr.w	r3, r3, #32
 80006d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000794 <MX_GPIO_Init+0xe4>)
 80006d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006dc:	f003 0320 	and.w	r3, r3, #32
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e4:	4b2b      	ldr	r3, [pc, #172]	@ (8000794 <MX_GPIO_Init+0xe4>)
 80006e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ea:	4a2a      	ldr	r2, [pc, #168]	@ (8000794 <MX_GPIO_Init+0xe4>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006f4:	4b27      	ldr	r3, [pc, #156]	@ (8000794 <MX_GPIO_Init+0xe4>)
 80006f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000702:	4b24      	ldr	r3, [pc, #144]	@ (8000794 <MX_GPIO_Init+0xe4>)
 8000704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000708:	4a22      	ldr	r2, [pc, #136]	@ (8000794 <MX_GPIO_Init+0xe4>)
 800070a:	f043 0308 	orr.w	r3, r3, #8
 800070e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000712:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <MX_GPIO_Init+0xe4>)
 8000714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000718:	f003 0308 	and.w	r3, r3, #8
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000720:	4b1c      	ldr	r3, [pc, #112]	@ (8000794 <MX_GPIO_Init+0xe4>)
 8000722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000726:	4a1b      	ldr	r2, [pc, #108]	@ (8000794 <MX_GPIO_Init+0xe4>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_GPIO_Init+0xe4>)
 8000732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_M2_GPIO_Port, SPI3_M2_Pin, GPIO_PIN_SET);
 800073e:	2201      	movs	r2, #1
 8000740:	2108      	movs	r1, #8
 8000742:	4815      	ldr	r0, [pc, #84]	@ (8000798 <MX_GPIO_Init+0xe8>)
 8000744:	f001 fae8 	bl	8001d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_M1_GPIO_Port, SPI3_M1_Pin, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2110      	movs	r1, #16
 800074c:	4813      	ldr	r0, [pc, #76]	@ (800079c <MX_GPIO_Init+0xec>)
 800074e:	f001 fae3 	bl	8001d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_M2_Pin;
 8000752:	2308      	movs	r3, #8
 8000754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_M2_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	4619      	mov	r1, r3
 8000768:	480b      	ldr	r0, [pc, #44]	@ (8000798 <MX_GPIO_Init+0xe8>)
 800076a:	f001 f92d 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_M1_Pin;
 800076e:	2310      	movs	r3, #16
 8000770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_M1_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4619      	mov	r1, r3
 8000784:	4805      	ldr	r0, [pc, #20]	@ (800079c <MX_GPIO_Init+0xec>)
 8000786:	f001 f91f 	bl	80019c8 <HAL_GPIO_Init>

}
 800078a:	bf00      	nop
 800078c:	3728      	adds	r7, #40	@ 0x28
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	58024400 	.word	0x58024400
 8000798:	58021400 	.word	0x58021400
 800079c:	58020000 	.word	0x58020000

080007a0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	f04f 33ff 	mov.w	r3, #4294967295
 80007b4:	68b9      	ldr	r1, [r7, #8]
 80007b6:	4804      	ldr	r0, [pc, #16]	@ (80007c8 <_write+0x28>)
 80007b8:	f004 fea7 	bl	800550a <HAL_UART_Transmit>
	return len;
 80007bc:	687b      	ldr	r3, [r7, #4]
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	24000284 	.word	0x24000284

080007cc <mt6835_cs_control>:
#define SPI_M1_CS       SPI3_M1_Pin       // CS M1
#define SPI_M1_CS_PORT  SPI3_M1_GPIO_Port //
#define SPI_M2_CS       SPI3_M2_Pin       // CS M2
#define SPI_M2_CS_PORT  SPI3_M2_GPIO_Port //

static void mt6835_cs_control(mt6835_cs_state_enum_t state) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
	if (state == MT6835_CS_HIGH) {
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d105      	bne.n	80007e8 <mt6835_cs_control+0x1c>
		// 高电平
		HAL_GPIO_WritePin(SPI_M1_CS_PORT, SPI_M1_CS, GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	2110      	movs	r1, #16
 80007e0:	4806      	ldr	r0, [pc, #24]	@ (80007fc <mt6835_cs_control+0x30>)
 80007e2:	f001 fa99 	bl	8001d18 <HAL_GPIO_WritePin>
	} else {
		// 低电平
		HAL_GPIO_WritePin(SPI_M1_CS_PORT, SPI_M1_CS, GPIO_PIN_RESET);
	}
}
 80007e6:	e004      	b.n	80007f2 <mt6835_cs_control+0x26>
		HAL_GPIO_WritePin(SPI_M1_CS_PORT, SPI_M1_CS, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2110      	movs	r1, #16
 80007ec:	4803      	ldr	r0, [pc, #12]	@ (80007fc <mt6835_cs_control+0x30>)
 80007ee:	f001 fa93 	bl	8001d18 <HAL_GPIO_WritePin>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	58020000 	.word	0x58020000

08000800 <mt6835_cs2_control>:

static void mt6835_cs2_control(mt6835_cs_state_enum_t state) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	if (state == MT6835_CS_HIGH) {
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d105      	bne.n	800081c <mt6835_cs2_control+0x1c>
		// 高电平
		HAL_GPIO_WritePin(SPI_M2_CS_PORT, SPI_M2_CS, GPIO_PIN_SET);
 8000810:	2201      	movs	r2, #1
 8000812:	2108      	movs	r1, #8
 8000814:	4806      	ldr	r0, [pc, #24]	@ (8000830 <mt6835_cs2_control+0x30>)
 8000816:	f001 fa7f 	bl	8001d18 <HAL_GPIO_WritePin>
	} else {
		// 低电平
		HAL_GPIO_WritePin(SPI_M2_CS_PORT, SPI_M2_CS, GPIO_PIN_RESET);
	}
}
 800081a:	e004      	b.n	8000826 <mt6835_cs2_control+0x26>
		HAL_GPIO_WritePin(SPI_M2_CS_PORT, SPI_M2_CS, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	2108      	movs	r1, #8
 8000820:	4803      	ldr	r0, [pc, #12]	@ (8000830 <mt6835_cs2_control+0x30>)
 8000822:	f001 fa79 	bl	8001d18 <HAL_GPIO_WritePin>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	58021400 	.word	0x58021400

08000834 <mt6835_spi_send_recv>:

static void mt6835_spi_send_recv(uint8_t *tx_buf, uint8_t *rx_buf, uint8_t len) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	4613      	mov	r3, r2
 8000840:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 8000842:	2300      	movs	r3, #0
 8000844:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_TransmitReceive_IT(&SPI_INSTANCE, tx_buf, rx_buf, len);
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	b29b      	uxth	r3, r3
 800084a:	68ba      	ldr	r2, [r7, #8]
 800084c:	68f9      	ldr	r1, [r7, #12]
 800084e:	4813      	ldr	r0, [pc, #76]	@ (800089c <mt6835_spi_send_recv+0x68>)
 8000850:	f004 f902 	bl	8004a58 <HAL_SPI_TransmitReceive_IT>
 8000854:	4603      	mov	r3, r0
 8000856:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 8000858:	7dfb      	ldrb	r3, [r7, #23]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d005      	beq.n	800086a <mt6835_spi_send_recv+0x36>
		printf("spi send_recv failed %d\n\r", status);
 800085e:	7dfb      	ldrb	r3, [r7, #23]
 8000860:	4619      	mov	r1, r3
 8000862:	480f      	ldr	r0, [pc, #60]	@ (80008a0 <mt6835_spi_send_recv+0x6c>)
 8000864:	f006 fe1e 	bl	80074a4 <iprintf>
		return;
 8000868:	e014      	b.n	8000894 <mt6835_spi_send_recv+0x60>
	}
	// wait IT
	uint32_t tickstart = HAL_GetTick();
 800086a:	f000 fd27 	bl	80012bc <HAL_GetTick>
 800086e:	6138      	str	r0, [r7, #16]
	while (HAL_SPI_GetState(&SPI_INSTANCE) != HAL_SPI_STATE_READY) {
 8000870:	e00a      	b.n	8000888 <mt6835_spi_send_recv+0x54>
		if (HAL_GetTick() - tickstart > 1) {
 8000872:	f000 fd23 	bl	80012bc <HAL_GetTick>
 8000876:	4602      	mov	r2, r0
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	2b01      	cmp	r3, #1
 800087e:	d903      	bls.n	8000888 <mt6835_spi_send_recv+0x54>
			printf("spi send_recv timeout\n\r");
 8000880:	4808      	ldr	r0, [pc, #32]	@ (80008a4 <mt6835_spi_send_recv+0x70>)
 8000882:	f006 fe0f 	bl	80074a4 <iprintf>
			return;
 8000886:	e005      	b.n	8000894 <mt6835_spi_send_recv+0x60>
	while (HAL_SPI_GetState(&SPI_INSTANCE) != HAL_SPI_STATE_READY) {
 8000888:	4804      	ldr	r0, [pc, #16]	@ (800089c <mt6835_spi_send_recv+0x68>)
 800088a:	f004 fbf7 	bl	800507c <HAL_SPI_GetState>
 800088e:	4603      	mov	r3, r0
 8000890:	2b01      	cmp	r3, #1
 8000892:	d1ee      	bne.n	8000872 <mt6835_spi_send_recv+0x3e>
		}
	}
}
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	240001f8 	.word	0x240001f8
 80008a0:	08009168 	.word	0x08009168
 80008a4:	08009184 	.word	0x08009184

080008a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008ae:	f000 fc7f 	bl	80011b0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008b2:	f000 f837 	bl	8000924 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008b6:	f7ff fefb 	bl	80006b0 <MX_GPIO_Init>
	MX_SPI3_Init();
 80008ba:	f000 f947 	bl	8000b4c <MX_SPI3_Init>
	MX_USART3_UART_Init();
 80008be:	f000 fb97 	bl	8000ff0 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	mt6835_t *mt6835_1;
	mt6835_t *mt6835_2;

	mt6835_1 = mt6835_create();
 80008c2:	f000 f8cb 	bl	8000a5c <mt6835_create>
 80008c6:	6178      	str	r0, [r7, #20]
	mt6835_2 = mt6835_create();
 80008c8:	f000 f8c8 	bl	8000a5c <mt6835_create>
 80008cc:	6138      	str	r0, [r7, #16]

	mt6835_link_spi_cs_control(mt6835_1, mt6835_cs_control);
 80008ce:	4912      	ldr	r1, [pc, #72]	@ (8000918 <main+0x70>)
 80008d0:	6978      	ldr	r0, [r7, #20]
 80008d2:	f000 f8e7 	bl	8000aa4 <mt6835_link_spi_cs_control>
	mt6835_link_spi_cs_control(mt6835_2, mt6835_cs2_control);
 80008d6:	4911      	ldr	r1, [pc, #68]	@ (800091c <main+0x74>)
 80008d8:	6938      	ldr	r0, [r7, #16]
 80008da:	f000 f8e3 	bl	8000aa4 <mt6835_link_spi_cs_control>

	mt6835_link_spi_send_recv(mt6835_1, mt6835_spi_send_recv);
 80008de:	4910      	ldr	r1, [pc, #64]	@ (8000920 <main+0x78>)
 80008e0:	6978      	ldr	r0, [r7, #20]
 80008e2:	f000 f909 	bl	8000af8 <mt6835_link_spi_send_recv>
	mt6835_link_spi_send_recv(mt6835_2, mt6835_spi_send_recv);
 80008e6:	490e      	ldr	r1, [pc, #56]	@ (8000920 <main+0x78>)
 80008e8:	6938      	ldr	r0, [r7, #16]
 80008ea:	f000 f905 	bl	8000af8 <mt6835_link_spi_send_recv>

	mt6835_enable_crc_check(mt6835_1);
 80008ee:	6978      	ldr	r0, [r7, #20]
 80008f0:	f000 f88e 	bl	8000a10 <mt6835_enable_crc_check>
	mt6835_enable_crc_check(mt6835_2);
 80008f4:	6938      	ldr	r0, [r7, #16]
 80008f6:	f000 f88b 	bl	8000a10 <mt6835_enable_crc_check>

	uint32_t raw_angle_1 = 0, raw_angle_2 = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
	float radian_angle_1 = 0.0f, radian_angle_2 = 0.0f;
 8000902:	f04f 0300 	mov.w	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
		//printf("zero_angle1 : %f rad\r\n",zero_angle1);
		//uint8_t id2 =mt6835_get_id(mt6835_2);
		//printf("ID2: 0x%x\r\n",id2);
		//float zero_angle2 = mt6835_get_zero_angle(mt6835_2);
		//printf("zero_angle2 : %f rad\r\n",zero_angle2);
		HAL_Delay(500);
 800090e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000912:	f000 fcdf 	bl	80012d4 <HAL_Delay>
 8000916:	e7fa      	b.n	800090e <main+0x66>
 8000918:	080007cd 	.word	0x080007cd
 800091c:	08000801 	.word	0x08000801
 8000920:	08000835 	.word	0x08000835

08000924 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b09c      	sub	sp, #112	@ 0x70
 8000928:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800092a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800092e:	224c      	movs	r2, #76	@ 0x4c
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f006 fe0b 	bl	800754e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2220      	movs	r2, #32
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f006 fe05 	bl	800754e <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000944:	2002      	movs	r0, #2
 8000946:	f001 fa01 	bl	8001d4c <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a00 <SystemClock_Config+0xdc>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000956:	4a2a      	ldr	r2, [pc, #168]	@ (8000a00 <SystemClock_Config+0xdc>)
 8000958:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800095c:	6193      	str	r3, [r2, #24]
 800095e:	4b28      	ldr	r3, [pc, #160]	@ (8000a00 <SystemClock_Config+0xdc>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 800096a:	bf00      	nop
 800096c:	4b24      	ldr	r3, [pc, #144]	@ (8000a00 <SystemClock_Config+0xdc>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000974:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000978:	d1f8      	bne.n	800096c <SystemClock_Config+0x48>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800097a:	2302      	movs	r3, #2
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800097e:	2301      	movs	r3, #1
 8000980:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 8000982:	2340      	movs	r3, #64	@ 0x40
 8000984:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000986:	2302      	movs	r3, #2
 8000988:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800098a:	2300      	movs	r3, #0
 800098c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800098e:	2304      	movs	r3, #4
 8000990:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 12;
 8000992:	230c      	movs	r3, #12
 8000994:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8000996:	2301      	movs	r3, #1
 8000998:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800099a:	2304      	movs	r3, #4
 800099c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 800099e:	2302      	movs	r3, #2
 80009a0:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009a2:	230c      	movs	r3, #12
 80009a4:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 fa04 	bl	8001dc0 <HAL_RCC_OscConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0x9e>
		Error_Handler();
 80009be:	f000 f821 	bl	8000a04 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80009c2:	233f      	movs	r3, #63	@ 0x3f
 80009c4:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c6:	2303      	movs	r3, #3
 80009c8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009ce:	2308      	movs	r3, #8
 80009d0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009d2:	2340      	movs	r3, #64	@ 0x40
 80009d4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009d6:	2340      	movs	r3, #64	@ 0x40
 80009d8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009de:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009e0:	2340      	movs	r3, #64	@ 0x40
 80009e2:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	2101      	movs	r1, #1
 80009e8:	4618      	mov	r0, r3
 80009ea:	f001 fdc3 	bl	8002574 <HAL_RCC_ClockConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <SystemClock_Config+0xd4>
		Error_Handler();
 80009f4:	f000 f806 	bl	8000a04 <Error_Handler>
	}
}
 80009f8:	bf00      	nop
 80009fa:	3770      	adds	r7, #112	@ 0x70
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	58024800 	.word	0x58024800

08000a04 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <Error_Handler+0x8>

08000a10 <mt6835_enable_crc_check>:

/**
 * @brief enable crc check
 * @param mt6835 mt6835 object
 */
void mt6835_enable_crc_check(mt6835_t *mt6835) {
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
    mt6835->crc_check = true;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	775a      	strb	r2, [r3, #29]
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <mt6835_cs_control>:

/**
 * @brief spi cs control, this function is weak, you can override it
 * @param state MT6835_CS_HIGH or MT6835_CS_LOW
 */
__attribute__((weak)) void mt6835_cs_control(mt6835_cs_state_enum_t state) {
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	4603      	mov	r3, r0
 8000a32:	71fb      	strb	r3, [r7, #7]
    (void)state;
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <mt6835_spi_send_recv>:
 * @brief spi send and receive, this function is weak, you can override it
 * @param tx_buf tx buffer
 * @param rx_buf rx buffer
 * @param len length
 */
__attribute__((weak)) void mt6835_spi_send_recv(uint8_t *tx_buf, uint8_t *rx_buf, uint8_t len) {
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	71fb      	strb	r3, [r7, #7]
    (void)tx_buf;
    (void)rx_buf;
    (void)len;
}
 8000a4e:	bf00      	nop
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <mt6835_create>:

/**
 * @brief create a mt6835 object
 * @return mt6835 object
 */
mt6835_t *mt6835_create() {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
    mt6835_t *mt6835 = (mt6835_t *)MT6835_MALLOC(sizeof(mt6835_t));
 8000a62:	2020      	movs	r0, #32
 8000a64:	f005 ff70 	bl	8006948 <malloc>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	607b      	str	r3, [r7, #4]
    if (mt6835 == NULL) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d107      	bne.n	8000a82 <mt6835_create+0x26>
        MT6835_DEBUG("%s malloc failed", TAG);
 8000a72:	4b0a      	ldr	r3, [pc, #40]	@ (8000a9c <mt6835_create+0x40>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4619      	mov	r1, r3
 8000a78:	4809      	ldr	r0, [pc, #36]	@ (8000aa0 <mt6835_create+0x44>)
 8000a7a:	f006 fd13 	bl	80074a4 <iprintf>
        return NULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e008      	b.n	8000a94 <mt6835_create+0x38>
    }
    memset(mt6835, 0, sizeof(mt6835_t));
 8000a82:	2220      	movs	r2, #32
 8000a84:	2100      	movs	r1, #0
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f006 fd61 	bl	800754e <memset>
    mt6835->crc_check = false;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	775a      	strb	r2, [r3, #29]
    return mt6835;
 8000a92:	687b      	ldr	r3, [r7, #4]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	24000000 	.word	0x24000000
 8000aa0:	080091a4 	.word	0x080091a4

08000aa4 <mt6835_link_spi_cs_control>:
/**
 * @brief link spi cs control function to mt6835 object
 * @param mt6835 mt6835 object
 * @param spi_cs_control spi cs control function
 */
void mt6835_link_spi_cs_control(mt6835_t *mt6835, void (*spi_cs_control)(mt6835_cs_state_enum_t state)) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
    if (mt6835 == NULL) {
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d106      	bne.n	8000ac2 <mt6835_link_spi_cs_control+0x1e>
        MT6835_DEBUG("%s mt6835 object is null", TAG);
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <mt6835_link_spi_cs_control+0x44>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480c      	ldr	r0, [pc, #48]	@ (8000aec <mt6835_link_spi_cs_control+0x48>)
 8000abc:	f006 fcf2 	bl	80074a4 <iprintf>
        return;
 8000ac0:	e00f      	b.n	8000ae2 <mt6835_link_spi_cs_control+0x3e>
    }
    if (spi_cs_control == NULL) {
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d109      	bne.n	8000adc <mt6835_link_spi_cs_control+0x38>
        MT6835_DEBUG("%s mt6835 object use default spi_cs_control(null)", TAG);
 8000ac8:	4b07      	ldr	r3, [pc, #28]	@ (8000ae8 <mt6835_link_spi_cs_control+0x44>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	4808      	ldr	r0, [pc, #32]	@ (8000af0 <mt6835_link_spi_cs_control+0x4c>)
 8000ad0:	f006 fce8 	bl	80074a4 <iprintf>
        mt6835->func.spi_cs_control = mt6835_cs_control;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a07      	ldr	r2, [pc, #28]	@ (8000af4 <mt6835_link_spi_cs_control+0x50>)
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	e002      	b.n	8000ae2 <mt6835_link_spi_cs_control+0x3e>
    } else {
        mt6835->func.spi_cs_control = spi_cs_control;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	683a      	ldr	r2, [r7, #0]
 8000ae0:	601a      	str	r2, [r3, #0]
    }
}
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	24000000 	.word	0x24000000
 8000aec:	080091b8 	.word	0x080091b8
 8000af0:	080091d4 	.word	0x080091d4
 8000af4:	08000a2b 	.word	0x08000a2b

08000af8 <mt6835_link_spi_send_recv>:
/**
 * @brief link spi send and receive function to mt6835 object
 * @param mt6835 mt6835 object
 * @param spi_send_recv spi send and receive function
 */
void mt6835_link_spi_send_recv(mt6835_t *mt6835, void (*spi_send_recv)(uint8_t *tx_buf, uint8_t *rx_buf, uint8_t len)) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
    if (mt6835 == NULL) {
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d106      	bne.n	8000b16 <mt6835_link_spi_send_recv+0x1e>
        MT6835_DEBUG("%s mt6835 object is null", TAG);
 8000b08:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <mt6835_link_spi_send_recv+0x44>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480c      	ldr	r0, [pc, #48]	@ (8000b40 <mt6835_link_spi_send_recv+0x48>)
 8000b10:	f006 fcc8 	bl	80074a4 <iprintf>
        return;
 8000b14:	e00e      	b.n	8000b34 <mt6835_link_spi_send_recv+0x3c>
    }
    if (spi_send_recv == NULL) {
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d108      	bne.n	8000b2e <mt6835_link_spi_send_recv+0x36>
        MT6835_DEBUG("%s mt6835 object use default spi_send_recv(null)", TAG);
 8000b1c:	4b07      	ldr	r3, [pc, #28]	@ (8000b3c <mt6835_link_spi_send_recv+0x44>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	4808      	ldr	r0, [pc, #32]	@ (8000b44 <mt6835_link_spi_send_recv+0x4c>)
 8000b24:	f006 fcbe 	bl	80074a4 <iprintf>
        mt6835->func.spi_send_recv = mt6835_spi_send_recv;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a07      	ldr	r2, [pc, #28]	@ (8000b48 <mt6835_link_spi_send_recv+0x50>)
 8000b2c:	60da      	str	r2, [r3, #12]
    }
    mt6835->func.spi_send_recv = spi_send_recv;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	683a      	ldr	r2, [r7, #0]
 8000b32:	60da      	str	r2, [r3, #12]
}
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	24000000 	.word	0x24000000
 8000b40:	080091b8 	.word	0x080091b8
 8000b44:	08009260 	.word	0x08009260
 8000b48:	08000a41 	.word	0x08000a41

08000b4c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000b50:	4b28      	ldr	r3, [pc, #160]	@ (8000bf4 <MX_SPI3_Init+0xa8>)
 8000b52:	4a29      	ldr	r2, [pc, #164]	@ (8000bf8 <MX_SPI3_Init+0xac>)
 8000b54:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b56:	4b27      	ldr	r3, [pc, #156]	@ (8000bf4 <MX_SPI3_Init+0xa8>)
 8000b58:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b5c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b5e:	4b25      	ldr	r3, [pc, #148]	@ (8000bf4 <MX_SPI3_Init+0xa8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b64:	4b23      	ldr	r3, [pc, #140]	@ (8000bf4 <MX_SPI3_Init+0xa8>)
 8000b66:	2207      	movs	r2, #7
 8000b68:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b6a:	4b22      	ldr	r3, [pc, #136]	@ (8000bf4 <MX_SPI3_Init+0xa8>)
 8000b6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b70:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b72:	4b20      	ldr	r3, [pc, #128]	@ (8000bf4 <MX_SPI3_Init+0xa8>)
 8000b74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000b78:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf4 <MX_SPI3_Init+0xa8>)
 8000b7c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b80:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000b82:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf4 <MX_SPI3_Init+0xa8>)
 8000b84:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b88:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <MX_SPI3_Init+0xa8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b90:	4b18      	ldr	r3, [pc, #96]	@ (8000bf4 <MX_SPI3_Init+0xa8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b96:	4b17      	ldr	r3, [pc, #92]	@ (8000bf4 <MX_SPI3_Init+0xa8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <MX_SPI3_Init+0xa8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ba2:	4b14      	ldr	r3, [pc, #80]	@ (8000bf4 <MX_SPI3_Init+0xa8>)
 8000ba4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ba8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000baa:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <MX_SPI3_Init+0xa8>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bb0:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <MX_SPI3_Init+0xa8>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <MX_SPI3_Init+0xa8>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <MX_SPI3_Init+0xa8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <MX_SPI3_Init+0xa8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <MX_SPI3_Init+0xa8>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_SPI3_Init+0xa8>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bd4:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <MX_SPI3_Init+0xa8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_SPI3_Init+0xa8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000be0:	4804      	ldr	r0, [pc, #16]	@ (8000bf4 <MX_SPI3_Init+0xa8>)
 8000be2:	f003 fe15 	bl	8004810 <HAL_SPI_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_SPI3_Init+0xa4>
  {
    Error_Handler();
 8000bec:	f7ff ff0a 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	240001f8 	.word	0x240001f8
 8000bf8:	40003c00 	.word	0x40003c00

08000bfc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b0b8      	sub	sp, #224	@ 0xe0
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	22b8      	movs	r2, #184	@ 0xb8
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f006 fc96 	bl	800754e <memset>
  if(spiHandle->Instance==SPI3)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a34      	ldr	r2, [pc, #208]	@ (8000cf8 <HAL_SPI_MspInit+0xfc>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d161      	bne.n	8000cf0 <HAL_SPI_MspInit+0xf4>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000c2c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	4618      	mov	r0, r3
 8000c42:	f002 f823 	bl	8002c8c <HAL_RCCEx_PeriphCLKConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000c4c:	f7ff feda 	bl	8000a04 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c50:	4b2a      	ldr	r3, [pc, #168]	@ (8000cfc <HAL_SPI_MspInit+0x100>)
 8000c52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c56:	4a29      	ldr	r2, [pc, #164]	@ (8000cfc <HAL_SPI_MspInit+0x100>)
 8000c58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c5c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c60:	4b26      	ldr	r3, [pc, #152]	@ (8000cfc <HAL_SPI_MspInit+0x100>)
 8000c62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	4b23      	ldr	r3, [pc, #140]	@ (8000cfc <HAL_SPI_MspInit+0x100>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c74:	4a21      	ldr	r2, [pc, #132]	@ (8000cfc <HAL_SPI_MspInit+0x100>)
 8000c76:	f043 0302 	orr.w	r3, r3, #2
 8000c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cfc <HAL_SPI_MspInit+0x100>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c84:	f003 0302 	and.w	r3, r3, #2
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB3(JTDO/TRACESWO)     ------> SPI3_SCK
    PB4(NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000c8c:	2318      	movs	r3, #24
 8000c8e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ca4:	2306      	movs	r3, #6
 8000ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000caa:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4813      	ldr	r0, [pc, #76]	@ (8000d00 <HAL_SPI_MspInit+0x104>)
 8000cb2:	f000 fe89 	bl	80019c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cb6:	2320      	movs	r3, #32
 8000cb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000cce:	2307      	movs	r3, #7
 8000cd0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4809      	ldr	r0, [pc, #36]	@ (8000d00 <HAL_SPI_MspInit+0x104>)
 8000cdc:	f000 fe74 	bl	80019c8 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2033      	movs	r0, #51	@ 0x33
 8000ce6:	f000 fbf4 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000cea:	2033      	movs	r0, #51	@ 0x33
 8000cec:	f000 fc0b 	bl	8001506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	37e0      	adds	r7, #224	@ 0xe0
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40003c00 	.word	0x40003c00
 8000cfc:	58024400 	.word	0x58024400
 8000d00:	58020400 	.word	0x58020400

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <HAL_MspInit+0x30>)
 8000d0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d10:	4a08      	ldr	r2, [pc, #32]	@ (8000d34 <HAL_MspInit+0x30>)
 8000d12:	f043 0302 	orr.w	r3, r3, #2
 8000d16:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <HAL_MspInit+0x30>)
 8000d1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	58024400 	.word	0x58024400

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <NMI_Handler+0x4>

08000d40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <HardFault_Handler+0x4>

08000d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <MemManage_Handler+0x4>

08000d50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8e:	f000 fa81 	bl	8001294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000d9c:	4802      	ldr	r0, [pc, #8]	@ (8000da8 <SPI3_IRQHandler+0x10>)
 8000d9e:	f003 ff6d 	bl	8004c7c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	240001f8 	.word	0x240001f8

08000dac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return 1;
 8000db0:	2301      	movs	r3, #1
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <_kill>:

int _kill(int pid, int sig)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000dc6:	f006 fc25 	bl	8007614 <__errno>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2216      	movs	r2, #22
 8000dce:	601a      	str	r2, [r3, #0]
  return -1;
 8000dd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <_exit>:

void _exit (int status)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000de4:	f04f 31ff 	mov.w	r1, #4294967295
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ffe7 	bl	8000dbc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000dee:	bf00      	nop
 8000df0:	e7fd      	b.n	8000dee <_exit+0x12>

08000df2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	60f8      	str	r0, [r7, #12]
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	e00a      	b.n	8000e1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e04:	f3af 8000 	nop.w
 8000e08:	4601      	mov	r1, r0
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	1c5a      	adds	r2, r3, #1
 8000e0e:	60ba      	str	r2, [r7, #8]
 8000e10:	b2ca      	uxtb	r2, r1
 8000e12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	3301      	adds	r3, #1
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	dbf0      	blt.n	8000e04 <_read+0x12>
  }

  return len;
 8000e22:	687b      	ldr	r3, [r7, #4]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e54:	605a      	str	r2, [r3, #4]
  return 0;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <_isatty>:

int _isatty(int file)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e6c:	2301      	movs	r3, #1
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b085      	sub	sp, #20
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	60f8      	str	r0, [r7, #12]
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e9c:	4a14      	ldr	r2, [pc, #80]	@ (8000ef0 <_sbrk+0x5c>)
 8000e9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <_sbrk+0x60>)
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea8:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <_sbrk+0x64>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	@ (8000efc <_sbrk+0x68>)
 8000eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d207      	bcs.n	8000ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec4:	f006 fba6 	bl	8007614 <__errno>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	220c      	movs	r2, #12
 8000ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	e009      	b.n	8000ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed4:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eda:	4b07      	ldr	r3, [pc, #28]	@ (8000ef8 <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4a05      	ldr	r2, [pc, #20]	@ (8000ef8 <_sbrk+0x64>)
 8000ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	24050000 	.word	0x24050000
 8000ef4:	00000400 	.word	0x00000400
 8000ef8:	24000280 	.word	0x24000280
 8000efc:	24000468 	.word	0x24000468

08000f00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f04:	4b32      	ldr	r3, [pc, #200]	@ (8000fd0 <SystemInit+0xd0>)
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f0a:	4a31      	ldr	r2, [pc, #196]	@ (8000fd0 <SystemInit+0xd0>)
 8000f0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f14:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd4 <SystemInit+0xd4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 030f 	and.w	r3, r3, #15
 8000f1c:	2b06      	cmp	r3, #6
 8000f1e:	d807      	bhi.n	8000f30 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f20:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd4 <SystemInit+0xd4>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f023 030f 	bic.w	r3, r3, #15
 8000f28:	4a2a      	ldr	r2, [pc, #168]	@ (8000fd4 <SystemInit+0xd4>)
 8000f2a:	f043 0307 	orr.w	r3, r3, #7
 8000f2e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f30:	4b29      	ldr	r3, [pc, #164]	@ (8000fd8 <SystemInit+0xd8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a28      	ldr	r2, [pc, #160]	@ (8000fd8 <SystemInit+0xd8>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f3c:	4b26      	ldr	r3, [pc, #152]	@ (8000fd8 <SystemInit+0xd8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f42:	4b25      	ldr	r3, [pc, #148]	@ (8000fd8 <SystemInit+0xd8>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4924      	ldr	r1, [pc, #144]	@ (8000fd8 <SystemInit+0xd8>)
 8000f48:	4b24      	ldr	r3, [pc, #144]	@ (8000fdc <SystemInit+0xdc>)
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f4e:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <SystemInit+0xd4>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0308 	and.w	r3, r3, #8
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d007      	beq.n	8000f6a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <SystemInit+0xd4>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f023 030f 	bic.w	r3, r3, #15
 8000f62:	4a1c      	ldr	r2, [pc, #112]	@ (8000fd4 <SystemInit+0xd4>)
 8000f64:	f043 0307 	orr.w	r3, r3, #7
 8000f68:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd8 <SystemInit+0xd8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f70:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <SystemInit+0xd8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f76:	4b18      	ldr	r3, [pc, #96]	@ (8000fd8 <SystemInit+0xd8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f7c:	4b16      	ldr	r3, [pc, #88]	@ (8000fd8 <SystemInit+0xd8>)
 8000f7e:	4a18      	ldr	r2, [pc, #96]	@ (8000fe0 <SystemInit+0xe0>)
 8000f80:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f82:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <SystemInit+0xd8>)
 8000f84:	4a17      	ldr	r2, [pc, #92]	@ (8000fe4 <SystemInit+0xe4>)
 8000f86:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f88:	4b13      	ldr	r3, [pc, #76]	@ (8000fd8 <SystemInit+0xd8>)
 8000f8a:	4a17      	ldr	r2, [pc, #92]	@ (8000fe8 <SystemInit+0xe8>)
 8000f8c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f8e:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <SystemInit+0xd8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f94:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <SystemInit+0xd8>)
 8000f96:	4a14      	ldr	r2, [pc, #80]	@ (8000fe8 <SystemInit+0xe8>)
 8000f98:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd8 <SystemInit+0xd8>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd8 <SystemInit+0xd8>)
 8000fa2:	4a11      	ldr	r2, [pc, #68]	@ (8000fe8 <SystemInit+0xe8>)
 8000fa4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <SystemInit+0xd8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fac:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <SystemInit+0xd8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a09      	ldr	r2, [pc, #36]	@ (8000fd8 <SystemInit+0xd8>)
 8000fb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fb6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fb8:	4b07      	ldr	r3, [pc, #28]	@ (8000fd8 <SystemInit+0xd8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <SystemInit+0xec>)
 8000fc0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000fc4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00
 8000fd4:	52002000 	.word	0x52002000
 8000fd8:	58024400 	.word	0x58024400
 8000fdc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fe0:	02020200 	.word	0x02020200
 8000fe4:	01ff0000 	.word	0x01ff0000
 8000fe8:	01010280 	.word	0x01010280
 8000fec:	52004000 	.word	0x52004000

08000ff0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ff4:	4b22      	ldr	r3, [pc, #136]	@ (8001080 <MX_USART3_UART_Init+0x90>)
 8000ff6:	4a23      	ldr	r2, [pc, #140]	@ (8001084 <MX_USART3_UART_Init+0x94>)
 8000ff8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	@ (8001080 <MX_USART3_UART_Init+0x90>)
 8000ffc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001000:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001002:	4b1f      	ldr	r3, [pc, #124]	@ (8001080 <MX_USART3_UART_Init+0x90>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001008:	4b1d      	ldr	r3, [pc, #116]	@ (8001080 <MX_USART3_UART_Init+0x90>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800100e:	4b1c      	ldr	r3, [pc, #112]	@ (8001080 <MX_USART3_UART_Init+0x90>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001014:	4b1a      	ldr	r3, [pc, #104]	@ (8001080 <MX_USART3_UART_Init+0x90>)
 8001016:	220c      	movs	r2, #12
 8001018:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101a:	4b19      	ldr	r3, [pc, #100]	@ (8001080 <MX_USART3_UART_Init+0x90>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001020:	4b17      	ldr	r3, [pc, #92]	@ (8001080 <MX_USART3_UART_Init+0x90>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001026:	4b16      	ldr	r3, [pc, #88]	@ (8001080 <MX_USART3_UART_Init+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800102c:	4b14      	ldr	r3, [pc, #80]	@ (8001080 <MX_USART3_UART_Init+0x90>)
 800102e:	2200      	movs	r2, #0
 8001030:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001032:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <MX_USART3_UART_Init+0x90>)
 8001034:	2200      	movs	r2, #0
 8001036:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001038:	4811      	ldr	r0, [pc, #68]	@ (8001080 <MX_USART3_UART_Init+0x90>)
 800103a:	f004 fa16 	bl	800546a <HAL_UART_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001044:	f7ff fcde 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001048:	2100      	movs	r1, #0
 800104a:	480d      	ldr	r0, [pc, #52]	@ (8001080 <MX_USART3_UART_Init+0x90>)
 800104c:	f005 fbb1 	bl	80067b2 <HAL_UARTEx_SetTxFifoThreshold>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001056:	f7ff fcd5 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800105a:	2100      	movs	r1, #0
 800105c:	4808      	ldr	r0, [pc, #32]	@ (8001080 <MX_USART3_UART_Init+0x90>)
 800105e:	f005 fbe6 	bl	800682e <HAL_UARTEx_SetRxFifoThreshold>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001068:	f7ff fccc 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800106c:	4804      	ldr	r0, [pc, #16]	@ (8001080 <MX_USART3_UART_Init+0x90>)
 800106e:	f005 fb67 	bl	8006740 <HAL_UARTEx_DisableFifoMode>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001078:	f7ff fcc4 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	24000284 	.word	0x24000284
 8001084:	40004800 	.word	0x40004800

08001088 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b0b8      	sub	sp, #224	@ 0xe0
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	22b8      	movs	r2, #184	@ 0xb8
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f006 fa50 	bl	800754e <memset>
  if(uartHandle->Instance==USART3)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a27      	ldr	r2, [pc, #156]	@ (8001150 <HAL_UART_MspInit+0xc8>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d146      	bne.n	8001146 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010b8:	f04f 0202 	mov.w	r2, #2
 80010bc:	f04f 0300 	mov.w	r3, #0
 80010c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	4618      	mov	r0, r3
 80010d0:	f001 fddc 	bl	8002c8c <HAL_RCCEx_PeriphCLKConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80010da:	f7ff fc93 	bl	8000a04 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010de:	4b1d      	ldr	r3, [pc, #116]	@ (8001154 <HAL_UART_MspInit+0xcc>)
 80010e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001154 <HAL_UART_MspInit+0xcc>)
 80010e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010ee:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <HAL_UART_MspInit+0xcc>)
 80010f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fc:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <HAL_UART_MspInit+0xcc>)
 80010fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001102:	4a14      	ldr	r2, [pc, #80]	@ (8001154 <HAL_UART_MspInit+0xcc>)
 8001104:	f043 0308 	orr.w	r3, r3, #8
 8001108:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800110c:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <HAL_UART_MspInit+0xcc>)
 800110e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800111a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800111e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001134:	2307      	movs	r3, #7
 8001136:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800113a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	@ (8001158 <HAL_UART_MspInit+0xd0>)
 8001142:	f000 fc41 	bl	80019c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001146:	bf00      	nop
 8001148:	37e0      	adds	r7, #224	@ 0xe0
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40004800 	.word	0x40004800
 8001154:	58024400 	.word	0x58024400
 8001158:	58020c00 	.word	0x58020c00

0800115c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800115c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001194 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001160:	f7ff fece 	bl	8000f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001164:	480c      	ldr	r0, [pc, #48]	@ (8001198 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001166:	490d      	ldr	r1, [pc, #52]	@ (800119c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001168:	4a0d      	ldr	r2, [pc, #52]	@ (80011a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800116c:	e002      	b.n	8001174 <LoopCopyDataInit>

0800116e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001172:	3304      	adds	r3, #4

08001174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001178:	d3f9      	bcc.n	800116e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117a:	4a0a      	ldr	r2, [pc, #40]	@ (80011a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800117c:	4c0a      	ldr	r4, [pc, #40]	@ (80011a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001180:	e001      	b.n	8001186 <LoopFillZerobss>

08001182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001184:	3204      	adds	r2, #4

08001186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001188:	d3fb      	bcc.n	8001182 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800118a:	f006 fa49 	bl	8007620 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118e:	f7ff fb8b 	bl	80008a8 <main>
  bx  lr
 8001192:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001194:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001198:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800119c:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 80011a0:	08009670 	.word	0x08009670
  ldr r2, =_sbss
 80011a4:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 80011a8:	24000468 	.word	0x24000468

080011ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <ADC3_IRQHandler>
	...

080011b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b6:	2003      	movs	r0, #3
 80011b8:	f000 f980 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011bc:	f001 fb90 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 80011c0:	4602      	mov	r2, r0
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <HAL_Init+0x68>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	0a1b      	lsrs	r3, r3, #8
 80011c8:	f003 030f 	and.w	r3, r3, #15
 80011cc:	4913      	ldr	r1, [pc, #76]	@ (800121c <HAL_Init+0x6c>)
 80011ce:	5ccb      	ldrb	r3, [r1, r3]
 80011d0:	f003 031f 	and.w	r3, r3, #31
 80011d4:	fa22 f303 	lsr.w	r3, r2, r3
 80011d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011da:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <HAL_Init+0x68>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	4a0e      	ldr	r2, [pc, #56]	@ (800121c <HAL_Init+0x6c>)
 80011e4:	5cd3      	ldrb	r3, [r2, r3]
 80011e6:	f003 031f 	and.w	r3, r3, #31
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	fa22 f303 	lsr.w	r3, r2, r3
 80011f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001220 <HAL_Init+0x70>)
 80011f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001224 <HAL_Init+0x74>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011fa:	2000      	movs	r0, #0
 80011fc:	f000 f814 	bl	8001228 <HAL_InitTick>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e002      	b.n	8001210 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800120a:	f7ff fd7b 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	58024400 	.word	0x58024400
 800121c:	080092b4 	.word	0x080092b4
 8001220:	24000008 	.word	0x24000008
 8001224:	24000004 	.word	0x24000004

08001228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001230:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <HAL_InitTick+0x60>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d101      	bne.n	800123c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e021      	b.n	8001280 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800123c:	4b13      	ldr	r3, [pc, #76]	@ (800128c <HAL_InitTick+0x64>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <HAL_InitTick+0x60>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800124a:	fbb3 f3f1 	udiv	r3, r3, r1
 800124e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f965 	bl	8001522 <HAL_SYSTICK_Config>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e00e      	b.n	8001280 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b0f      	cmp	r3, #15
 8001266:	d80a      	bhi.n	800127e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001268:	2200      	movs	r2, #0
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	f04f 30ff 	mov.w	r0, #4294967295
 8001270:	f000 f92f 	bl	80014d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001274:	4a06      	ldr	r2, [pc, #24]	@ (8001290 <HAL_InitTick+0x68>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	e000      	b.n	8001280 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	24000010 	.word	0x24000010
 800128c:	24000004 	.word	0x24000004
 8001290:	2400000c 	.word	0x2400000c

08001294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	@ (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	24000010 	.word	0x24000010
 80012b8:	24000318 	.word	0x24000318

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	@ (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	24000318 	.word	0x24000318

080012d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012dc:	f7ff ffee 	bl	80012bc <HAL_GetTick>
 80012e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ec:	d005      	beq.n	80012fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001318 <HAL_Delay+0x44>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012fa:	bf00      	nop
 80012fc:	f7ff ffde 	bl	80012bc <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	429a      	cmp	r2, r3
 800130a:	d8f7      	bhi.n	80012fc <HAL_Delay+0x28>
  {
  }
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	24000010 	.word	0x24000010

0800131c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800132c:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <__NVIC_SetPriorityGrouping+0x40>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 8001346:	4313      	orrs	r3, r2
 8001348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134a:	4a04      	ldr	r2, [pc, #16]	@ (800135c <__NVIC_SetPriorityGrouping+0x40>)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	60d3      	str	r3, [r2, #12]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00
 8001360:	05fa0000 	.word	0x05fa0000

08001364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001368:	4b04      	ldr	r3, [pc, #16]	@ (800137c <__NVIC_GetPriorityGrouping+0x18>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	f003 0307 	and.w	r3, r3, #7
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800138a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138e:	2b00      	cmp	r3, #0
 8001390:	db0b      	blt.n	80013aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	f003 021f 	and.w	r2, r3, #31
 8001398:	4907      	ldr	r1, [pc, #28]	@ (80013b8 <__NVIC_EnableIRQ+0x38>)
 800139a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	2001      	movs	r0, #1
 80013a2:	fa00 f202 	lsl.w	r2, r0, r2
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000e100 	.word	0xe000e100

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	@ (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	@ (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	@ 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	@ 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001488:	d301      	bcc.n	800148e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148a:	2301      	movs	r3, #1
 800148c:	e00f      	b.n	80014ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148e:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <SysTick_Config+0x40>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001496:	210f      	movs	r1, #15
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f7ff ff8e 	bl	80013bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a0:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <SysTick_Config+0x40>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a6:	4b04      	ldr	r3, [pc, #16]	@ (80014b8 <SysTick_Config+0x40>)
 80014a8:	2207      	movs	r2, #7
 80014aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	e000e010 	.word	0xe000e010

080014bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff29 	bl	800131c <__NVIC_SetPriorityGrouping>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014e0:	f7ff ff40 	bl	8001364 <__NVIC_GetPriorityGrouping>
 80014e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ff90 	bl	8001410 <NVIC_EncodePriority>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff5f 	bl	80013bc <__NVIC_SetPriority>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001510:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff33 	bl	8001380 <__NVIC_EnableIRQ>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffa4 	bl	8001478 <SysTick_Config>
 8001530:	4603      	mov	r3, r0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e237      	b.n	80019be <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d004      	beq.n	8001564 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2280      	movs	r2, #128	@ 0x80
 800155e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e22c      	b.n	80019be <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a5c      	ldr	r2, [pc, #368]	@ (80016dc <HAL_DMA_Abort_IT+0x1a0>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d04a      	beq.n	8001604 <HAL_DMA_Abort_IT+0xc8>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a5b      	ldr	r2, [pc, #364]	@ (80016e0 <HAL_DMA_Abort_IT+0x1a4>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d045      	beq.n	8001604 <HAL_DMA_Abort_IT+0xc8>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a59      	ldr	r2, [pc, #356]	@ (80016e4 <HAL_DMA_Abort_IT+0x1a8>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d040      	beq.n	8001604 <HAL_DMA_Abort_IT+0xc8>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a58      	ldr	r2, [pc, #352]	@ (80016e8 <HAL_DMA_Abort_IT+0x1ac>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d03b      	beq.n	8001604 <HAL_DMA_Abort_IT+0xc8>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a56      	ldr	r2, [pc, #344]	@ (80016ec <HAL_DMA_Abort_IT+0x1b0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d036      	beq.n	8001604 <HAL_DMA_Abort_IT+0xc8>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a55      	ldr	r2, [pc, #340]	@ (80016f0 <HAL_DMA_Abort_IT+0x1b4>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d031      	beq.n	8001604 <HAL_DMA_Abort_IT+0xc8>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a53      	ldr	r2, [pc, #332]	@ (80016f4 <HAL_DMA_Abort_IT+0x1b8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d02c      	beq.n	8001604 <HAL_DMA_Abort_IT+0xc8>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a52      	ldr	r2, [pc, #328]	@ (80016f8 <HAL_DMA_Abort_IT+0x1bc>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d027      	beq.n	8001604 <HAL_DMA_Abort_IT+0xc8>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a50      	ldr	r2, [pc, #320]	@ (80016fc <HAL_DMA_Abort_IT+0x1c0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d022      	beq.n	8001604 <HAL_DMA_Abort_IT+0xc8>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a4f      	ldr	r2, [pc, #316]	@ (8001700 <HAL_DMA_Abort_IT+0x1c4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d01d      	beq.n	8001604 <HAL_DMA_Abort_IT+0xc8>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001704 <HAL_DMA_Abort_IT+0x1c8>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d018      	beq.n	8001604 <HAL_DMA_Abort_IT+0xc8>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a4c      	ldr	r2, [pc, #304]	@ (8001708 <HAL_DMA_Abort_IT+0x1cc>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d013      	beq.n	8001604 <HAL_DMA_Abort_IT+0xc8>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a4a      	ldr	r2, [pc, #296]	@ (800170c <HAL_DMA_Abort_IT+0x1d0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d00e      	beq.n	8001604 <HAL_DMA_Abort_IT+0xc8>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a49      	ldr	r2, [pc, #292]	@ (8001710 <HAL_DMA_Abort_IT+0x1d4>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d009      	beq.n	8001604 <HAL_DMA_Abort_IT+0xc8>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a47      	ldr	r2, [pc, #284]	@ (8001714 <HAL_DMA_Abort_IT+0x1d8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d004      	beq.n	8001604 <HAL_DMA_Abort_IT+0xc8>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a46      	ldr	r2, [pc, #280]	@ (8001718 <HAL_DMA_Abort_IT+0x1dc>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d101      	bne.n	8001608 <HAL_DMA_Abort_IT+0xcc>
 8001604:	2301      	movs	r3, #1
 8001606:	e000      	b.n	800160a <HAL_DMA_Abort_IT+0xce>
 8001608:	2300      	movs	r3, #0
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 8086 	beq.w	800171c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2204      	movs	r2, #4
 8001614:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a2f      	ldr	r2, [pc, #188]	@ (80016dc <HAL_DMA_Abort_IT+0x1a0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d04a      	beq.n	80016b8 <HAL_DMA_Abort_IT+0x17c>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a2e      	ldr	r2, [pc, #184]	@ (80016e0 <HAL_DMA_Abort_IT+0x1a4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d045      	beq.n	80016b8 <HAL_DMA_Abort_IT+0x17c>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a2c      	ldr	r2, [pc, #176]	@ (80016e4 <HAL_DMA_Abort_IT+0x1a8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d040      	beq.n	80016b8 <HAL_DMA_Abort_IT+0x17c>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a2b      	ldr	r2, [pc, #172]	@ (80016e8 <HAL_DMA_Abort_IT+0x1ac>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d03b      	beq.n	80016b8 <HAL_DMA_Abort_IT+0x17c>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a29      	ldr	r2, [pc, #164]	@ (80016ec <HAL_DMA_Abort_IT+0x1b0>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d036      	beq.n	80016b8 <HAL_DMA_Abort_IT+0x17c>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a28      	ldr	r2, [pc, #160]	@ (80016f0 <HAL_DMA_Abort_IT+0x1b4>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d031      	beq.n	80016b8 <HAL_DMA_Abort_IT+0x17c>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a26      	ldr	r2, [pc, #152]	@ (80016f4 <HAL_DMA_Abort_IT+0x1b8>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d02c      	beq.n	80016b8 <HAL_DMA_Abort_IT+0x17c>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a25      	ldr	r2, [pc, #148]	@ (80016f8 <HAL_DMA_Abort_IT+0x1bc>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d027      	beq.n	80016b8 <HAL_DMA_Abort_IT+0x17c>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a23      	ldr	r2, [pc, #140]	@ (80016fc <HAL_DMA_Abort_IT+0x1c0>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d022      	beq.n	80016b8 <HAL_DMA_Abort_IT+0x17c>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a22      	ldr	r2, [pc, #136]	@ (8001700 <HAL_DMA_Abort_IT+0x1c4>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d01d      	beq.n	80016b8 <HAL_DMA_Abort_IT+0x17c>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a20      	ldr	r2, [pc, #128]	@ (8001704 <HAL_DMA_Abort_IT+0x1c8>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d018      	beq.n	80016b8 <HAL_DMA_Abort_IT+0x17c>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a1f      	ldr	r2, [pc, #124]	@ (8001708 <HAL_DMA_Abort_IT+0x1cc>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d013      	beq.n	80016b8 <HAL_DMA_Abort_IT+0x17c>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a1d      	ldr	r2, [pc, #116]	@ (800170c <HAL_DMA_Abort_IT+0x1d0>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d00e      	beq.n	80016b8 <HAL_DMA_Abort_IT+0x17c>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a1c      	ldr	r2, [pc, #112]	@ (8001710 <HAL_DMA_Abort_IT+0x1d4>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d009      	beq.n	80016b8 <HAL_DMA_Abort_IT+0x17c>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001714 <HAL_DMA_Abort_IT+0x1d8>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d004      	beq.n	80016b8 <HAL_DMA_Abort_IT+0x17c>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a19      	ldr	r2, [pc, #100]	@ (8001718 <HAL_DMA_Abort_IT+0x1dc>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d108      	bne.n	80016ca <HAL_DMA_Abort_IT+0x18e>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0201 	bic.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	e178      	b.n	80019bc <HAL_DMA_Abort_IT+0x480>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0201 	bic.w	r2, r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	e16f      	b.n	80019bc <HAL_DMA_Abort_IT+0x480>
 80016dc:	40020010 	.word	0x40020010
 80016e0:	40020028 	.word	0x40020028
 80016e4:	40020040 	.word	0x40020040
 80016e8:	40020058 	.word	0x40020058
 80016ec:	40020070 	.word	0x40020070
 80016f0:	40020088 	.word	0x40020088
 80016f4:	400200a0 	.word	0x400200a0
 80016f8:	400200b8 	.word	0x400200b8
 80016fc:	40020410 	.word	0x40020410
 8001700:	40020428 	.word	0x40020428
 8001704:	40020440 	.word	0x40020440
 8001708:	40020458 	.word	0x40020458
 800170c:	40020470 	.word	0x40020470
 8001710:	40020488 	.word	0x40020488
 8001714:	400204a0 	.word	0x400204a0
 8001718:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 020e 	bic.w	r2, r2, #14
 800172a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a6c      	ldr	r2, [pc, #432]	@ (80018e4 <HAL_DMA_Abort_IT+0x3a8>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d04a      	beq.n	80017cc <HAL_DMA_Abort_IT+0x290>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a6b      	ldr	r2, [pc, #428]	@ (80018e8 <HAL_DMA_Abort_IT+0x3ac>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d045      	beq.n	80017cc <HAL_DMA_Abort_IT+0x290>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a69      	ldr	r2, [pc, #420]	@ (80018ec <HAL_DMA_Abort_IT+0x3b0>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d040      	beq.n	80017cc <HAL_DMA_Abort_IT+0x290>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a68      	ldr	r2, [pc, #416]	@ (80018f0 <HAL_DMA_Abort_IT+0x3b4>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d03b      	beq.n	80017cc <HAL_DMA_Abort_IT+0x290>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a66      	ldr	r2, [pc, #408]	@ (80018f4 <HAL_DMA_Abort_IT+0x3b8>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d036      	beq.n	80017cc <HAL_DMA_Abort_IT+0x290>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a65      	ldr	r2, [pc, #404]	@ (80018f8 <HAL_DMA_Abort_IT+0x3bc>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d031      	beq.n	80017cc <HAL_DMA_Abort_IT+0x290>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a63      	ldr	r2, [pc, #396]	@ (80018fc <HAL_DMA_Abort_IT+0x3c0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d02c      	beq.n	80017cc <HAL_DMA_Abort_IT+0x290>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a62      	ldr	r2, [pc, #392]	@ (8001900 <HAL_DMA_Abort_IT+0x3c4>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d027      	beq.n	80017cc <HAL_DMA_Abort_IT+0x290>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a60      	ldr	r2, [pc, #384]	@ (8001904 <HAL_DMA_Abort_IT+0x3c8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d022      	beq.n	80017cc <HAL_DMA_Abort_IT+0x290>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a5f      	ldr	r2, [pc, #380]	@ (8001908 <HAL_DMA_Abort_IT+0x3cc>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d01d      	beq.n	80017cc <HAL_DMA_Abort_IT+0x290>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a5d      	ldr	r2, [pc, #372]	@ (800190c <HAL_DMA_Abort_IT+0x3d0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d018      	beq.n	80017cc <HAL_DMA_Abort_IT+0x290>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a5c      	ldr	r2, [pc, #368]	@ (8001910 <HAL_DMA_Abort_IT+0x3d4>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d013      	beq.n	80017cc <HAL_DMA_Abort_IT+0x290>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a5a      	ldr	r2, [pc, #360]	@ (8001914 <HAL_DMA_Abort_IT+0x3d8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d00e      	beq.n	80017cc <HAL_DMA_Abort_IT+0x290>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a59      	ldr	r2, [pc, #356]	@ (8001918 <HAL_DMA_Abort_IT+0x3dc>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d009      	beq.n	80017cc <HAL_DMA_Abort_IT+0x290>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a57      	ldr	r2, [pc, #348]	@ (800191c <HAL_DMA_Abort_IT+0x3e0>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d004      	beq.n	80017cc <HAL_DMA_Abort_IT+0x290>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a56      	ldr	r2, [pc, #344]	@ (8001920 <HAL_DMA_Abort_IT+0x3e4>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d108      	bne.n	80017de <HAL_DMA_Abort_IT+0x2a2>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0201 	bic.w	r2, r2, #1
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	e007      	b.n	80017ee <HAL_DMA_Abort_IT+0x2b2>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0201 	bic.w	r2, r2, #1
 80017ec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a3c      	ldr	r2, [pc, #240]	@ (80018e4 <HAL_DMA_Abort_IT+0x3a8>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d072      	beq.n	80018de <HAL_DMA_Abort_IT+0x3a2>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a3a      	ldr	r2, [pc, #232]	@ (80018e8 <HAL_DMA_Abort_IT+0x3ac>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d06d      	beq.n	80018de <HAL_DMA_Abort_IT+0x3a2>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a39      	ldr	r2, [pc, #228]	@ (80018ec <HAL_DMA_Abort_IT+0x3b0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d068      	beq.n	80018de <HAL_DMA_Abort_IT+0x3a2>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a37      	ldr	r2, [pc, #220]	@ (80018f0 <HAL_DMA_Abort_IT+0x3b4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d063      	beq.n	80018de <HAL_DMA_Abort_IT+0x3a2>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a36      	ldr	r2, [pc, #216]	@ (80018f4 <HAL_DMA_Abort_IT+0x3b8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d05e      	beq.n	80018de <HAL_DMA_Abort_IT+0x3a2>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a34      	ldr	r2, [pc, #208]	@ (80018f8 <HAL_DMA_Abort_IT+0x3bc>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d059      	beq.n	80018de <HAL_DMA_Abort_IT+0x3a2>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a33      	ldr	r2, [pc, #204]	@ (80018fc <HAL_DMA_Abort_IT+0x3c0>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d054      	beq.n	80018de <HAL_DMA_Abort_IT+0x3a2>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a31      	ldr	r2, [pc, #196]	@ (8001900 <HAL_DMA_Abort_IT+0x3c4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d04f      	beq.n	80018de <HAL_DMA_Abort_IT+0x3a2>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a30      	ldr	r2, [pc, #192]	@ (8001904 <HAL_DMA_Abort_IT+0x3c8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d04a      	beq.n	80018de <HAL_DMA_Abort_IT+0x3a2>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a2e      	ldr	r2, [pc, #184]	@ (8001908 <HAL_DMA_Abort_IT+0x3cc>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d045      	beq.n	80018de <HAL_DMA_Abort_IT+0x3a2>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a2d      	ldr	r2, [pc, #180]	@ (800190c <HAL_DMA_Abort_IT+0x3d0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d040      	beq.n	80018de <HAL_DMA_Abort_IT+0x3a2>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a2b      	ldr	r2, [pc, #172]	@ (8001910 <HAL_DMA_Abort_IT+0x3d4>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d03b      	beq.n	80018de <HAL_DMA_Abort_IT+0x3a2>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a2a      	ldr	r2, [pc, #168]	@ (8001914 <HAL_DMA_Abort_IT+0x3d8>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d036      	beq.n	80018de <HAL_DMA_Abort_IT+0x3a2>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a28      	ldr	r2, [pc, #160]	@ (8001918 <HAL_DMA_Abort_IT+0x3dc>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d031      	beq.n	80018de <HAL_DMA_Abort_IT+0x3a2>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a27      	ldr	r2, [pc, #156]	@ (800191c <HAL_DMA_Abort_IT+0x3e0>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d02c      	beq.n	80018de <HAL_DMA_Abort_IT+0x3a2>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a25      	ldr	r2, [pc, #148]	@ (8001920 <HAL_DMA_Abort_IT+0x3e4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d027      	beq.n	80018de <HAL_DMA_Abort_IT+0x3a2>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a24      	ldr	r2, [pc, #144]	@ (8001924 <HAL_DMA_Abort_IT+0x3e8>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d022      	beq.n	80018de <HAL_DMA_Abort_IT+0x3a2>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a22      	ldr	r2, [pc, #136]	@ (8001928 <HAL_DMA_Abort_IT+0x3ec>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d01d      	beq.n	80018de <HAL_DMA_Abort_IT+0x3a2>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a21      	ldr	r2, [pc, #132]	@ (800192c <HAL_DMA_Abort_IT+0x3f0>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d018      	beq.n	80018de <HAL_DMA_Abort_IT+0x3a2>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001930 <HAL_DMA_Abort_IT+0x3f4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d013      	beq.n	80018de <HAL_DMA_Abort_IT+0x3a2>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001934 <HAL_DMA_Abort_IT+0x3f8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d00e      	beq.n	80018de <HAL_DMA_Abort_IT+0x3a2>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001938 <HAL_DMA_Abort_IT+0x3fc>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d009      	beq.n	80018de <HAL_DMA_Abort_IT+0x3a2>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a1b      	ldr	r2, [pc, #108]	@ (800193c <HAL_DMA_Abort_IT+0x400>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d004      	beq.n	80018de <HAL_DMA_Abort_IT+0x3a2>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a19      	ldr	r2, [pc, #100]	@ (8001940 <HAL_DMA_Abort_IT+0x404>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d132      	bne.n	8001944 <HAL_DMA_Abort_IT+0x408>
 80018de:	2301      	movs	r3, #1
 80018e0:	e031      	b.n	8001946 <HAL_DMA_Abort_IT+0x40a>
 80018e2:	bf00      	nop
 80018e4:	40020010 	.word	0x40020010
 80018e8:	40020028 	.word	0x40020028
 80018ec:	40020040 	.word	0x40020040
 80018f0:	40020058 	.word	0x40020058
 80018f4:	40020070 	.word	0x40020070
 80018f8:	40020088 	.word	0x40020088
 80018fc:	400200a0 	.word	0x400200a0
 8001900:	400200b8 	.word	0x400200b8
 8001904:	40020410 	.word	0x40020410
 8001908:	40020428 	.word	0x40020428
 800190c:	40020440 	.word	0x40020440
 8001910:	40020458 	.word	0x40020458
 8001914:	40020470 	.word	0x40020470
 8001918:	40020488 	.word	0x40020488
 800191c:	400204a0 	.word	0x400204a0
 8001920:	400204b8 	.word	0x400204b8
 8001924:	58025408 	.word	0x58025408
 8001928:	5802541c 	.word	0x5802541c
 800192c:	58025430 	.word	0x58025430
 8001930:	58025444 	.word	0x58025444
 8001934:	58025458 	.word	0x58025458
 8001938:	5802546c 	.word	0x5802546c
 800193c:	58025480 	.word	0x58025480
 8001940:	58025494 	.word	0x58025494
 8001944:	2300      	movs	r3, #0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d028      	beq.n	800199c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001954:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001958:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001964:	f003 031f 	and.w	r3, r3, #31
 8001968:	2201      	movs	r2, #1
 800196a:	409a      	lsls	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001978:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00c      	beq.n	800199c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800198c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001990:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800199a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop

080019c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	@ 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80019d6:	4b86      	ldr	r3, [pc, #536]	@ (8001bf0 <HAL_GPIO_Init+0x228>)
 80019d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019da:	e18c      	b.n	8001cf6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	2101      	movs	r1, #1
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 817e 	beq.w	8001cf0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d005      	beq.n	8001a0c <HAL_GPIO_Init+0x44>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d130      	bne.n	8001a6e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a42:	2201      	movs	r2, #1
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	f003 0201 	and.w	r2, r3, #1
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d017      	beq.n	8001aaa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d123      	bne.n	8001afe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	08da      	lsrs	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3208      	adds	r2, #8
 8001abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	220f      	movs	r2, #15
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	691a      	ldr	r2, [r3, #16]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	08da      	lsrs	r2, r3, #3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3208      	adds	r2, #8
 8001af8:	69b9      	ldr	r1, [r7, #24]
 8001afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	2203      	movs	r2, #3
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0203 	and.w	r2, r3, #3
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 80d8 	beq.w	8001cf0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b40:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf4 <HAL_GPIO_Init+0x22c>)
 8001b42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b46:	4a2b      	ldr	r2, [pc, #172]	@ (8001bf4 <HAL_GPIO_Init+0x22c>)
 8001b48:	f043 0302 	orr.w	r3, r3, #2
 8001b4c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001b50:	4b28      	ldr	r3, [pc, #160]	@ (8001bf4 <HAL_GPIO_Init+0x22c>)
 8001b52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b5e:	4a26      	ldr	r2, [pc, #152]	@ (8001bf8 <HAL_GPIO_Init+0x230>)
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	3302      	adds	r3, #2
 8001b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	220f      	movs	r2, #15
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a1d      	ldr	r2, [pc, #116]	@ (8001bfc <HAL_GPIO_Init+0x234>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d04a      	beq.n	8001c20 <HAL_GPIO_Init+0x258>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a1c      	ldr	r2, [pc, #112]	@ (8001c00 <HAL_GPIO_Init+0x238>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d02b      	beq.n	8001bea <HAL_GPIO_Init+0x222>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a1b      	ldr	r2, [pc, #108]	@ (8001c04 <HAL_GPIO_Init+0x23c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d025      	beq.n	8001be6 <HAL_GPIO_Init+0x21e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a1a      	ldr	r2, [pc, #104]	@ (8001c08 <HAL_GPIO_Init+0x240>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d01f      	beq.n	8001be2 <HAL_GPIO_Init+0x21a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a19      	ldr	r2, [pc, #100]	@ (8001c0c <HAL_GPIO_Init+0x244>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d019      	beq.n	8001bde <HAL_GPIO_Init+0x216>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a18      	ldr	r2, [pc, #96]	@ (8001c10 <HAL_GPIO_Init+0x248>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d013      	beq.n	8001bda <HAL_GPIO_Init+0x212>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a17      	ldr	r2, [pc, #92]	@ (8001c14 <HAL_GPIO_Init+0x24c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d00d      	beq.n	8001bd6 <HAL_GPIO_Init+0x20e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a16      	ldr	r2, [pc, #88]	@ (8001c18 <HAL_GPIO_Init+0x250>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d007      	beq.n	8001bd2 <HAL_GPIO_Init+0x20a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a15      	ldr	r2, [pc, #84]	@ (8001c1c <HAL_GPIO_Init+0x254>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d101      	bne.n	8001bce <HAL_GPIO_Init+0x206>
 8001bca:	2309      	movs	r3, #9
 8001bcc:	e029      	b.n	8001c22 <HAL_GPIO_Init+0x25a>
 8001bce:	230a      	movs	r3, #10
 8001bd0:	e027      	b.n	8001c22 <HAL_GPIO_Init+0x25a>
 8001bd2:	2307      	movs	r3, #7
 8001bd4:	e025      	b.n	8001c22 <HAL_GPIO_Init+0x25a>
 8001bd6:	2306      	movs	r3, #6
 8001bd8:	e023      	b.n	8001c22 <HAL_GPIO_Init+0x25a>
 8001bda:	2305      	movs	r3, #5
 8001bdc:	e021      	b.n	8001c22 <HAL_GPIO_Init+0x25a>
 8001bde:	2304      	movs	r3, #4
 8001be0:	e01f      	b.n	8001c22 <HAL_GPIO_Init+0x25a>
 8001be2:	2303      	movs	r3, #3
 8001be4:	e01d      	b.n	8001c22 <HAL_GPIO_Init+0x25a>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e01b      	b.n	8001c22 <HAL_GPIO_Init+0x25a>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e019      	b.n	8001c22 <HAL_GPIO_Init+0x25a>
 8001bee:	bf00      	nop
 8001bf0:	58000080 	.word	0x58000080
 8001bf4:	58024400 	.word	0x58024400
 8001bf8:	58000400 	.word	0x58000400
 8001bfc:	58020000 	.word	0x58020000
 8001c00:	58020400 	.word	0x58020400
 8001c04:	58020800 	.word	0x58020800
 8001c08:	58020c00 	.word	0x58020c00
 8001c0c:	58021000 	.word	0x58021000
 8001c10:	58021400 	.word	0x58021400
 8001c14:	58021800 	.word	0x58021800
 8001c18:	58021c00 	.word	0x58021c00
 8001c1c:	58022400 	.word	0x58022400
 8001c20:	2300      	movs	r3, #0
 8001c22:	69fa      	ldr	r2, [r7, #28]
 8001c24:	f002 0203 	and.w	r2, r2, #3
 8001c28:	0092      	lsls	r2, r2, #2
 8001c2a:	4093      	lsls	r3, r2
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c32:	4938      	ldr	r1, [pc, #224]	@ (8001d14 <HAL_GPIO_Init+0x34c>)
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	089b      	lsrs	r3, r3, #2
 8001c38:	3302      	adds	r3, #2
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001c94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f47f ae6b 	bne.w	80019dc <HAL_GPIO_Init+0x14>
  }
}
 8001d06:	bf00      	nop
 8001d08:	bf00      	nop
 8001d0a:	3724      	adds	r7, #36	@ 0x24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	58000400 	.word	0x58000400

08001d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	807b      	strh	r3, [r7, #2]
 8001d24:	4613      	mov	r3, r2
 8001d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d28:	787b      	ldrb	r3, [r7, #1]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d2e:	887a      	ldrh	r2, [r7, #2]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001d34:	e003      	b.n	8001d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d36:	887b      	ldrh	r3, [r7, #2]
 8001d38:	041a      	lsls	r2, r3, #16
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	619a      	str	r2, [r3, #24]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001d54:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <HAL_PWREx_ConfigSupply+0x70>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d00a      	beq.n	8001d76 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001d60:	4b16      	ldr	r3, [pc, #88]	@ (8001dbc <HAL_PWREx_ConfigSupply+0x70>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d001      	beq.n	8001d72 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e01f      	b.n	8001db2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001d72:	2300      	movs	r3, #0
 8001d74:	e01d      	b.n	8001db2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001d76:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <HAL_PWREx_ConfigSupply+0x70>)
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f023 0207 	bic.w	r2, r3, #7
 8001d7e:	490f      	ldr	r1, [pc, #60]	@ (8001dbc <HAL_PWREx_ConfigSupply+0x70>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001d86:	f7ff fa99 	bl	80012bc <HAL_GetTick>
 8001d8a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d8c:	e009      	b.n	8001da2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d8e:	f7ff fa95 	bl	80012bc <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d9c:	d901      	bls.n	8001da2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e007      	b.n	8001db2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001da2:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <HAL_PWREx_ConfigSupply+0x70>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001daa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dae:	d1ee      	bne.n	8001d8e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	58024800 	.word	0x58024800

08001dc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08c      	sub	sp, #48	@ 0x30
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e3c8      	b.n	8002564 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 8087 	beq.w	8001eee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001de0:	4b88      	ldr	r3, [pc, #544]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001dea:	4b86      	ldr	r3, [pc, #536]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dee:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df2:	2b10      	cmp	r3, #16
 8001df4:	d007      	beq.n	8001e06 <HAL_RCC_OscConfig+0x46>
 8001df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df8:	2b18      	cmp	r3, #24
 8001dfa:	d110      	bne.n	8001e1e <HAL_RCC_OscConfig+0x5e>
 8001dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d10b      	bne.n	8001e1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e06:	4b7f      	ldr	r3, [pc, #508]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d06c      	beq.n	8001eec <HAL_RCC_OscConfig+0x12c>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d168      	bne.n	8001eec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e3a2      	b.n	8002564 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e26:	d106      	bne.n	8001e36 <HAL_RCC_OscConfig+0x76>
 8001e28:	4b76      	ldr	r3, [pc, #472]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a75      	ldr	r2, [pc, #468]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001e2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	e02e      	b.n	8001e94 <HAL_RCC_OscConfig+0xd4>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x98>
 8001e3e:	4b71      	ldr	r3, [pc, #452]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a70      	ldr	r2, [pc, #448]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001e44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	4b6e      	ldr	r3, [pc, #440]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a6d      	ldr	r2, [pc, #436]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001e50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e01d      	b.n	8001e94 <HAL_RCC_OscConfig+0xd4>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e60:	d10c      	bne.n	8001e7c <HAL_RCC_OscConfig+0xbc>
 8001e62:	4b68      	ldr	r3, [pc, #416]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a67      	ldr	r2, [pc, #412]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001e68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	4b65      	ldr	r3, [pc, #404]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a64      	ldr	r2, [pc, #400]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e00b      	b.n	8001e94 <HAL_RCC_OscConfig+0xd4>
 8001e7c:	4b61      	ldr	r3, [pc, #388]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a60      	ldr	r2, [pc, #384]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001e82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b5e      	ldr	r3, [pc, #376]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a5d      	ldr	r2, [pc, #372]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001e8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d013      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9c:	f7ff fa0e 	bl	80012bc <HAL_GetTick>
 8001ea0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea4:	f7ff fa0a 	bl	80012bc <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	@ 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e356      	b.n	8002564 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001eb6:	4b53      	ldr	r3, [pc, #332]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0xe4>
 8001ec2:	e014      	b.n	8001eee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec4:	f7ff f9fa 	bl	80012bc <HAL_GetTick>
 8001ec8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7ff f9f6 	bl	80012bc <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	@ 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e342      	b.n	8002564 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ede:	4b49      	ldr	r3, [pc, #292]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x10c>
 8001eea:	e000      	b.n	8001eee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 808c 	beq.w	8002014 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001efc:	4b41      	ldr	r3, [pc, #260]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f04:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f06:	4b3f      	ldr	r3, [pc, #252]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d007      	beq.n	8001f22 <HAL_RCC_OscConfig+0x162>
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	2b18      	cmp	r3, #24
 8001f16:	d137      	bne.n	8001f88 <HAL_RCC_OscConfig+0x1c8>
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d132      	bne.n	8001f88 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f22:	4b38      	ldr	r3, [pc, #224]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <HAL_RCC_OscConfig+0x17a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e314      	b.n	8002564 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f3a:	4b32      	ldr	r3, [pc, #200]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 0219 	bic.w	r2, r3, #25
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	492f      	ldr	r1, [pc, #188]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7ff f9b6 	bl	80012bc <HAL_GetTick>
 8001f50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f54:	f7ff f9b2 	bl	80012bc <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e2fe      	b.n	8002564 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f66:	4b27      	ldr	r3, [pc, #156]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f72:	4b24      	ldr	r3, [pc, #144]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	061b      	lsls	r3, r3, #24
 8001f80:	4920      	ldr	r1, [pc, #128]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f86:	e045      	b.n	8002014 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d026      	beq.n	8001fde <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f90:	4b1c      	ldr	r3, [pc, #112]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f023 0219 	bic.w	r2, r3, #25
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	4919      	ldr	r1, [pc, #100]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa2:	f7ff f98b 	bl	80012bc <HAL_GetTick>
 8001fa6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001faa:	f7ff f987 	bl	80012bc <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e2d3      	b.n	8002564 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fbc:	4b11      	ldr	r3, [pc, #68]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	061b      	lsls	r3, r3, #24
 8001fd6:	490b      	ldr	r1, [pc, #44]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
 8001fdc:	e01a      	b.n	8002014 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fde:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a08      	ldr	r2, [pc, #32]	@ (8002004 <HAL_RCC_OscConfig+0x244>)
 8001fe4:	f023 0301 	bic.w	r3, r3, #1
 8001fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fea:	f7ff f967 	bl	80012bc <HAL_GetTick>
 8001fee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ff0:	e00a      	b.n	8002008 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff2:	f7ff f963 	bl	80012bc <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d903      	bls.n	8002008 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e2af      	b.n	8002564 <HAL_RCC_OscConfig+0x7a4>
 8002004:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002008:	4b96      	ldr	r3, [pc, #600]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1ee      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b00      	cmp	r3, #0
 800201e:	d06a      	beq.n	80020f6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002020:	4b90      	ldr	r3, [pc, #576]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002028:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800202a:	4b8e      	ldr	r3, [pc, #568]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 800202c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	2b08      	cmp	r3, #8
 8002034:	d007      	beq.n	8002046 <HAL_RCC_OscConfig+0x286>
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2b18      	cmp	r3, #24
 800203a:	d11b      	bne.n	8002074 <HAL_RCC_OscConfig+0x2b4>
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	2b01      	cmp	r3, #1
 8002044:	d116      	bne.n	8002074 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002046:	4b87      	ldr	r3, [pc, #540]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d005      	beq.n	800205e <HAL_RCC_OscConfig+0x29e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	2b80      	cmp	r3, #128	@ 0x80
 8002058:	d001      	beq.n	800205e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e282      	b.n	8002564 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800205e:	4b81      	ldr	r3, [pc, #516]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	061b      	lsls	r3, r3, #24
 800206c:	497d      	ldr	r1, [pc, #500]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 800206e:	4313      	orrs	r3, r2
 8002070:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002072:	e040      	b.n	80020f6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d023      	beq.n	80020c4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800207c:	4b79      	ldr	r3, [pc, #484]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a78      	ldr	r2, [pc, #480]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 8002082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff f918 	bl	80012bc <HAL_GetTick>
 800208c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002090:	f7ff f914 	bl	80012bc <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e260      	b.n	8002564 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020a2:	4b70      	ldr	r3, [pc, #448]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	061b      	lsls	r3, r3, #24
 80020bc:	4969      	ldr	r1, [pc, #420]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	60cb      	str	r3, [r1, #12]
 80020c2:	e018      	b.n	80020f6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80020c4:	4b67      	ldr	r3, [pc, #412]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a66      	ldr	r2, [pc, #408]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 80020ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d0:	f7ff f8f4 	bl	80012bc <HAL_GetTick>
 80020d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80020d8:	f7ff f8f0 	bl	80012bc <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e23c      	b.n	8002564 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020ea:	4b5e      	ldr	r3, [pc, #376]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d036      	beq.n	8002170 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d019      	beq.n	800213e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800210a:	4b56      	ldr	r3, [pc, #344]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 800210c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800210e:	4a55      	ldr	r2, [pc, #340]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002116:	f7ff f8d1 	bl	80012bc <HAL_GetTick>
 800211a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800211e:	f7ff f8cd 	bl	80012bc <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e219      	b.n	8002564 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002130:	4b4c      	ldr	r3, [pc, #304]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 8002132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x35e>
 800213c:	e018      	b.n	8002170 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800213e:	4b49      	ldr	r3, [pc, #292]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 8002140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002142:	4a48      	ldr	r2, [pc, #288]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 8002144:	f023 0301 	bic.w	r3, r3, #1
 8002148:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214a:	f7ff f8b7 	bl	80012bc <HAL_GetTick>
 800214e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002152:	f7ff f8b3 	bl	80012bc <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e1ff      	b.n	8002564 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002164:	4b3f      	ldr	r3, [pc, #252]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 8002166:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1f0      	bne.n	8002152 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0320 	and.w	r3, r3, #32
 8002178:	2b00      	cmp	r3, #0
 800217a:	d036      	beq.n	80021ea <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d019      	beq.n	80021b8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002184:	4b37      	ldr	r3, [pc, #220]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a36      	ldr	r2, [pc, #216]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 800218a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800218e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002190:	f7ff f894 	bl	80012bc <HAL_GetTick>
 8002194:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002198:	f7ff f890 	bl	80012bc <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e1dc      	b.n	8002564 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0x3d8>
 80021b6:	e018      	b.n	80021ea <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a29      	ldr	r2, [pc, #164]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 80021be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80021c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021c4:	f7ff f87a 	bl	80012bc <HAL_GetTick>
 80021c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021cc:	f7ff f876 	bl	80012bc <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e1c2      	b.n	8002564 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021de:	4b21      	ldr	r3, [pc, #132]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 8086 	beq.w	8002304 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002268 <HAL_RCC_OscConfig+0x4a8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002268 <HAL_RCC_OscConfig+0x4a8>)
 80021fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002202:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002204:	f7ff f85a 	bl	80012bc <HAL_GetTick>
 8002208:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800220c:	f7ff f856 	bl	80012bc <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b64      	cmp	r3, #100	@ 0x64
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e1a2      	b.n	8002564 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800221e:	4b12      	ldr	r3, [pc, #72]	@ (8002268 <HAL_RCC_OscConfig+0x4a8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d106      	bne.n	8002240 <HAL_RCC_OscConfig+0x480>
 8002232:	4b0c      	ldr	r3, [pc, #48]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 8002234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002236:	4a0b      	ldr	r2, [pc, #44]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	6713      	str	r3, [r2, #112]	@ 0x70
 800223e:	e032      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e6>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d111      	bne.n	800226c <HAL_RCC_OscConfig+0x4ac>
 8002248:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 800224a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800224c:	4a05      	ldr	r2, [pc, #20]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 800224e:	f023 0301 	bic.w	r3, r3, #1
 8002252:	6713      	str	r3, [r2, #112]	@ 0x70
 8002254:	4b03      	ldr	r3, [pc, #12]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 8002256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002258:	4a02      	ldr	r2, [pc, #8]	@ (8002264 <HAL_RCC_OscConfig+0x4a4>)
 800225a:	f023 0304 	bic.w	r3, r3, #4
 800225e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002260:	e021      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e6>
 8002262:	bf00      	nop
 8002264:	58024400 	.word	0x58024400
 8002268:	58024800 	.word	0x58024800
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2b05      	cmp	r3, #5
 8002272:	d10c      	bne.n	800228e <HAL_RCC_OscConfig+0x4ce>
 8002274:	4b83      	ldr	r3, [pc, #524]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 8002276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002278:	4a82      	ldr	r2, [pc, #520]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 800227a:	f043 0304 	orr.w	r3, r3, #4
 800227e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002280:	4b80      	ldr	r3, [pc, #512]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002284:	4a7f      	ldr	r2, [pc, #508]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	6713      	str	r3, [r2, #112]	@ 0x70
 800228c:	e00b      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e6>
 800228e:	4b7d      	ldr	r3, [pc, #500]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 8002290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002292:	4a7c      	ldr	r2, [pc, #496]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	6713      	str	r3, [r2, #112]	@ 0x70
 800229a:	4b7a      	ldr	r3, [pc, #488]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 800229c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800229e:	4a79      	ldr	r2, [pc, #484]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 80022a0:	f023 0304 	bic.w	r3, r3, #4
 80022a4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d015      	beq.n	80022da <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ae:	f7ff f805 	bl	80012bc <HAL_GetTick>
 80022b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022b4:	e00a      	b.n	80022cc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b6:	f7ff f801 	bl	80012bc <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e14b      	b.n	8002564 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022cc:	4b6d      	ldr	r3, [pc, #436]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 80022ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0ee      	beq.n	80022b6 <HAL_RCC_OscConfig+0x4f6>
 80022d8:	e014      	b.n	8002304 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022da:	f7fe ffef 	bl	80012bc <HAL_GetTick>
 80022de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022e0:	e00a      	b.n	80022f8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e2:	f7fe ffeb 	bl	80012bc <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e135      	b.n	8002564 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022f8:	4b62      	ldr	r3, [pc, #392]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 80022fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1ee      	bne.n	80022e2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 812a 	beq.w	8002562 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800230e:	4b5d      	ldr	r3, [pc, #372]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002316:	2b18      	cmp	r3, #24
 8002318:	f000 80ba 	beq.w	8002490 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002320:	2b02      	cmp	r3, #2
 8002322:	f040 8095 	bne.w	8002450 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002326:	4b57      	ldr	r3, [pc, #348]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a56      	ldr	r2, [pc, #344]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 800232c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002332:	f7fe ffc3 	bl	80012bc <HAL_GetTick>
 8002336:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233a:	f7fe ffbf 	bl	80012bc <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e10b      	b.n	8002564 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800234c:	4b4d      	ldr	r3, [pc, #308]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1f0      	bne.n	800233a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002358:	4b4a      	ldr	r3, [pc, #296]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 800235a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800235c:	4b4a      	ldr	r3, [pc, #296]	@ (8002488 <HAL_RCC_OscConfig+0x6c8>)
 800235e:	4013      	ands	r3, r2
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002368:	0112      	lsls	r2, r2, #4
 800236a:	430a      	orrs	r2, r1
 800236c:	4945      	ldr	r1, [pc, #276]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 800236e:	4313      	orrs	r3, r2
 8002370:	628b      	str	r3, [r1, #40]	@ 0x28
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	3b01      	subs	r3, #1
 8002378:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002380:	3b01      	subs	r3, #1
 8002382:	025b      	lsls	r3, r3, #9
 8002384:	b29b      	uxth	r3, r3
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800238c:	3b01      	subs	r3, #1
 800238e:	041b      	lsls	r3, r3, #16
 8002390:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800239a:	3b01      	subs	r3, #1
 800239c:	061b      	lsls	r3, r3, #24
 800239e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80023a2:	4938      	ldr	r1, [pc, #224]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80023a8:	4b36      	ldr	r3, [pc, #216]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 80023aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ac:	4a35      	ldr	r2, [pc, #212]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 80023ae:	f023 0301 	bic.w	r3, r3, #1
 80023b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023b4:	4b33      	ldr	r3, [pc, #204]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 80023b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023b8:	4b34      	ldr	r3, [pc, #208]	@ (800248c <HAL_RCC_OscConfig+0x6cc>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023c0:	00d2      	lsls	r2, r2, #3
 80023c2:	4930      	ldr	r1, [pc, #192]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80023c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 80023ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023cc:	f023 020c 	bic.w	r2, r3, #12
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d4:	492b      	ldr	r1, [pc, #172]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80023da:	4b2a      	ldr	r3, [pc, #168]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 80023dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023de:	f023 0202 	bic.w	r2, r3, #2
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e6:	4927      	ldr	r1, [pc, #156]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80023ec:	4b25      	ldr	r3, [pc, #148]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 80023ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f0:	4a24      	ldr	r2, [pc, #144]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 80023f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023f8:	4b22      	ldr	r3, [pc, #136]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 80023fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fc:	4a21      	ldr	r2, [pc, #132]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 80023fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002402:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002404:	4b1f      	ldr	r3, [pc, #124]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 8002406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002408:	4a1e      	ldr	r2, [pc, #120]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 800240a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800240e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002410:	4b1c      	ldr	r3, [pc, #112]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 8002412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002414:	4a1b      	ldr	r2, [pc, #108]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800241c:	4b19      	ldr	r3, [pc, #100]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a18      	ldr	r2, [pc, #96]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 8002422:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002428:	f7fe ff48 	bl	80012bc <HAL_GetTick>
 800242c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002430:	f7fe ff44 	bl	80012bc <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e090      	b.n	8002564 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002442:	4b10      	ldr	r3, [pc, #64]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0x670>
 800244e:	e088      	b.n	8002562 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002450:	4b0c      	ldr	r3, [pc, #48]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0b      	ldr	r2, [pc, #44]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 8002456:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800245a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7fe ff2e 	bl	80012bc <HAL_GetTick>
 8002460:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002464:	f7fe ff2a 	bl	80012bc <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e076      	b.n	8002564 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002476:	4b03      	ldr	r3, [pc, #12]	@ (8002484 <HAL_RCC_OscConfig+0x6c4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x6a4>
 8002482:	e06e      	b.n	8002562 <HAL_RCC_OscConfig+0x7a2>
 8002484:	58024400 	.word	0x58024400
 8002488:	fffffc0c 	.word	0xfffffc0c
 800248c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002490:	4b36      	ldr	r3, [pc, #216]	@ (800256c <HAL_RCC_OscConfig+0x7ac>)
 8002492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002494:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002496:	4b35      	ldr	r3, [pc, #212]	@ (800256c <HAL_RCC_OscConfig+0x7ac>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d031      	beq.n	8002508 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	f003 0203 	and.w	r2, r3, #3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d12a      	bne.n	8002508 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024be:	429a      	cmp	r2, r3
 80024c0:	d122      	bne.n	8002508 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d11a      	bne.n	8002508 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	0a5b      	lsrs	r3, r3, #9
 80024d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024de:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d111      	bne.n	8002508 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	0c1b      	lsrs	r3, r3, #16
 80024e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d108      	bne.n	8002508 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	0e1b      	lsrs	r3, r3, #24
 80024fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002502:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e02b      	b.n	8002564 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800250c:	4b17      	ldr	r3, [pc, #92]	@ (800256c <HAL_RCC_OscConfig+0x7ac>)
 800250e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002510:	08db      	lsrs	r3, r3, #3
 8002512:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002516:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	429a      	cmp	r2, r3
 8002520:	d01f      	beq.n	8002562 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002522:	4b12      	ldr	r3, [pc, #72]	@ (800256c <HAL_RCC_OscConfig+0x7ac>)
 8002524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002526:	4a11      	ldr	r2, [pc, #68]	@ (800256c <HAL_RCC_OscConfig+0x7ac>)
 8002528:	f023 0301 	bic.w	r3, r3, #1
 800252c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800252e:	f7fe fec5 	bl	80012bc <HAL_GetTick>
 8002532:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002534:	bf00      	nop
 8002536:	f7fe fec1 	bl	80012bc <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253e:	4293      	cmp	r3, r2
 8002540:	d0f9      	beq.n	8002536 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002542:	4b0a      	ldr	r3, [pc, #40]	@ (800256c <HAL_RCC_OscConfig+0x7ac>)
 8002544:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002546:	4b0a      	ldr	r3, [pc, #40]	@ (8002570 <HAL_RCC_OscConfig+0x7b0>)
 8002548:	4013      	ands	r3, r2
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800254e:	00d2      	lsls	r2, r2, #3
 8002550:	4906      	ldr	r1, [pc, #24]	@ (800256c <HAL_RCC_OscConfig+0x7ac>)
 8002552:	4313      	orrs	r3, r2
 8002554:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002556:	4b05      	ldr	r3, [pc, #20]	@ (800256c <HAL_RCC_OscConfig+0x7ac>)
 8002558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255a:	4a04      	ldr	r2, [pc, #16]	@ (800256c <HAL_RCC_OscConfig+0x7ac>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3730      	adds	r7, #48	@ 0x30
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	58024400 	.word	0x58024400
 8002570:	ffff0007 	.word	0xffff0007

08002574 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e19c      	b.n	80028c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002588:	4b8a      	ldr	r3, [pc, #552]	@ (80027b4 <HAL_RCC_ClockConfig+0x240>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 030f 	and.w	r3, r3, #15
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d910      	bls.n	80025b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002596:	4b87      	ldr	r3, [pc, #540]	@ (80027b4 <HAL_RCC_ClockConfig+0x240>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 020f 	bic.w	r2, r3, #15
 800259e:	4985      	ldr	r1, [pc, #532]	@ (80027b4 <HAL_RCC_ClockConfig+0x240>)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b83      	ldr	r3, [pc, #524]	@ (80027b4 <HAL_RCC_ClockConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e184      	b.n	80028c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d010      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	4b7b      	ldr	r3, [pc, #492]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d908      	bls.n	80025e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025d4:	4b78      	ldr	r3, [pc, #480]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	4975      	ldr	r1, [pc, #468]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d010      	beq.n	8002614 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	695a      	ldr	r2, [r3, #20]
 80025f6:	4b70      	ldr	r3, [pc, #448]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025fe:	429a      	cmp	r2, r3
 8002600:	d908      	bls.n	8002614 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002602:	4b6d      	ldr	r3, [pc, #436]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	496a      	ldr	r1, [pc, #424]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 8002610:	4313      	orrs	r3, r2
 8002612:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0310 	and.w	r3, r3, #16
 800261c:	2b00      	cmp	r3, #0
 800261e:	d010      	beq.n	8002642 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699a      	ldr	r2, [r3, #24]
 8002624:	4b64      	ldr	r3, [pc, #400]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800262c:	429a      	cmp	r2, r3
 800262e:	d908      	bls.n	8002642 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002630:	4b61      	ldr	r3, [pc, #388]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	495e      	ldr	r1, [pc, #376]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 800263e:	4313      	orrs	r3, r2
 8002640:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0320 	and.w	r3, r3, #32
 800264a:	2b00      	cmp	r3, #0
 800264c:	d010      	beq.n	8002670 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69da      	ldr	r2, [r3, #28]
 8002652:	4b59      	ldr	r3, [pc, #356]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800265a:	429a      	cmp	r2, r3
 800265c:	d908      	bls.n	8002670 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800265e:	4b56      	ldr	r3, [pc, #344]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	4953      	ldr	r1, [pc, #332]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 800266c:	4313      	orrs	r3, r2
 800266e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d010      	beq.n	800269e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	4b4d      	ldr	r3, [pc, #308]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	429a      	cmp	r2, r3
 800268a:	d908      	bls.n	800269e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800268c:	4b4a      	ldr	r3, [pc, #296]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	f023 020f 	bic.w	r2, r3, #15
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4947      	ldr	r1, [pc, #284]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 800269a:	4313      	orrs	r3, r2
 800269c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d055      	beq.n	8002756 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80026aa:	4b43      	ldr	r3, [pc, #268]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	4940      	ldr	r1, [pc, #256]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d107      	bne.n	80026d4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026c4:	4b3c      	ldr	r3, [pc, #240]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d121      	bne.n	8002714 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0f6      	b.n	80028c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d107      	bne.n	80026ec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026dc:	4b36      	ldr	r3, [pc, #216]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d115      	bne.n	8002714 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0ea      	b.n	80028c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d107      	bne.n	8002704 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026f4:	4b30      	ldr	r3, [pc, #192]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d109      	bne.n	8002714 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0de      	b.n	80028c2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002704:	4b2c      	ldr	r3, [pc, #176]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0d6      	b.n	80028c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002714:	4b28      	ldr	r3, [pc, #160]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	f023 0207 	bic.w	r2, r3, #7
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4925      	ldr	r1, [pc, #148]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 8002722:	4313      	orrs	r3, r2
 8002724:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002726:	f7fe fdc9 	bl	80012bc <HAL_GetTick>
 800272a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272c:	e00a      	b.n	8002744 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800272e:	f7fe fdc5 	bl	80012bc <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	f241 3288 	movw	r2, #5000	@ 0x1388
 800273c:	4293      	cmp	r3, r2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e0be      	b.n	80028c2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002744:	4b1c      	ldr	r3, [pc, #112]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	429a      	cmp	r2, r3
 8002754:	d1eb      	bne.n	800272e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d010      	beq.n	8002784 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	4b14      	ldr	r3, [pc, #80]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	429a      	cmp	r2, r3
 8002770:	d208      	bcs.n	8002784 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002772:	4b11      	ldr	r3, [pc, #68]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f023 020f 	bic.w	r2, r3, #15
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	490e      	ldr	r1, [pc, #56]	@ (80027b8 <HAL_RCC_ClockConfig+0x244>)
 8002780:	4313      	orrs	r3, r2
 8002782:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002784:	4b0b      	ldr	r3, [pc, #44]	@ (80027b4 <HAL_RCC_ClockConfig+0x240>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 030f 	and.w	r3, r3, #15
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d214      	bcs.n	80027bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002792:	4b08      	ldr	r3, [pc, #32]	@ (80027b4 <HAL_RCC_ClockConfig+0x240>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 020f 	bic.w	r2, r3, #15
 800279a:	4906      	ldr	r1, [pc, #24]	@ (80027b4 <HAL_RCC_ClockConfig+0x240>)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a2:	4b04      	ldr	r3, [pc, #16]	@ (80027b4 <HAL_RCC_ClockConfig+0x240>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d005      	beq.n	80027bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e086      	b.n	80028c2 <HAL_RCC_ClockConfig+0x34e>
 80027b4:	52002000 	.word	0x52002000
 80027b8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d010      	beq.n	80027ea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691a      	ldr	r2, [r3, #16]
 80027cc:	4b3f      	ldr	r3, [pc, #252]	@ (80028cc <HAL_RCC_ClockConfig+0x358>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d208      	bcs.n	80027ea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80027d8:	4b3c      	ldr	r3, [pc, #240]	@ (80028cc <HAL_RCC_ClockConfig+0x358>)
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	4939      	ldr	r1, [pc, #228]	@ (80028cc <HAL_RCC_ClockConfig+0x358>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d010      	beq.n	8002818 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	4b34      	ldr	r3, [pc, #208]	@ (80028cc <HAL_RCC_ClockConfig+0x358>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002802:	429a      	cmp	r2, r3
 8002804:	d208      	bcs.n	8002818 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002806:	4b31      	ldr	r3, [pc, #196]	@ (80028cc <HAL_RCC_ClockConfig+0x358>)
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	492e      	ldr	r1, [pc, #184]	@ (80028cc <HAL_RCC_ClockConfig+0x358>)
 8002814:	4313      	orrs	r3, r2
 8002816:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	2b00      	cmp	r3, #0
 8002822:	d010      	beq.n	8002846 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699a      	ldr	r2, [r3, #24]
 8002828:	4b28      	ldr	r3, [pc, #160]	@ (80028cc <HAL_RCC_ClockConfig+0x358>)
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002830:	429a      	cmp	r2, r3
 8002832:	d208      	bcs.n	8002846 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002834:	4b25      	ldr	r3, [pc, #148]	@ (80028cc <HAL_RCC_ClockConfig+0x358>)
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	4922      	ldr	r1, [pc, #136]	@ (80028cc <HAL_RCC_ClockConfig+0x358>)
 8002842:	4313      	orrs	r3, r2
 8002844:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0320 	and.w	r3, r3, #32
 800284e:	2b00      	cmp	r3, #0
 8002850:	d010      	beq.n	8002874 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69da      	ldr	r2, [r3, #28]
 8002856:	4b1d      	ldr	r3, [pc, #116]	@ (80028cc <HAL_RCC_ClockConfig+0x358>)
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800285e:	429a      	cmp	r2, r3
 8002860:	d208      	bcs.n	8002874 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002862:	4b1a      	ldr	r3, [pc, #104]	@ (80028cc <HAL_RCC_ClockConfig+0x358>)
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	4917      	ldr	r1, [pc, #92]	@ (80028cc <HAL_RCC_ClockConfig+0x358>)
 8002870:	4313      	orrs	r3, r2
 8002872:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002874:	f000 f834 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 8002878:	4602      	mov	r2, r0
 800287a:	4b14      	ldr	r3, [pc, #80]	@ (80028cc <HAL_RCC_ClockConfig+0x358>)
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	0a1b      	lsrs	r3, r3, #8
 8002880:	f003 030f 	and.w	r3, r3, #15
 8002884:	4912      	ldr	r1, [pc, #72]	@ (80028d0 <HAL_RCC_ClockConfig+0x35c>)
 8002886:	5ccb      	ldrb	r3, [r1, r3]
 8002888:	f003 031f 	and.w	r3, r3, #31
 800288c:	fa22 f303 	lsr.w	r3, r2, r3
 8002890:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002892:	4b0e      	ldr	r3, [pc, #56]	@ (80028cc <HAL_RCC_ClockConfig+0x358>)
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	4a0d      	ldr	r2, [pc, #52]	@ (80028d0 <HAL_RCC_ClockConfig+0x35c>)
 800289c:	5cd3      	ldrb	r3, [r2, r3]
 800289e:	f003 031f 	and.w	r3, r3, #31
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
 80028a8:	4a0a      	ldr	r2, [pc, #40]	@ (80028d4 <HAL_RCC_ClockConfig+0x360>)
 80028aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028ac:	4a0a      	ldr	r2, [pc, #40]	@ (80028d8 <HAL_RCC_ClockConfig+0x364>)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80028b2:	4b0a      	ldr	r3, [pc, #40]	@ (80028dc <HAL_RCC_ClockConfig+0x368>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fcb6 	bl	8001228 <HAL_InitTick>
 80028bc:	4603      	mov	r3, r0
 80028be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	58024400 	.word	0x58024400
 80028d0:	080092b4 	.word	0x080092b4
 80028d4:	24000008 	.word	0x24000008
 80028d8:	24000004 	.word	0x24000004
 80028dc:	2400000c 	.word	0x2400000c

080028e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b089      	sub	sp, #36	@ 0x24
 80028e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028e6:	4bb3      	ldr	r3, [pc, #716]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028ee:	2b18      	cmp	r3, #24
 80028f0:	f200 8155 	bhi.w	8002b9e <HAL_RCC_GetSysClockFreq+0x2be>
 80028f4:	a201      	add	r2, pc, #4	@ (adr r2, 80028fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80028f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fa:	bf00      	nop
 80028fc:	08002961 	.word	0x08002961
 8002900:	08002b9f 	.word	0x08002b9f
 8002904:	08002b9f 	.word	0x08002b9f
 8002908:	08002b9f 	.word	0x08002b9f
 800290c:	08002b9f 	.word	0x08002b9f
 8002910:	08002b9f 	.word	0x08002b9f
 8002914:	08002b9f 	.word	0x08002b9f
 8002918:	08002b9f 	.word	0x08002b9f
 800291c:	08002987 	.word	0x08002987
 8002920:	08002b9f 	.word	0x08002b9f
 8002924:	08002b9f 	.word	0x08002b9f
 8002928:	08002b9f 	.word	0x08002b9f
 800292c:	08002b9f 	.word	0x08002b9f
 8002930:	08002b9f 	.word	0x08002b9f
 8002934:	08002b9f 	.word	0x08002b9f
 8002938:	08002b9f 	.word	0x08002b9f
 800293c:	0800298d 	.word	0x0800298d
 8002940:	08002b9f 	.word	0x08002b9f
 8002944:	08002b9f 	.word	0x08002b9f
 8002948:	08002b9f 	.word	0x08002b9f
 800294c:	08002b9f 	.word	0x08002b9f
 8002950:	08002b9f 	.word	0x08002b9f
 8002954:	08002b9f 	.word	0x08002b9f
 8002958:	08002b9f 	.word	0x08002b9f
 800295c:	08002993 	.word	0x08002993
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002960:	4b94      	ldr	r3, [pc, #592]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	2b00      	cmp	r3, #0
 800296a:	d009      	beq.n	8002980 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800296c:	4b91      	ldr	r3, [pc, #580]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	08db      	lsrs	r3, r3, #3
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	4a90      	ldr	r2, [pc, #576]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
 800297c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800297e:	e111      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002980:	4b8d      	ldr	r3, [pc, #564]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002982:	61bb      	str	r3, [r7, #24]
      break;
 8002984:	e10e      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002986:	4b8d      	ldr	r3, [pc, #564]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002988:	61bb      	str	r3, [r7, #24]
      break;
 800298a:	e10b      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800298c:	4b8c      	ldr	r3, [pc, #560]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800298e:	61bb      	str	r3, [r7, #24]
      break;
 8002990:	e108      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002992:	4b88      	ldr	r3, [pc, #544]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800299c:	4b85      	ldr	r3, [pc, #532]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800299e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029a6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80029a8:	4b82      	ldr	r3, [pc, #520]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80029b2:	4b80      	ldr	r3, [pc, #512]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029b6:	08db      	lsrs	r3, r3, #3
 80029b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	fb02 f303 	mul.w	r3, r2, r3
 80029c2:	ee07 3a90 	vmov	s15, r3
 80029c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 80e1 	beq.w	8002b98 <HAL_RCC_GetSysClockFreq+0x2b8>
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	f000 8083 	beq.w	8002ae4 <HAL_RCC_GetSysClockFreq+0x204>
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	f200 80a1 	bhi.w	8002b28 <HAL_RCC_GetSysClockFreq+0x248>
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <HAL_RCC_GetSysClockFreq+0x114>
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d056      	beq.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80029f2:	e099      	b.n	8002b28 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029f4:	4b6f      	ldr	r3, [pc, #444]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0320 	and.w	r3, r3, #32
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d02d      	beq.n	8002a5c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a00:	4b6c      	ldr	r3, [pc, #432]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	08db      	lsrs	r3, r3, #3
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	4a6b      	ldr	r2, [pc, #428]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a10:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	ee07 3a90 	vmov	s15, r3
 8002a18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	ee07 3a90 	vmov	s15, r3
 8002a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a2a:	4b62      	ldr	r3, [pc, #392]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a32:	ee07 3a90 	vmov	s15, r3
 8002a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a3e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002bc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a56:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002a5a:	e087      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	ee07 3a90 	vmov	s15, r3
 8002a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a66:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002bc8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a6e:	4b51      	ldr	r3, [pc, #324]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a76:	ee07 3a90 	vmov	s15, r3
 8002a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a82:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002bc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a9e:	e065      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	ee07 3a90 	vmov	s15, r3
 8002aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aaa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002bcc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ab2:	4b40      	ldr	r3, [pc, #256]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aba:	ee07 3a90 	vmov	s15, r3
 8002abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ac2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ac6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002bc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ade:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ae2:	e043      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	ee07 3a90 	vmov	s15, r3
 8002aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aee:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002bd0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002af6:	4b2f      	ldr	r3, [pc, #188]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002afe:	ee07 3a90 	vmov	s15, r3
 8002b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b06:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b0a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002bc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b26:	e021      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	ee07 3a90 	vmov	s15, r3
 8002b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b32:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002bcc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b42:	ee07 3a90 	vmov	s15, r3
 8002b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b4e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002bc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b6a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002b6c:	4b11      	ldr	r3, [pc, #68]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b70:	0a5b      	lsrs	r3, r3, #9
 8002b72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b76:	3301      	adds	r3, #1
 8002b78:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	ee07 3a90 	vmov	s15, r3
 8002b80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b84:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b90:	ee17 3a90 	vmov	r3, s15
 8002b94:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002b96:	e005      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61bb      	str	r3, [r7, #24]
      break;
 8002b9c:	e002      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002b9e:	4b07      	ldr	r3, [pc, #28]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ba0:	61bb      	str	r3, [r7, #24]
      break;
 8002ba2:	bf00      	nop
  }

  return sysclockfreq;
 8002ba4:	69bb      	ldr	r3, [r7, #24]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3724      	adds	r7, #36	@ 0x24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	58024400 	.word	0x58024400
 8002bb8:	03d09000 	.word	0x03d09000
 8002bbc:	003d0900 	.word	0x003d0900
 8002bc0:	007a1200 	.word	0x007a1200
 8002bc4:	46000000 	.word	0x46000000
 8002bc8:	4c742400 	.word	0x4c742400
 8002bcc:	4a742400 	.word	0x4a742400
 8002bd0:	4af42400 	.word	0x4af42400

08002bd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002bda:	f7ff fe81 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 8002bde:	4602      	mov	r2, r0
 8002be0:	4b10      	ldr	r3, [pc, #64]	@ (8002c24 <HAL_RCC_GetHCLKFreq+0x50>)
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	0a1b      	lsrs	r3, r3, #8
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	490f      	ldr	r1, [pc, #60]	@ (8002c28 <HAL_RCC_GetHCLKFreq+0x54>)
 8002bec:	5ccb      	ldrb	r3, [r1, r3]
 8002bee:	f003 031f 	and.w	r3, r3, #31
 8002bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8002c24 <HAL_RCC_GetHCLKFreq+0x50>)
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	4a09      	ldr	r2, [pc, #36]	@ (8002c28 <HAL_RCC_GetHCLKFreq+0x54>)
 8002c02:	5cd3      	ldrb	r3, [r2, r3]
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0e:	4a07      	ldr	r2, [pc, #28]	@ (8002c2c <HAL_RCC_GetHCLKFreq+0x58>)
 8002c10:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c12:	4a07      	ldr	r2, [pc, #28]	@ (8002c30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002c18:	4b04      	ldr	r3, [pc, #16]	@ (8002c2c <HAL_RCC_GetHCLKFreq+0x58>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	58024400 	.word	0x58024400
 8002c28:	080092b4 	.word	0x080092b4
 8002c2c:	24000008 	.word	0x24000008
 8002c30:	24000004 	.word	0x24000004

08002c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002c38:	f7ff ffcc 	bl	8002bd4 <HAL_RCC_GetHCLKFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b06      	ldr	r3, [pc, #24]	@ (8002c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	091b      	lsrs	r3, r3, #4
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	4904      	ldr	r1, [pc, #16]	@ (8002c5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c4a:	5ccb      	ldrb	r3, [r1, r3]
 8002c4c:	f003 031f 	and.w	r3, r3, #31
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	58024400 	.word	0x58024400
 8002c5c:	080092b4 	.word	0x080092b4

08002c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002c64:	f7ff ffb6 	bl	8002bd4 <HAL_RCC_GetHCLKFreq>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	0a1b      	lsrs	r3, r3, #8
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	4904      	ldr	r1, [pc, #16]	@ (8002c88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c76:	5ccb      	ldrb	r3, [r1, r3]
 8002c78:	f003 031f 	and.w	r3, r3, #31
 8002c7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	58024400 	.word	0x58024400
 8002c88:	080092b4 	.word	0x080092b4

08002c8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c90:	b0c6      	sub	sp, #280	@ 0x118
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cac:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002cb0:	2500      	movs	r5, #0
 8002cb2:	ea54 0305 	orrs.w	r3, r4, r5
 8002cb6:	d049      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cbe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002cc2:	d02f      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002cc4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002cc8:	d828      	bhi.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002cca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002cce:	d01a      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002cd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002cd4:	d822      	bhi.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002cda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cde:	d007      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ce0:	e01c      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ce2:	4bab      	ldr	r3, [pc, #684]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce6:	4aaa      	ldr	r2, [pc, #680]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002cee:	e01a      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cf4:	3308      	adds	r3, #8
 8002cf6:	2102      	movs	r1, #2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f001 fc25 	bl	8004548 <RCCEx_PLL2_Config>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d04:	e00f      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d0a:	3328      	adds	r3, #40	@ 0x28
 8002d0c:	2102      	movs	r1, #2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f001 fccc 	bl	80046ac <RCCEx_PLL3_Config>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d1a:	e004      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002d22:	e000      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10a      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002d2e:	4b98      	ldr	r3, [pc, #608]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d32:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d3c:	4a94      	ldr	r2, [pc, #592]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d42:	e003      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d54:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002d58:	f04f 0900 	mov.w	r9, #0
 8002d5c:	ea58 0309 	orrs.w	r3, r8, r9
 8002d60:	d047      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d82a      	bhi.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d74 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d72:	bf00      	nop
 8002d74:	08002d89 	.word	0x08002d89
 8002d78:	08002d97 	.word	0x08002d97
 8002d7c:	08002dad 	.word	0x08002dad
 8002d80:	08002dcb 	.word	0x08002dcb
 8002d84:	08002dcb 	.word	0x08002dcb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d88:	4b81      	ldr	r3, [pc, #516]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8c:	4a80      	ldr	r2, [pc, #512]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d94:	e01a      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d9a:	3308      	adds	r3, #8
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f001 fbd2 	bl	8004548 <RCCEx_PLL2_Config>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002daa:	e00f      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002db0:	3328      	adds	r3, #40	@ 0x28
 8002db2:	2100      	movs	r1, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f001 fc79 	bl	80046ac <RCCEx_PLL3_Config>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002dc0:	e004      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002dc8:	e000      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002dca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10a      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dd4:	4b6e      	ldr	r3, [pc, #440]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dd8:	f023 0107 	bic.w	r1, r3, #7
 8002ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de2:	4a6b      	ldr	r2, [pc, #428]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002de4:	430b      	orrs	r3, r1
 8002de6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002de8:	e003      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002dee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfa:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8002dfe:	f04f 0b00 	mov.w	fp, #0
 8002e02:	ea5a 030b 	orrs.w	r3, sl, fp
 8002e06:	d05b      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002e10:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002e14:	d03b      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002e16:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002e1a:	d834      	bhi.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002e1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e20:	d037      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002e22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e26:	d82e      	bhi.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002e28:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002e2c:	d033      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002e2e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002e32:	d828      	bhi.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002e34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e38:	d01a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002e3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e3e:	d822      	bhi.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002e44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e48:	d007      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002e4a:	e01c      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e4c:	4b50      	ldr	r3, [pc, #320]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e50:	4a4f      	ldr	r2, [pc, #316]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e58:	e01e      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e5e:	3308      	adds	r3, #8
 8002e60:	2100      	movs	r1, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f001 fb70 	bl	8004548 <RCCEx_PLL2_Config>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002e6e:	e013      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e74:	3328      	adds	r3, #40	@ 0x28
 8002e76:	2100      	movs	r1, #0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f001 fc17 	bl	80046ac <RCCEx_PLL3_Config>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e84:	e008      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002e8c:	e004      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002e8e:	bf00      	nop
 8002e90:	e002      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002e92:	bf00      	nop
 8002e94:	e000      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002e96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10b      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002eac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002eb0:	4a37      	ldr	r2, [pc, #220]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002eb2:	430b      	orrs	r3, r1
 8002eb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eb6:	e003      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ebc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002ecc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002ed6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002eda:	460b      	mov	r3, r1
 8002edc:	4313      	orrs	r3, r2
 8002ede:	d05d      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ee4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002ee8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002eec:	d03b      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002eee:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002ef2:	d834      	bhi.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002ef4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ef8:	d037      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002efa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002efe:	d82e      	bhi.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002f00:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f04:	d033      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8002f06:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f0a:	d828      	bhi.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002f0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f10:	d01a      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002f12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f16:	d822      	bhi.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002f1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f20:	d007      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002f22:	e01c      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f24:	4b1a      	ldr	r3, [pc, #104]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f28:	4a19      	ldr	r2, [pc, #100]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f30:	e01e      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f36:	3308      	adds	r3, #8
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f001 fb04 	bl	8004548 <RCCEx_PLL2_Config>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002f46:	e013      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f4c:	3328      	adds	r3, #40	@ 0x28
 8002f4e:	2100      	movs	r1, #0
 8002f50:	4618      	mov	r0, r3
 8002f52:	f001 fbab 	bl	80046ac <RCCEx_PLL3_Config>
 8002f56:	4603      	mov	r3, r0
 8002f58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f5c:	e008      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002f64:	e004      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002f66:	bf00      	nop
 8002f68:	e002      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002f6a:	bf00      	nop
 8002f6c:	e000      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002f6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10d      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002f78:	4b05      	ldr	r3, [pc, #20]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002f88:	4a01      	ldr	r2, [pc, #4]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f8a:	430b      	orrs	r3, r1
 8002f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f8e:	e005      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002f90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002fa8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002fac:	2300      	movs	r3, #0
 8002fae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002fb2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	d03a      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fc2:	2b30      	cmp	r3, #48	@ 0x30
 8002fc4:	d01f      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8002fc6:	2b30      	cmp	r3, #48	@ 0x30
 8002fc8:	d819      	bhi.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002fca:	2b20      	cmp	r3, #32
 8002fcc:	d00c      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	d815      	bhi.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d019      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002fd6:	2b10      	cmp	r3, #16
 8002fd8:	d111      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fda:	4baa      	ldr	r3, [pc, #680]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fde:	4aa9      	ldr	r2, [pc, #676]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002fe6:	e011      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fec:	3308      	adds	r3, #8
 8002fee:	2102      	movs	r1, #2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f001 faa9 	bl	8004548 <RCCEx_PLL2_Config>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002ffc:	e006      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003004:	e002      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003006:	bf00      	nop
 8003008:	e000      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800300a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800300c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10a      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003014:	4b9b      	ldr	r3, [pc, #620]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003018:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800301c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003022:	4a98      	ldr	r2, [pc, #608]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003024:	430b      	orrs	r3, r1
 8003026:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003028:	e003      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800302a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800302e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800303e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003042:	2300      	movs	r3, #0
 8003044:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003048:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800304c:	460b      	mov	r3, r1
 800304e:	4313      	orrs	r3, r2
 8003050:	d051      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003058:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800305c:	d035      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800305e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003062:	d82e      	bhi.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003064:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003068:	d031      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x442>
 800306a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800306e:	d828      	bhi.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003070:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003074:	d01a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800307a:	d822      	bhi.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003080:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003084:	d007      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003086:	e01c      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003088:	4b7e      	ldr	r3, [pc, #504]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800308a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308c:	4a7d      	ldr	r2, [pc, #500]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800308e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003092:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003094:	e01c      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800309a:	3308      	adds	r3, #8
 800309c:	2100      	movs	r1, #0
 800309e:	4618      	mov	r0, r3
 80030a0:	f001 fa52 	bl	8004548 <RCCEx_PLL2_Config>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80030aa:	e011      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030b0:	3328      	adds	r3, #40	@ 0x28
 80030b2:	2100      	movs	r1, #0
 80030b4:	4618      	mov	r0, r3
 80030b6:	f001 faf9 	bl	80046ac <RCCEx_PLL3_Config>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80030c0:	e006      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80030c8:	e002      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80030ca:	bf00      	nop
 80030cc:	e000      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80030ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10a      	bne.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80030d8:	4b6a      	ldr	r3, [pc, #424]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030dc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80030e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e6:	4a67      	ldr	r2, [pc, #412]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030e8:	430b      	orrs	r3, r1
 80030ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80030ec:	e003      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80030f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003102:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003106:	2300      	movs	r3, #0
 8003108:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800310c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003110:	460b      	mov	r3, r1
 8003112:	4313      	orrs	r3, r2
 8003114:	d053      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800311a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800311c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003120:	d033      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003122:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003126:	d82c      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003128:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800312c:	d02f      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800312e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003132:	d826      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003134:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003138:	d02b      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800313a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800313e:	d820      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003140:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003144:	d012      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003146:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800314a:	d81a      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800314c:	2b00      	cmp	r3, #0
 800314e:	d022      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003154:	d115      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800315a:	3308      	adds	r3, #8
 800315c:	2101      	movs	r1, #1
 800315e:	4618      	mov	r0, r3
 8003160:	f001 f9f2 	bl	8004548 <RCCEx_PLL2_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800316a:	e015      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800316c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003170:	3328      	adds	r3, #40	@ 0x28
 8003172:	2101      	movs	r1, #1
 8003174:	4618      	mov	r0, r3
 8003176:	f001 fa99 	bl	80046ac <RCCEx_PLL3_Config>
 800317a:	4603      	mov	r3, r0
 800317c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003180:	e00a      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003188:	e006      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800318a:	bf00      	nop
 800318c:	e004      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800318e:	bf00      	nop
 8003190:	e002      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003192:	bf00      	nop
 8003194:	e000      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003196:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003198:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10a      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80031a0:	4b38      	ldr	r3, [pc, #224]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031a4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80031a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ae:	4a35      	ldr	r2, [pc, #212]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031b0:	430b      	orrs	r3, r1
 80031b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80031b4:	e003      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80031be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80031ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80031ce:	2300      	movs	r3, #0
 80031d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80031d4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80031d8:	460b      	mov	r3, r1
 80031da:	4313      	orrs	r3, r2
 80031dc:	d058      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80031de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80031e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031ea:	d033      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80031ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031f0:	d82c      	bhi.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80031f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031f6:	d02f      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80031f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031fc:	d826      	bhi.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80031fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003202:	d02b      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003204:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003208:	d820      	bhi.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800320a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800320e:	d012      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003210:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003214:	d81a      	bhi.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003216:	2b00      	cmp	r3, #0
 8003218:	d022      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800321a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800321e:	d115      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003224:	3308      	adds	r3, #8
 8003226:	2101      	movs	r1, #1
 8003228:	4618      	mov	r0, r3
 800322a:	f001 f98d 	bl	8004548 <RCCEx_PLL2_Config>
 800322e:	4603      	mov	r3, r0
 8003230:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003234:	e015      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800323a:	3328      	adds	r3, #40	@ 0x28
 800323c:	2101      	movs	r1, #1
 800323e:	4618      	mov	r0, r3
 8003240:	f001 fa34 	bl	80046ac <RCCEx_PLL3_Config>
 8003244:	4603      	mov	r3, r0
 8003246:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800324a:	e00a      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003252:	e006      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003254:	bf00      	nop
 8003256:	e004      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003258:	bf00      	nop
 800325a:	e002      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800325c:	bf00      	nop
 800325e:	e000      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003262:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10e      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800326a:	4b06      	ldr	r3, [pc, #24]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800326c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003276:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800327a:	4a02      	ldr	r2, [pc, #8]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800327c:	430b      	orrs	r3, r1
 800327e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003280:	e006      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003282:	bf00      	nop
 8003284:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003288:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800328c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003298:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800329c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032a0:	2300      	movs	r3, #0
 80032a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80032a6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4313      	orrs	r3, r2
 80032ae:	d037      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80032b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032ba:	d00e      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80032bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032c0:	d816      	bhi.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d018      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80032c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032ca:	d111      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032cc:	4bc4      	ldr	r3, [pc, #784]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d0:	4ac3      	ldr	r2, [pc, #780]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80032d8:	e00f      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032de:	3308      	adds	r3, #8
 80032e0:	2101      	movs	r1, #1
 80032e2:	4618      	mov	r0, r3
 80032e4:	f001 f930 	bl	8004548 <RCCEx_PLL2_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80032ee:	e004      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80032f6:	e000      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80032f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10a      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003302:	4bb7      	ldr	r3, [pc, #732]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003306:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800330a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800330e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003310:	4ab3      	ldr	r2, [pc, #716]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003312:	430b      	orrs	r3, r1
 8003314:	6513      	str	r3, [r2, #80]	@ 0x50
 8003316:	e003      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003318:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800331c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003328:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800332c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003330:	2300      	movs	r3, #0
 8003332:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003336:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800333a:	460b      	mov	r3, r1
 800333c:	4313      	orrs	r3, r2
 800333e:	d039      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003346:	2b03      	cmp	r3, #3
 8003348:	d81c      	bhi.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800334a:	a201      	add	r2, pc, #4	@ (adr r2, 8003350 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800334c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003350:	0800338d 	.word	0x0800338d
 8003354:	08003361 	.word	0x08003361
 8003358:	0800336f 	.word	0x0800336f
 800335c:	0800338d 	.word	0x0800338d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003360:	4b9f      	ldr	r3, [pc, #636]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003364:	4a9e      	ldr	r2, [pc, #632]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800336a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800336c:	e00f      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800336e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003372:	3308      	adds	r3, #8
 8003374:	2102      	movs	r1, #2
 8003376:	4618      	mov	r0, r3
 8003378:	f001 f8e6 	bl	8004548 <RCCEx_PLL2_Config>
 800337c:	4603      	mov	r3, r0
 800337e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003382:	e004      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800338a:	e000      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800338c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800338e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10a      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003396:	4b92      	ldr	r3, [pc, #584]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339a:	f023 0103 	bic.w	r1, r3, #3
 800339e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033a4:	4a8e      	ldr	r2, [pc, #568]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033a6:	430b      	orrs	r3, r1
 80033a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033aa:	e003      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033bc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80033c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80033c4:	2300      	movs	r3, #0
 80033c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80033ca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f000 8099 	beq.w	8003508 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033d6:	4b83      	ldr	r3, [pc, #524]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a82      	ldr	r2, [pc, #520]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80033dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033e2:	f7fd ff6b 	bl	80012bc <HAL_GetTick>
 80033e6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033ea:	e00b      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ec:	f7fd ff66 	bl	80012bc <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b64      	cmp	r3, #100	@ 0x64
 80033fa:	d903      	bls.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003402:	e005      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003404:	4b77      	ldr	r3, [pc, #476]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0ed      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003410:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003414:	2b00      	cmp	r3, #0
 8003416:	d173      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003418:	4b71      	ldr	r3, [pc, #452]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800341a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800341c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003420:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003424:	4053      	eors	r3, r2
 8003426:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800342a:	2b00      	cmp	r3, #0
 800342c:	d015      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800342e:	4b6c      	ldr	r3, [pc, #432]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003432:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003436:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800343a:	4b69      	ldr	r3, [pc, #420]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343e:	4a68      	ldr	r2, [pc, #416]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003444:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003446:	4b66      	ldr	r3, [pc, #408]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344a:	4a65      	ldr	r2, [pc, #404]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800344c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003450:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003452:	4a63      	ldr	r2, [pc, #396]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003454:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003458:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800345a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800345e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003462:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003466:	d118      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fd ff28 	bl	80012bc <HAL_GetTick>
 800346c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003470:	e00d      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003472:	f7fd ff23 	bl	80012bc <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800347c:	1ad2      	subs	r2, r2, r3
 800347e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003482:	429a      	cmp	r2, r3
 8003484:	d903      	bls.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800348c:	e005      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800348e:	4b54      	ldr	r3, [pc, #336]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0eb      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800349a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d129      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80034aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034b2:	d10e      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80034b4:	4b4a      	ldr	r3, [pc, #296]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80034bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80034c4:	091a      	lsrs	r2, r3, #4
 80034c6:	4b48      	ldr	r3, [pc, #288]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	4a45      	ldr	r2, [pc, #276]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034cc:	430b      	orrs	r3, r1
 80034ce:	6113      	str	r3, [r2, #16]
 80034d0:	e005      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x852>
 80034d2:	4b43      	ldr	r3, [pc, #268]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	4a42      	ldr	r2, [pc, #264]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80034dc:	6113      	str	r3, [r2, #16]
 80034de:	4b40      	ldr	r3, [pc, #256]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034e0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80034e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80034ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ee:	4a3c      	ldr	r2, [pc, #240]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034f0:	430b      	orrs	r3, r1
 80034f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80034f4:	e008      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80034fe:	e003      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003500:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003504:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800350c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003510:	f002 0301 	and.w	r3, r2, #1
 8003514:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003518:	2300      	movs	r3, #0
 800351a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800351e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003522:	460b      	mov	r3, r1
 8003524:	4313      	orrs	r3, r2
 8003526:	f000 808f 	beq.w	8003648 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800352a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800352e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003530:	2b28      	cmp	r3, #40	@ 0x28
 8003532:	d871      	bhi.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003534:	a201      	add	r2, pc, #4	@ (adr r2, 800353c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353a:	bf00      	nop
 800353c:	08003621 	.word	0x08003621
 8003540:	08003619 	.word	0x08003619
 8003544:	08003619 	.word	0x08003619
 8003548:	08003619 	.word	0x08003619
 800354c:	08003619 	.word	0x08003619
 8003550:	08003619 	.word	0x08003619
 8003554:	08003619 	.word	0x08003619
 8003558:	08003619 	.word	0x08003619
 800355c:	080035ed 	.word	0x080035ed
 8003560:	08003619 	.word	0x08003619
 8003564:	08003619 	.word	0x08003619
 8003568:	08003619 	.word	0x08003619
 800356c:	08003619 	.word	0x08003619
 8003570:	08003619 	.word	0x08003619
 8003574:	08003619 	.word	0x08003619
 8003578:	08003619 	.word	0x08003619
 800357c:	08003603 	.word	0x08003603
 8003580:	08003619 	.word	0x08003619
 8003584:	08003619 	.word	0x08003619
 8003588:	08003619 	.word	0x08003619
 800358c:	08003619 	.word	0x08003619
 8003590:	08003619 	.word	0x08003619
 8003594:	08003619 	.word	0x08003619
 8003598:	08003619 	.word	0x08003619
 800359c:	08003621 	.word	0x08003621
 80035a0:	08003619 	.word	0x08003619
 80035a4:	08003619 	.word	0x08003619
 80035a8:	08003619 	.word	0x08003619
 80035ac:	08003619 	.word	0x08003619
 80035b0:	08003619 	.word	0x08003619
 80035b4:	08003619 	.word	0x08003619
 80035b8:	08003619 	.word	0x08003619
 80035bc:	08003621 	.word	0x08003621
 80035c0:	08003619 	.word	0x08003619
 80035c4:	08003619 	.word	0x08003619
 80035c8:	08003619 	.word	0x08003619
 80035cc:	08003619 	.word	0x08003619
 80035d0:	08003619 	.word	0x08003619
 80035d4:	08003619 	.word	0x08003619
 80035d8:	08003619 	.word	0x08003619
 80035dc:	08003621 	.word	0x08003621
 80035e0:	58024400 	.word	0x58024400
 80035e4:	58024800 	.word	0x58024800
 80035e8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035f0:	3308      	adds	r3, #8
 80035f2:	2101      	movs	r1, #1
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 ffa7 	bl	8004548 <RCCEx_PLL2_Config>
 80035fa:	4603      	mov	r3, r0
 80035fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003600:	e00f      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003606:	3328      	adds	r3, #40	@ 0x28
 8003608:	2101      	movs	r1, #1
 800360a:	4618      	mov	r0, r3
 800360c:	f001 f84e 	bl	80046ac <RCCEx_PLL3_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003616:	e004      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800361e:	e000      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003622:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10a      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800362a:	4bbf      	ldr	r3, [pc, #764]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800362c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800362e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003632:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003636:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003638:	4abb      	ldr	r2, [pc, #748]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800363a:	430b      	orrs	r3, r1
 800363c:	6553      	str	r3, [r2, #84]	@ 0x54
 800363e:	e003      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003640:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003644:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800364c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003650:	f002 0302 	and.w	r3, r2, #2
 8003654:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003658:	2300      	movs	r3, #0
 800365a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800365e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003662:	460b      	mov	r3, r1
 8003664:	4313      	orrs	r3, r2
 8003666:	d041      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800366c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800366e:	2b05      	cmp	r3, #5
 8003670:	d824      	bhi.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003672:	a201      	add	r2, pc, #4	@ (adr r2, 8003678 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003678:	080036c5 	.word	0x080036c5
 800367c:	08003691 	.word	0x08003691
 8003680:	080036a7 	.word	0x080036a7
 8003684:	080036c5 	.word	0x080036c5
 8003688:	080036c5 	.word	0x080036c5
 800368c:	080036c5 	.word	0x080036c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003694:	3308      	adds	r3, #8
 8003696:	2101      	movs	r1, #1
 8003698:	4618      	mov	r0, r3
 800369a:	f000 ff55 	bl	8004548 <RCCEx_PLL2_Config>
 800369e:	4603      	mov	r3, r0
 80036a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80036a4:	e00f      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036aa:	3328      	adds	r3, #40	@ 0x28
 80036ac:	2101      	movs	r1, #1
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 fffc 	bl	80046ac <RCCEx_PLL3_Config>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80036ba:	e004      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036c2:	e000      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80036c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10a      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80036ce:	4b96      	ldr	r3, [pc, #600]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80036d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d2:	f023 0107 	bic.w	r1, r3, #7
 80036d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036dc:	4a92      	ldr	r2, [pc, #584]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80036de:	430b      	orrs	r3, r1
 80036e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80036e2:	e003      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f4:	f002 0304 	and.w	r3, r2, #4
 80036f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80036fc:	2300      	movs	r3, #0
 80036fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003702:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003706:	460b      	mov	r3, r1
 8003708:	4313      	orrs	r3, r2
 800370a:	d044      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800370c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003714:	2b05      	cmp	r3, #5
 8003716:	d825      	bhi.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003718:	a201      	add	r2, pc, #4	@ (adr r2, 8003720 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800371a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371e:	bf00      	nop
 8003720:	0800376d 	.word	0x0800376d
 8003724:	08003739 	.word	0x08003739
 8003728:	0800374f 	.word	0x0800374f
 800372c:	0800376d 	.word	0x0800376d
 8003730:	0800376d 	.word	0x0800376d
 8003734:	0800376d 	.word	0x0800376d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800373c:	3308      	adds	r3, #8
 800373e:	2101      	movs	r1, #1
 8003740:	4618      	mov	r0, r3
 8003742:	f000 ff01 	bl	8004548 <RCCEx_PLL2_Config>
 8003746:	4603      	mov	r3, r0
 8003748:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800374c:	e00f      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800374e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003752:	3328      	adds	r3, #40	@ 0x28
 8003754:	2101      	movs	r1, #1
 8003756:	4618      	mov	r0, r3
 8003758:	f000 ffa8 	bl	80046ac <RCCEx_PLL3_Config>
 800375c:	4603      	mov	r3, r0
 800375e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003762:	e004      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800376a:	e000      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800376c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800376e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10b      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003776:	4b6c      	ldr	r3, [pc, #432]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800377a:	f023 0107 	bic.w	r1, r3, #7
 800377e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003786:	4a68      	ldr	r2, [pc, #416]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003788:	430b      	orrs	r3, r1
 800378a:	6593      	str	r3, [r2, #88]	@ 0x58
 800378c:	e003      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003792:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800379a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379e:	f002 0320 	and.w	r3, r2, #32
 80037a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80037a6:	2300      	movs	r3, #0
 80037a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80037ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4313      	orrs	r3, r2
 80037b4:	d055      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80037b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037c2:	d033      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80037c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037c8:	d82c      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80037ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ce:	d02f      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80037d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d4:	d826      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80037d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037da:	d02b      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80037dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037e0:	d820      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80037e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037e6:	d012      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80037e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037ec:	d81a      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d022      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80037f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037f6:	d115      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037fc:	3308      	adds	r3, #8
 80037fe:	2100      	movs	r1, #0
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fea1 	bl	8004548 <RCCEx_PLL2_Config>
 8003806:	4603      	mov	r3, r0
 8003808:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800380c:	e015      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800380e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003812:	3328      	adds	r3, #40	@ 0x28
 8003814:	2102      	movs	r1, #2
 8003816:	4618      	mov	r0, r3
 8003818:	f000 ff48 	bl	80046ac <RCCEx_PLL3_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003822:	e00a      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800382a:	e006      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800382c:	bf00      	nop
 800382e:	e004      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003830:	bf00      	nop
 8003832:	e002      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003834:	bf00      	nop
 8003836:	e000      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800383a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10b      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003842:	4b39      	ldr	r3, [pc, #228]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003846:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800384a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800384e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003852:	4a35      	ldr	r2, [pc, #212]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003854:	430b      	orrs	r3, r1
 8003856:	6553      	str	r3, [r2, #84]	@ 0x54
 8003858:	e003      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800385a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800385e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800386e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003872:	2300      	movs	r3, #0
 8003874:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003878:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800387c:	460b      	mov	r3, r1
 800387e:	4313      	orrs	r3, r2
 8003880:	d058      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003886:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800388a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800388e:	d033      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003890:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003894:	d82c      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800389a:	d02f      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800389c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038a0:	d826      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80038a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038a6:	d02b      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80038a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038ac:	d820      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80038ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038b2:	d012      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80038b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038b8:	d81a      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d022      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80038be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c2:	d115      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038c8:	3308      	adds	r3, #8
 80038ca:	2100      	movs	r1, #0
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fe3b 	bl	8004548 <RCCEx_PLL2_Config>
 80038d2:	4603      	mov	r3, r0
 80038d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80038d8:	e015      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038de:	3328      	adds	r3, #40	@ 0x28
 80038e0:	2102      	movs	r1, #2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fee2 	bl	80046ac <RCCEx_PLL3_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80038ee:	e00a      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80038f6:	e006      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80038f8:	bf00      	nop
 80038fa:	e004      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80038fc:	bf00      	nop
 80038fe:	e002      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003900:	bf00      	nop
 8003902:	e000      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003906:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10e      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800390e:	4b06      	ldr	r3, [pc, #24]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003912:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800391a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800391e:	4a02      	ldr	r2, [pc, #8]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003920:	430b      	orrs	r3, r1
 8003922:	6593      	str	r3, [r2, #88]	@ 0x58
 8003924:	e006      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003926:	bf00      	nop
 8003928:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003930:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003940:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003944:	2300      	movs	r3, #0
 8003946:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800394a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800394e:	460b      	mov	r3, r1
 8003950:	4313      	orrs	r3, r2
 8003952:	d055      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003958:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800395c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003960:	d033      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003962:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003966:	d82c      	bhi.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003968:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800396c:	d02f      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800396e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003972:	d826      	bhi.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003974:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003978:	d02b      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800397a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800397e:	d820      	bhi.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003980:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003984:	d012      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003986:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800398a:	d81a      	bhi.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d022      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003990:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003994:	d115      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800399a:	3308      	adds	r3, #8
 800399c:	2100      	movs	r1, #0
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fdd2 	bl	8004548 <RCCEx_PLL2_Config>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80039aa:	e015      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039b0:	3328      	adds	r3, #40	@ 0x28
 80039b2:	2102      	movs	r1, #2
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 fe79 	bl	80046ac <RCCEx_PLL3_Config>
 80039ba:	4603      	mov	r3, r0
 80039bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80039c0:	e00a      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039c8:	e006      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80039ca:	bf00      	nop
 80039cc:	e004      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80039ce:	bf00      	nop
 80039d0:	e002      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80039d2:	bf00      	nop
 80039d4:	e000      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80039d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10b      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80039e0:	4ba0      	ldr	r3, [pc, #640]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80039e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80039e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039f0:	4a9c      	ldr	r2, [pc, #624]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80039f2:	430b      	orrs	r3, r1
 80039f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80039f6:	e003      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a08:	f002 0308 	and.w	r3, r2, #8
 8003a0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a10:	2300      	movs	r3, #0
 8003a12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003a16:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	d01e      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a32:	3328      	adds	r3, #40	@ 0x28
 8003a34:	2102      	movs	r1, #2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fe38 	bl	80046ac <RCCEx_PLL3_Config>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003a48:	4b86      	ldr	r3, [pc, #536]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a58:	4a82      	ldr	r2, [pc, #520]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003a5a:	430b      	orrs	r3, r1
 8003a5c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a66:	f002 0310 	and.w	r3, r2, #16
 8003a6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a74:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	d01e      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a8a:	d10c      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a90:	3328      	adds	r3, #40	@ 0x28
 8003a92:	2102      	movs	r1, #2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fe09 	bl	80046ac <RCCEx_PLL3_Config>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003aa6:	4b6f      	ldr	r3, [pc, #444]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aaa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ab6:	4a6b      	ldr	r2, [pc, #428]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003ac8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003aca:	2300      	movs	r3, #0
 8003acc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ace:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	d03e      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003adc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003ae0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ae4:	d022      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003ae6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003aea:	d81b      	bhi.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af4:	d00b      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003af6:	e015      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003afc:	3308      	adds	r3, #8
 8003afe:	2100      	movs	r1, #0
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 fd21 	bl	8004548 <RCCEx_PLL2_Config>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003b0c:	e00f      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b12:	3328      	adds	r3, #40	@ 0x28
 8003b14:	2102      	movs	r1, #2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fdc8 	bl	80046ac <RCCEx_PLL3_Config>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003b22:	e004      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b2a:	e000      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003b2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10b      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b36:	4b4b      	ldr	r3, [pc, #300]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003b46:	4a47      	ldr	r2, [pc, #284]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b4c:	e003      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003b62:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b64:	2300      	movs	r3, #0
 8003b66:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b68:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	d03b      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b7e:	d01f      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003b80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b84:	d818      	bhi.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003b86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b8a:	d003      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003b8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b90:	d007      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003b92:	e011      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b94:	4b33      	ldr	r3, [pc, #204]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b98:	4a32      	ldr	r2, [pc, #200]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ba0:	e00f      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ba6:	3328      	adds	r3, #40	@ 0x28
 8003ba8:	2101      	movs	r1, #1
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fd7e 	bl	80046ac <RCCEx_PLL3_Config>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003bb6:	e004      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003bbe:	e000      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10b      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bca:	4b26      	ldr	r3, [pc, #152]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bda:	4a22      	ldr	r2, [pc, #136]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	6553      	str	r3, [r2, #84]	@ 0x54
 8003be0:	e003      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003be6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003bf6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003bfc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003c00:	460b      	mov	r3, r1
 8003c02:	4313      	orrs	r3, r2
 8003c04:	d034      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c14:	d007      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003c16:	e011      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c18:	4b12      	ldr	r3, [pc, #72]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1c:	4a11      	ldr	r2, [pc, #68]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003c24:	e00e      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c2a:	3308      	adds	r3, #8
 8003c2c:	2102      	movs	r1, #2
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fc8a 	bl	8004548 <RCCEx_PLL2_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003c3a:	e003      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10d      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003c4c:	4b05      	ldr	r3, [pc, #20]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c50:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c5a:	4a02      	ldr	r2, [pc, #8]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c60:	e006      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003c62:	bf00      	nop
 8003c64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003c7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c7e:	2300      	movs	r3, #0
 8003c80:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c82:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003c86:	460b      	mov	r3, r1
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	d00c      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c90:	3328      	adds	r3, #40	@ 0x28
 8003c92:	2102      	movs	r1, #2
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 fd09 	bl	80046ac <RCCEx_PLL3_Config>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003cb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cb8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	d036      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ccc:	d018      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003cce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cd2:	d811      	bhi.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003cd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cd8:	d014      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8003cda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cde:	d80b      	bhi.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d011      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003ce4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ce8:	d106      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cea:	4bb7      	ldr	r3, [pc, #732]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cee:	4ab6      	ldr	r2, [pc, #728]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003cf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003cf6:	e008      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003cfe:	e004      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003d00:	bf00      	nop
 8003d02:	e002      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003d04:	bf00      	nop
 8003d06:	e000      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10a      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d12:	4bad      	ldr	r3, [pc, #692]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d16:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d20:	4aa9      	ldr	r2, [pc, #676]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003d22:	430b      	orrs	r3, r1
 8003d24:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d26:	e003      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d38:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003d3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d3e:	2300      	movs	r3, #0
 8003d40:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d42:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003d46:	460b      	mov	r3, r1
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	d009      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d4c:	4b9e      	ldr	r3, [pc, #632]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d50:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5a:	4a9b      	ldr	r2, [pc, #620]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d68:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d6e:	2300      	movs	r3, #0
 8003d70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d72:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003d76:	460b      	mov	r3, r1
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	d009      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d7c:	4b92      	ldr	r3, [pc, #584]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d80:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d8a:	4a8f      	ldr	r2, [pc, #572]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d98:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003d9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d9e:	2300      	movs	r3, #0
 8003da0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003da2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003da6:	460b      	mov	r3, r1
 8003da8:	4313      	orrs	r3, r2
 8003daa:	d00e      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003dac:	4b86      	ldr	r3, [pc, #536]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	4a85      	ldr	r2, [pc, #532]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003db2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003db6:	6113      	str	r3, [r2, #16]
 8003db8:	4b83      	ldr	r3, [pc, #524]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003dba:	6919      	ldr	r1, [r3, #16]
 8003dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003dc4:	4a80      	ldr	r2, [pc, #512]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003dc6:	430b      	orrs	r3, r1
 8003dc8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003dd8:	2300      	movs	r3, #0
 8003dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ddc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003de0:	460b      	mov	r3, r1
 8003de2:	4313      	orrs	r3, r2
 8003de4:	d009      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003de6:	4b78      	ldr	r3, [pc, #480]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dea:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df4:	4a74      	ldr	r2, [pc, #464]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003df6:	430b      	orrs	r3, r1
 8003df8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e02:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003e06:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e08:	2300      	movs	r3, #0
 8003e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e0c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003e10:	460b      	mov	r3, r1
 8003e12:	4313      	orrs	r3, r2
 8003e14:	d00a      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e16:	4b6c      	ldr	r3, [pc, #432]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e1a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e26:	4a68      	ldr	r2, [pc, #416]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e28:	430b      	orrs	r3, r1
 8003e2a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e34:	2100      	movs	r1, #0
 8003e36:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e3e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003e42:	460b      	mov	r3, r1
 8003e44:	4313      	orrs	r3, r2
 8003e46:	d011      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e4c:	3308      	adds	r3, #8
 8003e4e:	2100      	movs	r1, #0
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fb79 	bl	8004548 <RCCEx_PLL2_Config>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003e5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e74:	2100      	movs	r1, #0
 8003e76:	6239      	str	r1, [r7, #32]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e7e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003e82:	460b      	mov	r3, r1
 8003e84:	4313      	orrs	r3, r2
 8003e86:	d011      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e8c:	3308      	adds	r3, #8
 8003e8e:	2101      	movs	r1, #1
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fb59 	bl	8004548 <RCCEx_PLL2_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003e9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ea8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	61b9      	str	r1, [r7, #24]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	61fb      	str	r3, [r7, #28]
 8003ebe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	d011      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ecc:	3308      	adds	r3, #8
 8003ece:	2102      	movs	r1, #2
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fb39 	bl	8004548 <RCCEx_PLL2_Config>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003edc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ee8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	6139      	str	r1, [r7, #16]
 8003ef8:	f003 0308 	and.w	r3, r3, #8
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003f02:	460b      	mov	r3, r1
 8003f04:	4313      	orrs	r3, r2
 8003f06:	d011      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f0c:	3328      	adds	r3, #40	@ 0x28
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fbcb 	bl	80046ac <RCCEx_PLL3_Config>
 8003f16:	4603      	mov	r3, r0
 8003f18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8003f1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f34:	2100      	movs	r1, #0
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003f42:	460b      	mov	r3, r1
 8003f44:	4313      	orrs	r3, r2
 8003f46:	d011      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f4c:	3328      	adds	r3, #40	@ 0x28
 8003f4e:	2101      	movs	r1, #1
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fbab 	bl	80046ac <RCCEx_PLL3_Config>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003f5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f74:	2100      	movs	r1, #0
 8003f76:	6039      	str	r1, [r7, #0]
 8003f78:	f003 0320 	and.w	r3, r3, #32
 8003f7c:	607b      	str	r3, [r7, #4]
 8003f7e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003f82:	460b      	mov	r3, r1
 8003f84:	4313      	orrs	r3, r2
 8003f86:	d011      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f8c:	3328      	adds	r3, #40	@ 0x28
 8003f8e:	2102      	movs	r1, #2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 fb8b 	bl	80046ac <RCCEx_PLL3_Config>
 8003f96:	4603      	mov	r3, r0
 8003f98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003f9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fa8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8003fac:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	e000      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fc6:	bf00      	nop
 8003fc8:	58024400 	.word	0x58024400

08003fcc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003fd0:	f7fe fe00 	bl	8002bd4 <HAL_RCC_GetHCLKFreq>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	4b06      	ldr	r3, [pc, #24]	@ (8003ff0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	091b      	lsrs	r3, r3, #4
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	4904      	ldr	r1, [pc, #16]	@ (8003ff4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003fe2:	5ccb      	ldrb	r3, [r1, r3]
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	58024400 	.word	0x58024400
 8003ff4:	080092b4 	.word	0x080092b4

08003ff8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b089      	sub	sp, #36	@ 0x24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004000:	4ba1      	ldr	r3, [pc, #644]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800400a:	4b9f      	ldr	r3, [pc, #636]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800400c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800400e:	0b1b      	lsrs	r3, r3, #12
 8004010:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004014:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004016:	4b9c      	ldr	r3, [pc, #624]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401a:	091b      	lsrs	r3, r3, #4
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004022:	4b99      	ldr	r3, [pc, #612]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004026:	08db      	lsrs	r3, r3, #3
 8004028:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	fb02 f303 	mul.w	r3, r2, r3
 8004032:	ee07 3a90 	vmov	s15, r3
 8004036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800403a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 8111 	beq.w	8004268 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	2b02      	cmp	r3, #2
 800404a:	f000 8083 	beq.w	8004154 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	2b02      	cmp	r3, #2
 8004052:	f200 80a1 	bhi.w	8004198 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d056      	beq.n	8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004062:	e099      	b.n	8004198 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004064:	4b88      	ldr	r3, [pc, #544]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b00      	cmp	r3, #0
 800406e:	d02d      	beq.n	80040cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004070:	4b85      	ldr	r3, [pc, #532]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	08db      	lsrs	r3, r3, #3
 8004076:	f003 0303 	and.w	r3, r3, #3
 800407a:	4a84      	ldr	r2, [pc, #528]	@ (800428c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800407c:	fa22 f303 	lsr.w	r3, r2, r3
 8004080:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	ee07 3a90 	vmov	s15, r3
 8004088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	ee07 3a90 	vmov	s15, r3
 8004092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800409a:	4b7b      	ldr	r3, [pc, #492]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800409c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80040ae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80040ca:	e087      	b.n	80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	ee07 3a90 	vmov	s15, r3
 80040d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004294 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80040da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040de:	4b6a      	ldr	r3, [pc, #424]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80040f2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800410a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800410e:	e065      	b.n	80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	ee07 3a90 	vmov	s15, r3
 8004116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800411e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004122:	4b59      	ldr	r3, [pc, #356]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004132:	ed97 6a03 	vldr	s12, [r7, #12]
 8004136:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800413a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800413e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800414a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800414e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004152:	e043      	b.n	80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	ee07 3a90 	vmov	s15, r3
 800415a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800429c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004166:	4b48      	ldr	r3, [pc, #288]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800416a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416e:	ee07 3a90 	vmov	s15, r3
 8004172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004176:	ed97 6a03 	vldr	s12, [r7, #12]
 800417a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800417e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800418a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800418e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004196:	e021      	b.n	80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	ee07 3a90 	vmov	s15, r3
 800419e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80041a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041aa:	4b37      	ldr	r3, [pc, #220]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80041be:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80041dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e0:	0a5b      	lsrs	r3, r3, #9
 80041e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041e6:	ee07 3a90 	vmov	s15, r3
 80041ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80041fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004202:	ee17 2a90 	vmov	r2, s15
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800420a:	4b1f      	ldr	r3, [pc, #124]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800420c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420e:	0c1b      	lsrs	r3, r3, #16
 8004210:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004214:	ee07 3a90 	vmov	s15, r3
 8004218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800421c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004220:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004224:	edd7 6a07 	vldr	s13, [r7, #28]
 8004228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800422c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004230:	ee17 2a90 	vmov	r2, s15
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004238:	4b13      	ldr	r3, [pc, #76]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800423a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423c:	0e1b      	lsrs	r3, r3, #24
 800423e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004242:	ee07 3a90 	vmov	s15, r3
 8004246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800424a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800424e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004252:	edd7 6a07 	vldr	s13, [r7, #28]
 8004256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800425a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800425e:	ee17 2a90 	vmov	r2, s15
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004266:	e008      	b.n	800427a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	609a      	str	r2, [r3, #8]
}
 800427a:	bf00      	nop
 800427c:	3724      	adds	r7, #36	@ 0x24
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	58024400 	.word	0x58024400
 800428c:	03d09000 	.word	0x03d09000
 8004290:	46000000 	.word	0x46000000
 8004294:	4c742400 	.word	0x4c742400
 8004298:	4a742400 	.word	0x4a742400
 800429c:	4af42400 	.word	0x4af42400

080042a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b089      	sub	sp, #36	@ 0x24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042a8:	4ba1      	ldr	r3, [pc, #644]	@ (8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ac:	f003 0303 	and.w	r3, r3, #3
 80042b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80042b2:	4b9f      	ldr	r3, [pc, #636]	@ (8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b6:	0d1b      	lsrs	r3, r3, #20
 80042b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80042be:	4b9c      	ldr	r3, [pc, #624]	@ (8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c2:	0a1b      	lsrs	r3, r3, #8
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80042ca:	4b99      	ldr	r3, [pc, #612]	@ (8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ce:	08db      	lsrs	r3, r3, #3
 80042d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	fb02 f303 	mul.w	r3, r2, r3
 80042da:	ee07 3a90 	vmov	s15, r3
 80042de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 8111 	beq.w	8004510 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	f000 8083 	beq.w	80043fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	f200 80a1 	bhi.w	8004440 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d056      	beq.n	80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800430a:	e099      	b.n	8004440 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800430c:	4b88      	ldr	r3, [pc, #544]	@ (8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0320 	and.w	r3, r3, #32
 8004314:	2b00      	cmp	r3, #0
 8004316:	d02d      	beq.n	8004374 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004318:	4b85      	ldr	r3, [pc, #532]	@ (8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	08db      	lsrs	r3, r3, #3
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	4a84      	ldr	r2, [pc, #528]	@ (8004534 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
 8004328:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	ee07 3a90 	vmov	s15, r3
 8004330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004342:	4b7b      	ldr	r3, [pc, #492]	@ (8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004352:	ed97 6a03 	vldr	s12, [r7, #12]
 8004356:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800435a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800435e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800436a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800436e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004372:	e087      	b.n	8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	ee07 3a90 	vmov	s15, r3
 800437a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800437e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800453c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004386:	4b6a      	ldr	r3, [pc, #424]	@ (8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004396:	ed97 6a03 	vldr	s12, [r7, #12]
 800439a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800439e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043b6:	e065      	b.n	8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	ee07 3a90 	vmov	s15, r3
 80043be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80043c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ca:	4b59      	ldr	r3, [pc, #356]	@ (8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043da:	ed97 6a03 	vldr	s12, [r7, #12]
 80043de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043fa:	e043      	b.n	8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004406:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004544 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800440a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800440e:	4b48      	ldr	r3, [pc, #288]	@ (8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004416:	ee07 3a90 	vmov	s15, r3
 800441a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800441e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004422:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800442a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800442e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800443e:	e021      	b.n	8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	ee07 3a90 	vmov	s15, r3
 8004446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800444e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004452:	4b37      	ldr	r3, [pc, #220]	@ (8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445a:	ee07 3a90 	vmov	s15, r3
 800445e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004462:	ed97 6a03 	vldr	s12, [r7, #12]
 8004466:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800446a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800446e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800447a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004482:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004484:	4b2a      	ldr	r3, [pc, #168]	@ (8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004488:	0a5b      	lsrs	r3, r3, #9
 800448a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800448e:	ee07 3a90 	vmov	s15, r3
 8004492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004496:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800449a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800449e:	edd7 6a07 	vldr	s13, [r7, #28]
 80044a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044aa:	ee17 2a90 	vmov	r2, s15
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80044b2:	4b1f      	ldr	r3, [pc, #124]	@ (8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b6:	0c1b      	lsrs	r3, r3, #16
 80044b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044bc:	ee07 3a90 	vmov	s15, r3
 80044c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80044d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044d8:	ee17 2a90 	vmov	r2, s15
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80044e0:	4b13      	ldr	r3, [pc, #76]	@ (8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e4:	0e1b      	lsrs	r3, r3, #24
 80044e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044ea:	ee07 3a90 	vmov	s15, r3
 80044ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80044fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004506:	ee17 2a90 	vmov	r2, s15
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800450e:	e008      	b.n	8004522 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	609a      	str	r2, [r3, #8]
}
 8004522:	bf00      	nop
 8004524:	3724      	adds	r7, #36	@ 0x24
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	58024400 	.word	0x58024400
 8004534:	03d09000 	.word	0x03d09000
 8004538:	46000000 	.word	0x46000000
 800453c:	4c742400 	.word	0x4c742400
 8004540:	4a742400 	.word	0x4a742400
 8004544:	4af42400 	.word	0x4af42400

08004548 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004556:	4b53      	ldr	r3, [pc, #332]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 8004558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	2b03      	cmp	r3, #3
 8004560:	d101      	bne.n	8004566 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e099      	b.n	800469a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004566:	4b4f      	ldr	r3, [pc, #316]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a4e      	ldr	r2, [pc, #312]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 800456c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004570:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004572:	f7fc fea3 	bl	80012bc <HAL_GetTick>
 8004576:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004578:	e008      	b.n	800458c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800457a:	f7fc fe9f 	bl	80012bc <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e086      	b.n	800469a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800458c:	4b45      	ldr	r3, [pc, #276]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1f0      	bne.n	800457a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004598:	4b42      	ldr	r3, [pc, #264]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 800459a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	031b      	lsls	r3, r3, #12
 80045a6:	493f      	ldr	r1, [pc, #252]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	025b      	lsls	r3, r3, #9
 80045be:	b29b      	uxth	r3, r3
 80045c0:	431a      	orrs	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	041b      	lsls	r3, r3, #16
 80045ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	061b      	lsls	r3, r3, #24
 80045d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80045dc:	4931      	ldr	r1, [pc, #196]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80045e2:	4b30      	ldr	r3, [pc, #192]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 80045e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	492d      	ldr	r1, [pc, #180]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80045f4:	4b2b      	ldr	r3, [pc, #172]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 80045f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f8:	f023 0220 	bic.w	r2, r3, #32
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	4928      	ldr	r1, [pc, #160]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 8004602:	4313      	orrs	r3, r2
 8004604:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004606:	4b27      	ldr	r3, [pc, #156]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 8004608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460a:	4a26      	ldr	r2, [pc, #152]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 800460c:	f023 0310 	bic.w	r3, r3, #16
 8004610:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004612:	4b24      	ldr	r3, [pc, #144]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 8004614:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004616:	4b24      	ldr	r3, [pc, #144]	@ (80046a8 <RCCEx_PLL2_Config+0x160>)
 8004618:	4013      	ands	r3, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	69d2      	ldr	r2, [r2, #28]
 800461e:	00d2      	lsls	r2, r2, #3
 8004620:	4920      	ldr	r1, [pc, #128]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 8004622:	4313      	orrs	r3, r2
 8004624:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004626:	4b1f      	ldr	r3, [pc, #124]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 8004628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462a:	4a1e      	ldr	r2, [pc, #120]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 800462c:	f043 0310 	orr.w	r3, r3, #16
 8004630:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d106      	bne.n	8004646 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004638:	4b1a      	ldr	r3, [pc, #104]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 800463a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463c:	4a19      	ldr	r2, [pc, #100]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 800463e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004642:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004644:	e00f      	b.n	8004666 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d106      	bne.n	800465a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800464c:	4b15      	ldr	r3, [pc, #84]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 800464e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004650:	4a14      	ldr	r2, [pc, #80]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 8004652:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004656:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004658:	e005      	b.n	8004666 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800465a:	4b12      	ldr	r3, [pc, #72]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 800465c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465e:	4a11      	ldr	r2, [pc, #68]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 8004660:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004664:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004666:	4b0f      	ldr	r3, [pc, #60]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a0e      	ldr	r2, [pc, #56]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 800466c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004670:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004672:	f7fc fe23 	bl	80012bc <HAL_GetTick>
 8004676:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004678:	e008      	b.n	800468c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800467a:	f7fc fe1f 	bl	80012bc <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e006      	b.n	800469a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800468c:	4b05      	ldr	r3, [pc, #20]	@ (80046a4 <RCCEx_PLL2_Config+0x15c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0f0      	beq.n	800467a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004698:	7bfb      	ldrb	r3, [r7, #15]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	58024400 	.word	0x58024400
 80046a8:	ffff0007 	.word	0xffff0007

080046ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046ba:	4b53      	ldr	r3, [pc, #332]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 80046bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d101      	bne.n	80046ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e099      	b.n	80047fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80046ca:	4b4f      	ldr	r3, [pc, #316]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a4e      	ldr	r2, [pc, #312]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 80046d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046d6:	f7fc fdf1 	bl	80012bc <HAL_GetTick>
 80046da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046dc:	e008      	b.n	80046f0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80046de:	f7fc fded 	bl	80012bc <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e086      	b.n	80047fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046f0:	4b45      	ldr	r3, [pc, #276]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1f0      	bne.n	80046de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80046fc:	4b42      	ldr	r3, [pc, #264]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 80046fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004700:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	051b      	lsls	r3, r3, #20
 800470a:	493f      	ldr	r1, [pc, #252]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 800470c:	4313      	orrs	r3, r2
 800470e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	3b01      	subs	r3, #1
 8004716:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	3b01      	subs	r3, #1
 8004720:	025b      	lsls	r3, r3, #9
 8004722:	b29b      	uxth	r3, r3
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	3b01      	subs	r3, #1
 800472c:	041b      	lsls	r3, r3, #16
 800472e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	3b01      	subs	r3, #1
 800473a:	061b      	lsls	r3, r3, #24
 800473c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004740:	4931      	ldr	r1, [pc, #196]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 8004742:	4313      	orrs	r3, r2
 8004744:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004746:	4b30      	ldr	r3, [pc, #192]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 8004748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	492d      	ldr	r1, [pc, #180]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 8004754:	4313      	orrs	r3, r2
 8004756:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004758:	4b2b      	ldr	r3, [pc, #172]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 800475a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	4928      	ldr	r1, [pc, #160]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 8004766:	4313      	orrs	r3, r2
 8004768:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800476a:	4b27      	ldr	r3, [pc, #156]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 800476c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476e:	4a26      	ldr	r2, [pc, #152]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 8004770:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004774:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004776:	4b24      	ldr	r3, [pc, #144]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 8004778:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800477a:	4b24      	ldr	r3, [pc, #144]	@ (800480c <RCCEx_PLL3_Config+0x160>)
 800477c:	4013      	ands	r3, r2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	69d2      	ldr	r2, [r2, #28]
 8004782:	00d2      	lsls	r2, r2, #3
 8004784:	4920      	ldr	r1, [pc, #128]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 8004786:	4313      	orrs	r3, r2
 8004788:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800478a:	4b1f      	ldr	r3, [pc, #124]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 800478c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478e:	4a1e      	ldr	r2, [pc, #120]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 8004790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004794:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d106      	bne.n	80047aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800479c:	4b1a      	ldr	r3, [pc, #104]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 800479e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a0:	4a19      	ldr	r2, [pc, #100]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 80047a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80047a8:	e00f      	b.n	80047ca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d106      	bne.n	80047be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80047b0:	4b15      	ldr	r3, [pc, #84]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 80047b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b4:	4a14      	ldr	r2, [pc, #80]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 80047b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80047ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80047bc:	e005      	b.n	80047ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80047be:	4b12      	ldr	r3, [pc, #72]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 80047c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c2:	4a11      	ldr	r2, [pc, #68]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 80047c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80047ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a0e      	ldr	r2, [pc, #56]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 80047d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d6:	f7fc fd71 	bl	80012bc <HAL_GetTick>
 80047da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047dc:	e008      	b.n	80047f0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80047de:	f7fc fd6d 	bl	80012bc <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e006      	b.n	80047fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047f0:	4b05      	ldr	r3, [pc, #20]	@ (8004808 <RCCEx_PLL3_Config+0x15c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0f0      	beq.n	80047de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	58024400 	.word	0x58024400
 800480c:	ffff0007 	.word	0xffff0007

08004810 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e10f      	b.n	8004a42 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a87      	ldr	r2, [pc, #540]	@ (8004a4c <HAL_SPI_Init+0x23c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d00f      	beq.n	8004852 <HAL_SPI_Init+0x42>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a86      	ldr	r2, [pc, #536]	@ (8004a50 <HAL_SPI_Init+0x240>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d00a      	beq.n	8004852 <HAL_SPI_Init+0x42>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a84      	ldr	r2, [pc, #528]	@ (8004a54 <HAL_SPI_Init+0x244>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d005      	beq.n	8004852 <HAL_SPI_Init+0x42>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	2b0f      	cmp	r3, #15
 800484c:	d901      	bls.n	8004852 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e0f7      	b.n	8004a42 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fdee 	bl	8005434 <SPI_GetPacketSize>
 8004858:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a7b      	ldr	r2, [pc, #492]	@ (8004a4c <HAL_SPI_Init+0x23c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d00c      	beq.n	800487e <HAL_SPI_Init+0x6e>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a79      	ldr	r2, [pc, #484]	@ (8004a50 <HAL_SPI_Init+0x240>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d007      	beq.n	800487e <HAL_SPI_Init+0x6e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a78      	ldr	r2, [pc, #480]	@ (8004a54 <HAL_SPI_Init+0x244>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d002      	beq.n	800487e <HAL_SPI_Init+0x6e>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2b08      	cmp	r3, #8
 800487c:	d811      	bhi.n	80048a2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004882:	4a72      	ldr	r2, [pc, #456]	@ (8004a4c <HAL_SPI_Init+0x23c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d009      	beq.n	800489c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a70      	ldr	r2, [pc, #448]	@ (8004a50 <HAL_SPI_Init+0x240>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d004      	beq.n	800489c <HAL_SPI_Init+0x8c>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a6f      	ldr	r2, [pc, #444]	@ (8004a54 <HAL_SPI_Init+0x244>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d104      	bne.n	80048a6 <HAL_SPI_Init+0x96>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b10      	cmp	r3, #16
 80048a0:	d901      	bls.n	80048a6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e0cd      	b.n	8004a42 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fc f99e 	bl	8000bfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0201 	bic.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80048e2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048ec:	d119      	bne.n	8004922 <HAL_SPI_Init+0x112>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048f6:	d103      	bne.n	8004900 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d008      	beq.n	8004912 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10c      	bne.n	8004922 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800490c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004910:	d107      	bne.n	8004922 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004920:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00f      	beq.n	800494e <HAL_SPI_Init+0x13e>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	2b06      	cmp	r3, #6
 8004934:	d90b      	bls.n	800494e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	e007      	b.n	800495e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800495c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69da      	ldr	r2, [r3, #28]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004966:	431a      	orrs	r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004970:	ea42 0103 	orr.w	r1, r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	431a      	orrs	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049be:	ea42 0103 	orr.w	r1, r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d113      	bne.n	80049fe <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049e8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049fc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0201 	bic.w	r2, r2, #1
 8004a0c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40013000 	.word	0x40013000
 8004a50:	40003800 	.word	0x40003800
 8004a54:	40003c00 	.word	0x40003c00

08004a58 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size   : amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
 8004a64:	807b      	strh	r3, [r7, #2]
  uint32_t tmp_TxXferCount;
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3320      	adds	r3, #32
 8004a6c:	613b      	str	r3, [r7, #16]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d001      	beq.n	8004a7e <HAL_SPI_TransmitReceive_IT+0x26>
  {
    return HAL_BUSY;
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e0e9      	b.n	8004c52 <HAL_SPI_TransmitReceive_IT+0x1fa>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d005      	beq.n	8004a90 <HAL_SPI_TransmitReceive_IT+0x38>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <HAL_SPI_TransmitReceive_IT+0x38>
 8004a8a:	887b      	ldrh	r3, [r7, #2]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_SPI_TransmitReceive_IT+0x3c>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e0de      	b.n	8004c52 <HAL_SPI_TransmitReceive_IT+0x1fa>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <HAL_SPI_TransmitReceive_IT+0x4a>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e0d7      	b.n	8004c52 <HAL_SPI_TransmitReceive_IT+0x1fa>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2205      	movs	r2, #5
 8004aae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	887a      	ldrh	r2, [r7, #2]
 8004ac4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	887a      	ldrh	r2, [r7, #2]
 8004acc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	887a      	ldrh	r2, [r7, #2]
 8004ada:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	887a      	ldrh	r2, [r7, #2]
 8004ae2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  tmp_TxXferCount   = hspi->TxXferCount;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	617b      	str	r3, [r7, #20]
  hspi->Reload.pTxBuffPtr  = NULL;
  hspi->Reload.TxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	2b0f      	cmp	r3, #15
 8004af6:	d906      	bls.n	8004b06 <HAL_SPI_TransmitReceive_IT+0xae>
  {
    hspi->TxISR     = SPI_TxISR_32BIT;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4a59      	ldr	r2, [pc, #356]	@ (8004c60 <HAL_SPI_TransmitReceive_IT+0x208>)
 8004afc:	675a      	str	r2, [r3, #116]	@ 0x74
    hspi->RxISR     = SPI_RxISR_32BIT;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4a58      	ldr	r2, [pc, #352]	@ (8004c64 <HAL_SPI_TransmitReceive_IT+0x20c>)
 8004b02:	671a      	str	r2, [r3, #112]	@ 0x70
 8004b04:	e010      	b.n	8004b28 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	2b07      	cmp	r3, #7
 8004b0c:	d906      	bls.n	8004b1c <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_RxISR_16BIT;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	4a55      	ldr	r2, [pc, #340]	@ (8004c68 <HAL_SPI_TransmitReceive_IT+0x210>)
 8004b12:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->TxISR     = SPI_TxISR_16BIT;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4a55      	ldr	r2, [pc, #340]	@ (8004c6c <HAL_SPI_TransmitReceive_IT+0x214>)
 8004b18:	675a      	str	r2, [r3, #116]	@ 0x74
 8004b1a:	e005      	b.n	8004b28 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_RxISR_8BIT;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4a54      	ldr	r2, [pc, #336]	@ (8004c70 <HAL_SPI_TransmitReceive_IT+0x218>)
 8004b20:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->TxISR     = SPI_TxISR_8BIT;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4a53      	ldr	r2, [pc, #332]	@ (8004c74 <HAL_SPI_TransmitReceive_IT+0x21c>)
 8004b26:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8004b36:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	4b4e      	ldr	r3, [pc, #312]	@ (8004c78 <HAL_SPI_TransmitReceive_IT+0x220>)
 8004b40:	4013      	ands	r3, r2
 8004b42:	8879      	ldrh	r1, [r7, #2]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]

  /* Fill in the TxFIFO */
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 8004b5c:	e054      	b.n	8004c08 <HAL_SPI_TransmitReceive_IT+0x1b0>
  {
    /* Transmit data in 32 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	2b0f      	cmp	r3, #15
 8004b64:	d919      	bls.n	8004b9a <HAL_SPI_TransmitReceive_IT+0x142>
    {
      *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	621a      	str	r2, [r3, #32]
      hspi->pTxBuffPtr += sizeof(uint32_t);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b76:	1d1a      	adds	r2, r3, #4
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	e036      	b.n	8004c08 <HAL_SPI_TransmitReceive_IT+0x1b0>
    }
    /* Transmit data in 16 Bit mode */
    else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	2b07      	cmp	r3, #7
 8004ba0:	d918      	bls.n	8004bd4 <HAL_SPI_TransmitReceive_IT+0x17c>
    {
#if defined (__GNUC__)
      *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba6:	881a      	ldrh	r2, [r3, #0]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	801a      	strh	r2, [r3, #0]
#else
      *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb0:	1c9a      	adds	r2, r3, #2
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	617b      	str	r3, [r7, #20]
 8004bd2:	e019      	b.n	8004c08 <HAL_SPI_TransmitReceive_IT+0x1b0>
    }
    /* Transmit data in 8 Bit mode */
    else
    {
      *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	3320      	adds	r3, #32
 8004bde:	7812      	ldrb	r2, [r2, #0]
 8004be0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004be6:	1c5a      	adds	r2, r3, #1
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d102      	bne.n	8004c1c <HAL_SPI_TransmitReceive_IT+0x1c4>
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1a0      	bne.n	8004b5e <HAL_SPI_TransmitReceive_IT+0x106>
    }
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, DXP, UDR, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR |
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6919      	ldr	r1, [r3, #16]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	f240 736c 	movw	r3, #1900	@ 0x76c
 8004c32:	430b      	orrs	r3, r1
 8004c34:	6113      	str	r3, [r2, #16]
                             SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c3e:	d107      	bne.n	8004c50 <HAL_SPI_TransmitReceive_IT+0x1f8>
  {
    /* Start Master transfer */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c4e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	371c      	adds	r7, #28
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	0800529b 	.word	0x0800529b
 8004c64:	0800518b 	.word	0x0800518b
 8004c68:	0800512b 	.word	0x0800512b
 8004c6c:	0800523d 	.word	0x0800523d
 8004c70:	080050cd 	.word	0x080050cd
 8004c74:	080051e3 	.word	0x080051e3
 8004c78:	ffff0000 	.word	0xffff0000

08004c7c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08a      	sub	sp, #40	@ 0x28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8004c94:	6a3a      	ldr	r2, [r7, #32]
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004cae:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3330      	adds	r3, #48	@ 0x30
 8004cb6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d010      	beq.n	8004ce4 <HAL_SPI_IRQHandler+0x68>
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00b      	beq.n	8004ce4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699a      	ldr	r2, [r3, #24]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cda:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f9c3 	bl	8005068 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8004ce2:	e192      	b.n	800500a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d113      	bne.n	8004d16 <HAL_SPI_IRQHandler+0x9a>
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10e      	bne.n	8004d16 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d009      	beq.n	8004d16 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	4798      	blx	r3
    hspi->RxISR(hspi);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	4798      	blx	r3
    handled = 1UL;
 8004d12:	2301      	movs	r3, #1
 8004d14:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10f      	bne.n	8004d40 <HAL_SPI_IRQHandler+0xc4>
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d105      	bne.n	8004d40 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	4798      	blx	r3
    handled = 1UL;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10f      	bne.n	8004d6a <HAL_SPI_IRQHandler+0xee>
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00a      	beq.n	8004d6a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d105      	bne.n	8004d6a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	4798      	blx	r3
    handled = 1UL;
 8004d66:	2301      	movs	r3, #1
 8004d68:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f040 8147 	bne.w	8005000 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 808b 	beq.w	8004e94 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699a      	ldr	r2, [r3, #24]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0208 	orr.w	r2, r2, #8
 8004d8c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	699a      	ldr	r2, [r3, #24]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f042 0210 	orr.w	r2, r2, #16
 8004d9c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	699a      	ldr	r2, [r3, #24]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dac:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0208 	bic.w	r2, r2, #8
 8004dbc:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d13d      	bne.n	8004e48 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8004dcc:	e036      	b.n	8004e3c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	2b0f      	cmp	r3, #15
 8004dd4:	d90b      	bls.n	8004dee <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dde:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004de0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004de6:	1d1a      	adds	r2, r3, #4
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	665a      	str	r2, [r3, #100]	@ 0x64
 8004dec:	e01d      	b.n	8004e2a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	2b07      	cmp	r3, #7
 8004df4:	d90b      	bls.n	8004e0e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	8812      	ldrh	r2, [r2, #0]
 8004dfe:	b292      	uxth	r2, r2
 8004e00:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e06:	1c9a      	adds	r2, r3, #2
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	665a      	str	r2, [r3, #100]	@ 0x64
 8004e0c:	e00d      	b.n	8004e2a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e1a:	7812      	ldrb	r2, [r2, #0]
 8004e1c:	b2d2      	uxtb	r2, r2
 8004e1e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1c2      	bne.n	8004dce <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fa53 	bl	80052f4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f8f7 	bl	8005054 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004e66:	e0d0      	b.n	800500a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8004e68:	7cfb      	ldrb	r3, [r7, #19]
 8004e6a:	2b05      	cmp	r3, #5
 8004e6c:	d103      	bne.n	8004e76 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f8e6 	bl	8005040 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8004e74:	e0c6      	b.n	8005004 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8004e76:	7cfb      	ldrb	r3, [r7, #19]
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d103      	bne.n	8004e84 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f8d5 	bl	800502c <HAL_SPI_RxCpltCallback>
    return;
 8004e82:	e0bf      	b.n	8005004 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8004e84:	7cfb      	ldrb	r3, [r7, #19]
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	f040 80bc 	bne.w	8005004 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f8c3 	bl	8005018 <HAL_SPI_TxCpltCallback>
    return;
 8004e92:	e0b7      	b.n	8005004 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 80b5 	beq.w	800500a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00f      	beq.n	8004eca <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004eb0:	f043 0204 	orr.w	r2, r3, #4
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	699a      	ldr	r2, [r3, #24]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ec8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00f      	beq.n	8004ef4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004eda:	f043 0201 	orr.w	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699a      	ldr	r2, [r3, #24]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ef2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00f      	beq.n	8004f1e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f04:	f043 0208 	orr.w	r2, r3, #8
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	699a      	ldr	r2, [r3, #24]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f1c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	f003 0320 	and.w	r3, r3, #32
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00f      	beq.n	8004f48 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f2e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699a      	ldr	r2, [r3, #24]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0220 	orr.w	r2, r2, #32
 8004f46:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d05a      	beq.n	8005008 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0201 	bic.w	r2, r2, #1
 8004f60:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6919      	ldr	r1, [r3, #16]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	4b28      	ldr	r3, [pc, #160]	@ (8005010 <HAL_SPI_IRQHandler+0x394>)
 8004f6e:	400b      	ands	r3, r1
 8004f70:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004f78:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004f7c:	d138      	bne.n	8004ff0 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8004f8c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d013      	beq.n	8004fbe <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8005014 <HAL_SPI_IRQHandler+0x398>)
 8004f9c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fc faca 	bl	800153c <HAL_DMA_Abort_IT>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d007      	beq.n	8004fbe <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fb4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d020      	beq.n	8005008 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fca:	4a12      	ldr	r2, [pc, #72]	@ (8005014 <HAL_SPI_IRQHandler+0x398>)
 8004fcc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fc fab2 	bl	800153c <HAL_DMA_Abort_IT>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d014      	beq.n	8005008 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fe4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004fee:	e00b      	b.n	8005008 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f82b 	bl	8005054 <HAL_SPI_ErrorCallback>
    return;
 8004ffe:	e003      	b.n	8005008 <HAL_SPI_IRQHandler+0x38c>
    return;
 8005000:	bf00      	nop
 8005002:	e002      	b.n	800500a <HAL_SPI_IRQHandler+0x38e>
    return;
 8005004:	bf00      	nop
 8005006:	e000      	b.n	800500a <HAL_SPI_IRQHandler+0x38e>
    return;
 8005008:	bf00      	nop
  }
}
 800500a:	3728      	adds	r7, #40	@ 0x28
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	fffffc94 	.word	0xfffffc94
 8005014:	08005099 	.word	0x08005099

08005018 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800508a:	b2db      	uxtb	r3, r3
}
 800508c:	4618      	mov	r0, r3
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f7ff ffc8 	bl	8005054 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050c4:	bf00      	nop
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050e0:	7812      	ldrb	r2, [r2, #0]
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005108:	b29b      	uxth	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d107      	bne.n	800511e <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	691a      	ldr	r2, [r3, #16]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 0201 	bic.w	r2, r2, #1
 800511c:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 800512a:	b480      	push	{r7}
 800512c:	b085      	sub	sp, #20
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3330      	adds	r3, #48	@ 0x30
 8005138:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	8812      	ldrh	r2, [r2, #0]
 8005142:	b292      	uxth	r2, r2
 8005144:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800514a:	1c9a      	adds	r2, r3, #2
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005156:	b29b      	uxth	r3, r3
 8005158:	3b01      	subs	r3, #1
 800515a:	b29a      	uxth	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005168:	b29b      	uxth	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d107      	bne.n	800517e <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 0201 	bic.w	r2, r2, #1
 800517c:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800517e:	bf00      	nop
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800519a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800519c:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051a2:	1d1a      	adds	r2, r3, #4
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	3b01      	subs	r3, #1
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d107      	bne.n	80051d6 <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	691a      	ldr	r2, [r3, #16]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 0201 	bic.w	r2, r2, #1
 80051d4:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((const uint8_t *)hspi->pTxBuffPtr);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3320      	adds	r3, #32
 80051f4:	7812      	ldrb	r2, [r2, #0]
 80051f6:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005208:	b29b      	uxth	r3, r3
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800521a:	b29b      	uxth	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d107      	bne.n	8005230 <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691a      	ldr	r2, [r3, #16]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 0202 	bic.w	r2, r2, #2
 800522e:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	3320      	adds	r3, #32
 800524a:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005250:	881a      	ldrh	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800525a:	1c9a      	adds	r2, r3, #2
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d107      	bne.n	800528e <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	691a      	ldr	r2, [r3, #16]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0202 	bic.w	r2, r2, #2
 800528c:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800528e:	bf00      	nop
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6812      	ldr	r2, [r2, #0]
 80052ac:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052b2:	1d1a      	adds	r2, r3, #4
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80052be:	b29b      	uxth	r3, r3
 80052c0:	3b01      	subs	r3, #1
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d107      	bne.n	80052e6 <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	691a      	ldr	r2, [r3, #16]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0202 	bic.w	r2, r2, #2
 80052e4:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
	...

080052f4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	699a      	ldr	r2, [r3, #24]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0208 	orr.w	r2, r2, #8
 8005312:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699a      	ldr	r2, [r3, #24]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f042 0210 	orr.w	r2, r2, #16
 8005322:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0201 	bic.w	r2, r2, #1
 8005332:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6919      	ldr	r1, [r3, #16]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	4b3c      	ldr	r3, [pc, #240]	@ (8005430 <SPI_CloseTransfer+0x13c>)
 8005340:	400b      	ands	r3, r1
 8005342:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689a      	ldr	r2, [r3, #8]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005352:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b04      	cmp	r3, #4
 800535e:	d014      	beq.n	800538a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f003 0320 	and.w	r3, r3, #32
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00f      	beq.n	800538a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005370:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699a      	ldr	r2, [r3, #24]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f042 0220 	orr.w	r2, r2, #32
 8005388:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b03      	cmp	r3, #3
 8005394:	d014      	beq.n	80053c0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00f      	beq.n	80053c0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053a6:	f043 0204 	orr.w	r2, r3, #4
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053be:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00f      	beq.n	80053ea <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053d0:	f043 0201 	orr.w	r2, r3, #1
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699a      	ldr	r2, [r3, #24]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053e8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00f      	beq.n	8005414 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053fa:	f043 0208 	orr.w	r2, r3, #8
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699a      	ldr	r2, [r3, #24]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005412:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8005424:	bf00      	nop
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	fffffc90 	.word	0xfffffc90

08005434 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005440:	095b      	lsrs	r3, r3, #5
 8005442:	3301      	adds	r3, #1
 8005444:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	3301      	adds	r3, #1
 800544c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	3307      	adds	r3, #7
 8005452:	08db      	lsrs	r3, r3, #3
 8005454:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	fb02 f303 	mul.w	r3, r2, r3
}
 800545e:	4618      	mov	r0, r3
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b082      	sub	sp, #8
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e042      	b.n	8005502 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005482:	2b00      	cmp	r3, #0
 8005484:	d106      	bne.n	8005494 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7fb fdfa 	bl	8001088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2224      	movs	r2, #36	@ 0x24
 8005498:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0201 	bic.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 ff23 	bl	8006300 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f8b4 	bl	8005628 <UART_SetConfig>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d101      	bne.n	80054ca <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e01b      	b.n	8005502 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f042 0201 	orr.w	r2, r2, #1
 80054f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 ffa2 	bl	8006444 <UART_CheckIdleState>
 8005500:	4603      	mov	r3, r0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b08a      	sub	sp, #40	@ 0x28
 800550e:	af02      	add	r7, sp, #8
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	603b      	str	r3, [r7, #0]
 8005516:	4613      	mov	r3, r2
 8005518:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005520:	2b20      	cmp	r3, #32
 8005522:	d17b      	bne.n	800561c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <HAL_UART_Transmit+0x26>
 800552a:	88fb      	ldrh	r3, [r7, #6]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e074      	b.n	800561e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2221      	movs	r2, #33	@ 0x21
 8005540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005544:	f7fb feba 	bl	80012bc <HAL_GetTick>
 8005548:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	88fa      	ldrh	r2, [r7, #6]
 800554e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	88fa      	ldrh	r2, [r7, #6]
 8005556:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005562:	d108      	bne.n	8005576 <HAL_UART_Transmit+0x6c>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d104      	bne.n	8005576 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800556c:	2300      	movs	r3, #0
 800556e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	61bb      	str	r3, [r7, #24]
 8005574:	e003      	b.n	800557e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800557a:	2300      	movs	r3, #0
 800557c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800557e:	e030      	b.n	80055e2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2200      	movs	r2, #0
 8005588:	2180      	movs	r1, #128	@ 0x80
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f001 f804 	bl	8006598 <UART_WaitOnFlagUntilTimeout>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d005      	beq.n	80055a2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2220      	movs	r2, #32
 800559a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e03d      	b.n	800561e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10b      	bne.n	80055c0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	461a      	mov	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	3302      	adds	r3, #2
 80055bc:	61bb      	str	r3, [r7, #24]
 80055be:	e007      	b.n	80055d0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	781a      	ldrb	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	3301      	adds	r3, #1
 80055ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	3b01      	subs	r3, #1
 80055da:	b29a      	uxth	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1c8      	bne.n	8005580 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2200      	movs	r2, #0
 80055f6:	2140      	movs	r1, #64	@ 0x40
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 ffcd 	bl	8006598 <UART_WaitOnFlagUntilTimeout>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d005      	beq.n	8005610 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2220      	movs	r2, #32
 8005608:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e006      	b.n	800561e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2220      	movs	r2, #32
 8005614:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	e000      	b.n	800561e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800561c:	2302      	movs	r3, #2
  }
}
 800561e:	4618      	mov	r0, r3
 8005620:	3720      	adds	r7, #32
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
	...

08005628 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800562c:	b092      	sub	sp, #72	@ 0x48
 800562e:	af00      	add	r7, sp, #0
 8005630:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005632:	2300      	movs	r3, #0
 8005634:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	431a      	orrs	r2, r3
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	431a      	orrs	r2, r3
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	4313      	orrs	r3, r2
 800564e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	4bbe      	ldr	r3, [pc, #760]	@ (8005950 <UART_SetConfig+0x328>)
 8005658:	4013      	ands	r3, r2
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	6812      	ldr	r2, [r2, #0]
 800565e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005660:	430b      	orrs	r3, r1
 8005662:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	68da      	ldr	r2, [r3, #12]
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4ab3      	ldr	r2, [pc, #716]	@ (8005954 <UART_SetConfig+0x32c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d004      	beq.n	8005694 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005690:	4313      	orrs	r3, r2
 8005692:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689a      	ldr	r2, [r3, #8]
 800569a:	4baf      	ldr	r3, [pc, #700]	@ (8005958 <UART_SetConfig+0x330>)
 800569c:	4013      	ands	r3, r2
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	6812      	ldr	r2, [r2, #0]
 80056a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80056a4:	430b      	orrs	r3, r1
 80056a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ae:	f023 010f 	bic.w	r1, r3, #15
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4aa6      	ldr	r2, [pc, #664]	@ (800595c <UART_SetConfig+0x334>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d177      	bne.n	80057b8 <UART_SetConfig+0x190>
 80056c8:	4ba5      	ldr	r3, [pc, #660]	@ (8005960 <UART_SetConfig+0x338>)
 80056ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056d0:	2b28      	cmp	r3, #40	@ 0x28
 80056d2:	d86d      	bhi.n	80057b0 <UART_SetConfig+0x188>
 80056d4:	a201      	add	r2, pc, #4	@ (adr r2, 80056dc <UART_SetConfig+0xb4>)
 80056d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056da:	bf00      	nop
 80056dc:	08005781 	.word	0x08005781
 80056e0:	080057b1 	.word	0x080057b1
 80056e4:	080057b1 	.word	0x080057b1
 80056e8:	080057b1 	.word	0x080057b1
 80056ec:	080057b1 	.word	0x080057b1
 80056f0:	080057b1 	.word	0x080057b1
 80056f4:	080057b1 	.word	0x080057b1
 80056f8:	080057b1 	.word	0x080057b1
 80056fc:	08005789 	.word	0x08005789
 8005700:	080057b1 	.word	0x080057b1
 8005704:	080057b1 	.word	0x080057b1
 8005708:	080057b1 	.word	0x080057b1
 800570c:	080057b1 	.word	0x080057b1
 8005710:	080057b1 	.word	0x080057b1
 8005714:	080057b1 	.word	0x080057b1
 8005718:	080057b1 	.word	0x080057b1
 800571c:	08005791 	.word	0x08005791
 8005720:	080057b1 	.word	0x080057b1
 8005724:	080057b1 	.word	0x080057b1
 8005728:	080057b1 	.word	0x080057b1
 800572c:	080057b1 	.word	0x080057b1
 8005730:	080057b1 	.word	0x080057b1
 8005734:	080057b1 	.word	0x080057b1
 8005738:	080057b1 	.word	0x080057b1
 800573c:	08005799 	.word	0x08005799
 8005740:	080057b1 	.word	0x080057b1
 8005744:	080057b1 	.word	0x080057b1
 8005748:	080057b1 	.word	0x080057b1
 800574c:	080057b1 	.word	0x080057b1
 8005750:	080057b1 	.word	0x080057b1
 8005754:	080057b1 	.word	0x080057b1
 8005758:	080057b1 	.word	0x080057b1
 800575c:	080057a1 	.word	0x080057a1
 8005760:	080057b1 	.word	0x080057b1
 8005764:	080057b1 	.word	0x080057b1
 8005768:	080057b1 	.word	0x080057b1
 800576c:	080057b1 	.word	0x080057b1
 8005770:	080057b1 	.word	0x080057b1
 8005774:	080057b1 	.word	0x080057b1
 8005778:	080057b1 	.word	0x080057b1
 800577c:	080057a9 	.word	0x080057a9
 8005780:	2301      	movs	r3, #1
 8005782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005786:	e326      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005788:	2304      	movs	r3, #4
 800578a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800578e:	e322      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005790:	2308      	movs	r3, #8
 8005792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005796:	e31e      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005798:	2310      	movs	r3, #16
 800579a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800579e:	e31a      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 80057a0:	2320      	movs	r3, #32
 80057a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057a6:	e316      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 80057a8:	2340      	movs	r3, #64	@ 0x40
 80057aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ae:	e312      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 80057b0:	2380      	movs	r3, #128	@ 0x80
 80057b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057b6:	e30e      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a69      	ldr	r2, [pc, #420]	@ (8005964 <UART_SetConfig+0x33c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d130      	bne.n	8005824 <UART_SetConfig+0x1fc>
 80057c2:	4b67      	ldr	r3, [pc, #412]	@ (8005960 <UART_SetConfig+0x338>)
 80057c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	2b05      	cmp	r3, #5
 80057cc:	d826      	bhi.n	800581c <UART_SetConfig+0x1f4>
 80057ce:	a201      	add	r2, pc, #4	@ (adr r2, 80057d4 <UART_SetConfig+0x1ac>)
 80057d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d4:	080057ed 	.word	0x080057ed
 80057d8:	080057f5 	.word	0x080057f5
 80057dc:	080057fd 	.word	0x080057fd
 80057e0:	08005805 	.word	0x08005805
 80057e4:	0800580d 	.word	0x0800580d
 80057e8:	08005815 	.word	0x08005815
 80057ec:	2300      	movs	r3, #0
 80057ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057f2:	e2f0      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 80057f4:	2304      	movs	r3, #4
 80057f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057fa:	e2ec      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 80057fc:	2308      	movs	r3, #8
 80057fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005802:	e2e8      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005804:	2310      	movs	r3, #16
 8005806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800580a:	e2e4      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 800580c:	2320      	movs	r3, #32
 800580e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005812:	e2e0      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005814:	2340      	movs	r3, #64	@ 0x40
 8005816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800581a:	e2dc      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 800581c:	2380      	movs	r3, #128	@ 0x80
 800581e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005822:	e2d8      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a4f      	ldr	r2, [pc, #316]	@ (8005968 <UART_SetConfig+0x340>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d130      	bne.n	8005890 <UART_SetConfig+0x268>
 800582e:	4b4c      	ldr	r3, [pc, #304]	@ (8005960 <UART_SetConfig+0x338>)
 8005830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005832:	f003 0307 	and.w	r3, r3, #7
 8005836:	2b05      	cmp	r3, #5
 8005838:	d826      	bhi.n	8005888 <UART_SetConfig+0x260>
 800583a:	a201      	add	r2, pc, #4	@ (adr r2, 8005840 <UART_SetConfig+0x218>)
 800583c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005840:	08005859 	.word	0x08005859
 8005844:	08005861 	.word	0x08005861
 8005848:	08005869 	.word	0x08005869
 800584c:	08005871 	.word	0x08005871
 8005850:	08005879 	.word	0x08005879
 8005854:	08005881 	.word	0x08005881
 8005858:	2300      	movs	r3, #0
 800585a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800585e:	e2ba      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005860:	2304      	movs	r3, #4
 8005862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005866:	e2b6      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005868:	2308      	movs	r3, #8
 800586a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800586e:	e2b2      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005870:	2310      	movs	r3, #16
 8005872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005876:	e2ae      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005878:	2320      	movs	r3, #32
 800587a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800587e:	e2aa      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005880:	2340      	movs	r3, #64	@ 0x40
 8005882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005886:	e2a6      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005888:	2380      	movs	r3, #128	@ 0x80
 800588a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800588e:	e2a2      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a35      	ldr	r2, [pc, #212]	@ (800596c <UART_SetConfig+0x344>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d130      	bne.n	80058fc <UART_SetConfig+0x2d4>
 800589a:	4b31      	ldr	r3, [pc, #196]	@ (8005960 <UART_SetConfig+0x338>)
 800589c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	2b05      	cmp	r3, #5
 80058a4:	d826      	bhi.n	80058f4 <UART_SetConfig+0x2cc>
 80058a6:	a201      	add	r2, pc, #4	@ (adr r2, 80058ac <UART_SetConfig+0x284>)
 80058a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ac:	080058c5 	.word	0x080058c5
 80058b0:	080058cd 	.word	0x080058cd
 80058b4:	080058d5 	.word	0x080058d5
 80058b8:	080058dd 	.word	0x080058dd
 80058bc:	080058e5 	.word	0x080058e5
 80058c0:	080058ed 	.word	0x080058ed
 80058c4:	2300      	movs	r3, #0
 80058c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ca:	e284      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 80058cc:	2304      	movs	r3, #4
 80058ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058d2:	e280      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 80058d4:	2308      	movs	r3, #8
 80058d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058da:	e27c      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 80058dc:	2310      	movs	r3, #16
 80058de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058e2:	e278      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 80058e4:	2320      	movs	r3, #32
 80058e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ea:	e274      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 80058ec:	2340      	movs	r3, #64	@ 0x40
 80058ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058f2:	e270      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 80058f4:	2380      	movs	r3, #128	@ 0x80
 80058f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058fa:	e26c      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a1b      	ldr	r2, [pc, #108]	@ (8005970 <UART_SetConfig+0x348>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d142      	bne.n	800598c <UART_SetConfig+0x364>
 8005906:	4b16      	ldr	r3, [pc, #88]	@ (8005960 <UART_SetConfig+0x338>)
 8005908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	2b05      	cmp	r3, #5
 8005910:	d838      	bhi.n	8005984 <UART_SetConfig+0x35c>
 8005912:	a201      	add	r2, pc, #4	@ (adr r2, 8005918 <UART_SetConfig+0x2f0>)
 8005914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005918:	08005931 	.word	0x08005931
 800591c:	08005939 	.word	0x08005939
 8005920:	08005941 	.word	0x08005941
 8005924:	08005949 	.word	0x08005949
 8005928:	08005975 	.word	0x08005975
 800592c:	0800597d 	.word	0x0800597d
 8005930:	2300      	movs	r3, #0
 8005932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005936:	e24e      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005938:	2304      	movs	r3, #4
 800593a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800593e:	e24a      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005940:	2308      	movs	r3, #8
 8005942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005946:	e246      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005948:	2310      	movs	r3, #16
 800594a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800594e:	e242      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005950:	cfff69f3 	.word	0xcfff69f3
 8005954:	58000c00 	.word	0x58000c00
 8005958:	11fff4ff 	.word	0x11fff4ff
 800595c:	40011000 	.word	0x40011000
 8005960:	58024400 	.word	0x58024400
 8005964:	40004400 	.word	0x40004400
 8005968:	40004800 	.word	0x40004800
 800596c:	40004c00 	.word	0x40004c00
 8005970:	40005000 	.word	0x40005000
 8005974:	2320      	movs	r3, #32
 8005976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800597a:	e22c      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 800597c:	2340      	movs	r3, #64	@ 0x40
 800597e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005982:	e228      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005984:	2380      	movs	r3, #128	@ 0x80
 8005986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800598a:	e224      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4ab1      	ldr	r2, [pc, #708]	@ (8005c58 <UART_SetConfig+0x630>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d176      	bne.n	8005a84 <UART_SetConfig+0x45c>
 8005996:	4bb1      	ldr	r3, [pc, #708]	@ (8005c5c <UART_SetConfig+0x634>)
 8005998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800599a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800599e:	2b28      	cmp	r3, #40	@ 0x28
 80059a0:	d86c      	bhi.n	8005a7c <UART_SetConfig+0x454>
 80059a2:	a201      	add	r2, pc, #4	@ (adr r2, 80059a8 <UART_SetConfig+0x380>)
 80059a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a8:	08005a4d 	.word	0x08005a4d
 80059ac:	08005a7d 	.word	0x08005a7d
 80059b0:	08005a7d 	.word	0x08005a7d
 80059b4:	08005a7d 	.word	0x08005a7d
 80059b8:	08005a7d 	.word	0x08005a7d
 80059bc:	08005a7d 	.word	0x08005a7d
 80059c0:	08005a7d 	.word	0x08005a7d
 80059c4:	08005a7d 	.word	0x08005a7d
 80059c8:	08005a55 	.word	0x08005a55
 80059cc:	08005a7d 	.word	0x08005a7d
 80059d0:	08005a7d 	.word	0x08005a7d
 80059d4:	08005a7d 	.word	0x08005a7d
 80059d8:	08005a7d 	.word	0x08005a7d
 80059dc:	08005a7d 	.word	0x08005a7d
 80059e0:	08005a7d 	.word	0x08005a7d
 80059e4:	08005a7d 	.word	0x08005a7d
 80059e8:	08005a5d 	.word	0x08005a5d
 80059ec:	08005a7d 	.word	0x08005a7d
 80059f0:	08005a7d 	.word	0x08005a7d
 80059f4:	08005a7d 	.word	0x08005a7d
 80059f8:	08005a7d 	.word	0x08005a7d
 80059fc:	08005a7d 	.word	0x08005a7d
 8005a00:	08005a7d 	.word	0x08005a7d
 8005a04:	08005a7d 	.word	0x08005a7d
 8005a08:	08005a65 	.word	0x08005a65
 8005a0c:	08005a7d 	.word	0x08005a7d
 8005a10:	08005a7d 	.word	0x08005a7d
 8005a14:	08005a7d 	.word	0x08005a7d
 8005a18:	08005a7d 	.word	0x08005a7d
 8005a1c:	08005a7d 	.word	0x08005a7d
 8005a20:	08005a7d 	.word	0x08005a7d
 8005a24:	08005a7d 	.word	0x08005a7d
 8005a28:	08005a6d 	.word	0x08005a6d
 8005a2c:	08005a7d 	.word	0x08005a7d
 8005a30:	08005a7d 	.word	0x08005a7d
 8005a34:	08005a7d 	.word	0x08005a7d
 8005a38:	08005a7d 	.word	0x08005a7d
 8005a3c:	08005a7d 	.word	0x08005a7d
 8005a40:	08005a7d 	.word	0x08005a7d
 8005a44:	08005a7d 	.word	0x08005a7d
 8005a48:	08005a75 	.word	0x08005a75
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a52:	e1c0      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005a54:	2304      	movs	r3, #4
 8005a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a5a:	e1bc      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005a5c:	2308      	movs	r3, #8
 8005a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a62:	e1b8      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005a64:	2310      	movs	r3, #16
 8005a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a6a:	e1b4      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005a6c:	2320      	movs	r3, #32
 8005a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a72:	e1b0      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005a74:	2340      	movs	r3, #64	@ 0x40
 8005a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a7a:	e1ac      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005a7c:	2380      	movs	r3, #128	@ 0x80
 8005a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a82:	e1a8      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a75      	ldr	r2, [pc, #468]	@ (8005c60 <UART_SetConfig+0x638>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d130      	bne.n	8005af0 <UART_SetConfig+0x4c8>
 8005a8e:	4b73      	ldr	r3, [pc, #460]	@ (8005c5c <UART_SetConfig+0x634>)
 8005a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	2b05      	cmp	r3, #5
 8005a98:	d826      	bhi.n	8005ae8 <UART_SetConfig+0x4c0>
 8005a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa0 <UART_SetConfig+0x478>)
 8005a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa0:	08005ab9 	.word	0x08005ab9
 8005aa4:	08005ac1 	.word	0x08005ac1
 8005aa8:	08005ac9 	.word	0x08005ac9
 8005aac:	08005ad1 	.word	0x08005ad1
 8005ab0:	08005ad9 	.word	0x08005ad9
 8005ab4:	08005ae1 	.word	0x08005ae1
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005abe:	e18a      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005ac0:	2304      	movs	r3, #4
 8005ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ac6:	e186      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005ac8:	2308      	movs	r3, #8
 8005aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ace:	e182      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005ad0:	2310      	movs	r3, #16
 8005ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ad6:	e17e      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005ad8:	2320      	movs	r3, #32
 8005ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ade:	e17a      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005ae0:	2340      	movs	r3, #64	@ 0x40
 8005ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ae6:	e176      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005ae8:	2380      	movs	r3, #128	@ 0x80
 8005aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aee:	e172      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a5b      	ldr	r2, [pc, #364]	@ (8005c64 <UART_SetConfig+0x63c>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d130      	bne.n	8005b5c <UART_SetConfig+0x534>
 8005afa:	4b58      	ldr	r3, [pc, #352]	@ (8005c5c <UART_SetConfig+0x634>)
 8005afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005afe:	f003 0307 	and.w	r3, r3, #7
 8005b02:	2b05      	cmp	r3, #5
 8005b04:	d826      	bhi.n	8005b54 <UART_SetConfig+0x52c>
 8005b06:	a201      	add	r2, pc, #4	@ (adr r2, 8005b0c <UART_SetConfig+0x4e4>)
 8005b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0c:	08005b25 	.word	0x08005b25
 8005b10:	08005b2d 	.word	0x08005b2d
 8005b14:	08005b35 	.word	0x08005b35
 8005b18:	08005b3d 	.word	0x08005b3d
 8005b1c:	08005b45 	.word	0x08005b45
 8005b20:	08005b4d 	.word	0x08005b4d
 8005b24:	2300      	movs	r3, #0
 8005b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b2a:	e154      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005b2c:	2304      	movs	r3, #4
 8005b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b32:	e150      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005b34:	2308      	movs	r3, #8
 8005b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b3a:	e14c      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005b3c:	2310      	movs	r3, #16
 8005b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b42:	e148      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005b44:	2320      	movs	r3, #32
 8005b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b4a:	e144      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005b4c:	2340      	movs	r3, #64	@ 0x40
 8005b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b52:	e140      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005b54:	2380      	movs	r3, #128	@ 0x80
 8005b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b5a:	e13c      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a41      	ldr	r2, [pc, #260]	@ (8005c68 <UART_SetConfig+0x640>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	f040 8082 	bne.w	8005c6c <UART_SetConfig+0x644>
 8005b68:	4b3c      	ldr	r3, [pc, #240]	@ (8005c5c <UART_SetConfig+0x634>)
 8005b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b70:	2b28      	cmp	r3, #40	@ 0x28
 8005b72:	d86d      	bhi.n	8005c50 <UART_SetConfig+0x628>
 8005b74:	a201      	add	r2, pc, #4	@ (adr r2, 8005b7c <UART_SetConfig+0x554>)
 8005b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7a:	bf00      	nop
 8005b7c:	08005c21 	.word	0x08005c21
 8005b80:	08005c51 	.word	0x08005c51
 8005b84:	08005c51 	.word	0x08005c51
 8005b88:	08005c51 	.word	0x08005c51
 8005b8c:	08005c51 	.word	0x08005c51
 8005b90:	08005c51 	.word	0x08005c51
 8005b94:	08005c51 	.word	0x08005c51
 8005b98:	08005c51 	.word	0x08005c51
 8005b9c:	08005c29 	.word	0x08005c29
 8005ba0:	08005c51 	.word	0x08005c51
 8005ba4:	08005c51 	.word	0x08005c51
 8005ba8:	08005c51 	.word	0x08005c51
 8005bac:	08005c51 	.word	0x08005c51
 8005bb0:	08005c51 	.word	0x08005c51
 8005bb4:	08005c51 	.word	0x08005c51
 8005bb8:	08005c51 	.word	0x08005c51
 8005bbc:	08005c31 	.word	0x08005c31
 8005bc0:	08005c51 	.word	0x08005c51
 8005bc4:	08005c51 	.word	0x08005c51
 8005bc8:	08005c51 	.word	0x08005c51
 8005bcc:	08005c51 	.word	0x08005c51
 8005bd0:	08005c51 	.word	0x08005c51
 8005bd4:	08005c51 	.word	0x08005c51
 8005bd8:	08005c51 	.word	0x08005c51
 8005bdc:	08005c39 	.word	0x08005c39
 8005be0:	08005c51 	.word	0x08005c51
 8005be4:	08005c51 	.word	0x08005c51
 8005be8:	08005c51 	.word	0x08005c51
 8005bec:	08005c51 	.word	0x08005c51
 8005bf0:	08005c51 	.word	0x08005c51
 8005bf4:	08005c51 	.word	0x08005c51
 8005bf8:	08005c51 	.word	0x08005c51
 8005bfc:	08005c41 	.word	0x08005c41
 8005c00:	08005c51 	.word	0x08005c51
 8005c04:	08005c51 	.word	0x08005c51
 8005c08:	08005c51 	.word	0x08005c51
 8005c0c:	08005c51 	.word	0x08005c51
 8005c10:	08005c51 	.word	0x08005c51
 8005c14:	08005c51 	.word	0x08005c51
 8005c18:	08005c51 	.word	0x08005c51
 8005c1c:	08005c49 	.word	0x08005c49
 8005c20:	2301      	movs	r3, #1
 8005c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c26:	e0d6      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005c28:	2304      	movs	r3, #4
 8005c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c2e:	e0d2      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005c30:	2308      	movs	r3, #8
 8005c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c36:	e0ce      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005c38:	2310      	movs	r3, #16
 8005c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c3e:	e0ca      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005c40:	2320      	movs	r3, #32
 8005c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c46:	e0c6      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005c48:	2340      	movs	r3, #64	@ 0x40
 8005c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c4e:	e0c2      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005c50:	2380      	movs	r3, #128	@ 0x80
 8005c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c56:	e0be      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005c58:	40011400 	.word	0x40011400
 8005c5c:	58024400 	.word	0x58024400
 8005c60:	40007800 	.word	0x40007800
 8005c64:	40007c00 	.word	0x40007c00
 8005c68:	40011800 	.word	0x40011800
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4aad      	ldr	r2, [pc, #692]	@ (8005f28 <UART_SetConfig+0x900>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d176      	bne.n	8005d64 <UART_SetConfig+0x73c>
 8005c76:	4bad      	ldr	r3, [pc, #692]	@ (8005f2c <UART_SetConfig+0x904>)
 8005c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c7e:	2b28      	cmp	r3, #40	@ 0x28
 8005c80:	d86c      	bhi.n	8005d5c <UART_SetConfig+0x734>
 8005c82:	a201      	add	r2, pc, #4	@ (adr r2, 8005c88 <UART_SetConfig+0x660>)
 8005c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c88:	08005d2d 	.word	0x08005d2d
 8005c8c:	08005d5d 	.word	0x08005d5d
 8005c90:	08005d5d 	.word	0x08005d5d
 8005c94:	08005d5d 	.word	0x08005d5d
 8005c98:	08005d5d 	.word	0x08005d5d
 8005c9c:	08005d5d 	.word	0x08005d5d
 8005ca0:	08005d5d 	.word	0x08005d5d
 8005ca4:	08005d5d 	.word	0x08005d5d
 8005ca8:	08005d35 	.word	0x08005d35
 8005cac:	08005d5d 	.word	0x08005d5d
 8005cb0:	08005d5d 	.word	0x08005d5d
 8005cb4:	08005d5d 	.word	0x08005d5d
 8005cb8:	08005d5d 	.word	0x08005d5d
 8005cbc:	08005d5d 	.word	0x08005d5d
 8005cc0:	08005d5d 	.word	0x08005d5d
 8005cc4:	08005d5d 	.word	0x08005d5d
 8005cc8:	08005d3d 	.word	0x08005d3d
 8005ccc:	08005d5d 	.word	0x08005d5d
 8005cd0:	08005d5d 	.word	0x08005d5d
 8005cd4:	08005d5d 	.word	0x08005d5d
 8005cd8:	08005d5d 	.word	0x08005d5d
 8005cdc:	08005d5d 	.word	0x08005d5d
 8005ce0:	08005d5d 	.word	0x08005d5d
 8005ce4:	08005d5d 	.word	0x08005d5d
 8005ce8:	08005d45 	.word	0x08005d45
 8005cec:	08005d5d 	.word	0x08005d5d
 8005cf0:	08005d5d 	.word	0x08005d5d
 8005cf4:	08005d5d 	.word	0x08005d5d
 8005cf8:	08005d5d 	.word	0x08005d5d
 8005cfc:	08005d5d 	.word	0x08005d5d
 8005d00:	08005d5d 	.word	0x08005d5d
 8005d04:	08005d5d 	.word	0x08005d5d
 8005d08:	08005d4d 	.word	0x08005d4d
 8005d0c:	08005d5d 	.word	0x08005d5d
 8005d10:	08005d5d 	.word	0x08005d5d
 8005d14:	08005d5d 	.word	0x08005d5d
 8005d18:	08005d5d 	.word	0x08005d5d
 8005d1c:	08005d5d 	.word	0x08005d5d
 8005d20:	08005d5d 	.word	0x08005d5d
 8005d24:	08005d5d 	.word	0x08005d5d
 8005d28:	08005d55 	.word	0x08005d55
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d32:	e050      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005d34:	2304      	movs	r3, #4
 8005d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3a:	e04c      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005d3c:	2308      	movs	r3, #8
 8005d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d42:	e048      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005d44:	2310      	movs	r3, #16
 8005d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d4a:	e044      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005d4c:	2320      	movs	r3, #32
 8005d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d52:	e040      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005d54:	2340      	movs	r3, #64	@ 0x40
 8005d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d5a:	e03c      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005d5c:	2380      	movs	r3, #128	@ 0x80
 8005d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d62:	e038      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a71      	ldr	r2, [pc, #452]	@ (8005f30 <UART_SetConfig+0x908>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d130      	bne.n	8005dd0 <UART_SetConfig+0x7a8>
 8005d6e:	4b6f      	ldr	r3, [pc, #444]	@ (8005f2c <UART_SetConfig+0x904>)
 8005d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	2b05      	cmp	r3, #5
 8005d78:	d826      	bhi.n	8005dc8 <UART_SetConfig+0x7a0>
 8005d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d80 <UART_SetConfig+0x758>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005d99 	.word	0x08005d99
 8005d84:	08005da1 	.word	0x08005da1
 8005d88:	08005da9 	.word	0x08005da9
 8005d8c:	08005db1 	.word	0x08005db1
 8005d90:	08005db9 	.word	0x08005db9
 8005d94:	08005dc1 	.word	0x08005dc1
 8005d98:	2302      	movs	r3, #2
 8005d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d9e:	e01a      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005da0:	2304      	movs	r3, #4
 8005da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005da6:	e016      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005da8:	2308      	movs	r3, #8
 8005daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dae:	e012      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005db0:	2310      	movs	r3, #16
 8005db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005db6:	e00e      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005db8:	2320      	movs	r3, #32
 8005dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dbe:	e00a      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005dc0:	2340      	movs	r3, #64	@ 0x40
 8005dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dc6:	e006      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005dc8:	2380      	movs	r3, #128	@ 0x80
 8005dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dce:	e002      	b.n	8005dd6 <UART_SetConfig+0x7ae>
 8005dd0:	2380      	movs	r3, #128	@ 0x80
 8005dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a55      	ldr	r2, [pc, #340]	@ (8005f30 <UART_SetConfig+0x908>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	f040 80f8 	bne.w	8005fd2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005de2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	dc46      	bgt.n	8005e78 <UART_SetConfig+0x850>
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	db75      	blt.n	8005eda <UART_SetConfig+0x8b2>
 8005dee:	3b02      	subs	r3, #2
 8005df0:	2b1e      	cmp	r3, #30
 8005df2:	d872      	bhi.n	8005eda <UART_SetConfig+0x8b2>
 8005df4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dfc <UART_SetConfig+0x7d4>)
 8005df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfa:	bf00      	nop
 8005dfc:	08005e7f 	.word	0x08005e7f
 8005e00:	08005edb 	.word	0x08005edb
 8005e04:	08005e87 	.word	0x08005e87
 8005e08:	08005edb 	.word	0x08005edb
 8005e0c:	08005edb 	.word	0x08005edb
 8005e10:	08005edb 	.word	0x08005edb
 8005e14:	08005e97 	.word	0x08005e97
 8005e18:	08005edb 	.word	0x08005edb
 8005e1c:	08005edb 	.word	0x08005edb
 8005e20:	08005edb 	.word	0x08005edb
 8005e24:	08005edb 	.word	0x08005edb
 8005e28:	08005edb 	.word	0x08005edb
 8005e2c:	08005edb 	.word	0x08005edb
 8005e30:	08005edb 	.word	0x08005edb
 8005e34:	08005ea7 	.word	0x08005ea7
 8005e38:	08005edb 	.word	0x08005edb
 8005e3c:	08005edb 	.word	0x08005edb
 8005e40:	08005edb 	.word	0x08005edb
 8005e44:	08005edb 	.word	0x08005edb
 8005e48:	08005edb 	.word	0x08005edb
 8005e4c:	08005edb 	.word	0x08005edb
 8005e50:	08005edb 	.word	0x08005edb
 8005e54:	08005edb 	.word	0x08005edb
 8005e58:	08005edb 	.word	0x08005edb
 8005e5c:	08005edb 	.word	0x08005edb
 8005e60:	08005edb 	.word	0x08005edb
 8005e64:	08005edb 	.word	0x08005edb
 8005e68:	08005edb 	.word	0x08005edb
 8005e6c:	08005edb 	.word	0x08005edb
 8005e70:	08005edb 	.word	0x08005edb
 8005e74:	08005ecd 	.word	0x08005ecd
 8005e78:	2b40      	cmp	r3, #64	@ 0x40
 8005e7a:	d02a      	beq.n	8005ed2 <UART_SetConfig+0x8aa>
 8005e7c:	e02d      	b.n	8005eda <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005e7e:	f7fe f8a5 	bl	8003fcc <HAL_RCCEx_GetD3PCLK1Freq>
 8005e82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e84:	e02f      	b.n	8005ee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fe f8b4 	bl	8003ff8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e94:	e027      	b.n	8005ee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e96:	f107 0318 	add.w	r3, r7, #24
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fe fa00 	bl	80042a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ea4:	e01f      	b.n	8005ee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ea6:	4b21      	ldr	r3, [pc, #132]	@ (8005f2c <UART_SetConfig+0x904>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0320 	and.w	r3, r3, #32
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d009      	beq.n	8005ec6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005eb2:	4b1e      	ldr	r3, [pc, #120]	@ (8005f2c <UART_SetConfig+0x904>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	08db      	lsrs	r3, r3, #3
 8005eb8:	f003 0303 	and.w	r3, r3, #3
 8005ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8005f34 <UART_SetConfig+0x90c>)
 8005ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ec4:	e00f      	b.n	8005ee6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8005f34 <UART_SetConfig+0x90c>)
 8005ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005eca:	e00c      	b.n	8005ee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8005f38 <UART_SetConfig+0x910>)
 8005ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ed0:	e009      	b.n	8005ee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ed2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ed8:	e005      	b.n	8005ee6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005ee4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 81ee 	beq.w	80062ca <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef2:	4a12      	ldr	r2, [pc, #72]	@ (8005f3c <UART_SetConfig+0x914>)
 8005ef4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005efc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f00:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	4613      	mov	r3, r2
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	4413      	add	r3, r2
 8005f0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d305      	bcc.n	8005f1e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d910      	bls.n	8005f40 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005f24:	e1d1      	b.n	80062ca <UART_SetConfig+0xca2>
 8005f26:	bf00      	nop
 8005f28:	40011c00 	.word	0x40011c00
 8005f2c:	58024400 	.word	0x58024400
 8005f30:	58000c00 	.word	0x58000c00
 8005f34:	03d09000 	.word	0x03d09000
 8005f38:	003d0900 	.word	0x003d0900
 8005f3c:	080092c4 	.word	0x080092c4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f42:	2200      	movs	r2, #0
 8005f44:	60bb      	str	r3, [r7, #8]
 8005f46:	60fa      	str	r2, [r7, #12]
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4c:	4ac0      	ldr	r2, [pc, #768]	@ (8006250 <UART_SetConfig+0xc28>)
 8005f4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	2200      	movs	r2, #0
 8005f56:	603b      	str	r3, [r7, #0]
 8005f58:	607a      	str	r2, [r7, #4]
 8005f5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f62:	f7fa fa2d 	bl	80003c0 <__aeabi_uldivmod>
 8005f66:	4602      	mov	r2, r0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	f04f 0200 	mov.w	r2, #0
 8005f72:	f04f 0300 	mov.w	r3, #0
 8005f76:	020b      	lsls	r3, r1, #8
 8005f78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f7c:	0202      	lsls	r2, r0, #8
 8005f7e:	6979      	ldr	r1, [r7, #20]
 8005f80:	6849      	ldr	r1, [r1, #4]
 8005f82:	0849      	lsrs	r1, r1, #1
 8005f84:	2000      	movs	r0, #0
 8005f86:	460c      	mov	r4, r1
 8005f88:	4605      	mov	r5, r0
 8005f8a:	eb12 0804 	adds.w	r8, r2, r4
 8005f8e:	eb43 0905 	adc.w	r9, r3, r5
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	469a      	mov	sl, r3
 8005f9a:	4693      	mov	fp, r2
 8005f9c:	4652      	mov	r2, sl
 8005f9e:	465b      	mov	r3, fp
 8005fa0:	4640      	mov	r0, r8
 8005fa2:	4649      	mov	r1, r9
 8005fa4:	f7fa fa0c 	bl	80003c0 <__aeabi_uldivmod>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	460b      	mov	r3, r1
 8005fac:	4613      	mov	r3, r2
 8005fae:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fb6:	d308      	bcc.n	8005fca <UART_SetConfig+0x9a2>
 8005fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fbe:	d204      	bcs.n	8005fca <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005fc6:	60da      	str	r2, [r3, #12]
 8005fc8:	e17f      	b.n	80062ca <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005fd0:	e17b      	b.n	80062ca <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fda:	f040 80bd 	bne.w	8006158 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005fde:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005fe2:	2b20      	cmp	r3, #32
 8005fe4:	dc48      	bgt.n	8006078 <UART_SetConfig+0xa50>
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	db7b      	blt.n	80060e2 <UART_SetConfig+0xaba>
 8005fea:	2b20      	cmp	r3, #32
 8005fec:	d879      	bhi.n	80060e2 <UART_SetConfig+0xaba>
 8005fee:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff4 <UART_SetConfig+0x9cc>)
 8005ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff4:	0800607f 	.word	0x0800607f
 8005ff8:	08006087 	.word	0x08006087
 8005ffc:	080060e3 	.word	0x080060e3
 8006000:	080060e3 	.word	0x080060e3
 8006004:	0800608f 	.word	0x0800608f
 8006008:	080060e3 	.word	0x080060e3
 800600c:	080060e3 	.word	0x080060e3
 8006010:	080060e3 	.word	0x080060e3
 8006014:	0800609f 	.word	0x0800609f
 8006018:	080060e3 	.word	0x080060e3
 800601c:	080060e3 	.word	0x080060e3
 8006020:	080060e3 	.word	0x080060e3
 8006024:	080060e3 	.word	0x080060e3
 8006028:	080060e3 	.word	0x080060e3
 800602c:	080060e3 	.word	0x080060e3
 8006030:	080060e3 	.word	0x080060e3
 8006034:	080060af 	.word	0x080060af
 8006038:	080060e3 	.word	0x080060e3
 800603c:	080060e3 	.word	0x080060e3
 8006040:	080060e3 	.word	0x080060e3
 8006044:	080060e3 	.word	0x080060e3
 8006048:	080060e3 	.word	0x080060e3
 800604c:	080060e3 	.word	0x080060e3
 8006050:	080060e3 	.word	0x080060e3
 8006054:	080060e3 	.word	0x080060e3
 8006058:	080060e3 	.word	0x080060e3
 800605c:	080060e3 	.word	0x080060e3
 8006060:	080060e3 	.word	0x080060e3
 8006064:	080060e3 	.word	0x080060e3
 8006068:	080060e3 	.word	0x080060e3
 800606c:	080060e3 	.word	0x080060e3
 8006070:	080060e3 	.word	0x080060e3
 8006074:	080060d5 	.word	0x080060d5
 8006078:	2b40      	cmp	r3, #64	@ 0x40
 800607a:	d02e      	beq.n	80060da <UART_SetConfig+0xab2>
 800607c:	e031      	b.n	80060e2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800607e:	f7fc fdd9 	bl	8002c34 <HAL_RCC_GetPCLK1Freq>
 8006082:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006084:	e033      	b.n	80060ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006086:	f7fc fdeb 	bl	8002c60 <HAL_RCC_GetPCLK2Freq>
 800608a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800608c:	e02f      	b.n	80060ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800608e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006092:	4618      	mov	r0, r3
 8006094:	f7fd ffb0 	bl	8003ff8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800609c:	e027      	b.n	80060ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800609e:	f107 0318 	add.w	r3, r7, #24
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fe f8fc 	bl	80042a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060ac:	e01f      	b.n	80060ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060ae:	4b69      	ldr	r3, [pc, #420]	@ (8006254 <UART_SetConfig+0xc2c>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0320 	and.w	r3, r3, #32
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d009      	beq.n	80060ce <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80060ba:	4b66      	ldr	r3, [pc, #408]	@ (8006254 <UART_SetConfig+0xc2c>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	08db      	lsrs	r3, r3, #3
 80060c0:	f003 0303 	and.w	r3, r3, #3
 80060c4:	4a64      	ldr	r2, [pc, #400]	@ (8006258 <UART_SetConfig+0xc30>)
 80060c6:	fa22 f303 	lsr.w	r3, r2, r3
 80060ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80060cc:	e00f      	b.n	80060ee <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80060ce:	4b62      	ldr	r3, [pc, #392]	@ (8006258 <UART_SetConfig+0xc30>)
 80060d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060d2:	e00c      	b.n	80060ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80060d4:	4b61      	ldr	r3, [pc, #388]	@ (800625c <UART_SetConfig+0xc34>)
 80060d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060d8:	e009      	b.n	80060ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060e0:	e005      	b.n	80060ee <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80060ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 80ea 	beq.w	80062ca <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fa:	4a55      	ldr	r2, [pc, #340]	@ (8006250 <UART_SetConfig+0xc28>)
 80060fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006100:	461a      	mov	r2, r3
 8006102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006104:	fbb3 f3f2 	udiv	r3, r3, r2
 8006108:	005a      	lsls	r2, r3, #1
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	085b      	lsrs	r3, r3, #1
 8006110:	441a      	add	r2, r3
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	fbb2 f3f3 	udiv	r3, r2, r3
 800611a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800611c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800611e:	2b0f      	cmp	r3, #15
 8006120:	d916      	bls.n	8006150 <UART_SetConfig+0xb28>
 8006122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006128:	d212      	bcs.n	8006150 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800612a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800612c:	b29b      	uxth	r3, r3
 800612e:	f023 030f 	bic.w	r3, r3, #15
 8006132:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006136:	085b      	lsrs	r3, r3, #1
 8006138:	b29b      	uxth	r3, r3
 800613a:	f003 0307 	and.w	r3, r3, #7
 800613e:	b29a      	uxth	r2, r3
 8006140:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006142:	4313      	orrs	r3, r2
 8006144:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800614c:	60da      	str	r2, [r3, #12]
 800614e:	e0bc      	b.n	80062ca <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006156:	e0b8      	b.n	80062ca <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006158:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800615c:	2b20      	cmp	r3, #32
 800615e:	dc4b      	bgt.n	80061f8 <UART_SetConfig+0xbd0>
 8006160:	2b00      	cmp	r3, #0
 8006162:	f2c0 8087 	blt.w	8006274 <UART_SetConfig+0xc4c>
 8006166:	2b20      	cmp	r3, #32
 8006168:	f200 8084 	bhi.w	8006274 <UART_SetConfig+0xc4c>
 800616c:	a201      	add	r2, pc, #4	@ (adr r2, 8006174 <UART_SetConfig+0xb4c>)
 800616e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006172:	bf00      	nop
 8006174:	080061ff 	.word	0x080061ff
 8006178:	08006207 	.word	0x08006207
 800617c:	08006275 	.word	0x08006275
 8006180:	08006275 	.word	0x08006275
 8006184:	0800620f 	.word	0x0800620f
 8006188:	08006275 	.word	0x08006275
 800618c:	08006275 	.word	0x08006275
 8006190:	08006275 	.word	0x08006275
 8006194:	0800621f 	.word	0x0800621f
 8006198:	08006275 	.word	0x08006275
 800619c:	08006275 	.word	0x08006275
 80061a0:	08006275 	.word	0x08006275
 80061a4:	08006275 	.word	0x08006275
 80061a8:	08006275 	.word	0x08006275
 80061ac:	08006275 	.word	0x08006275
 80061b0:	08006275 	.word	0x08006275
 80061b4:	0800622f 	.word	0x0800622f
 80061b8:	08006275 	.word	0x08006275
 80061bc:	08006275 	.word	0x08006275
 80061c0:	08006275 	.word	0x08006275
 80061c4:	08006275 	.word	0x08006275
 80061c8:	08006275 	.word	0x08006275
 80061cc:	08006275 	.word	0x08006275
 80061d0:	08006275 	.word	0x08006275
 80061d4:	08006275 	.word	0x08006275
 80061d8:	08006275 	.word	0x08006275
 80061dc:	08006275 	.word	0x08006275
 80061e0:	08006275 	.word	0x08006275
 80061e4:	08006275 	.word	0x08006275
 80061e8:	08006275 	.word	0x08006275
 80061ec:	08006275 	.word	0x08006275
 80061f0:	08006275 	.word	0x08006275
 80061f4:	08006267 	.word	0x08006267
 80061f8:	2b40      	cmp	r3, #64	@ 0x40
 80061fa:	d037      	beq.n	800626c <UART_SetConfig+0xc44>
 80061fc:	e03a      	b.n	8006274 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061fe:	f7fc fd19 	bl	8002c34 <HAL_RCC_GetPCLK1Freq>
 8006202:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006204:	e03c      	b.n	8006280 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006206:	f7fc fd2b 	bl	8002c60 <HAL_RCC_GetPCLK2Freq>
 800620a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800620c:	e038      	b.n	8006280 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800620e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006212:	4618      	mov	r0, r3
 8006214:	f7fd fef0 	bl	8003ff8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800621c:	e030      	b.n	8006280 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800621e:	f107 0318 	add.w	r3, r7, #24
 8006222:	4618      	mov	r0, r3
 8006224:	f7fe f83c 	bl	80042a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800622c:	e028      	b.n	8006280 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800622e:	4b09      	ldr	r3, [pc, #36]	@ (8006254 <UART_SetConfig+0xc2c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0320 	and.w	r3, r3, #32
 8006236:	2b00      	cmp	r3, #0
 8006238:	d012      	beq.n	8006260 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800623a:	4b06      	ldr	r3, [pc, #24]	@ (8006254 <UART_SetConfig+0xc2c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	08db      	lsrs	r3, r3, #3
 8006240:	f003 0303 	and.w	r3, r3, #3
 8006244:	4a04      	ldr	r2, [pc, #16]	@ (8006258 <UART_SetConfig+0xc30>)
 8006246:	fa22 f303 	lsr.w	r3, r2, r3
 800624a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800624c:	e018      	b.n	8006280 <UART_SetConfig+0xc58>
 800624e:	bf00      	nop
 8006250:	080092c4 	.word	0x080092c4
 8006254:	58024400 	.word	0x58024400
 8006258:	03d09000 	.word	0x03d09000
 800625c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006260:	4b24      	ldr	r3, [pc, #144]	@ (80062f4 <UART_SetConfig+0xccc>)
 8006262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006264:	e00c      	b.n	8006280 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006266:	4b24      	ldr	r3, [pc, #144]	@ (80062f8 <UART_SetConfig+0xcd0>)
 8006268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800626a:	e009      	b.n	8006280 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800626c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006272:	e005      	b.n	8006280 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006274:	2300      	movs	r3, #0
 8006276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800627e:	bf00      	nop
    }

    if (pclk != 0U)
 8006280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006282:	2b00      	cmp	r3, #0
 8006284:	d021      	beq.n	80062ca <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628a:	4a1c      	ldr	r2, [pc, #112]	@ (80062fc <UART_SetConfig+0xcd4>)
 800628c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006290:	461a      	mov	r2, r3
 8006292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006294:	fbb3 f2f2 	udiv	r2, r3, r2
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	085b      	lsrs	r3, r3, #1
 800629e:	441a      	add	r2, r3
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ac:	2b0f      	cmp	r3, #15
 80062ae:	d909      	bls.n	80062c4 <UART_SetConfig+0xc9c>
 80062b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062b6:	d205      	bcs.n	80062c4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	60da      	str	r2, [r3, #12]
 80062c2:	e002      	b.n	80062ca <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2200      	movs	r2, #0
 80062de:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	2200      	movs	r2, #0
 80062e4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80062e6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3748      	adds	r7, #72	@ 0x48
 80062ee:	46bd      	mov	sp, r7
 80062f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062f4:	03d09000 	.word	0x03d09000
 80062f8:	003d0900 	.word	0x003d0900
 80062fc:	080092c4 	.word	0x080092c4

08006300 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630c:	f003 0308 	and.w	r3, r3, #8
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00a      	beq.n	800632a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	430a      	orrs	r2, r1
 8006328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00a      	beq.n	800634c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00a      	beq.n	800636e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	430a      	orrs	r2, r1
 800636c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006372:	f003 0304 	and.w	r3, r3, #4
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	430a      	orrs	r2, r1
 800638e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006394:	f003 0310 	and.w	r3, r3, #16
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00a      	beq.n	80063b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b6:	f003 0320 	and.w	r3, r3, #32
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00a      	beq.n	80063d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	430a      	orrs	r2, r1
 80063d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d01a      	beq.n	8006416 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063fe:	d10a      	bne.n	8006416 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00a      	beq.n	8006438 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	605a      	str	r2, [r3, #4]
  }
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b098      	sub	sp, #96	@ 0x60
 8006448:	af02      	add	r7, sp, #8
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006454:	f7fa ff32 	bl	80012bc <HAL_GetTick>
 8006458:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0308 	and.w	r3, r3, #8
 8006464:	2b08      	cmp	r3, #8
 8006466:	d12f      	bne.n	80064c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006468:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006470:	2200      	movs	r2, #0
 8006472:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f88e 	bl	8006598 <UART_WaitOnFlagUntilTimeout>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d022      	beq.n	80064c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800648a:	e853 3f00 	ldrex	r3, [r3]
 800648e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006492:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006496:	653b      	str	r3, [r7, #80]	@ 0x50
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	461a      	mov	r2, r3
 800649e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80064a2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064a8:	e841 2300 	strex	r3, r2, [r1]
 80064ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e6      	bne.n	8006482 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2220      	movs	r2, #32
 80064b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e063      	b.n	8006590 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0304 	and.w	r3, r3, #4
 80064d2:	2b04      	cmp	r3, #4
 80064d4:	d149      	bne.n	800656a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064de:	2200      	movs	r2, #0
 80064e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f857 	bl	8006598 <UART_WaitOnFlagUntilTimeout>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d03c      	beq.n	800656a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	623b      	str	r3, [r7, #32]
   return(result);
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006504:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	461a      	mov	r2, r3
 800650c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800650e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006510:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006512:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006516:	e841 2300 	strex	r3, r2, [r1]
 800651a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800651c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1e6      	bne.n	80064f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	3308      	adds	r3, #8
 8006528:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	e853 3f00 	ldrex	r3, [r3]
 8006530:	60fb      	str	r3, [r7, #12]
   return(result);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f023 0301 	bic.w	r3, r3, #1
 8006538:	64bb      	str	r3, [r7, #72]	@ 0x48
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	3308      	adds	r3, #8
 8006540:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006542:	61fa      	str	r2, [r7, #28]
 8006544:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006546:	69b9      	ldr	r1, [r7, #24]
 8006548:	69fa      	ldr	r2, [r7, #28]
 800654a:	e841 2300 	strex	r3, r2, [r1]
 800654e:	617b      	str	r3, [r7, #20]
   return(result);
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1e5      	bne.n	8006522 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2220      	movs	r2, #32
 800655a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e012      	b.n	8006590 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2220      	movs	r2, #32
 800656e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2220      	movs	r2, #32
 8006576:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3758      	adds	r7, #88	@ 0x58
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	603b      	str	r3, [r7, #0]
 80065a4:	4613      	mov	r3, r2
 80065a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065a8:	e04f      	b.n	800664a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b0:	d04b      	beq.n	800664a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065b2:	f7fa fe83 	bl	80012bc <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d302      	bcc.n	80065c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e04e      	b.n	800666a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0304 	and.w	r3, r3, #4
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d037      	beq.n	800664a <UART_WaitOnFlagUntilTimeout+0xb2>
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	2b80      	cmp	r3, #128	@ 0x80
 80065de:	d034      	beq.n	800664a <UART_WaitOnFlagUntilTimeout+0xb2>
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2b40      	cmp	r3, #64	@ 0x40
 80065e4:	d031      	beq.n	800664a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	f003 0308 	and.w	r3, r3, #8
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d110      	bne.n	8006616 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2208      	movs	r2, #8
 80065fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 f839 	bl	8006674 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2208      	movs	r2, #8
 8006606:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e029      	b.n	800666a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006620:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006624:	d111      	bne.n	800664a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800662e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f000 f81f 	bl	8006674 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2220      	movs	r2, #32
 800663a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e00f      	b.n	800666a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	69da      	ldr	r2, [r3, #28]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	4013      	ands	r3, r2
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	429a      	cmp	r2, r3
 8006658:	bf0c      	ite	eq
 800665a:	2301      	moveq	r3, #1
 800665c:	2300      	movne	r3, #0
 800665e:	b2db      	uxtb	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	79fb      	ldrb	r3, [r7, #7]
 8006664:	429a      	cmp	r2, r3
 8006666:	d0a0      	beq.n	80065aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
	...

08006674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006674:	b480      	push	{r7}
 8006676:	b095      	sub	sp, #84	@ 0x54
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006684:	e853 3f00 	ldrex	r3, [r3]
 8006688:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800668a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006690:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800669a:	643b      	str	r3, [r7, #64]	@ 0x40
 800669c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066a2:	e841 2300 	strex	r3, r2, [r1]
 80066a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1e6      	bne.n	800667c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3308      	adds	r3, #8
 80066b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	e853 3f00 	ldrex	r3, [r3]
 80066bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80066be:	69fa      	ldr	r2, [r7, #28]
 80066c0:	4b1e      	ldr	r3, [pc, #120]	@ (800673c <UART_EndRxTransfer+0xc8>)
 80066c2:	4013      	ands	r3, r2
 80066c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3308      	adds	r3, #8
 80066cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e5      	bne.n	80066ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d118      	bne.n	800671c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	e853 3f00 	ldrex	r3, [r3]
 80066f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f023 0310 	bic.w	r3, r3, #16
 80066fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	461a      	mov	r2, r3
 8006706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006708:	61bb      	str	r3, [r7, #24]
 800670a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670c:	6979      	ldr	r1, [r7, #20]
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	e841 2300 	strex	r3, r2, [r1]
 8006714:	613b      	str	r3, [r7, #16]
   return(result);
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1e6      	bne.n	80066ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2220      	movs	r2, #32
 8006720:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006730:	bf00      	nop
 8006732:	3754      	adds	r7, #84	@ 0x54
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	effffffe 	.word	0xeffffffe

08006740 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800674e:	2b01      	cmp	r3, #1
 8006750:	d101      	bne.n	8006756 <HAL_UARTEx_DisableFifoMode+0x16>
 8006752:	2302      	movs	r3, #2
 8006754:	e027      	b.n	80067a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2224      	movs	r2, #36	@ 0x24
 8006762:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f022 0201 	bic.w	r2, r2, #1
 800677c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006784:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2220      	movs	r2, #32
 8006798:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b084      	sub	sp, #16
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d101      	bne.n	80067ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80067c6:	2302      	movs	r3, #2
 80067c8:	e02d      	b.n	8006826 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2224      	movs	r2, #36	@ 0x24
 80067d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 0201 	bic.w	r2, r2, #1
 80067f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f850 	bl	80068ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2220      	movs	r2, #32
 8006818:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800683e:	2b01      	cmp	r3, #1
 8006840:	d101      	bne.n	8006846 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006842:	2302      	movs	r3, #2
 8006844:	e02d      	b.n	80068a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2224      	movs	r2, #36	@ 0x24
 8006852:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 0201 	bic.w	r2, r2, #1
 800686c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	683a      	ldr	r2, [r7, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f812 	bl	80068ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2220      	movs	r2, #32
 8006894:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
	...

080068ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d108      	bne.n	80068ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80068cc:	e031      	b.n	8006932 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80068ce:	2310      	movs	r3, #16
 80068d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80068d2:	2310      	movs	r3, #16
 80068d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	0e5b      	lsrs	r3, r3, #25
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	f003 0307 	and.w	r3, r3, #7
 80068e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	0f5b      	lsrs	r3, r3, #29
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	f003 0307 	and.w	r3, r3, #7
 80068f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068f6:	7bbb      	ldrb	r3, [r7, #14]
 80068f8:	7b3a      	ldrb	r2, [r7, #12]
 80068fa:	4911      	ldr	r1, [pc, #68]	@ (8006940 <UARTEx_SetNbDataToProcess+0x94>)
 80068fc:	5c8a      	ldrb	r2, [r1, r2]
 80068fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006902:	7b3a      	ldrb	r2, [r7, #12]
 8006904:	490f      	ldr	r1, [pc, #60]	@ (8006944 <UARTEx_SetNbDataToProcess+0x98>)
 8006906:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006908:	fb93 f3f2 	sdiv	r3, r3, r2
 800690c:	b29a      	uxth	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006914:	7bfb      	ldrb	r3, [r7, #15]
 8006916:	7b7a      	ldrb	r2, [r7, #13]
 8006918:	4909      	ldr	r1, [pc, #36]	@ (8006940 <UARTEx_SetNbDataToProcess+0x94>)
 800691a:	5c8a      	ldrb	r2, [r1, r2]
 800691c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006920:	7b7a      	ldrb	r2, [r7, #13]
 8006922:	4908      	ldr	r1, [pc, #32]	@ (8006944 <UARTEx_SetNbDataToProcess+0x98>)
 8006924:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006926:	fb93 f3f2 	sdiv	r3, r3, r2
 800692a:	b29a      	uxth	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006932:	bf00      	nop
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	080092dc 	.word	0x080092dc
 8006944:	080092e4 	.word	0x080092e4

08006948 <malloc>:
 8006948:	4b02      	ldr	r3, [pc, #8]	@ (8006954 <malloc+0xc>)
 800694a:	4601      	mov	r1, r0
 800694c:	6818      	ldr	r0, [r3, #0]
 800694e:	f000 b825 	b.w	800699c <_malloc_r>
 8006952:	bf00      	nop
 8006954:	24000020 	.word	0x24000020

08006958 <sbrk_aligned>:
 8006958:	b570      	push	{r4, r5, r6, lr}
 800695a:	4e0f      	ldr	r6, [pc, #60]	@ (8006998 <sbrk_aligned+0x40>)
 800695c:	460c      	mov	r4, r1
 800695e:	6831      	ldr	r1, [r6, #0]
 8006960:	4605      	mov	r5, r0
 8006962:	b911      	cbnz	r1, 800696a <sbrk_aligned+0x12>
 8006964:	f000 fe34 	bl	80075d0 <_sbrk_r>
 8006968:	6030      	str	r0, [r6, #0]
 800696a:	4621      	mov	r1, r4
 800696c:	4628      	mov	r0, r5
 800696e:	f000 fe2f 	bl	80075d0 <_sbrk_r>
 8006972:	1c43      	adds	r3, r0, #1
 8006974:	d103      	bne.n	800697e <sbrk_aligned+0x26>
 8006976:	f04f 34ff 	mov.w	r4, #4294967295
 800697a:	4620      	mov	r0, r4
 800697c:	bd70      	pop	{r4, r5, r6, pc}
 800697e:	1cc4      	adds	r4, r0, #3
 8006980:	f024 0403 	bic.w	r4, r4, #3
 8006984:	42a0      	cmp	r0, r4
 8006986:	d0f8      	beq.n	800697a <sbrk_aligned+0x22>
 8006988:	1a21      	subs	r1, r4, r0
 800698a:	4628      	mov	r0, r5
 800698c:	f000 fe20 	bl	80075d0 <_sbrk_r>
 8006990:	3001      	adds	r0, #1
 8006992:	d1f2      	bne.n	800697a <sbrk_aligned+0x22>
 8006994:	e7ef      	b.n	8006976 <sbrk_aligned+0x1e>
 8006996:	bf00      	nop
 8006998:	2400031c 	.word	0x2400031c

0800699c <_malloc_r>:
 800699c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069a0:	1ccd      	adds	r5, r1, #3
 80069a2:	f025 0503 	bic.w	r5, r5, #3
 80069a6:	3508      	adds	r5, #8
 80069a8:	2d0c      	cmp	r5, #12
 80069aa:	bf38      	it	cc
 80069ac:	250c      	movcc	r5, #12
 80069ae:	2d00      	cmp	r5, #0
 80069b0:	4606      	mov	r6, r0
 80069b2:	db01      	blt.n	80069b8 <_malloc_r+0x1c>
 80069b4:	42a9      	cmp	r1, r5
 80069b6:	d904      	bls.n	80069c2 <_malloc_r+0x26>
 80069b8:	230c      	movs	r3, #12
 80069ba:	6033      	str	r3, [r6, #0]
 80069bc:	2000      	movs	r0, #0
 80069be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a98 <_malloc_r+0xfc>
 80069c6:	f000 f869 	bl	8006a9c <__malloc_lock>
 80069ca:	f8d8 3000 	ldr.w	r3, [r8]
 80069ce:	461c      	mov	r4, r3
 80069d0:	bb44      	cbnz	r4, 8006a24 <_malloc_r+0x88>
 80069d2:	4629      	mov	r1, r5
 80069d4:	4630      	mov	r0, r6
 80069d6:	f7ff ffbf 	bl	8006958 <sbrk_aligned>
 80069da:	1c43      	adds	r3, r0, #1
 80069dc:	4604      	mov	r4, r0
 80069de:	d158      	bne.n	8006a92 <_malloc_r+0xf6>
 80069e0:	f8d8 4000 	ldr.w	r4, [r8]
 80069e4:	4627      	mov	r7, r4
 80069e6:	2f00      	cmp	r7, #0
 80069e8:	d143      	bne.n	8006a72 <_malloc_r+0xd6>
 80069ea:	2c00      	cmp	r4, #0
 80069ec:	d04b      	beq.n	8006a86 <_malloc_r+0xea>
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	4639      	mov	r1, r7
 80069f2:	4630      	mov	r0, r6
 80069f4:	eb04 0903 	add.w	r9, r4, r3
 80069f8:	f000 fdea 	bl	80075d0 <_sbrk_r>
 80069fc:	4581      	cmp	r9, r0
 80069fe:	d142      	bne.n	8006a86 <_malloc_r+0xea>
 8006a00:	6821      	ldr	r1, [r4, #0]
 8006a02:	1a6d      	subs	r5, r5, r1
 8006a04:	4629      	mov	r1, r5
 8006a06:	4630      	mov	r0, r6
 8006a08:	f7ff ffa6 	bl	8006958 <sbrk_aligned>
 8006a0c:	3001      	adds	r0, #1
 8006a0e:	d03a      	beq.n	8006a86 <_malloc_r+0xea>
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	442b      	add	r3, r5
 8006a14:	6023      	str	r3, [r4, #0]
 8006a16:	f8d8 3000 	ldr.w	r3, [r8]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	bb62      	cbnz	r2, 8006a78 <_malloc_r+0xdc>
 8006a1e:	f8c8 7000 	str.w	r7, [r8]
 8006a22:	e00f      	b.n	8006a44 <_malloc_r+0xa8>
 8006a24:	6822      	ldr	r2, [r4, #0]
 8006a26:	1b52      	subs	r2, r2, r5
 8006a28:	d420      	bmi.n	8006a6c <_malloc_r+0xd0>
 8006a2a:	2a0b      	cmp	r2, #11
 8006a2c:	d917      	bls.n	8006a5e <_malloc_r+0xc2>
 8006a2e:	1961      	adds	r1, r4, r5
 8006a30:	42a3      	cmp	r3, r4
 8006a32:	6025      	str	r5, [r4, #0]
 8006a34:	bf18      	it	ne
 8006a36:	6059      	strne	r1, [r3, #4]
 8006a38:	6863      	ldr	r3, [r4, #4]
 8006a3a:	bf08      	it	eq
 8006a3c:	f8c8 1000 	streq.w	r1, [r8]
 8006a40:	5162      	str	r2, [r4, r5]
 8006a42:	604b      	str	r3, [r1, #4]
 8006a44:	4630      	mov	r0, r6
 8006a46:	f000 f82f 	bl	8006aa8 <__malloc_unlock>
 8006a4a:	f104 000b 	add.w	r0, r4, #11
 8006a4e:	1d23      	adds	r3, r4, #4
 8006a50:	f020 0007 	bic.w	r0, r0, #7
 8006a54:	1ac2      	subs	r2, r0, r3
 8006a56:	bf1c      	itt	ne
 8006a58:	1a1b      	subne	r3, r3, r0
 8006a5a:	50a3      	strne	r3, [r4, r2]
 8006a5c:	e7af      	b.n	80069be <_malloc_r+0x22>
 8006a5e:	6862      	ldr	r2, [r4, #4]
 8006a60:	42a3      	cmp	r3, r4
 8006a62:	bf0c      	ite	eq
 8006a64:	f8c8 2000 	streq.w	r2, [r8]
 8006a68:	605a      	strne	r2, [r3, #4]
 8006a6a:	e7eb      	b.n	8006a44 <_malloc_r+0xa8>
 8006a6c:	4623      	mov	r3, r4
 8006a6e:	6864      	ldr	r4, [r4, #4]
 8006a70:	e7ae      	b.n	80069d0 <_malloc_r+0x34>
 8006a72:	463c      	mov	r4, r7
 8006a74:	687f      	ldr	r7, [r7, #4]
 8006a76:	e7b6      	b.n	80069e6 <_malloc_r+0x4a>
 8006a78:	461a      	mov	r2, r3
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	42a3      	cmp	r3, r4
 8006a7e:	d1fb      	bne.n	8006a78 <_malloc_r+0xdc>
 8006a80:	2300      	movs	r3, #0
 8006a82:	6053      	str	r3, [r2, #4]
 8006a84:	e7de      	b.n	8006a44 <_malloc_r+0xa8>
 8006a86:	230c      	movs	r3, #12
 8006a88:	6033      	str	r3, [r6, #0]
 8006a8a:	4630      	mov	r0, r6
 8006a8c:	f000 f80c 	bl	8006aa8 <__malloc_unlock>
 8006a90:	e794      	b.n	80069bc <_malloc_r+0x20>
 8006a92:	6005      	str	r5, [r0, #0]
 8006a94:	e7d6      	b.n	8006a44 <_malloc_r+0xa8>
 8006a96:	bf00      	nop
 8006a98:	24000320 	.word	0x24000320

08006a9c <__malloc_lock>:
 8006a9c:	4801      	ldr	r0, [pc, #4]	@ (8006aa4 <__malloc_lock+0x8>)
 8006a9e:	f000 bde4 	b.w	800766a <__retarget_lock_acquire_recursive>
 8006aa2:	bf00      	nop
 8006aa4:	24000464 	.word	0x24000464

08006aa8 <__malloc_unlock>:
 8006aa8:	4801      	ldr	r0, [pc, #4]	@ (8006ab0 <__malloc_unlock+0x8>)
 8006aaa:	f000 bddf 	b.w	800766c <__retarget_lock_release_recursive>
 8006aae:	bf00      	nop
 8006ab0:	24000464 	.word	0x24000464

08006ab4 <__cvt>:
 8006ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ab6:	ed2d 8b02 	vpush	{d8}
 8006aba:	eeb0 8b40 	vmov.f64	d8, d0
 8006abe:	b085      	sub	sp, #20
 8006ac0:	4617      	mov	r7, r2
 8006ac2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8006ac4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ac6:	ee18 2a90 	vmov	r2, s17
 8006aca:	f025 0520 	bic.w	r5, r5, #32
 8006ace:	2a00      	cmp	r2, #0
 8006ad0:	bfb6      	itet	lt
 8006ad2:	222d      	movlt	r2, #45	@ 0x2d
 8006ad4:	2200      	movge	r2, #0
 8006ad6:	eeb1 8b40 	vneglt.f64	d8, d0
 8006ada:	2d46      	cmp	r5, #70	@ 0x46
 8006adc:	460c      	mov	r4, r1
 8006ade:	701a      	strb	r2, [r3, #0]
 8006ae0:	d004      	beq.n	8006aec <__cvt+0x38>
 8006ae2:	2d45      	cmp	r5, #69	@ 0x45
 8006ae4:	d100      	bne.n	8006ae8 <__cvt+0x34>
 8006ae6:	3401      	adds	r4, #1
 8006ae8:	2102      	movs	r1, #2
 8006aea:	e000      	b.n	8006aee <__cvt+0x3a>
 8006aec:	2103      	movs	r1, #3
 8006aee:	ab03      	add	r3, sp, #12
 8006af0:	9301      	str	r3, [sp, #4]
 8006af2:	ab02      	add	r3, sp, #8
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	4622      	mov	r2, r4
 8006af8:	4633      	mov	r3, r6
 8006afa:	eeb0 0b48 	vmov.f64	d0, d8
 8006afe:	f000 fe3f 	bl	8007780 <_dtoa_r>
 8006b02:	2d47      	cmp	r5, #71	@ 0x47
 8006b04:	d114      	bne.n	8006b30 <__cvt+0x7c>
 8006b06:	07fb      	lsls	r3, r7, #31
 8006b08:	d50a      	bpl.n	8006b20 <__cvt+0x6c>
 8006b0a:	1902      	adds	r2, r0, r4
 8006b0c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b14:	bf08      	it	eq
 8006b16:	9203      	streq	r2, [sp, #12]
 8006b18:	2130      	movs	r1, #48	@ 0x30
 8006b1a:	9b03      	ldr	r3, [sp, #12]
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d319      	bcc.n	8006b54 <__cvt+0xa0>
 8006b20:	9b03      	ldr	r3, [sp, #12]
 8006b22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b24:	1a1b      	subs	r3, r3, r0
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	b005      	add	sp, #20
 8006b2a:	ecbd 8b02 	vpop	{d8}
 8006b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b30:	2d46      	cmp	r5, #70	@ 0x46
 8006b32:	eb00 0204 	add.w	r2, r0, r4
 8006b36:	d1e9      	bne.n	8006b0c <__cvt+0x58>
 8006b38:	7803      	ldrb	r3, [r0, #0]
 8006b3a:	2b30      	cmp	r3, #48	@ 0x30
 8006b3c:	d107      	bne.n	8006b4e <__cvt+0x9a>
 8006b3e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b46:	bf1c      	itt	ne
 8006b48:	f1c4 0401 	rsbne	r4, r4, #1
 8006b4c:	6034      	strne	r4, [r6, #0]
 8006b4e:	6833      	ldr	r3, [r6, #0]
 8006b50:	441a      	add	r2, r3
 8006b52:	e7db      	b.n	8006b0c <__cvt+0x58>
 8006b54:	1c5c      	adds	r4, r3, #1
 8006b56:	9403      	str	r4, [sp, #12]
 8006b58:	7019      	strb	r1, [r3, #0]
 8006b5a:	e7de      	b.n	8006b1a <__cvt+0x66>

08006b5c <__exponent>:
 8006b5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b5e:	2900      	cmp	r1, #0
 8006b60:	bfba      	itte	lt
 8006b62:	4249      	neglt	r1, r1
 8006b64:	232d      	movlt	r3, #45	@ 0x2d
 8006b66:	232b      	movge	r3, #43	@ 0x2b
 8006b68:	2909      	cmp	r1, #9
 8006b6a:	7002      	strb	r2, [r0, #0]
 8006b6c:	7043      	strb	r3, [r0, #1]
 8006b6e:	dd29      	ble.n	8006bc4 <__exponent+0x68>
 8006b70:	f10d 0307 	add.w	r3, sp, #7
 8006b74:	461d      	mov	r5, r3
 8006b76:	270a      	movs	r7, #10
 8006b78:	461a      	mov	r2, r3
 8006b7a:	fbb1 f6f7 	udiv	r6, r1, r7
 8006b7e:	fb07 1416 	mls	r4, r7, r6, r1
 8006b82:	3430      	adds	r4, #48	@ 0x30
 8006b84:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006b88:	460c      	mov	r4, r1
 8006b8a:	2c63      	cmp	r4, #99	@ 0x63
 8006b8c:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b90:	4631      	mov	r1, r6
 8006b92:	dcf1      	bgt.n	8006b78 <__exponent+0x1c>
 8006b94:	3130      	adds	r1, #48	@ 0x30
 8006b96:	1e94      	subs	r4, r2, #2
 8006b98:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b9c:	1c41      	adds	r1, r0, #1
 8006b9e:	4623      	mov	r3, r4
 8006ba0:	42ab      	cmp	r3, r5
 8006ba2:	d30a      	bcc.n	8006bba <__exponent+0x5e>
 8006ba4:	f10d 0309 	add.w	r3, sp, #9
 8006ba8:	1a9b      	subs	r3, r3, r2
 8006baa:	42ac      	cmp	r4, r5
 8006bac:	bf88      	it	hi
 8006bae:	2300      	movhi	r3, #0
 8006bb0:	3302      	adds	r3, #2
 8006bb2:	4403      	add	r3, r0
 8006bb4:	1a18      	subs	r0, r3, r0
 8006bb6:	b003      	add	sp, #12
 8006bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bba:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006bbe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006bc2:	e7ed      	b.n	8006ba0 <__exponent+0x44>
 8006bc4:	2330      	movs	r3, #48	@ 0x30
 8006bc6:	3130      	adds	r1, #48	@ 0x30
 8006bc8:	7083      	strb	r3, [r0, #2]
 8006bca:	70c1      	strb	r1, [r0, #3]
 8006bcc:	1d03      	adds	r3, r0, #4
 8006bce:	e7f1      	b.n	8006bb4 <__exponent+0x58>

08006bd0 <_printf_float>:
 8006bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd4:	b08d      	sub	sp, #52	@ 0x34
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006bdc:	4616      	mov	r6, r2
 8006bde:	461f      	mov	r7, r3
 8006be0:	4605      	mov	r5, r0
 8006be2:	f000 fcbd 	bl	8007560 <_localeconv_r>
 8006be6:	f8d0 b000 	ldr.w	fp, [r0]
 8006bea:	4658      	mov	r0, fp
 8006bec:	f7f9 fbe0 	bl	80003b0 <strlen>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8006bf8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006bfc:	6822      	ldr	r2, [r4, #0]
 8006bfe:	9005      	str	r0, [sp, #20]
 8006c00:	3307      	adds	r3, #7
 8006c02:	f023 0307 	bic.w	r3, r3, #7
 8006c06:	f103 0108 	add.w	r1, r3, #8
 8006c0a:	f8c8 1000 	str.w	r1, [r8]
 8006c0e:	ed93 0b00 	vldr	d0, [r3]
 8006c12:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8006e70 <_printf_float+0x2a0>
 8006c16:	eeb0 7bc0 	vabs.f64	d7, d0
 8006c1a:	eeb4 7b46 	vcmp.f64	d7, d6
 8006c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c22:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8006c26:	dd24      	ble.n	8006c72 <_printf_float+0xa2>
 8006c28:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c30:	d502      	bpl.n	8006c38 <_printf_float+0x68>
 8006c32:	232d      	movs	r3, #45	@ 0x2d
 8006c34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c38:	498f      	ldr	r1, [pc, #572]	@ (8006e78 <_printf_float+0x2a8>)
 8006c3a:	4b90      	ldr	r3, [pc, #576]	@ (8006e7c <_printf_float+0x2ac>)
 8006c3c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006c40:	bf94      	ite	ls
 8006c42:	4688      	movls	r8, r1
 8006c44:	4698      	movhi	r8, r3
 8006c46:	f022 0204 	bic.w	r2, r2, #4
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	6123      	str	r3, [r4, #16]
 8006c4e:	6022      	str	r2, [r4, #0]
 8006c50:	f04f 0a00 	mov.w	sl, #0
 8006c54:	9700      	str	r7, [sp, #0]
 8006c56:	4633      	mov	r3, r6
 8006c58:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006c5a:	4621      	mov	r1, r4
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	f000 f9d1 	bl	8007004 <_printf_common>
 8006c62:	3001      	adds	r0, #1
 8006c64:	f040 8089 	bne.w	8006d7a <_printf_float+0x1aa>
 8006c68:	f04f 30ff 	mov.w	r0, #4294967295
 8006c6c:	b00d      	add	sp, #52	@ 0x34
 8006c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c72:	eeb4 0b40 	vcmp.f64	d0, d0
 8006c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c7a:	d709      	bvc.n	8006c90 <_printf_float+0xc0>
 8006c7c:	ee10 3a90 	vmov	r3, s1
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	bfbc      	itt	lt
 8006c84:	232d      	movlt	r3, #45	@ 0x2d
 8006c86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006c8a:	497d      	ldr	r1, [pc, #500]	@ (8006e80 <_printf_float+0x2b0>)
 8006c8c:	4b7d      	ldr	r3, [pc, #500]	@ (8006e84 <_printf_float+0x2b4>)
 8006c8e:	e7d5      	b.n	8006c3c <_printf_float+0x6c>
 8006c90:	6863      	ldr	r3, [r4, #4]
 8006c92:	1c59      	adds	r1, r3, #1
 8006c94:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8006c98:	d139      	bne.n	8006d0e <_printf_float+0x13e>
 8006c9a:	2306      	movs	r3, #6
 8006c9c:	6063      	str	r3, [r4, #4]
 8006c9e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	6022      	str	r2, [r4, #0]
 8006ca6:	9303      	str	r3, [sp, #12]
 8006ca8:	ab0a      	add	r3, sp, #40	@ 0x28
 8006caa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006cae:	ab09      	add	r3, sp, #36	@ 0x24
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	6861      	ldr	r1, [r4, #4]
 8006cb4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006cb8:	4628      	mov	r0, r5
 8006cba:	f7ff fefb 	bl	8006ab4 <__cvt>
 8006cbe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006cc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006cc4:	4680      	mov	r8, r0
 8006cc6:	d129      	bne.n	8006d1c <_printf_float+0x14c>
 8006cc8:	1cc8      	adds	r0, r1, #3
 8006cca:	db02      	blt.n	8006cd2 <_printf_float+0x102>
 8006ccc:	6863      	ldr	r3, [r4, #4]
 8006cce:	4299      	cmp	r1, r3
 8006cd0:	dd41      	ble.n	8006d56 <_printf_float+0x186>
 8006cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8006cd6:	fa5f f989 	uxtb.w	r9, r9
 8006cda:	3901      	subs	r1, #1
 8006cdc:	464a      	mov	r2, r9
 8006cde:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006ce2:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ce4:	f7ff ff3a 	bl	8006b5c <__exponent>
 8006ce8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006cea:	1813      	adds	r3, r2, r0
 8006cec:	2a01      	cmp	r2, #1
 8006cee:	4682      	mov	sl, r0
 8006cf0:	6123      	str	r3, [r4, #16]
 8006cf2:	dc02      	bgt.n	8006cfa <_printf_float+0x12a>
 8006cf4:	6822      	ldr	r2, [r4, #0]
 8006cf6:	07d2      	lsls	r2, r2, #31
 8006cf8:	d501      	bpl.n	8006cfe <_printf_float+0x12e>
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	6123      	str	r3, [r4, #16]
 8006cfe:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d0a6      	beq.n	8006c54 <_printf_float+0x84>
 8006d06:	232d      	movs	r3, #45	@ 0x2d
 8006d08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d0c:	e7a2      	b.n	8006c54 <_printf_float+0x84>
 8006d0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006d12:	d1c4      	bne.n	8006c9e <_printf_float+0xce>
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1c2      	bne.n	8006c9e <_printf_float+0xce>
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e7bf      	b.n	8006c9c <_printf_float+0xcc>
 8006d1c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006d20:	d9db      	bls.n	8006cda <_printf_float+0x10a>
 8006d22:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8006d26:	d118      	bne.n	8006d5a <_printf_float+0x18a>
 8006d28:	2900      	cmp	r1, #0
 8006d2a:	6863      	ldr	r3, [r4, #4]
 8006d2c:	dd0b      	ble.n	8006d46 <_printf_float+0x176>
 8006d2e:	6121      	str	r1, [r4, #16]
 8006d30:	b913      	cbnz	r3, 8006d38 <_printf_float+0x168>
 8006d32:	6822      	ldr	r2, [r4, #0]
 8006d34:	07d0      	lsls	r0, r2, #31
 8006d36:	d502      	bpl.n	8006d3e <_printf_float+0x16e>
 8006d38:	3301      	adds	r3, #1
 8006d3a:	440b      	add	r3, r1
 8006d3c:	6123      	str	r3, [r4, #16]
 8006d3e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006d40:	f04f 0a00 	mov.w	sl, #0
 8006d44:	e7db      	b.n	8006cfe <_printf_float+0x12e>
 8006d46:	b913      	cbnz	r3, 8006d4e <_printf_float+0x17e>
 8006d48:	6822      	ldr	r2, [r4, #0]
 8006d4a:	07d2      	lsls	r2, r2, #31
 8006d4c:	d501      	bpl.n	8006d52 <_printf_float+0x182>
 8006d4e:	3302      	adds	r3, #2
 8006d50:	e7f4      	b.n	8006d3c <_printf_float+0x16c>
 8006d52:	2301      	movs	r3, #1
 8006d54:	e7f2      	b.n	8006d3c <_printf_float+0x16c>
 8006d56:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8006d5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d5c:	4299      	cmp	r1, r3
 8006d5e:	db05      	blt.n	8006d6c <_printf_float+0x19c>
 8006d60:	6823      	ldr	r3, [r4, #0]
 8006d62:	6121      	str	r1, [r4, #16]
 8006d64:	07d8      	lsls	r0, r3, #31
 8006d66:	d5ea      	bpl.n	8006d3e <_printf_float+0x16e>
 8006d68:	1c4b      	adds	r3, r1, #1
 8006d6a:	e7e7      	b.n	8006d3c <_printf_float+0x16c>
 8006d6c:	2900      	cmp	r1, #0
 8006d6e:	bfd4      	ite	le
 8006d70:	f1c1 0202 	rsble	r2, r1, #2
 8006d74:	2201      	movgt	r2, #1
 8006d76:	4413      	add	r3, r2
 8006d78:	e7e0      	b.n	8006d3c <_printf_float+0x16c>
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	055a      	lsls	r2, r3, #21
 8006d7e:	d407      	bmi.n	8006d90 <_printf_float+0x1c0>
 8006d80:	6923      	ldr	r3, [r4, #16]
 8006d82:	4642      	mov	r2, r8
 8006d84:	4631      	mov	r1, r6
 8006d86:	4628      	mov	r0, r5
 8006d88:	47b8      	blx	r7
 8006d8a:	3001      	adds	r0, #1
 8006d8c:	d12a      	bne.n	8006de4 <_printf_float+0x214>
 8006d8e:	e76b      	b.n	8006c68 <_printf_float+0x98>
 8006d90:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006d94:	f240 80e0 	bls.w	8006f58 <_printf_float+0x388>
 8006d98:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006d9c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006da4:	d133      	bne.n	8006e0e <_printf_float+0x23e>
 8006da6:	4a38      	ldr	r2, [pc, #224]	@ (8006e88 <_printf_float+0x2b8>)
 8006da8:	2301      	movs	r3, #1
 8006daa:	4631      	mov	r1, r6
 8006dac:	4628      	mov	r0, r5
 8006dae:	47b8      	blx	r7
 8006db0:	3001      	adds	r0, #1
 8006db2:	f43f af59 	beq.w	8006c68 <_printf_float+0x98>
 8006db6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006dba:	4543      	cmp	r3, r8
 8006dbc:	db02      	blt.n	8006dc4 <_printf_float+0x1f4>
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	07d8      	lsls	r0, r3, #31
 8006dc2:	d50f      	bpl.n	8006de4 <_printf_float+0x214>
 8006dc4:	9b05      	ldr	r3, [sp, #20]
 8006dc6:	465a      	mov	r2, fp
 8006dc8:	4631      	mov	r1, r6
 8006dca:	4628      	mov	r0, r5
 8006dcc:	47b8      	blx	r7
 8006dce:	3001      	adds	r0, #1
 8006dd0:	f43f af4a 	beq.w	8006c68 <_printf_float+0x98>
 8006dd4:	f04f 0900 	mov.w	r9, #0
 8006dd8:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ddc:	f104 0a1a 	add.w	sl, r4, #26
 8006de0:	45c8      	cmp	r8, r9
 8006de2:	dc09      	bgt.n	8006df8 <_printf_float+0x228>
 8006de4:	6823      	ldr	r3, [r4, #0]
 8006de6:	079b      	lsls	r3, r3, #30
 8006de8:	f100 8107 	bmi.w	8006ffa <_printf_float+0x42a>
 8006dec:	68e0      	ldr	r0, [r4, #12]
 8006dee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006df0:	4298      	cmp	r0, r3
 8006df2:	bfb8      	it	lt
 8006df4:	4618      	movlt	r0, r3
 8006df6:	e739      	b.n	8006c6c <_printf_float+0x9c>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	4652      	mov	r2, sl
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	4628      	mov	r0, r5
 8006e00:	47b8      	blx	r7
 8006e02:	3001      	adds	r0, #1
 8006e04:	f43f af30 	beq.w	8006c68 <_printf_float+0x98>
 8006e08:	f109 0901 	add.w	r9, r9, #1
 8006e0c:	e7e8      	b.n	8006de0 <_printf_float+0x210>
 8006e0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	dc3b      	bgt.n	8006e8c <_printf_float+0x2bc>
 8006e14:	4a1c      	ldr	r2, [pc, #112]	@ (8006e88 <_printf_float+0x2b8>)
 8006e16:	2301      	movs	r3, #1
 8006e18:	4631      	mov	r1, r6
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	47b8      	blx	r7
 8006e1e:	3001      	adds	r0, #1
 8006e20:	f43f af22 	beq.w	8006c68 <_printf_float+0x98>
 8006e24:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006e28:	ea59 0303 	orrs.w	r3, r9, r3
 8006e2c:	d102      	bne.n	8006e34 <_printf_float+0x264>
 8006e2e:	6823      	ldr	r3, [r4, #0]
 8006e30:	07d9      	lsls	r1, r3, #31
 8006e32:	d5d7      	bpl.n	8006de4 <_printf_float+0x214>
 8006e34:	9b05      	ldr	r3, [sp, #20]
 8006e36:	465a      	mov	r2, fp
 8006e38:	4631      	mov	r1, r6
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	47b8      	blx	r7
 8006e3e:	3001      	adds	r0, #1
 8006e40:	f43f af12 	beq.w	8006c68 <_printf_float+0x98>
 8006e44:	f04f 0a00 	mov.w	sl, #0
 8006e48:	f104 0b1a 	add.w	fp, r4, #26
 8006e4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e4e:	425b      	negs	r3, r3
 8006e50:	4553      	cmp	r3, sl
 8006e52:	dc01      	bgt.n	8006e58 <_printf_float+0x288>
 8006e54:	464b      	mov	r3, r9
 8006e56:	e794      	b.n	8006d82 <_printf_float+0x1b2>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	465a      	mov	r2, fp
 8006e5c:	4631      	mov	r1, r6
 8006e5e:	4628      	mov	r0, r5
 8006e60:	47b8      	blx	r7
 8006e62:	3001      	adds	r0, #1
 8006e64:	f43f af00 	beq.w	8006c68 <_printf_float+0x98>
 8006e68:	f10a 0a01 	add.w	sl, sl, #1
 8006e6c:	e7ee      	b.n	8006e4c <_printf_float+0x27c>
 8006e6e:	bf00      	nop
 8006e70:	ffffffff 	.word	0xffffffff
 8006e74:	7fefffff 	.word	0x7fefffff
 8006e78:	080092ec 	.word	0x080092ec
 8006e7c:	080092f0 	.word	0x080092f0
 8006e80:	080092f4 	.word	0x080092f4
 8006e84:	080092f8 	.word	0x080092f8
 8006e88:	080092fc 	.word	0x080092fc
 8006e8c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e8e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e92:	4553      	cmp	r3, sl
 8006e94:	bfa8      	it	ge
 8006e96:	4653      	movge	r3, sl
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	4699      	mov	r9, r3
 8006e9c:	dc37      	bgt.n	8006f0e <_printf_float+0x33e>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	9307      	str	r3, [sp, #28]
 8006ea2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ea6:	f104 021a 	add.w	r2, r4, #26
 8006eaa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006eac:	9907      	ldr	r1, [sp, #28]
 8006eae:	9306      	str	r3, [sp, #24]
 8006eb0:	eba3 0309 	sub.w	r3, r3, r9
 8006eb4:	428b      	cmp	r3, r1
 8006eb6:	dc31      	bgt.n	8006f1c <_printf_float+0x34c>
 8006eb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eba:	459a      	cmp	sl, r3
 8006ebc:	dc3b      	bgt.n	8006f36 <_printf_float+0x366>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	07da      	lsls	r2, r3, #31
 8006ec2:	d438      	bmi.n	8006f36 <_printf_float+0x366>
 8006ec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ec6:	ebaa 0903 	sub.w	r9, sl, r3
 8006eca:	9b06      	ldr	r3, [sp, #24]
 8006ecc:	ebaa 0303 	sub.w	r3, sl, r3
 8006ed0:	4599      	cmp	r9, r3
 8006ed2:	bfa8      	it	ge
 8006ed4:	4699      	movge	r9, r3
 8006ed6:	f1b9 0f00 	cmp.w	r9, #0
 8006eda:	dc34      	bgt.n	8006f46 <_printf_float+0x376>
 8006edc:	f04f 0800 	mov.w	r8, #0
 8006ee0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ee4:	f104 0b1a 	add.w	fp, r4, #26
 8006ee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eea:	ebaa 0303 	sub.w	r3, sl, r3
 8006eee:	eba3 0309 	sub.w	r3, r3, r9
 8006ef2:	4543      	cmp	r3, r8
 8006ef4:	f77f af76 	ble.w	8006de4 <_printf_float+0x214>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	465a      	mov	r2, fp
 8006efc:	4631      	mov	r1, r6
 8006efe:	4628      	mov	r0, r5
 8006f00:	47b8      	blx	r7
 8006f02:	3001      	adds	r0, #1
 8006f04:	f43f aeb0 	beq.w	8006c68 <_printf_float+0x98>
 8006f08:	f108 0801 	add.w	r8, r8, #1
 8006f0c:	e7ec      	b.n	8006ee8 <_printf_float+0x318>
 8006f0e:	4642      	mov	r2, r8
 8006f10:	4631      	mov	r1, r6
 8006f12:	4628      	mov	r0, r5
 8006f14:	47b8      	blx	r7
 8006f16:	3001      	adds	r0, #1
 8006f18:	d1c1      	bne.n	8006e9e <_printf_float+0x2ce>
 8006f1a:	e6a5      	b.n	8006c68 <_printf_float+0x98>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	4631      	mov	r1, r6
 8006f20:	4628      	mov	r0, r5
 8006f22:	9206      	str	r2, [sp, #24]
 8006f24:	47b8      	blx	r7
 8006f26:	3001      	adds	r0, #1
 8006f28:	f43f ae9e 	beq.w	8006c68 <_printf_float+0x98>
 8006f2c:	9b07      	ldr	r3, [sp, #28]
 8006f2e:	9a06      	ldr	r2, [sp, #24]
 8006f30:	3301      	adds	r3, #1
 8006f32:	9307      	str	r3, [sp, #28]
 8006f34:	e7b9      	b.n	8006eaa <_printf_float+0x2da>
 8006f36:	9b05      	ldr	r3, [sp, #20]
 8006f38:	465a      	mov	r2, fp
 8006f3a:	4631      	mov	r1, r6
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	47b8      	blx	r7
 8006f40:	3001      	adds	r0, #1
 8006f42:	d1bf      	bne.n	8006ec4 <_printf_float+0x2f4>
 8006f44:	e690      	b.n	8006c68 <_printf_float+0x98>
 8006f46:	9a06      	ldr	r2, [sp, #24]
 8006f48:	464b      	mov	r3, r9
 8006f4a:	4442      	add	r2, r8
 8006f4c:	4631      	mov	r1, r6
 8006f4e:	4628      	mov	r0, r5
 8006f50:	47b8      	blx	r7
 8006f52:	3001      	adds	r0, #1
 8006f54:	d1c2      	bne.n	8006edc <_printf_float+0x30c>
 8006f56:	e687      	b.n	8006c68 <_printf_float+0x98>
 8006f58:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8006f5c:	f1b9 0f01 	cmp.w	r9, #1
 8006f60:	dc01      	bgt.n	8006f66 <_printf_float+0x396>
 8006f62:	07db      	lsls	r3, r3, #31
 8006f64:	d536      	bpl.n	8006fd4 <_printf_float+0x404>
 8006f66:	2301      	movs	r3, #1
 8006f68:	4642      	mov	r2, r8
 8006f6a:	4631      	mov	r1, r6
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	47b8      	blx	r7
 8006f70:	3001      	adds	r0, #1
 8006f72:	f43f ae79 	beq.w	8006c68 <_printf_float+0x98>
 8006f76:	9b05      	ldr	r3, [sp, #20]
 8006f78:	465a      	mov	r2, fp
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	47b8      	blx	r7
 8006f80:	3001      	adds	r0, #1
 8006f82:	f43f ae71 	beq.w	8006c68 <_printf_float+0x98>
 8006f86:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006f8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f92:	f109 39ff 	add.w	r9, r9, #4294967295
 8006f96:	d018      	beq.n	8006fca <_printf_float+0x3fa>
 8006f98:	464b      	mov	r3, r9
 8006f9a:	f108 0201 	add.w	r2, r8, #1
 8006f9e:	4631      	mov	r1, r6
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	47b8      	blx	r7
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	d10c      	bne.n	8006fc2 <_printf_float+0x3f2>
 8006fa8:	e65e      	b.n	8006c68 <_printf_float+0x98>
 8006faa:	2301      	movs	r3, #1
 8006fac:	465a      	mov	r2, fp
 8006fae:	4631      	mov	r1, r6
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	47b8      	blx	r7
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	f43f ae57 	beq.w	8006c68 <_printf_float+0x98>
 8006fba:	f108 0801 	add.w	r8, r8, #1
 8006fbe:	45c8      	cmp	r8, r9
 8006fc0:	dbf3      	blt.n	8006faa <_printf_float+0x3da>
 8006fc2:	4653      	mov	r3, sl
 8006fc4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006fc8:	e6dc      	b.n	8006d84 <_printf_float+0x1b4>
 8006fca:	f04f 0800 	mov.w	r8, #0
 8006fce:	f104 0b1a 	add.w	fp, r4, #26
 8006fd2:	e7f4      	b.n	8006fbe <_printf_float+0x3ee>
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	4642      	mov	r2, r8
 8006fd8:	e7e1      	b.n	8006f9e <_printf_float+0x3ce>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	464a      	mov	r2, r9
 8006fde:	4631      	mov	r1, r6
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	47b8      	blx	r7
 8006fe4:	3001      	adds	r0, #1
 8006fe6:	f43f ae3f 	beq.w	8006c68 <_printf_float+0x98>
 8006fea:	f108 0801 	add.w	r8, r8, #1
 8006fee:	68e3      	ldr	r3, [r4, #12]
 8006ff0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ff2:	1a5b      	subs	r3, r3, r1
 8006ff4:	4543      	cmp	r3, r8
 8006ff6:	dcf0      	bgt.n	8006fda <_printf_float+0x40a>
 8006ff8:	e6f8      	b.n	8006dec <_printf_float+0x21c>
 8006ffa:	f04f 0800 	mov.w	r8, #0
 8006ffe:	f104 0919 	add.w	r9, r4, #25
 8007002:	e7f4      	b.n	8006fee <_printf_float+0x41e>

08007004 <_printf_common>:
 8007004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007008:	4616      	mov	r6, r2
 800700a:	4698      	mov	r8, r3
 800700c:	688a      	ldr	r2, [r1, #8]
 800700e:	690b      	ldr	r3, [r1, #16]
 8007010:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007014:	4293      	cmp	r3, r2
 8007016:	bfb8      	it	lt
 8007018:	4613      	movlt	r3, r2
 800701a:	6033      	str	r3, [r6, #0]
 800701c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007020:	4607      	mov	r7, r0
 8007022:	460c      	mov	r4, r1
 8007024:	b10a      	cbz	r2, 800702a <_printf_common+0x26>
 8007026:	3301      	adds	r3, #1
 8007028:	6033      	str	r3, [r6, #0]
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	0699      	lsls	r1, r3, #26
 800702e:	bf42      	ittt	mi
 8007030:	6833      	ldrmi	r3, [r6, #0]
 8007032:	3302      	addmi	r3, #2
 8007034:	6033      	strmi	r3, [r6, #0]
 8007036:	6825      	ldr	r5, [r4, #0]
 8007038:	f015 0506 	ands.w	r5, r5, #6
 800703c:	d106      	bne.n	800704c <_printf_common+0x48>
 800703e:	f104 0a19 	add.w	sl, r4, #25
 8007042:	68e3      	ldr	r3, [r4, #12]
 8007044:	6832      	ldr	r2, [r6, #0]
 8007046:	1a9b      	subs	r3, r3, r2
 8007048:	42ab      	cmp	r3, r5
 800704a:	dc26      	bgt.n	800709a <_printf_common+0x96>
 800704c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007050:	6822      	ldr	r2, [r4, #0]
 8007052:	3b00      	subs	r3, #0
 8007054:	bf18      	it	ne
 8007056:	2301      	movne	r3, #1
 8007058:	0692      	lsls	r2, r2, #26
 800705a:	d42b      	bmi.n	80070b4 <_printf_common+0xb0>
 800705c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007060:	4641      	mov	r1, r8
 8007062:	4638      	mov	r0, r7
 8007064:	47c8      	blx	r9
 8007066:	3001      	adds	r0, #1
 8007068:	d01e      	beq.n	80070a8 <_printf_common+0xa4>
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	6922      	ldr	r2, [r4, #16]
 800706e:	f003 0306 	and.w	r3, r3, #6
 8007072:	2b04      	cmp	r3, #4
 8007074:	bf02      	ittt	eq
 8007076:	68e5      	ldreq	r5, [r4, #12]
 8007078:	6833      	ldreq	r3, [r6, #0]
 800707a:	1aed      	subeq	r5, r5, r3
 800707c:	68a3      	ldr	r3, [r4, #8]
 800707e:	bf0c      	ite	eq
 8007080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007084:	2500      	movne	r5, #0
 8007086:	4293      	cmp	r3, r2
 8007088:	bfc4      	itt	gt
 800708a:	1a9b      	subgt	r3, r3, r2
 800708c:	18ed      	addgt	r5, r5, r3
 800708e:	2600      	movs	r6, #0
 8007090:	341a      	adds	r4, #26
 8007092:	42b5      	cmp	r5, r6
 8007094:	d11a      	bne.n	80070cc <_printf_common+0xc8>
 8007096:	2000      	movs	r0, #0
 8007098:	e008      	b.n	80070ac <_printf_common+0xa8>
 800709a:	2301      	movs	r3, #1
 800709c:	4652      	mov	r2, sl
 800709e:	4641      	mov	r1, r8
 80070a0:	4638      	mov	r0, r7
 80070a2:	47c8      	blx	r9
 80070a4:	3001      	adds	r0, #1
 80070a6:	d103      	bne.n	80070b0 <_printf_common+0xac>
 80070a8:	f04f 30ff 	mov.w	r0, #4294967295
 80070ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b0:	3501      	adds	r5, #1
 80070b2:	e7c6      	b.n	8007042 <_printf_common+0x3e>
 80070b4:	18e1      	adds	r1, r4, r3
 80070b6:	1c5a      	adds	r2, r3, #1
 80070b8:	2030      	movs	r0, #48	@ 0x30
 80070ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070be:	4422      	add	r2, r4
 80070c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070c8:	3302      	adds	r3, #2
 80070ca:	e7c7      	b.n	800705c <_printf_common+0x58>
 80070cc:	2301      	movs	r3, #1
 80070ce:	4622      	mov	r2, r4
 80070d0:	4641      	mov	r1, r8
 80070d2:	4638      	mov	r0, r7
 80070d4:	47c8      	blx	r9
 80070d6:	3001      	adds	r0, #1
 80070d8:	d0e6      	beq.n	80070a8 <_printf_common+0xa4>
 80070da:	3601      	adds	r6, #1
 80070dc:	e7d9      	b.n	8007092 <_printf_common+0x8e>
	...

080070e0 <_printf_i>:
 80070e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070e4:	7e0f      	ldrb	r7, [r1, #24]
 80070e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070e8:	2f78      	cmp	r7, #120	@ 0x78
 80070ea:	4691      	mov	r9, r2
 80070ec:	4680      	mov	r8, r0
 80070ee:	460c      	mov	r4, r1
 80070f0:	469a      	mov	sl, r3
 80070f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070f6:	d807      	bhi.n	8007108 <_printf_i+0x28>
 80070f8:	2f62      	cmp	r7, #98	@ 0x62
 80070fa:	d80a      	bhi.n	8007112 <_printf_i+0x32>
 80070fc:	2f00      	cmp	r7, #0
 80070fe:	f000 80d2 	beq.w	80072a6 <_printf_i+0x1c6>
 8007102:	2f58      	cmp	r7, #88	@ 0x58
 8007104:	f000 80b9 	beq.w	800727a <_printf_i+0x19a>
 8007108:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800710c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007110:	e03a      	b.n	8007188 <_printf_i+0xa8>
 8007112:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007116:	2b15      	cmp	r3, #21
 8007118:	d8f6      	bhi.n	8007108 <_printf_i+0x28>
 800711a:	a101      	add	r1, pc, #4	@ (adr r1, 8007120 <_printf_i+0x40>)
 800711c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007120:	08007179 	.word	0x08007179
 8007124:	0800718d 	.word	0x0800718d
 8007128:	08007109 	.word	0x08007109
 800712c:	08007109 	.word	0x08007109
 8007130:	08007109 	.word	0x08007109
 8007134:	08007109 	.word	0x08007109
 8007138:	0800718d 	.word	0x0800718d
 800713c:	08007109 	.word	0x08007109
 8007140:	08007109 	.word	0x08007109
 8007144:	08007109 	.word	0x08007109
 8007148:	08007109 	.word	0x08007109
 800714c:	0800728d 	.word	0x0800728d
 8007150:	080071b7 	.word	0x080071b7
 8007154:	08007247 	.word	0x08007247
 8007158:	08007109 	.word	0x08007109
 800715c:	08007109 	.word	0x08007109
 8007160:	080072af 	.word	0x080072af
 8007164:	08007109 	.word	0x08007109
 8007168:	080071b7 	.word	0x080071b7
 800716c:	08007109 	.word	0x08007109
 8007170:	08007109 	.word	0x08007109
 8007174:	0800724f 	.word	0x0800724f
 8007178:	6833      	ldr	r3, [r6, #0]
 800717a:	1d1a      	adds	r2, r3, #4
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6032      	str	r2, [r6, #0]
 8007180:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007184:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007188:	2301      	movs	r3, #1
 800718a:	e09d      	b.n	80072c8 <_printf_i+0x1e8>
 800718c:	6833      	ldr	r3, [r6, #0]
 800718e:	6820      	ldr	r0, [r4, #0]
 8007190:	1d19      	adds	r1, r3, #4
 8007192:	6031      	str	r1, [r6, #0]
 8007194:	0606      	lsls	r6, r0, #24
 8007196:	d501      	bpl.n	800719c <_printf_i+0xbc>
 8007198:	681d      	ldr	r5, [r3, #0]
 800719a:	e003      	b.n	80071a4 <_printf_i+0xc4>
 800719c:	0645      	lsls	r5, r0, #25
 800719e:	d5fb      	bpl.n	8007198 <_printf_i+0xb8>
 80071a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071a4:	2d00      	cmp	r5, #0
 80071a6:	da03      	bge.n	80071b0 <_printf_i+0xd0>
 80071a8:	232d      	movs	r3, #45	@ 0x2d
 80071aa:	426d      	negs	r5, r5
 80071ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071b0:	4859      	ldr	r0, [pc, #356]	@ (8007318 <_printf_i+0x238>)
 80071b2:	230a      	movs	r3, #10
 80071b4:	e011      	b.n	80071da <_printf_i+0xfa>
 80071b6:	6821      	ldr	r1, [r4, #0]
 80071b8:	6833      	ldr	r3, [r6, #0]
 80071ba:	0608      	lsls	r0, r1, #24
 80071bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80071c0:	d402      	bmi.n	80071c8 <_printf_i+0xe8>
 80071c2:	0649      	lsls	r1, r1, #25
 80071c4:	bf48      	it	mi
 80071c6:	b2ad      	uxthmi	r5, r5
 80071c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80071ca:	4853      	ldr	r0, [pc, #332]	@ (8007318 <_printf_i+0x238>)
 80071cc:	6033      	str	r3, [r6, #0]
 80071ce:	bf14      	ite	ne
 80071d0:	230a      	movne	r3, #10
 80071d2:	2308      	moveq	r3, #8
 80071d4:	2100      	movs	r1, #0
 80071d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071da:	6866      	ldr	r6, [r4, #4]
 80071dc:	60a6      	str	r6, [r4, #8]
 80071de:	2e00      	cmp	r6, #0
 80071e0:	bfa2      	ittt	ge
 80071e2:	6821      	ldrge	r1, [r4, #0]
 80071e4:	f021 0104 	bicge.w	r1, r1, #4
 80071e8:	6021      	strge	r1, [r4, #0]
 80071ea:	b90d      	cbnz	r5, 80071f0 <_printf_i+0x110>
 80071ec:	2e00      	cmp	r6, #0
 80071ee:	d04b      	beq.n	8007288 <_printf_i+0x1a8>
 80071f0:	4616      	mov	r6, r2
 80071f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80071f6:	fb03 5711 	mls	r7, r3, r1, r5
 80071fa:	5dc7      	ldrb	r7, [r0, r7]
 80071fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007200:	462f      	mov	r7, r5
 8007202:	42bb      	cmp	r3, r7
 8007204:	460d      	mov	r5, r1
 8007206:	d9f4      	bls.n	80071f2 <_printf_i+0x112>
 8007208:	2b08      	cmp	r3, #8
 800720a:	d10b      	bne.n	8007224 <_printf_i+0x144>
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	07df      	lsls	r7, r3, #31
 8007210:	d508      	bpl.n	8007224 <_printf_i+0x144>
 8007212:	6923      	ldr	r3, [r4, #16]
 8007214:	6861      	ldr	r1, [r4, #4]
 8007216:	4299      	cmp	r1, r3
 8007218:	bfde      	ittt	le
 800721a:	2330      	movle	r3, #48	@ 0x30
 800721c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007220:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007224:	1b92      	subs	r2, r2, r6
 8007226:	6122      	str	r2, [r4, #16]
 8007228:	f8cd a000 	str.w	sl, [sp]
 800722c:	464b      	mov	r3, r9
 800722e:	aa03      	add	r2, sp, #12
 8007230:	4621      	mov	r1, r4
 8007232:	4640      	mov	r0, r8
 8007234:	f7ff fee6 	bl	8007004 <_printf_common>
 8007238:	3001      	adds	r0, #1
 800723a:	d14a      	bne.n	80072d2 <_printf_i+0x1f2>
 800723c:	f04f 30ff 	mov.w	r0, #4294967295
 8007240:	b004      	add	sp, #16
 8007242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	f043 0320 	orr.w	r3, r3, #32
 800724c:	6023      	str	r3, [r4, #0]
 800724e:	4833      	ldr	r0, [pc, #204]	@ (800731c <_printf_i+0x23c>)
 8007250:	2778      	movs	r7, #120	@ 0x78
 8007252:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	6831      	ldr	r1, [r6, #0]
 800725a:	061f      	lsls	r7, r3, #24
 800725c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007260:	d402      	bmi.n	8007268 <_printf_i+0x188>
 8007262:	065f      	lsls	r7, r3, #25
 8007264:	bf48      	it	mi
 8007266:	b2ad      	uxthmi	r5, r5
 8007268:	6031      	str	r1, [r6, #0]
 800726a:	07d9      	lsls	r1, r3, #31
 800726c:	bf44      	itt	mi
 800726e:	f043 0320 	orrmi.w	r3, r3, #32
 8007272:	6023      	strmi	r3, [r4, #0]
 8007274:	b11d      	cbz	r5, 800727e <_printf_i+0x19e>
 8007276:	2310      	movs	r3, #16
 8007278:	e7ac      	b.n	80071d4 <_printf_i+0xf4>
 800727a:	4827      	ldr	r0, [pc, #156]	@ (8007318 <_printf_i+0x238>)
 800727c:	e7e9      	b.n	8007252 <_printf_i+0x172>
 800727e:	6823      	ldr	r3, [r4, #0]
 8007280:	f023 0320 	bic.w	r3, r3, #32
 8007284:	6023      	str	r3, [r4, #0]
 8007286:	e7f6      	b.n	8007276 <_printf_i+0x196>
 8007288:	4616      	mov	r6, r2
 800728a:	e7bd      	b.n	8007208 <_printf_i+0x128>
 800728c:	6833      	ldr	r3, [r6, #0]
 800728e:	6825      	ldr	r5, [r4, #0]
 8007290:	6961      	ldr	r1, [r4, #20]
 8007292:	1d18      	adds	r0, r3, #4
 8007294:	6030      	str	r0, [r6, #0]
 8007296:	062e      	lsls	r6, r5, #24
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	d501      	bpl.n	80072a0 <_printf_i+0x1c0>
 800729c:	6019      	str	r1, [r3, #0]
 800729e:	e002      	b.n	80072a6 <_printf_i+0x1c6>
 80072a0:	0668      	lsls	r0, r5, #25
 80072a2:	d5fb      	bpl.n	800729c <_printf_i+0x1bc>
 80072a4:	8019      	strh	r1, [r3, #0]
 80072a6:	2300      	movs	r3, #0
 80072a8:	6123      	str	r3, [r4, #16]
 80072aa:	4616      	mov	r6, r2
 80072ac:	e7bc      	b.n	8007228 <_printf_i+0x148>
 80072ae:	6833      	ldr	r3, [r6, #0]
 80072b0:	1d1a      	adds	r2, r3, #4
 80072b2:	6032      	str	r2, [r6, #0]
 80072b4:	681e      	ldr	r6, [r3, #0]
 80072b6:	6862      	ldr	r2, [r4, #4]
 80072b8:	2100      	movs	r1, #0
 80072ba:	4630      	mov	r0, r6
 80072bc:	f7f9 f828 	bl	8000310 <memchr>
 80072c0:	b108      	cbz	r0, 80072c6 <_printf_i+0x1e6>
 80072c2:	1b80      	subs	r0, r0, r6
 80072c4:	6060      	str	r0, [r4, #4]
 80072c6:	6863      	ldr	r3, [r4, #4]
 80072c8:	6123      	str	r3, [r4, #16]
 80072ca:	2300      	movs	r3, #0
 80072cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072d0:	e7aa      	b.n	8007228 <_printf_i+0x148>
 80072d2:	6923      	ldr	r3, [r4, #16]
 80072d4:	4632      	mov	r2, r6
 80072d6:	4649      	mov	r1, r9
 80072d8:	4640      	mov	r0, r8
 80072da:	47d0      	blx	sl
 80072dc:	3001      	adds	r0, #1
 80072de:	d0ad      	beq.n	800723c <_printf_i+0x15c>
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	079b      	lsls	r3, r3, #30
 80072e4:	d413      	bmi.n	800730e <_printf_i+0x22e>
 80072e6:	68e0      	ldr	r0, [r4, #12]
 80072e8:	9b03      	ldr	r3, [sp, #12]
 80072ea:	4298      	cmp	r0, r3
 80072ec:	bfb8      	it	lt
 80072ee:	4618      	movlt	r0, r3
 80072f0:	e7a6      	b.n	8007240 <_printf_i+0x160>
 80072f2:	2301      	movs	r3, #1
 80072f4:	4632      	mov	r2, r6
 80072f6:	4649      	mov	r1, r9
 80072f8:	4640      	mov	r0, r8
 80072fa:	47d0      	blx	sl
 80072fc:	3001      	adds	r0, #1
 80072fe:	d09d      	beq.n	800723c <_printf_i+0x15c>
 8007300:	3501      	adds	r5, #1
 8007302:	68e3      	ldr	r3, [r4, #12]
 8007304:	9903      	ldr	r1, [sp, #12]
 8007306:	1a5b      	subs	r3, r3, r1
 8007308:	42ab      	cmp	r3, r5
 800730a:	dcf2      	bgt.n	80072f2 <_printf_i+0x212>
 800730c:	e7eb      	b.n	80072e6 <_printf_i+0x206>
 800730e:	2500      	movs	r5, #0
 8007310:	f104 0619 	add.w	r6, r4, #25
 8007314:	e7f5      	b.n	8007302 <_printf_i+0x222>
 8007316:	bf00      	nop
 8007318:	080092fe 	.word	0x080092fe
 800731c:	0800930f 	.word	0x0800930f

08007320 <std>:
 8007320:	2300      	movs	r3, #0
 8007322:	b510      	push	{r4, lr}
 8007324:	4604      	mov	r4, r0
 8007326:	e9c0 3300 	strd	r3, r3, [r0]
 800732a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800732e:	6083      	str	r3, [r0, #8]
 8007330:	8181      	strh	r1, [r0, #12]
 8007332:	6643      	str	r3, [r0, #100]	@ 0x64
 8007334:	81c2      	strh	r2, [r0, #14]
 8007336:	6183      	str	r3, [r0, #24]
 8007338:	4619      	mov	r1, r3
 800733a:	2208      	movs	r2, #8
 800733c:	305c      	adds	r0, #92	@ 0x5c
 800733e:	f000 f906 	bl	800754e <memset>
 8007342:	4b0d      	ldr	r3, [pc, #52]	@ (8007378 <std+0x58>)
 8007344:	6263      	str	r3, [r4, #36]	@ 0x24
 8007346:	4b0d      	ldr	r3, [pc, #52]	@ (800737c <std+0x5c>)
 8007348:	62a3      	str	r3, [r4, #40]	@ 0x28
 800734a:	4b0d      	ldr	r3, [pc, #52]	@ (8007380 <std+0x60>)
 800734c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800734e:	4b0d      	ldr	r3, [pc, #52]	@ (8007384 <std+0x64>)
 8007350:	6323      	str	r3, [r4, #48]	@ 0x30
 8007352:	4b0d      	ldr	r3, [pc, #52]	@ (8007388 <std+0x68>)
 8007354:	6224      	str	r4, [r4, #32]
 8007356:	429c      	cmp	r4, r3
 8007358:	d006      	beq.n	8007368 <std+0x48>
 800735a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800735e:	4294      	cmp	r4, r2
 8007360:	d002      	beq.n	8007368 <std+0x48>
 8007362:	33d0      	adds	r3, #208	@ 0xd0
 8007364:	429c      	cmp	r4, r3
 8007366:	d105      	bne.n	8007374 <std+0x54>
 8007368:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800736c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007370:	f000 b97a 	b.w	8007668 <__retarget_lock_init_recursive>
 8007374:	bd10      	pop	{r4, pc}
 8007376:	bf00      	nop
 8007378:	080074c9 	.word	0x080074c9
 800737c:	080074eb 	.word	0x080074eb
 8007380:	08007523 	.word	0x08007523
 8007384:	08007547 	.word	0x08007547
 8007388:	24000324 	.word	0x24000324

0800738c <stdio_exit_handler>:
 800738c:	4a02      	ldr	r2, [pc, #8]	@ (8007398 <stdio_exit_handler+0xc>)
 800738e:	4903      	ldr	r1, [pc, #12]	@ (800739c <stdio_exit_handler+0x10>)
 8007390:	4803      	ldr	r0, [pc, #12]	@ (80073a0 <stdio_exit_handler+0x14>)
 8007392:	f000 b869 	b.w	8007468 <_fwalk_sglue>
 8007396:	bf00      	nop
 8007398:	24000014 	.word	0x24000014
 800739c:	08008d51 	.word	0x08008d51
 80073a0:	24000024 	.word	0x24000024

080073a4 <cleanup_stdio>:
 80073a4:	6841      	ldr	r1, [r0, #4]
 80073a6:	4b0c      	ldr	r3, [pc, #48]	@ (80073d8 <cleanup_stdio+0x34>)
 80073a8:	4299      	cmp	r1, r3
 80073aa:	b510      	push	{r4, lr}
 80073ac:	4604      	mov	r4, r0
 80073ae:	d001      	beq.n	80073b4 <cleanup_stdio+0x10>
 80073b0:	f001 fcce 	bl	8008d50 <_fflush_r>
 80073b4:	68a1      	ldr	r1, [r4, #8]
 80073b6:	4b09      	ldr	r3, [pc, #36]	@ (80073dc <cleanup_stdio+0x38>)
 80073b8:	4299      	cmp	r1, r3
 80073ba:	d002      	beq.n	80073c2 <cleanup_stdio+0x1e>
 80073bc:	4620      	mov	r0, r4
 80073be:	f001 fcc7 	bl	8008d50 <_fflush_r>
 80073c2:	68e1      	ldr	r1, [r4, #12]
 80073c4:	4b06      	ldr	r3, [pc, #24]	@ (80073e0 <cleanup_stdio+0x3c>)
 80073c6:	4299      	cmp	r1, r3
 80073c8:	d004      	beq.n	80073d4 <cleanup_stdio+0x30>
 80073ca:	4620      	mov	r0, r4
 80073cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073d0:	f001 bcbe 	b.w	8008d50 <_fflush_r>
 80073d4:	bd10      	pop	{r4, pc}
 80073d6:	bf00      	nop
 80073d8:	24000324 	.word	0x24000324
 80073dc:	2400038c 	.word	0x2400038c
 80073e0:	240003f4 	.word	0x240003f4

080073e4 <global_stdio_init.part.0>:
 80073e4:	b510      	push	{r4, lr}
 80073e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007414 <global_stdio_init.part.0+0x30>)
 80073e8:	4c0b      	ldr	r4, [pc, #44]	@ (8007418 <global_stdio_init.part.0+0x34>)
 80073ea:	4a0c      	ldr	r2, [pc, #48]	@ (800741c <global_stdio_init.part.0+0x38>)
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	4620      	mov	r0, r4
 80073f0:	2200      	movs	r2, #0
 80073f2:	2104      	movs	r1, #4
 80073f4:	f7ff ff94 	bl	8007320 <std>
 80073f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80073fc:	2201      	movs	r2, #1
 80073fe:	2109      	movs	r1, #9
 8007400:	f7ff ff8e 	bl	8007320 <std>
 8007404:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007408:	2202      	movs	r2, #2
 800740a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800740e:	2112      	movs	r1, #18
 8007410:	f7ff bf86 	b.w	8007320 <std>
 8007414:	2400045c 	.word	0x2400045c
 8007418:	24000324 	.word	0x24000324
 800741c:	0800738d 	.word	0x0800738d

08007420 <__sfp_lock_acquire>:
 8007420:	4801      	ldr	r0, [pc, #4]	@ (8007428 <__sfp_lock_acquire+0x8>)
 8007422:	f000 b922 	b.w	800766a <__retarget_lock_acquire_recursive>
 8007426:	bf00      	nop
 8007428:	24000465 	.word	0x24000465

0800742c <__sfp_lock_release>:
 800742c:	4801      	ldr	r0, [pc, #4]	@ (8007434 <__sfp_lock_release+0x8>)
 800742e:	f000 b91d 	b.w	800766c <__retarget_lock_release_recursive>
 8007432:	bf00      	nop
 8007434:	24000465 	.word	0x24000465

08007438 <__sinit>:
 8007438:	b510      	push	{r4, lr}
 800743a:	4604      	mov	r4, r0
 800743c:	f7ff fff0 	bl	8007420 <__sfp_lock_acquire>
 8007440:	6a23      	ldr	r3, [r4, #32]
 8007442:	b11b      	cbz	r3, 800744c <__sinit+0x14>
 8007444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007448:	f7ff bff0 	b.w	800742c <__sfp_lock_release>
 800744c:	4b04      	ldr	r3, [pc, #16]	@ (8007460 <__sinit+0x28>)
 800744e:	6223      	str	r3, [r4, #32]
 8007450:	4b04      	ldr	r3, [pc, #16]	@ (8007464 <__sinit+0x2c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1f5      	bne.n	8007444 <__sinit+0xc>
 8007458:	f7ff ffc4 	bl	80073e4 <global_stdio_init.part.0>
 800745c:	e7f2      	b.n	8007444 <__sinit+0xc>
 800745e:	bf00      	nop
 8007460:	080073a5 	.word	0x080073a5
 8007464:	2400045c 	.word	0x2400045c

08007468 <_fwalk_sglue>:
 8007468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800746c:	4607      	mov	r7, r0
 800746e:	4688      	mov	r8, r1
 8007470:	4614      	mov	r4, r2
 8007472:	2600      	movs	r6, #0
 8007474:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007478:	f1b9 0901 	subs.w	r9, r9, #1
 800747c:	d505      	bpl.n	800748a <_fwalk_sglue+0x22>
 800747e:	6824      	ldr	r4, [r4, #0]
 8007480:	2c00      	cmp	r4, #0
 8007482:	d1f7      	bne.n	8007474 <_fwalk_sglue+0xc>
 8007484:	4630      	mov	r0, r6
 8007486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800748a:	89ab      	ldrh	r3, [r5, #12]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d907      	bls.n	80074a0 <_fwalk_sglue+0x38>
 8007490:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007494:	3301      	adds	r3, #1
 8007496:	d003      	beq.n	80074a0 <_fwalk_sglue+0x38>
 8007498:	4629      	mov	r1, r5
 800749a:	4638      	mov	r0, r7
 800749c:	47c0      	blx	r8
 800749e:	4306      	orrs	r6, r0
 80074a0:	3568      	adds	r5, #104	@ 0x68
 80074a2:	e7e9      	b.n	8007478 <_fwalk_sglue+0x10>

080074a4 <iprintf>:
 80074a4:	b40f      	push	{r0, r1, r2, r3}
 80074a6:	b507      	push	{r0, r1, r2, lr}
 80074a8:	4906      	ldr	r1, [pc, #24]	@ (80074c4 <iprintf+0x20>)
 80074aa:	ab04      	add	r3, sp, #16
 80074ac:	6808      	ldr	r0, [r1, #0]
 80074ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80074b2:	6881      	ldr	r1, [r0, #8]
 80074b4:	9301      	str	r3, [sp, #4]
 80074b6:	f001 faaf 	bl	8008a18 <_vfiprintf_r>
 80074ba:	b003      	add	sp, #12
 80074bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80074c0:	b004      	add	sp, #16
 80074c2:	4770      	bx	lr
 80074c4:	24000020 	.word	0x24000020

080074c8 <__sread>:
 80074c8:	b510      	push	{r4, lr}
 80074ca:	460c      	mov	r4, r1
 80074cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074d0:	f000 f86c 	bl	80075ac <_read_r>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	bfab      	itete	ge
 80074d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80074da:	89a3      	ldrhlt	r3, [r4, #12]
 80074dc:	181b      	addge	r3, r3, r0
 80074de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80074e2:	bfac      	ite	ge
 80074e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80074e6:	81a3      	strhlt	r3, [r4, #12]
 80074e8:	bd10      	pop	{r4, pc}

080074ea <__swrite>:
 80074ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ee:	461f      	mov	r7, r3
 80074f0:	898b      	ldrh	r3, [r1, #12]
 80074f2:	05db      	lsls	r3, r3, #23
 80074f4:	4605      	mov	r5, r0
 80074f6:	460c      	mov	r4, r1
 80074f8:	4616      	mov	r6, r2
 80074fa:	d505      	bpl.n	8007508 <__swrite+0x1e>
 80074fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007500:	2302      	movs	r3, #2
 8007502:	2200      	movs	r2, #0
 8007504:	f000 f840 	bl	8007588 <_lseek_r>
 8007508:	89a3      	ldrh	r3, [r4, #12]
 800750a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800750e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007512:	81a3      	strh	r3, [r4, #12]
 8007514:	4632      	mov	r2, r6
 8007516:	463b      	mov	r3, r7
 8007518:	4628      	mov	r0, r5
 800751a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800751e:	f000 b867 	b.w	80075f0 <_write_r>

08007522 <__sseek>:
 8007522:	b510      	push	{r4, lr}
 8007524:	460c      	mov	r4, r1
 8007526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800752a:	f000 f82d 	bl	8007588 <_lseek_r>
 800752e:	1c43      	adds	r3, r0, #1
 8007530:	89a3      	ldrh	r3, [r4, #12]
 8007532:	bf15      	itete	ne
 8007534:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007536:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800753a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800753e:	81a3      	strheq	r3, [r4, #12]
 8007540:	bf18      	it	ne
 8007542:	81a3      	strhne	r3, [r4, #12]
 8007544:	bd10      	pop	{r4, pc}

08007546 <__sclose>:
 8007546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800754a:	f000 b80d 	b.w	8007568 <_close_r>

0800754e <memset>:
 800754e:	4402      	add	r2, r0
 8007550:	4603      	mov	r3, r0
 8007552:	4293      	cmp	r3, r2
 8007554:	d100      	bne.n	8007558 <memset+0xa>
 8007556:	4770      	bx	lr
 8007558:	f803 1b01 	strb.w	r1, [r3], #1
 800755c:	e7f9      	b.n	8007552 <memset+0x4>
	...

08007560 <_localeconv_r>:
 8007560:	4800      	ldr	r0, [pc, #0]	@ (8007564 <_localeconv_r+0x4>)
 8007562:	4770      	bx	lr
 8007564:	24000160 	.word	0x24000160

08007568 <_close_r>:
 8007568:	b538      	push	{r3, r4, r5, lr}
 800756a:	4d06      	ldr	r5, [pc, #24]	@ (8007584 <_close_r+0x1c>)
 800756c:	2300      	movs	r3, #0
 800756e:	4604      	mov	r4, r0
 8007570:	4608      	mov	r0, r1
 8007572:	602b      	str	r3, [r5, #0]
 8007574:	f7f9 fc5a 	bl	8000e2c <_close>
 8007578:	1c43      	adds	r3, r0, #1
 800757a:	d102      	bne.n	8007582 <_close_r+0x1a>
 800757c:	682b      	ldr	r3, [r5, #0]
 800757e:	b103      	cbz	r3, 8007582 <_close_r+0x1a>
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	bd38      	pop	{r3, r4, r5, pc}
 8007584:	24000460 	.word	0x24000460

08007588 <_lseek_r>:
 8007588:	b538      	push	{r3, r4, r5, lr}
 800758a:	4d07      	ldr	r5, [pc, #28]	@ (80075a8 <_lseek_r+0x20>)
 800758c:	4604      	mov	r4, r0
 800758e:	4608      	mov	r0, r1
 8007590:	4611      	mov	r1, r2
 8007592:	2200      	movs	r2, #0
 8007594:	602a      	str	r2, [r5, #0]
 8007596:	461a      	mov	r2, r3
 8007598:	f7f9 fc6f 	bl	8000e7a <_lseek>
 800759c:	1c43      	adds	r3, r0, #1
 800759e:	d102      	bne.n	80075a6 <_lseek_r+0x1e>
 80075a0:	682b      	ldr	r3, [r5, #0]
 80075a2:	b103      	cbz	r3, 80075a6 <_lseek_r+0x1e>
 80075a4:	6023      	str	r3, [r4, #0]
 80075a6:	bd38      	pop	{r3, r4, r5, pc}
 80075a8:	24000460 	.word	0x24000460

080075ac <_read_r>:
 80075ac:	b538      	push	{r3, r4, r5, lr}
 80075ae:	4d07      	ldr	r5, [pc, #28]	@ (80075cc <_read_r+0x20>)
 80075b0:	4604      	mov	r4, r0
 80075b2:	4608      	mov	r0, r1
 80075b4:	4611      	mov	r1, r2
 80075b6:	2200      	movs	r2, #0
 80075b8:	602a      	str	r2, [r5, #0]
 80075ba:	461a      	mov	r2, r3
 80075bc:	f7f9 fc19 	bl	8000df2 <_read>
 80075c0:	1c43      	adds	r3, r0, #1
 80075c2:	d102      	bne.n	80075ca <_read_r+0x1e>
 80075c4:	682b      	ldr	r3, [r5, #0]
 80075c6:	b103      	cbz	r3, 80075ca <_read_r+0x1e>
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	bd38      	pop	{r3, r4, r5, pc}
 80075cc:	24000460 	.word	0x24000460

080075d0 <_sbrk_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4d06      	ldr	r5, [pc, #24]	@ (80075ec <_sbrk_r+0x1c>)
 80075d4:	2300      	movs	r3, #0
 80075d6:	4604      	mov	r4, r0
 80075d8:	4608      	mov	r0, r1
 80075da:	602b      	str	r3, [r5, #0]
 80075dc:	f7f9 fc5a 	bl	8000e94 <_sbrk>
 80075e0:	1c43      	adds	r3, r0, #1
 80075e2:	d102      	bne.n	80075ea <_sbrk_r+0x1a>
 80075e4:	682b      	ldr	r3, [r5, #0]
 80075e6:	b103      	cbz	r3, 80075ea <_sbrk_r+0x1a>
 80075e8:	6023      	str	r3, [r4, #0]
 80075ea:	bd38      	pop	{r3, r4, r5, pc}
 80075ec:	24000460 	.word	0x24000460

080075f0 <_write_r>:
 80075f0:	b538      	push	{r3, r4, r5, lr}
 80075f2:	4d07      	ldr	r5, [pc, #28]	@ (8007610 <_write_r+0x20>)
 80075f4:	4604      	mov	r4, r0
 80075f6:	4608      	mov	r0, r1
 80075f8:	4611      	mov	r1, r2
 80075fa:	2200      	movs	r2, #0
 80075fc:	602a      	str	r2, [r5, #0]
 80075fe:	461a      	mov	r2, r3
 8007600:	f7f9 f8ce 	bl	80007a0 <_write>
 8007604:	1c43      	adds	r3, r0, #1
 8007606:	d102      	bne.n	800760e <_write_r+0x1e>
 8007608:	682b      	ldr	r3, [r5, #0]
 800760a:	b103      	cbz	r3, 800760e <_write_r+0x1e>
 800760c:	6023      	str	r3, [r4, #0]
 800760e:	bd38      	pop	{r3, r4, r5, pc}
 8007610:	24000460 	.word	0x24000460

08007614 <__errno>:
 8007614:	4b01      	ldr	r3, [pc, #4]	@ (800761c <__errno+0x8>)
 8007616:	6818      	ldr	r0, [r3, #0]
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	24000020 	.word	0x24000020

08007620 <__libc_init_array>:
 8007620:	b570      	push	{r4, r5, r6, lr}
 8007622:	4d0d      	ldr	r5, [pc, #52]	@ (8007658 <__libc_init_array+0x38>)
 8007624:	4c0d      	ldr	r4, [pc, #52]	@ (800765c <__libc_init_array+0x3c>)
 8007626:	1b64      	subs	r4, r4, r5
 8007628:	10a4      	asrs	r4, r4, #2
 800762a:	2600      	movs	r6, #0
 800762c:	42a6      	cmp	r6, r4
 800762e:	d109      	bne.n	8007644 <__libc_init_array+0x24>
 8007630:	4d0b      	ldr	r5, [pc, #44]	@ (8007660 <__libc_init_array+0x40>)
 8007632:	4c0c      	ldr	r4, [pc, #48]	@ (8007664 <__libc_init_array+0x44>)
 8007634:	f001 fd8a 	bl	800914c <_init>
 8007638:	1b64      	subs	r4, r4, r5
 800763a:	10a4      	asrs	r4, r4, #2
 800763c:	2600      	movs	r6, #0
 800763e:	42a6      	cmp	r6, r4
 8007640:	d105      	bne.n	800764e <__libc_init_array+0x2e>
 8007642:	bd70      	pop	{r4, r5, r6, pc}
 8007644:	f855 3b04 	ldr.w	r3, [r5], #4
 8007648:	4798      	blx	r3
 800764a:	3601      	adds	r6, #1
 800764c:	e7ee      	b.n	800762c <__libc_init_array+0xc>
 800764e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007652:	4798      	blx	r3
 8007654:	3601      	adds	r6, #1
 8007656:	e7f2      	b.n	800763e <__libc_init_array+0x1e>
 8007658:	08009668 	.word	0x08009668
 800765c:	08009668 	.word	0x08009668
 8007660:	08009668 	.word	0x08009668
 8007664:	0800966c 	.word	0x0800966c

08007668 <__retarget_lock_init_recursive>:
 8007668:	4770      	bx	lr

0800766a <__retarget_lock_acquire_recursive>:
 800766a:	4770      	bx	lr

0800766c <__retarget_lock_release_recursive>:
 800766c:	4770      	bx	lr

0800766e <quorem>:
 800766e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007672:	6903      	ldr	r3, [r0, #16]
 8007674:	690c      	ldr	r4, [r1, #16]
 8007676:	42a3      	cmp	r3, r4
 8007678:	4607      	mov	r7, r0
 800767a:	db7e      	blt.n	800777a <quorem+0x10c>
 800767c:	3c01      	subs	r4, #1
 800767e:	f101 0814 	add.w	r8, r1, #20
 8007682:	00a3      	lsls	r3, r4, #2
 8007684:	f100 0514 	add.w	r5, r0, #20
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800768e:	9301      	str	r3, [sp, #4]
 8007690:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007694:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007698:	3301      	adds	r3, #1
 800769a:	429a      	cmp	r2, r3
 800769c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80076a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80076a4:	d32e      	bcc.n	8007704 <quorem+0x96>
 80076a6:	f04f 0a00 	mov.w	sl, #0
 80076aa:	46c4      	mov	ip, r8
 80076ac:	46ae      	mov	lr, r5
 80076ae:	46d3      	mov	fp, sl
 80076b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80076b4:	b298      	uxth	r0, r3
 80076b6:	fb06 a000 	mla	r0, r6, r0, sl
 80076ba:	0c02      	lsrs	r2, r0, #16
 80076bc:	0c1b      	lsrs	r3, r3, #16
 80076be:	fb06 2303 	mla	r3, r6, r3, r2
 80076c2:	f8de 2000 	ldr.w	r2, [lr]
 80076c6:	b280      	uxth	r0, r0
 80076c8:	b292      	uxth	r2, r2
 80076ca:	1a12      	subs	r2, r2, r0
 80076cc:	445a      	add	r2, fp
 80076ce:	f8de 0000 	ldr.w	r0, [lr]
 80076d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80076dc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80076e0:	b292      	uxth	r2, r2
 80076e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80076e6:	45e1      	cmp	r9, ip
 80076e8:	f84e 2b04 	str.w	r2, [lr], #4
 80076ec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80076f0:	d2de      	bcs.n	80076b0 <quorem+0x42>
 80076f2:	9b00      	ldr	r3, [sp, #0]
 80076f4:	58eb      	ldr	r3, [r5, r3]
 80076f6:	b92b      	cbnz	r3, 8007704 <quorem+0x96>
 80076f8:	9b01      	ldr	r3, [sp, #4]
 80076fa:	3b04      	subs	r3, #4
 80076fc:	429d      	cmp	r5, r3
 80076fe:	461a      	mov	r2, r3
 8007700:	d32f      	bcc.n	8007762 <quorem+0xf4>
 8007702:	613c      	str	r4, [r7, #16]
 8007704:	4638      	mov	r0, r7
 8007706:	f001 f855 	bl	80087b4 <__mcmp>
 800770a:	2800      	cmp	r0, #0
 800770c:	db25      	blt.n	800775a <quorem+0xec>
 800770e:	4629      	mov	r1, r5
 8007710:	2000      	movs	r0, #0
 8007712:	f858 2b04 	ldr.w	r2, [r8], #4
 8007716:	f8d1 c000 	ldr.w	ip, [r1]
 800771a:	fa1f fe82 	uxth.w	lr, r2
 800771e:	fa1f f38c 	uxth.w	r3, ip
 8007722:	eba3 030e 	sub.w	r3, r3, lr
 8007726:	4403      	add	r3, r0
 8007728:	0c12      	lsrs	r2, r2, #16
 800772a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800772e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007732:	b29b      	uxth	r3, r3
 8007734:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007738:	45c1      	cmp	r9, r8
 800773a:	f841 3b04 	str.w	r3, [r1], #4
 800773e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007742:	d2e6      	bcs.n	8007712 <quorem+0xa4>
 8007744:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007748:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800774c:	b922      	cbnz	r2, 8007758 <quorem+0xea>
 800774e:	3b04      	subs	r3, #4
 8007750:	429d      	cmp	r5, r3
 8007752:	461a      	mov	r2, r3
 8007754:	d30b      	bcc.n	800776e <quorem+0x100>
 8007756:	613c      	str	r4, [r7, #16]
 8007758:	3601      	adds	r6, #1
 800775a:	4630      	mov	r0, r6
 800775c:	b003      	add	sp, #12
 800775e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007762:	6812      	ldr	r2, [r2, #0]
 8007764:	3b04      	subs	r3, #4
 8007766:	2a00      	cmp	r2, #0
 8007768:	d1cb      	bne.n	8007702 <quorem+0x94>
 800776a:	3c01      	subs	r4, #1
 800776c:	e7c6      	b.n	80076fc <quorem+0x8e>
 800776e:	6812      	ldr	r2, [r2, #0]
 8007770:	3b04      	subs	r3, #4
 8007772:	2a00      	cmp	r2, #0
 8007774:	d1ef      	bne.n	8007756 <quorem+0xe8>
 8007776:	3c01      	subs	r4, #1
 8007778:	e7ea      	b.n	8007750 <quorem+0xe2>
 800777a:	2000      	movs	r0, #0
 800777c:	e7ee      	b.n	800775c <quorem+0xee>
	...

08007780 <_dtoa_r>:
 8007780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007784:	ed2d 8b02 	vpush	{d8}
 8007788:	69c7      	ldr	r7, [r0, #28]
 800778a:	b091      	sub	sp, #68	@ 0x44
 800778c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007790:	ec55 4b10 	vmov	r4, r5, d0
 8007794:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8007796:	9107      	str	r1, [sp, #28]
 8007798:	4681      	mov	r9, r0
 800779a:	9209      	str	r2, [sp, #36]	@ 0x24
 800779c:	930d      	str	r3, [sp, #52]	@ 0x34
 800779e:	b97f      	cbnz	r7, 80077c0 <_dtoa_r+0x40>
 80077a0:	2010      	movs	r0, #16
 80077a2:	f7ff f8d1 	bl	8006948 <malloc>
 80077a6:	4602      	mov	r2, r0
 80077a8:	f8c9 001c 	str.w	r0, [r9, #28]
 80077ac:	b920      	cbnz	r0, 80077b8 <_dtoa_r+0x38>
 80077ae:	4ba0      	ldr	r3, [pc, #640]	@ (8007a30 <_dtoa_r+0x2b0>)
 80077b0:	21ef      	movs	r1, #239	@ 0xef
 80077b2:	48a0      	ldr	r0, [pc, #640]	@ (8007a34 <_dtoa_r+0x2b4>)
 80077b4:	f001 fb96 	bl	8008ee4 <__assert_func>
 80077b8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80077bc:	6007      	str	r7, [r0, #0]
 80077be:	60c7      	str	r7, [r0, #12]
 80077c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80077c4:	6819      	ldr	r1, [r3, #0]
 80077c6:	b159      	cbz	r1, 80077e0 <_dtoa_r+0x60>
 80077c8:	685a      	ldr	r2, [r3, #4]
 80077ca:	604a      	str	r2, [r1, #4]
 80077cc:	2301      	movs	r3, #1
 80077ce:	4093      	lsls	r3, r2
 80077d0:	608b      	str	r3, [r1, #8]
 80077d2:	4648      	mov	r0, r9
 80077d4:	f000 fdb4 	bl	8008340 <_Bfree>
 80077d8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80077dc:	2200      	movs	r2, #0
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	1e2b      	subs	r3, r5, #0
 80077e2:	bfbb      	ittet	lt
 80077e4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80077e8:	9303      	strlt	r3, [sp, #12]
 80077ea:	2300      	movge	r3, #0
 80077ec:	2201      	movlt	r2, #1
 80077ee:	bfac      	ite	ge
 80077f0:	6033      	strge	r3, [r6, #0]
 80077f2:	6032      	strlt	r2, [r6, #0]
 80077f4:	4b90      	ldr	r3, [pc, #576]	@ (8007a38 <_dtoa_r+0x2b8>)
 80077f6:	9e03      	ldr	r6, [sp, #12]
 80077f8:	43b3      	bics	r3, r6
 80077fa:	d110      	bne.n	800781e <_dtoa_r+0x9e>
 80077fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80077fe:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007802:	6013      	str	r3, [r2, #0]
 8007804:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007808:	4323      	orrs	r3, r4
 800780a:	f000 84de 	beq.w	80081ca <_dtoa_r+0xa4a>
 800780e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007810:	4f8a      	ldr	r7, [pc, #552]	@ (8007a3c <_dtoa_r+0x2bc>)
 8007812:	2b00      	cmp	r3, #0
 8007814:	f000 84e0 	beq.w	80081d8 <_dtoa_r+0xa58>
 8007818:	1cfb      	adds	r3, r7, #3
 800781a:	f000 bcdb 	b.w	80081d4 <_dtoa_r+0xa54>
 800781e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007822:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800782a:	d10a      	bne.n	8007842 <_dtoa_r+0xc2>
 800782c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800782e:	2301      	movs	r3, #1
 8007830:	6013      	str	r3, [r2, #0]
 8007832:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007834:	b113      	cbz	r3, 800783c <_dtoa_r+0xbc>
 8007836:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007838:	4b81      	ldr	r3, [pc, #516]	@ (8007a40 <_dtoa_r+0x2c0>)
 800783a:	6013      	str	r3, [r2, #0]
 800783c:	4f81      	ldr	r7, [pc, #516]	@ (8007a44 <_dtoa_r+0x2c4>)
 800783e:	f000 bccb 	b.w	80081d8 <_dtoa_r+0xa58>
 8007842:	aa0e      	add	r2, sp, #56	@ 0x38
 8007844:	a90f      	add	r1, sp, #60	@ 0x3c
 8007846:	4648      	mov	r0, r9
 8007848:	eeb0 0b48 	vmov.f64	d0, d8
 800784c:	f001 f862 	bl	8008914 <__d2b>
 8007850:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8007854:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007856:	9001      	str	r0, [sp, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d045      	beq.n	80078e8 <_dtoa_r+0x168>
 800785c:	eeb0 7b48 	vmov.f64	d7, d8
 8007860:	ee18 1a90 	vmov	r1, s17
 8007864:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007868:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800786c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007870:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007874:	2500      	movs	r5, #0
 8007876:	ee07 1a90 	vmov	s15, r1
 800787a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800787e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007a18 <_dtoa_r+0x298>
 8007882:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007886:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007a20 <_dtoa_r+0x2a0>
 800788a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800788e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007a28 <_dtoa_r+0x2a8>
 8007892:	ee07 3a90 	vmov	s15, r3
 8007896:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800789a:	eeb0 7b46 	vmov.f64	d7, d6
 800789e:	eea4 7b05 	vfma.f64	d7, d4, d5
 80078a2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80078a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80078aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ae:	ee16 8a90 	vmov	r8, s13
 80078b2:	d508      	bpl.n	80078c6 <_dtoa_r+0x146>
 80078b4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80078b8:	eeb4 6b47 	vcmp.f64	d6, d7
 80078bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078c0:	bf18      	it	ne
 80078c2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80078c6:	f1b8 0f16 	cmp.w	r8, #22
 80078ca:	d82b      	bhi.n	8007924 <_dtoa_r+0x1a4>
 80078cc:	495e      	ldr	r1, [pc, #376]	@ (8007a48 <_dtoa_r+0x2c8>)
 80078ce:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80078d2:	ed91 7b00 	vldr	d7, [r1]
 80078d6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80078da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078de:	d501      	bpl.n	80078e4 <_dtoa_r+0x164>
 80078e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80078e4:	2100      	movs	r1, #0
 80078e6:	e01e      	b.n	8007926 <_dtoa_r+0x1a6>
 80078e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078ea:	4413      	add	r3, r2
 80078ec:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80078f0:	2920      	cmp	r1, #32
 80078f2:	bfc1      	itttt	gt
 80078f4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80078f8:	408e      	lslgt	r6, r1
 80078fa:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80078fe:	fa24 f101 	lsrgt.w	r1, r4, r1
 8007902:	bfd6      	itet	le
 8007904:	f1c1 0120 	rsble	r1, r1, #32
 8007908:	4331      	orrgt	r1, r6
 800790a:	fa04 f101 	lslle.w	r1, r4, r1
 800790e:	ee07 1a90 	vmov	s15, r1
 8007912:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007916:	3b01      	subs	r3, #1
 8007918:	ee17 1a90 	vmov	r1, s15
 800791c:	2501      	movs	r5, #1
 800791e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8007922:	e7a8      	b.n	8007876 <_dtoa_r+0xf6>
 8007924:	2101      	movs	r1, #1
 8007926:	1ad2      	subs	r2, r2, r3
 8007928:	1e53      	subs	r3, r2, #1
 800792a:	9306      	str	r3, [sp, #24]
 800792c:	bf45      	ittet	mi
 800792e:	f1c2 0301 	rsbmi	r3, r2, #1
 8007932:	9305      	strmi	r3, [sp, #20]
 8007934:	2300      	movpl	r3, #0
 8007936:	2300      	movmi	r3, #0
 8007938:	bf4c      	ite	mi
 800793a:	9306      	strmi	r3, [sp, #24]
 800793c:	9305      	strpl	r3, [sp, #20]
 800793e:	f1b8 0f00 	cmp.w	r8, #0
 8007942:	910c      	str	r1, [sp, #48]	@ 0x30
 8007944:	db18      	blt.n	8007978 <_dtoa_r+0x1f8>
 8007946:	9b06      	ldr	r3, [sp, #24]
 8007948:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800794c:	4443      	add	r3, r8
 800794e:	9306      	str	r3, [sp, #24]
 8007950:	2300      	movs	r3, #0
 8007952:	9a07      	ldr	r2, [sp, #28]
 8007954:	2a09      	cmp	r2, #9
 8007956:	d849      	bhi.n	80079ec <_dtoa_r+0x26c>
 8007958:	2a05      	cmp	r2, #5
 800795a:	bfc4      	itt	gt
 800795c:	3a04      	subgt	r2, #4
 800795e:	9207      	strgt	r2, [sp, #28]
 8007960:	9a07      	ldr	r2, [sp, #28]
 8007962:	f1a2 0202 	sub.w	r2, r2, #2
 8007966:	bfcc      	ite	gt
 8007968:	2400      	movgt	r4, #0
 800796a:	2401      	movle	r4, #1
 800796c:	2a03      	cmp	r2, #3
 800796e:	d848      	bhi.n	8007a02 <_dtoa_r+0x282>
 8007970:	e8df f002 	tbb	[pc, r2]
 8007974:	3a2c2e0b 	.word	0x3a2c2e0b
 8007978:	9b05      	ldr	r3, [sp, #20]
 800797a:	2200      	movs	r2, #0
 800797c:	eba3 0308 	sub.w	r3, r3, r8
 8007980:	9305      	str	r3, [sp, #20]
 8007982:	920a      	str	r2, [sp, #40]	@ 0x28
 8007984:	f1c8 0300 	rsb	r3, r8, #0
 8007988:	e7e3      	b.n	8007952 <_dtoa_r+0x1d2>
 800798a:	2200      	movs	r2, #0
 800798c:	9208      	str	r2, [sp, #32]
 800798e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007990:	2a00      	cmp	r2, #0
 8007992:	dc39      	bgt.n	8007a08 <_dtoa_r+0x288>
 8007994:	f04f 0b01 	mov.w	fp, #1
 8007998:	46da      	mov	sl, fp
 800799a:	465a      	mov	r2, fp
 800799c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80079a0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80079a4:	2100      	movs	r1, #0
 80079a6:	2004      	movs	r0, #4
 80079a8:	f100 0614 	add.w	r6, r0, #20
 80079ac:	4296      	cmp	r6, r2
 80079ae:	d930      	bls.n	8007a12 <_dtoa_r+0x292>
 80079b0:	6079      	str	r1, [r7, #4]
 80079b2:	4648      	mov	r0, r9
 80079b4:	9304      	str	r3, [sp, #16]
 80079b6:	f000 fc83 	bl	80082c0 <_Balloc>
 80079ba:	9b04      	ldr	r3, [sp, #16]
 80079bc:	4607      	mov	r7, r0
 80079be:	2800      	cmp	r0, #0
 80079c0:	d146      	bne.n	8007a50 <_dtoa_r+0x2d0>
 80079c2:	4b22      	ldr	r3, [pc, #136]	@ (8007a4c <_dtoa_r+0x2cc>)
 80079c4:	4602      	mov	r2, r0
 80079c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80079ca:	e6f2      	b.n	80077b2 <_dtoa_r+0x32>
 80079cc:	2201      	movs	r2, #1
 80079ce:	e7dd      	b.n	800798c <_dtoa_r+0x20c>
 80079d0:	2200      	movs	r2, #0
 80079d2:	9208      	str	r2, [sp, #32]
 80079d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079d6:	eb08 0b02 	add.w	fp, r8, r2
 80079da:	f10b 0a01 	add.w	sl, fp, #1
 80079de:	4652      	mov	r2, sl
 80079e0:	2a01      	cmp	r2, #1
 80079e2:	bfb8      	it	lt
 80079e4:	2201      	movlt	r2, #1
 80079e6:	e7db      	b.n	80079a0 <_dtoa_r+0x220>
 80079e8:	2201      	movs	r2, #1
 80079ea:	e7f2      	b.n	80079d2 <_dtoa_r+0x252>
 80079ec:	2401      	movs	r4, #1
 80079ee:	2200      	movs	r2, #0
 80079f0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80079f4:	f04f 3bff 	mov.w	fp, #4294967295
 80079f8:	2100      	movs	r1, #0
 80079fa:	46da      	mov	sl, fp
 80079fc:	2212      	movs	r2, #18
 80079fe:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a00:	e7ce      	b.n	80079a0 <_dtoa_r+0x220>
 8007a02:	2201      	movs	r2, #1
 8007a04:	9208      	str	r2, [sp, #32]
 8007a06:	e7f5      	b.n	80079f4 <_dtoa_r+0x274>
 8007a08:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8007a0c:	46da      	mov	sl, fp
 8007a0e:	465a      	mov	r2, fp
 8007a10:	e7c6      	b.n	80079a0 <_dtoa_r+0x220>
 8007a12:	3101      	adds	r1, #1
 8007a14:	0040      	lsls	r0, r0, #1
 8007a16:	e7c7      	b.n	80079a8 <_dtoa_r+0x228>
 8007a18:	636f4361 	.word	0x636f4361
 8007a1c:	3fd287a7 	.word	0x3fd287a7
 8007a20:	8b60c8b3 	.word	0x8b60c8b3
 8007a24:	3fc68a28 	.word	0x3fc68a28
 8007a28:	509f79fb 	.word	0x509f79fb
 8007a2c:	3fd34413 	.word	0x3fd34413
 8007a30:	0800932d 	.word	0x0800932d
 8007a34:	08009344 	.word	0x08009344
 8007a38:	7ff00000 	.word	0x7ff00000
 8007a3c:	08009329 	.word	0x08009329
 8007a40:	080092fd 	.word	0x080092fd
 8007a44:	080092fc 	.word	0x080092fc
 8007a48:	08009440 	.word	0x08009440
 8007a4c:	0800939c 	.word	0x0800939c
 8007a50:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8007a54:	f1ba 0f0e 	cmp.w	sl, #14
 8007a58:	6010      	str	r0, [r2, #0]
 8007a5a:	d86f      	bhi.n	8007b3c <_dtoa_r+0x3bc>
 8007a5c:	2c00      	cmp	r4, #0
 8007a5e:	d06d      	beq.n	8007b3c <_dtoa_r+0x3bc>
 8007a60:	f1b8 0f00 	cmp.w	r8, #0
 8007a64:	f340 80c2 	ble.w	8007bec <_dtoa_r+0x46c>
 8007a68:	4aca      	ldr	r2, [pc, #808]	@ (8007d94 <_dtoa_r+0x614>)
 8007a6a:	f008 010f 	and.w	r1, r8, #15
 8007a6e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007a72:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8007a76:	ed92 7b00 	vldr	d7, [r2]
 8007a7a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8007a7e:	f000 80a9 	beq.w	8007bd4 <_dtoa_r+0x454>
 8007a82:	4ac5      	ldr	r2, [pc, #788]	@ (8007d98 <_dtoa_r+0x618>)
 8007a84:	ed92 6b08 	vldr	d6, [r2, #32]
 8007a88:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007a8c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007a90:	f001 010f 	and.w	r1, r1, #15
 8007a94:	2203      	movs	r2, #3
 8007a96:	48c0      	ldr	r0, [pc, #768]	@ (8007d98 <_dtoa_r+0x618>)
 8007a98:	2900      	cmp	r1, #0
 8007a9a:	f040 809d 	bne.w	8007bd8 <_dtoa_r+0x458>
 8007a9e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007aa2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007aa6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007aaa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007aac:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ab0:	2900      	cmp	r1, #0
 8007ab2:	f000 80c1 	beq.w	8007c38 <_dtoa_r+0x4b8>
 8007ab6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007aba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac2:	f140 80b9 	bpl.w	8007c38 <_dtoa_r+0x4b8>
 8007ac6:	f1ba 0f00 	cmp.w	sl, #0
 8007aca:	f000 80b5 	beq.w	8007c38 <_dtoa_r+0x4b8>
 8007ace:	f1bb 0f00 	cmp.w	fp, #0
 8007ad2:	dd31      	ble.n	8007b38 <_dtoa_r+0x3b8>
 8007ad4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007ad8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007adc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ae0:	f108 31ff 	add.w	r1, r8, #4294967295
 8007ae4:	9104      	str	r1, [sp, #16]
 8007ae6:	3201      	adds	r2, #1
 8007ae8:	465c      	mov	r4, fp
 8007aea:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007aee:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8007af2:	ee07 2a90 	vmov	s15, r2
 8007af6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007afa:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007afe:	ee15 2a90 	vmov	r2, s11
 8007b02:	ec51 0b15 	vmov	r0, r1, d5
 8007b06:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8007b0a:	2c00      	cmp	r4, #0
 8007b0c:	f040 8098 	bne.w	8007c40 <_dtoa_r+0x4c0>
 8007b10:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007b14:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007b18:	ec41 0b17 	vmov	d7, r0, r1
 8007b1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b24:	f300 8261 	bgt.w	8007fea <_dtoa_r+0x86a>
 8007b28:	eeb1 7b47 	vneg.f64	d7, d7
 8007b2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b34:	f100 80f5 	bmi.w	8007d22 <_dtoa_r+0x5a2>
 8007b38:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007b3c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007b3e:	2a00      	cmp	r2, #0
 8007b40:	f2c0 812c 	blt.w	8007d9c <_dtoa_r+0x61c>
 8007b44:	f1b8 0f0e 	cmp.w	r8, #14
 8007b48:	f300 8128 	bgt.w	8007d9c <_dtoa_r+0x61c>
 8007b4c:	4b91      	ldr	r3, [pc, #580]	@ (8007d94 <_dtoa_r+0x614>)
 8007b4e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007b52:	ed93 6b00 	vldr	d6, [r3]
 8007b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	da03      	bge.n	8007b64 <_dtoa_r+0x3e4>
 8007b5c:	f1ba 0f00 	cmp.w	sl, #0
 8007b60:	f340 80d2 	ble.w	8007d08 <_dtoa_r+0x588>
 8007b64:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8007b68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b6c:	463e      	mov	r6, r7
 8007b6e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007b72:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007b76:	ee15 3a10 	vmov	r3, s10
 8007b7a:	3330      	adds	r3, #48	@ 0x30
 8007b7c:	f806 3b01 	strb.w	r3, [r6], #1
 8007b80:	1bf3      	subs	r3, r6, r7
 8007b82:	459a      	cmp	sl, r3
 8007b84:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007b88:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007b8c:	f040 80f8 	bne.w	8007d80 <_dtoa_r+0x600>
 8007b90:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007b94:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b9c:	f300 80dd 	bgt.w	8007d5a <_dtoa_r+0x5da>
 8007ba0:	eeb4 7b46 	vcmp.f64	d7, d6
 8007ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba8:	d104      	bne.n	8007bb4 <_dtoa_r+0x434>
 8007baa:	ee15 3a10 	vmov	r3, s10
 8007bae:	07db      	lsls	r3, r3, #31
 8007bb0:	f100 80d3 	bmi.w	8007d5a <_dtoa_r+0x5da>
 8007bb4:	9901      	ldr	r1, [sp, #4]
 8007bb6:	4648      	mov	r0, r9
 8007bb8:	f000 fbc2 	bl	8008340 <_Bfree>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007bc0:	7033      	strb	r3, [r6, #0]
 8007bc2:	f108 0301 	add.w	r3, r8, #1
 8007bc6:	6013      	str	r3, [r2, #0]
 8007bc8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f000 8304 	beq.w	80081d8 <_dtoa_r+0xa58>
 8007bd0:	601e      	str	r6, [r3, #0]
 8007bd2:	e301      	b.n	80081d8 <_dtoa_r+0xa58>
 8007bd4:	2202      	movs	r2, #2
 8007bd6:	e75e      	b.n	8007a96 <_dtoa_r+0x316>
 8007bd8:	07cc      	lsls	r4, r1, #31
 8007bda:	d504      	bpl.n	8007be6 <_dtoa_r+0x466>
 8007bdc:	ed90 6b00 	vldr	d6, [r0]
 8007be0:	3201      	adds	r2, #1
 8007be2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007be6:	1049      	asrs	r1, r1, #1
 8007be8:	3008      	adds	r0, #8
 8007bea:	e755      	b.n	8007a98 <_dtoa_r+0x318>
 8007bec:	d022      	beq.n	8007c34 <_dtoa_r+0x4b4>
 8007bee:	f1c8 0100 	rsb	r1, r8, #0
 8007bf2:	4a68      	ldr	r2, [pc, #416]	@ (8007d94 <_dtoa_r+0x614>)
 8007bf4:	f001 000f 	and.w	r0, r1, #15
 8007bf8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007bfc:	ed92 7b00 	vldr	d7, [r2]
 8007c00:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007c04:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007c08:	4863      	ldr	r0, [pc, #396]	@ (8007d98 <_dtoa_r+0x618>)
 8007c0a:	1109      	asrs	r1, r1, #4
 8007c0c:	2400      	movs	r4, #0
 8007c0e:	2202      	movs	r2, #2
 8007c10:	b929      	cbnz	r1, 8007c1e <_dtoa_r+0x49e>
 8007c12:	2c00      	cmp	r4, #0
 8007c14:	f43f af49 	beq.w	8007aaa <_dtoa_r+0x32a>
 8007c18:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007c1c:	e745      	b.n	8007aaa <_dtoa_r+0x32a>
 8007c1e:	07ce      	lsls	r6, r1, #31
 8007c20:	d505      	bpl.n	8007c2e <_dtoa_r+0x4ae>
 8007c22:	ed90 6b00 	vldr	d6, [r0]
 8007c26:	3201      	adds	r2, #1
 8007c28:	2401      	movs	r4, #1
 8007c2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007c2e:	1049      	asrs	r1, r1, #1
 8007c30:	3008      	adds	r0, #8
 8007c32:	e7ed      	b.n	8007c10 <_dtoa_r+0x490>
 8007c34:	2202      	movs	r2, #2
 8007c36:	e738      	b.n	8007aaa <_dtoa_r+0x32a>
 8007c38:	f8cd 8010 	str.w	r8, [sp, #16]
 8007c3c:	4654      	mov	r4, sl
 8007c3e:	e754      	b.n	8007aea <_dtoa_r+0x36a>
 8007c40:	4a54      	ldr	r2, [pc, #336]	@ (8007d94 <_dtoa_r+0x614>)
 8007c42:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007c46:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007c4a:	9a08      	ldr	r2, [sp, #32]
 8007c4c:	ec41 0b17 	vmov	d7, r0, r1
 8007c50:	443c      	add	r4, r7
 8007c52:	b34a      	cbz	r2, 8007ca8 <_dtoa_r+0x528>
 8007c54:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8007c58:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8007c5c:	463e      	mov	r6, r7
 8007c5e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007c62:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007c66:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007c6a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007c6e:	ee14 2a90 	vmov	r2, s9
 8007c72:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007c76:	3230      	adds	r2, #48	@ 0x30
 8007c78:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007c7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c84:	f806 2b01 	strb.w	r2, [r6], #1
 8007c88:	d438      	bmi.n	8007cfc <_dtoa_r+0x57c>
 8007c8a:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007c8e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c96:	d462      	bmi.n	8007d5e <_dtoa_r+0x5de>
 8007c98:	42a6      	cmp	r6, r4
 8007c9a:	f43f af4d 	beq.w	8007b38 <_dtoa_r+0x3b8>
 8007c9e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007ca2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007ca6:	e7e0      	b.n	8007c6a <_dtoa_r+0x4ea>
 8007ca8:	4621      	mov	r1, r4
 8007caa:	463e      	mov	r6, r7
 8007cac:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007cb0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007cb4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007cb8:	ee14 2a90 	vmov	r2, s9
 8007cbc:	3230      	adds	r2, #48	@ 0x30
 8007cbe:	f806 2b01 	strb.w	r2, [r6], #1
 8007cc2:	42a6      	cmp	r6, r4
 8007cc4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007cc8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007ccc:	d119      	bne.n	8007d02 <_dtoa_r+0x582>
 8007cce:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8007cd2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007cd6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cde:	dc3e      	bgt.n	8007d5e <_dtoa_r+0x5de>
 8007ce0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007ce4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cec:	f57f af24 	bpl.w	8007b38 <_dtoa_r+0x3b8>
 8007cf0:	460e      	mov	r6, r1
 8007cf2:	3901      	subs	r1, #1
 8007cf4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007cf8:	2b30      	cmp	r3, #48	@ 0x30
 8007cfa:	d0f9      	beq.n	8007cf0 <_dtoa_r+0x570>
 8007cfc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007d00:	e758      	b.n	8007bb4 <_dtoa_r+0x434>
 8007d02:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007d06:	e7d5      	b.n	8007cb4 <_dtoa_r+0x534>
 8007d08:	d10b      	bne.n	8007d22 <_dtoa_r+0x5a2>
 8007d0a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007d0e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007d12:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d16:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d1e:	f2c0 8161 	blt.w	8007fe4 <_dtoa_r+0x864>
 8007d22:	2400      	movs	r4, #0
 8007d24:	4625      	mov	r5, r4
 8007d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d28:	43db      	mvns	r3, r3
 8007d2a:	9304      	str	r3, [sp, #16]
 8007d2c:	463e      	mov	r6, r7
 8007d2e:	f04f 0800 	mov.w	r8, #0
 8007d32:	4621      	mov	r1, r4
 8007d34:	4648      	mov	r0, r9
 8007d36:	f000 fb03 	bl	8008340 <_Bfree>
 8007d3a:	2d00      	cmp	r5, #0
 8007d3c:	d0de      	beq.n	8007cfc <_dtoa_r+0x57c>
 8007d3e:	f1b8 0f00 	cmp.w	r8, #0
 8007d42:	d005      	beq.n	8007d50 <_dtoa_r+0x5d0>
 8007d44:	45a8      	cmp	r8, r5
 8007d46:	d003      	beq.n	8007d50 <_dtoa_r+0x5d0>
 8007d48:	4641      	mov	r1, r8
 8007d4a:	4648      	mov	r0, r9
 8007d4c:	f000 faf8 	bl	8008340 <_Bfree>
 8007d50:	4629      	mov	r1, r5
 8007d52:	4648      	mov	r0, r9
 8007d54:	f000 faf4 	bl	8008340 <_Bfree>
 8007d58:	e7d0      	b.n	8007cfc <_dtoa_r+0x57c>
 8007d5a:	f8cd 8010 	str.w	r8, [sp, #16]
 8007d5e:	4633      	mov	r3, r6
 8007d60:	461e      	mov	r6, r3
 8007d62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d66:	2a39      	cmp	r2, #57	@ 0x39
 8007d68:	d106      	bne.n	8007d78 <_dtoa_r+0x5f8>
 8007d6a:	429f      	cmp	r7, r3
 8007d6c:	d1f8      	bne.n	8007d60 <_dtoa_r+0x5e0>
 8007d6e:	9a04      	ldr	r2, [sp, #16]
 8007d70:	3201      	adds	r2, #1
 8007d72:	9204      	str	r2, [sp, #16]
 8007d74:	2230      	movs	r2, #48	@ 0x30
 8007d76:	703a      	strb	r2, [r7, #0]
 8007d78:	781a      	ldrb	r2, [r3, #0]
 8007d7a:	3201      	adds	r2, #1
 8007d7c:	701a      	strb	r2, [r3, #0]
 8007d7e:	e7bd      	b.n	8007cfc <_dtoa_r+0x57c>
 8007d80:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007d84:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d8c:	f47f aeef 	bne.w	8007b6e <_dtoa_r+0x3ee>
 8007d90:	e710      	b.n	8007bb4 <_dtoa_r+0x434>
 8007d92:	bf00      	nop
 8007d94:	08009440 	.word	0x08009440
 8007d98:	08009418 	.word	0x08009418
 8007d9c:	9908      	ldr	r1, [sp, #32]
 8007d9e:	2900      	cmp	r1, #0
 8007da0:	f000 80e3 	beq.w	8007f6a <_dtoa_r+0x7ea>
 8007da4:	9907      	ldr	r1, [sp, #28]
 8007da6:	2901      	cmp	r1, #1
 8007da8:	f300 80c8 	bgt.w	8007f3c <_dtoa_r+0x7bc>
 8007dac:	2d00      	cmp	r5, #0
 8007dae:	f000 80c1 	beq.w	8007f34 <_dtoa_r+0x7b4>
 8007db2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007db6:	9e05      	ldr	r6, [sp, #20]
 8007db8:	461c      	mov	r4, r3
 8007dba:	9304      	str	r3, [sp, #16]
 8007dbc:	9b05      	ldr	r3, [sp, #20]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	9305      	str	r3, [sp, #20]
 8007dc2:	9b06      	ldr	r3, [sp, #24]
 8007dc4:	2101      	movs	r1, #1
 8007dc6:	4413      	add	r3, r2
 8007dc8:	4648      	mov	r0, r9
 8007dca:	9306      	str	r3, [sp, #24]
 8007dcc:	f000 fb6c 	bl	80084a8 <__i2b>
 8007dd0:	9b04      	ldr	r3, [sp, #16]
 8007dd2:	4605      	mov	r5, r0
 8007dd4:	b166      	cbz	r6, 8007df0 <_dtoa_r+0x670>
 8007dd6:	9a06      	ldr	r2, [sp, #24]
 8007dd8:	2a00      	cmp	r2, #0
 8007dda:	dd09      	ble.n	8007df0 <_dtoa_r+0x670>
 8007ddc:	42b2      	cmp	r2, r6
 8007dde:	9905      	ldr	r1, [sp, #20]
 8007de0:	bfa8      	it	ge
 8007de2:	4632      	movge	r2, r6
 8007de4:	1a89      	subs	r1, r1, r2
 8007de6:	9105      	str	r1, [sp, #20]
 8007de8:	9906      	ldr	r1, [sp, #24]
 8007dea:	1ab6      	subs	r6, r6, r2
 8007dec:	1a8a      	subs	r2, r1, r2
 8007dee:	9206      	str	r2, [sp, #24]
 8007df0:	b1fb      	cbz	r3, 8007e32 <_dtoa_r+0x6b2>
 8007df2:	9a08      	ldr	r2, [sp, #32]
 8007df4:	2a00      	cmp	r2, #0
 8007df6:	f000 80bc 	beq.w	8007f72 <_dtoa_r+0x7f2>
 8007dfa:	b19c      	cbz	r4, 8007e24 <_dtoa_r+0x6a4>
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	4622      	mov	r2, r4
 8007e00:	4648      	mov	r0, r9
 8007e02:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e04:	f000 fc10 	bl	8008628 <__pow5mult>
 8007e08:	9a01      	ldr	r2, [sp, #4]
 8007e0a:	4601      	mov	r1, r0
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	4648      	mov	r0, r9
 8007e10:	f000 fb60 	bl	80084d4 <__multiply>
 8007e14:	9901      	ldr	r1, [sp, #4]
 8007e16:	9004      	str	r0, [sp, #16]
 8007e18:	4648      	mov	r0, r9
 8007e1a:	f000 fa91 	bl	8008340 <_Bfree>
 8007e1e:	9a04      	ldr	r2, [sp, #16]
 8007e20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e22:	9201      	str	r2, [sp, #4]
 8007e24:	1b1a      	subs	r2, r3, r4
 8007e26:	d004      	beq.n	8007e32 <_dtoa_r+0x6b2>
 8007e28:	9901      	ldr	r1, [sp, #4]
 8007e2a:	4648      	mov	r0, r9
 8007e2c:	f000 fbfc 	bl	8008628 <__pow5mult>
 8007e30:	9001      	str	r0, [sp, #4]
 8007e32:	2101      	movs	r1, #1
 8007e34:	4648      	mov	r0, r9
 8007e36:	f000 fb37 	bl	80084a8 <__i2b>
 8007e3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 81d0 	beq.w	80081e4 <_dtoa_r+0xa64>
 8007e44:	461a      	mov	r2, r3
 8007e46:	4601      	mov	r1, r0
 8007e48:	4648      	mov	r0, r9
 8007e4a:	f000 fbed 	bl	8008628 <__pow5mult>
 8007e4e:	9b07      	ldr	r3, [sp, #28]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	4604      	mov	r4, r0
 8007e54:	f300 8095 	bgt.w	8007f82 <_dtoa_r+0x802>
 8007e58:	9b02      	ldr	r3, [sp, #8]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f040 808b 	bne.w	8007f76 <_dtoa_r+0x7f6>
 8007e60:	9b03      	ldr	r3, [sp, #12]
 8007e62:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007e66:	2a00      	cmp	r2, #0
 8007e68:	f040 8087 	bne.w	8007f7a <_dtoa_r+0x7fa>
 8007e6c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007e70:	0d12      	lsrs	r2, r2, #20
 8007e72:	0512      	lsls	r2, r2, #20
 8007e74:	2a00      	cmp	r2, #0
 8007e76:	f000 8082 	beq.w	8007f7e <_dtoa_r+0x7fe>
 8007e7a:	9b05      	ldr	r3, [sp, #20]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	9305      	str	r3, [sp, #20]
 8007e80:	9b06      	ldr	r3, [sp, #24]
 8007e82:	3301      	adds	r3, #1
 8007e84:	9306      	str	r3, [sp, #24]
 8007e86:	2301      	movs	r3, #1
 8007e88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f000 81af 	beq.w	80081f0 <_dtoa_r+0xa70>
 8007e92:	6922      	ldr	r2, [r4, #16]
 8007e94:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007e98:	6910      	ldr	r0, [r2, #16]
 8007e9a:	f000 fab9 	bl	8008410 <__hi0bits>
 8007e9e:	f1c0 0020 	rsb	r0, r0, #32
 8007ea2:	9b06      	ldr	r3, [sp, #24]
 8007ea4:	4418      	add	r0, r3
 8007ea6:	f010 001f 	ands.w	r0, r0, #31
 8007eaa:	d076      	beq.n	8007f9a <_dtoa_r+0x81a>
 8007eac:	f1c0 0220 	rsb	r2, r0, #32
 8007eb0:	2a04      	cmp	r2, #4
 8007eb2:	dd69      	ble.n	8007f88 <_dtoa_r+0x808>
 8007eb4:	9b05      	ldr	r3, [sp, #20]
 8007eb6:	f1c0 001c 	rsb	r0, r0, #28
 8007eba:	4403      	add	r3, r0
 8007ebc:	9305      	str	r3, [sp, #20]
 8007ebe:	9b06      	ldr	r3, [sp, #24]
 8007ec0:	4406      	add	r6, r0
 8007ec2:	4403      	add	r3, r0
 8007ec4:	9306      	str	r3, [sp, #24]
 8007ec6:	9b05      	ldr	r3, [sp, #20]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	dd05      	ble.n	8007ed8 <_dtoa_r+0x758>
 8007ecc:	9901      	ldr	r1, [sp, #4]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	4648      	mov	r0, r9
 8007ed2:	f000 fc03 	bl	80086dc <__lshift>
 8007ed6:	9001      	str	r0, [sp, #4]
 8007ed8:	9b06      	ldr	r3, [sp, #24]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	dd05      	ble.n	8007eea <_dtoa_r+0x76a>
 8007ede:	4621      	mov	r1, r4
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	4648      	mov	r0, r9
 8007ee4:	f000 fbfa 	bl	80086dc <__lshift>
 8007ee8:	4604      	mov	r4, r0
 8007eea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d056      	beq.n	8007f9e <_dtoa_r+0x81e>
 8007ef0:	9801      	ldr	r0, [sp, #4]
 8007ef2:	4621      	mov	r1, r4
 8007ef4:	f000 fc5e 	bl	80087b4 <__mcmp>
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	da50      	bge.n	8007f9e <_dtoa_r+0x81e>
 8007efc:	f108 33ff 	add.w	r3, r8, #4294967295
 8007f00:	9304      	str	r3, [sp, #16]
 8007f02:	9901      	ldr	r1, [sp, #4]
 8007f04:	2300      	movs	r3, #0
 8007f06:	220a      	movs	r2, #10
 8007f08:	4648      	mov	r0, r9
 8007f0a:	f000 fa3b 	bl	8008384 <__multadd>
 8007f0e:	9b08      	ldr	r3, [sp, #32]
 8007f10:	9001      	str	r0, [sp, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 816e 	beq.w	80081f4 <_dtoa_r+0xa74>
 8007f18:	4629      	mov	r1, r5
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	220a      	movs	r2, #10
 8007f1e:	4648      	mov	r0, r9
 8007f20:	f000 fa30 	bl	8008384 <__multadd>
 8007f24:	f1bb 0f00 	cmp.w	fp, #0
 8007f28:	4605      	mov	r5, r0
 8007f2a:	dc64      	bgt.n	8007ff6 <_dtoa_r+0x876>
 8007f2c:	9b07      	ldr	r3, [sp, #28]
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	dc3e      	bgt.n	8007fb0 <_dtoa_r+0x830>
 8007f32:	e060      	b.n	8007ff6 <_dtoa_r+0x876>
 8007f34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f36:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007f3a:	e73c      	b.n	8007db6 <_dtoa_r+0x636>
 8007f3c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8007f40:	42a3      	cmp	r3, r4
 8007f42:	bfbf      	itttt	lt
 8007f44:	1ae2      	sublt	r2, r4, r3
 8007f46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007f48:	189b      	addlt	r3, r3, r2
 8007f4a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8007f4c:	bfae      	itee	ge
 8007f4e:	1b1c      	subge	r4, r3, r4
 8007f50:	4623      	movlt	r3, r4
 8007f52:	2400      	movlt	r4, #0
 8007f54:	f1ba 0f00 	cmp.w	sl, #0
 8007f58:	bfb5      	itete	lt
 8007f5a:	9a05      	ldrlt	r2, [sp, #20]
 8007f5c:	9e05      	ldrge	r6, [sp, #20]
 8007f5e:	eba2 060a 	sublt.w	r6, r2, sl
 8007f62:	4652      	movge	r2, sl
 8007f64:	bfb8      	it	lt
 8007f66:	2200      	movlt	r2, #0
 8007f68:	e727      	b.n	8007dba <_dtoa_r+0x63a>
 8007f6a:	9e05      	ldr	r6, [sp, #20]
 8007f6c:	9d08      	ldr	r5, [sp, #32]
 8007f6e:	461c      	mov	r4, r3
 8007f70:	e730      	b.n	8007dd4 <_dtoa_r+0x654>
 8007f72:	461a      	mov	r2, r3
 8007f74:	e758      	b.n	8007e28 <_dtoa_r+0x6a8>
 8007f76:	2300      	movs	r3, #0
 8007f78:	e786      	b.n	8007e88 <_dtoa_r+0x708>
 8007f7a:	9b02      	ldr	r3, [sp, #8]
 8007f7c:	e784      	b.n	8007e88 <_dtoa_r+0x708>
 8007f7e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007f80:	e783      	b.n	8007e8a <_dtoa_r+0x70a>
 8007f82:	2300      	movs	r3, #0
 8007f84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f86:	e784      	b.n	8007e92 <_dtoa_r+0x712>
 8007f88:	d09d      	beq.n	8007ec6 <_dtoa_r+0x746>
 8007f8a:	9b05      	ldr	r3, [sp, #20]
 8007f8c:	321c      	adds	r2, #28
 8007f8e:	4413      	add	r3, r2
 8007f90:	9305      	str	r3, [sp, #20]
 8007f92:	9b06      	ldr	r3, [sp, #24]
 8007f94:	4416      	add	r6, r2
 8007f96:	4413      	add	r3, r2
 8007f98:	e794      	b.n	8007ec4 <_dtoa_r+0x744>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	e7f5      	b.n	8007f8a <_dtoa_r+0x80a>
 8007f9e:	f1ba 0f00 	cmp.w	sl, #0
 8007fa2:	f8cd 8010 	str.w	r8, [sp, #16]
 8007fa6:	46d3      	mov	fp, sl
 8007fa8:	dc21      	bgt.n	8007fee <_dtoa_r+0x86e>
 8007faa:	9b07      	ldr	r3, [sp, #28]
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	dd1e      	ble.n	8007fee <_dtoa_r+0x86e>
 8007fb0:	f1bb 0f00 	cmp.w	fp, #0
 8007fb4:	f47f aeb7 	bne.w	8007d26 <_dtoa_r+0x5a6>
 8007fb8:	4621      	mov	r1, r4
 8007fba:	465b      	mov	r3, fp
 8007fbc:	2205      	movs	r2, #5
 8007fbe:	4648      	mov	r0, r9
 8007fc0:	f000 f9e0 	bl	8008384 <__multadd>
 8007fc4:	4601      	mov	r1, r0
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	9801      	ldr	r0, [sp, #4]
 8007fca:	f000 fbf3 	bl	80087b4 <__mcmp>
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	f77f aea9 	ble.w	8007d26 <_dtoa_r+0x5a6>
 8007fd4:	463e      	mov	r6, r7
 8007fd6:	2331      	movs	r3, #49	@ 0x31
 8007fd8:	f806 3b01 	strb.w	r3, [r6], #1
 8007fdc:	9b04      	ldr	r3, [sp, #16]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	9304      	str	r3, [sp, #16]
 8007fe2:	e6a4      	b.n	8007d2e <_dtoa_r+0x5ae>
 8007fe4:	f8cd 8010 	str.w	r8, [sp, #16]
 8007fe8:	4654      	mov	r4, sl
 8007fea:	4625      	mov	r5, r4
 8007fec:	e7f2      	b.n	8007fd4 <_dtoa_r+0x854>
 8007fee:	9b08      	ldr	r3, [sp, #32]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f000 8103 	beq.w	80081fc <_dtoa_r+0xa7c>
 8007ff6:	2e00      	cmp	r6, #0
 8007ff8:	dd05      	ble.n	8008006 <_dtoa_r+0x886>
 8007ffa:	4629      	mov	r1, r5
 8007ffc:	4632      	mov	r2, r6
 8007ffe:	4648      	mov	r0, r9
 8008000:	f000 fb6c 	bl	80086dc <__lshift>
 8008004:	4605      	mov	r5, r0
 8008006:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008008:	2b00      	cmp	r3, #0
 800800a:	d058      	beq.n	80080be <_dtoa_r+0x93e>
 800800c:	6869      	ldr	r1, [r5, #4]
 800800e:	4648      	mov	r0, r9
 8008010:	f000 f956 	bl	80082c0 <_Balloc>
 8008014:	4606      	mov	r6, r0
 8008016:	b928      	cbnz	r0, 8008024 <_dtoa_r+0x8a4>
 8008018:	4b82      	ldr	r3, [pc, #520]	@ (8008224 <_dtoa_r+0xaa4>)
 800801a:	4602      	mov	r2, r0
 800801c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008020:	f7ff bbc7 	b.w	80077b2 <_dtoa_r+0x32>
 8008024:	692a      	ldr	r2, [r5, #16]
 8008026:	3202      	adds	r2, #2
 8008028:	0092      	lsls	r2, r2, #2
 800802a:	f105 010c 	add.w	r1, r5, #12
 800802e:	300c      	adds	r0, #12
 8008030:	f000 ff4a 	bl	8008ec8 <memcpy>
 8008034:	2201      	movs	r2, #1
 8008036:	4631      	mov	r1, r6
 8008038:	4648      	mov	r0, r9
 800803a:	f000 fb4f 	bl	80086dc <__lshift>
 800803e:	1c7b      	adds	r3, r7, #1
 8008040:	9305      	str	r3, [sp, #20]
 8008042:	eb07 030b 	add.w	r3, r7, fp
 8008046:	9309      	str	r3, [sp, #36]	@ 0x24
 8008048:	9b02      	ldr	r3, [sp, #8]
 800804a:	f003 0301 	and.w	r3, r3, #1
 800804e:	46a8      	mov	r8, r5
 8008050:	9308      	str	r3, [sp, #32]
 8008052:	4605      	mov	r5, r0
 8008054:	9b05      	ldr	r3, [sp, #20]
 8008056:	9801      	ldr	r0, [sp, #4]
 8008058:	4621      	mov	r1, r4
 800805a:	f103 3bff 	add.w	fp, r3, #4294967295
 800805e:	f7ff fb06 	bl	800766e <quorem>
 8008062:	4641      	mov	r1, r8
 8008064:	9002      	str	r0, [sp, #8]
 8008066:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800806a:	9801      	ldr	r0, [sp, #4]
 800806c:	f000 fba2 	bl	80087b4 <__mcmp>
 8008070:	462a      	mov	r2, r5
 8008072:	9006      	str	r0, [sp, #24]
 8008074:	4621      	mov	r1, r4
 8008076:	4648      	mov	r0, r9
 8008078:	f000 fbb8 	bl	80087ec <__mdiff>
 800807c:	68c2      	ldr	r2, [r0, #12]
 800807e:	4606      	mov	r6, r0
 8008080:	b9fa      	cbnz	r2, 80080c2 <_dtoa_r+0x942>
 8008082:	4601      	mov	r1, r0
 8008084:	9801      	ldr	r0, [sp, #4]
 8008086:	f000 fb95 	bl	80087b4 <__mcmp>
 800808a:	4602      	mov	r2, r0
 800808c:	4631      	mov	r1, r6
 800808e:	4648      	mov	r0, r9
 8008090:	920a      	str	r2, [sp, #40]	@ 0x28
 8008092:	f000 f955 	bl	8008340 <_Bfree>
 8008096:	9b07      	ldr	r3, [sp, #28]
 8008098:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800809a:	9e05      	ldr	r6, [sp, #20]
 800809c:	ea43 0102 	orr.w	r1, r3, r2
 80080a0:	9b08      	ldr	r3, [sp, #32]
 80080a2:	4319      	orrs	r1, r3
 80080a4:	d10f      	bne.n	80080c6 <_dtoa_r+0x946>
 80080a6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80080aa:	d028      	beq.n	80080fe <_dtoa_r+0x97e>
 80080ac:	9b06      	ldr	r3, [sp, #24]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	dd02      	ble.n	80080b8 <_dtoa_r+0x938>
 80080b2:	9b02      	ldr	r3, [sp, #8]
 80080b4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80080b8:	f88b a000 	strb.w	sl, [fp]
 80080bc:	e639      	b.n	8007d32 <_dtoa_r+0x5b2>
 80080be:	4628      	mov	r0, r5
 80080c0:	e7bd      	b.n	800803e <_dtoa_r+0x8be>
 80080c2:	2201      	movs	r2, #1
 80080c4:	e7e2      	b.n	800808c <_dtoa_r+0x90c>
 80080c6:	9b06      	ldr	r3, [sp, #24]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	db04      	blt.n	80080d6 <_dtoa_r+0x956>
 80080cc:	9907      	ldr	r1, [sp, #28]
 80080ce:	430b      	orrs	r3, r1
 80080d0:	9908      	ldr	r1, [sp, #32]
 80080d2:	430b      	orrs	r3, r1
 80080d4:	d120      	bne.n	8008118 <_dtoa_r+0x998>
 80080d6:	2a00      	cmp	r2, #0
 80080d8:	ddee      	ble.n	80080b8 <_dtoa_r+0x938>
 80080da:	9901      	ldr	r1, [sp, #4]
 80080dc:	2201      	movs	r2, #1
 80080de:	4648      	mov	r0, r9
 80080e0:	f000 fafc 	bl	80086dc <__lshift>
 80080e4:	4621      	mov	r1, r4
 80080e6:	9001      	str	r0, [sp, #4]
 80080e8:	f000 fb64 	bl	80087b4 <__mcmp>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	dc03      	bgt.n	80080f8 <_dtoa_r+0x978>
 80080f0:	d1e2      	bne.n	80080b8 <_dtoa_r+0x938>
 80080f2:	f01a 0f01 	tst.w	sl, #1
 80080f6:	d0df      	beq.n	80080b8 <_dtoa_r+0x938>
 80080f8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80080fc:	d1d9      	bne.n	80080b2 <_dtoa_r+0x932>
 80080fe:	2339      	movs	r3, #57	@ 0x39
 8008100:	f88b 3000 	strb.w	r3, [fp]
 8008104:	4633      	mov	r3, r6
 8008106:	461e      	mov	r6, r3
 8008108:	3b01      	subs	r3, #1
 800810a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800810e:	2a39      	cmp	r2, #57	@ 0x39
 8008110:	d053      	beq.n	80081ba <_dtoa_r+0xa3a>
 8008112:	3201      	adds	r2, #1
 8008114:	701a      	strb	r2, [r3, #0]
 8008116:	e60c      	b.n	8007d32 <_dtoa_r+0x5b2>
 8008118:	2a00      	cmp	r2, #0
 800811a:	dd07      	ble.n	800812c <_dtoa_r+0x9ac>
 800811c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008120:	d0ed      	beq.n	80080fe <_dtoa_r+0x97e>
 8008122:	f10a 0301 	add.w	r3, sl, #1
 8008126:	f88b 3000 	strb.w	r3, [fp]
 800812a:	e602      	b.n	8007d32 <_dtoa_r+0x5b2>
 800812c:	9b05      	ldr	r3, [sp, #20]
 800812e:	9a05      	ldr	r2, [sp, #20]
 8008130:	f803 ac01 	strb.w	sl, [r3, #-1]
 8008134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008136:	4293      	cmp	r3, r2
 8008138:	d029      	beq.n	800818e <_dtoa_r+0xa0e>
 800813a:	9901      	ldr	r1, [sp, #4]
 800813c:	2300      	movs	r3, #0
 800813e:	220a      	movs	r2, #10
 8008140:	4648      	mov	r0, r9
 8008142:	f000 f91f 	bl	8008384 <__multadd>
 8008146:	45a8      	cmp	r8, r5
 8008148:	9001      	str	r0, [sp, #4]
 800814a:	f04f 0300 	mov.w	r3, #0
 800814e:	f04f 020a 	mov.w	r2, #10
 8008152:	4641      	mov	r1, r8
 8008154:	4648      	mov	r0, r9
 8008156:	d107      	bne.n	8008168 <_dtoa_r+0x9e8>
 8008158:	f000 f914 	bl	8008384 <__multadd>
 800815c:	4680      	mov	r8, r0
 800815e:	4605      	mov	r5, r0
 8008160:	9b05      	ldr	r3, [sp, #20]
 8008162:	3301      	adds	r3, #1
 8008164:	9305      	str	r3, [sp, #20]
 8008166:	e775      	b.n	8008054 <_dtoa_r+0x8d4>
 8008168:	f000 f90c 	bl	8008384 <__multadd>
 800816c:	4629      	mov	r1, r5
 800816e:	4680      	mov	r8, r0
 8008170:	2300      	movs	r3, #0
 8008172:	220a      	movs	r2, #10
 8008174:	4648      	mov	r0, r9
 8008176:	f000 f905 	bl	8008384 <__multadd>
 800817a:	4605      	mov	r5, r0
 800817c:	e7f0      	b.n	8008160 <_dtoa_r+0x9e0>
 800817e:	f1bb 0f00 	cmp.w	fp, #0
 8008182:	bfcc      	ite	gt
 8008184:	465e      	movgt	r6, fp
 8008186:	2601      	movle	r6, #1
 8008188:	443e      	add	r6, r7
 800818a:	f04f 0800 	mov.w	r8, #0
 800818e:	9901      	ldr	r1, [sp, #4]
 8008190:	2201      	movs	r2, #1
 8008192:	4648      	mov	r0, r9
 8008194:	f000 faa2 	bl	80086dc <__lshift>
 8008198:	4621      	mov	r1, r4
 800819a:	9001      	str	r0, [sp, #4]
 800819c:	f000 fb0a 	bl	80087b4 <__mcmp>
 80081a0:	2800      	cmp	r0, #0
 80081a2:	dcaf      	bgt.n	8008104 <_dtoa_r+0x984>
 80081a4:	d102      	bne.n	80081ac <_dtoa_r+0xa2c>
 80081a6:	f01a 0f01 	tst.w	sl, #1
 80081aa:	d1ab      	bne.n	8008104 <_dtoa_r+0x984>
 80081ac:	4633      	mov	r3, r6
 80081ae:	461e      	mov	r6, r3
 80081b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081b4:	2a30      	cmp	r2, #48	@ 0x30
 80081b6:	d0fa      	beq.n	80081ae <_dtoa_r+0xa2e>
 80081b8:	e5bb      	b.n	8007d32 <_dtoa_r+0x5b2>
 80081ba:	429f      	cmp	r7, r3
 80081bc:	d1a3      	bne.n	8008106 <_dtoa_r+0x986>
 80081be:	9b04      	ldr	r3, [sp, #16]
 80081c0:	3301      	adds	r3, #1
 80081c2:	9304      	str	r3, [sp, #16]
 80081c4:	2331      	movs	r3, #49	@ 0x31
 80081c6:	703b      	strb	r3, [r7, #0]
 80081c8:	e5b3      	b.n	8007d32 <_dtoa_r+0x5b2>
 80081ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80081cc:	4f16      	ldr	r7, [pc, #88]	@ (8008228 <_dtoa_r+0xaa8>)
 80081ce:	b11b      	cbz	r3, 80081d8 <_dtoa_r+0xa58>
 80081d0:	f107 0308 	add.w	r3, r7, #8
 80081d4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	4638      	mov	r0, r7
 80081da:	b011      	add	sp, #68	@ 0x44
 80081dc:	ecbd 8b02 	vpop	{d8}
 80081e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e4:	9b07      	ldr	r3, [sp, #28]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	f77f ae36 	ble.w	8007e58 <_dtoa_r+0x6d8>
 80081ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081f0:	2001      	movs	r0, #1
 80081f2:	e656      	b.n	8007ea2 <_dtoa_r+0x722>
 80081f4:	f1bb 0f00 	cmp.w	fp, #0
 80081f8:	f77f aed7 	ble.w	8007faa <_dtoa_r+0x82a>
 80081fc:	463e      	mov	r6, r7
 80081fe:	9801      	ldr	r0, [sp, #4]
 8008200:	4621      	mov	r1, r4
 8008202:	f7ff fa34 	bl	800766e <quorem>
 8008206:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800820a:	f806 ab01 	strb.w	sl, [r6], #1
 800820e:	1bf2      	subs	r2, r6, r7
 8008210:	4593      	cmp	fp, r2
 8008212:	ddb4      	ble.n	800817e <_dtoa_r+0x9fe>
 8008214:	9901      	ldr	r1, [sp, #4]
 8008216:	2300      	movs	r3, #0
 8008218:	220a      	movs	r2, #10
 800821a:	4648      	mov	r0, r9
 800821c:	f000 f8b2 	bl	8008384 <__multadd>
 8008220:	9001      	str	r0, [sp, #4]
 8008222:	e7ec      	b.n	80081fe <_dtoa_r+0xa7e>
 8008224:	0800939c 	.word	0x0800939c
 8008228:	08009320 	.word	0x08009320

0800822c <_free_r>:
 800822c:	b538      	push	{r3, r4, r5, lr}
 800822e:	4605      	mov	r5, r0
 8008230:	2900      	cmp	r1, #0
 8008232:	d041      	beq.n	80082b8 <_free_r+0x8c>
 8008234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008238:	1f0c      	subs	r4, r1, #4
 800823a:	2b00      	cmp	r3, #0
 800823c:	bfb8      	it	lt
 800823e:	18e4      	addlt	r4, r4, r3
 8008240:	f7fe fc2c 	bl	8006a9c <__malloc_lock>
 8008244:	4a1d      	ldr	r2, [pc, #116]	@ (80082bc <_free_r+0x90>)
 8008246:	6813      	ldr	r3, [r2, #0]
 8008248:	b933      	cbnz	r3, 8008258 <_free_r+0x2c>
 800824a:	6063      	str	r3, [r4, #4]
 800824c:	6014      	str	r4, [r2, #0]
 800824e:	4628      	mov	r0, r5
 8008250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008254:	f7fe bc28 	b.w	8006aa8 <__malloc_unlock>
 8008258:	42a3      	cmp	r3, r4
 800825a:	d908      	bls.n	800826e <_free_r+0x42>
 800825c:	6820      	ldr	r0, [r4, #0]
 800825e:	1821      	adds	r1, r4, r0
 8008260:	428b      	cmp	r3, r1
 8008262:	bf01      	itttt	eq
 8008264:	6819      	ldreq	r1, [r3, #0]
 8008266:	685b      	ldreq	r3, [r3, #4]
 8008268:	1809      	addeq	r1, r1, r0
 800826a:	6021      	streq	r1, [r4, #0]
 800826c:	e7ed      	b.n	800824a <_free_r+0x1e>
 800826e:	461a      	mov	r2, r3
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	b10b      	cbz	r3, 8008278 <_free_r+0x4c>
 8008274:	42a3      	cmp	r3, r4
 8008276:	d9fa      	bls.n	800826e <_free_r+0x42>
 8008278:	6811      	ldr	r1, [r2, #0]
 800827a:	1850      	adds	r0, r2, r1
 800827c:	42a0      	cmp	r0, r4
 800827e:	d10b      	bne.n	8008298 <_free_r+0x6c>
 8008280:	6820      	ldr	r0, [r4, #0]
 8008282:	4401      	add	r1, r0
 8008284:	1850      	adds	r0, r2, r1
 8008286:	4283      	cmp	r3, r0
 8008288:	6011      	str	r1, [r2, #0]
 800828a:	d1e0      	bne.n	800824e <_free_r+0x22>
 800828c:	6818      	ldr	r0, [r3, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	6053      	str	r3, [r2, #4]
 8008292:	4408      	add	r0, r1
 8008294:	6010      	str	r0, [r2, #0]
 8008296:	e7da      	b.n	800824e <_free_r+0x22>
 8008298:	d902      	bls.n	80082a0 <_free_r+0x74>
 800829a:	230c      	movs	r3, #12
 800829c:	602b      	str	r3, [r5, #0]
 800829e:	e7d6      	b.n	800824e <_free_r+0x22>
 80082a0:	6820      	ldr	r0, [r4, #0]
 80082a2:	1821      	adds	r1, r4, r0
 80082a4:	428b      	cmp	r3, r1
 80082a6:	bf04      	itt	eq
 80082a8:	6819      	ldreq	r1, [r3, #0]
 80082aa:	685b      	ldreq	r3, [r3, #4]
 80082ac:	6063      	str	r3, [r4, #4]
 80082ae:	bf04      	itt	eq
 80082b0:	1809      	addeq	r1, r1, r0
 80082b2:	6021      	streq	r1, [r4, #0]
 80082b4:	6054      	str	r4, [r2, #4]
 80082b6:	e7ca      	b.n	800824e <_free_r+0x22>
 80082b8:	bd38      	pop	{r3, r4, r5, pc}
 80082ba:	bf00      	nop
 80082bc:	24000320 	.word	0x24000320

080082c0 <_Balloc>:
 80082c0:	b570      	push	{r4, r5, r6, lr}
 80082c2:	69c6      	ldr	r6, [r0, #28]
 80082c4:	4604      	mov	r4, r0
 80082c6:	460d      	mov	r5, r1
 80082c8:	b976      	cbnz	r6, 80082e8 <_Balloc+0x28>
 80082ca:	2010      	movs	r0, #16
 80082cc:	f7fe fb3c 	bl	8006948 <malloc>
 80082d0:	4602      	mov	r2, r0
 80082d2:	61e0      	str	r0, [r4, #28]
 80082d4:	b920      	cbnz	r0, 80082e0 <_Balloc+0x20>
 80082d6:	4b18      	ldr	r3, [pc, #96]	@ (8008338 <_Balloc+0x78>)
 80082d8:	4818      	ldr	r0, [pc, #96]	@ (800833c <_Balloc+0x7c>)
 80082da:	216b      	movs	r1, #107	@ 0x6b
 80082dc:	f000 fe02 	bl	8008ee4 <__assert_func>
 80082e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082e4:	6006      	str	r6, [r0, #0]
 80082e6:	60c6      	str	r6, [r0, #12]
 80082e8:	69e6      	ldr	r6, [r4, #28]
 80082ea:	68f3      	ldr	r3, [r6, #12]
 80082ec:	b183      	cbz	r3, 8008310 <_Balloc+0x50>
 80082ee:	69e3      	ldr	r3, [r4, #28]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80082f6:	b9b8      	cbnz	r0, 8008328 <_Balloc+0x68>
 80082f8:	2101      	movs	r1, #1
 80082fa:	fa01 f605 	lsl.w	r6, r1, r5
 80082fe:	1d72      	adds	r2, r6, #5
 8008300:	0092      	lsls	r2, r2, #2
 8008302:	4620      	mov	r0, r4
 8008304:	f000 fe0c 	bl	8008f20 <_calloc_r>
 8008308:	b160      	cbz	r0, 8008324 <_Balloc+0x64>
 800830a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800830e:	e00e      	b.n	800832e <_Balloc+0x6e>
 8008310:	2221      	movs	r2, #33	@ 0x21
 8008312:	2104      	movs	r1, #4
 8008314:	4620      	mov	r0, r4
 8008316:	f000 fe03 	bl	8008f20 <_calloc_r>
 800831a:	69e3      	ldr	r3, [r4, #28]
 800831c:	60f0      	str	r0, [r6, #12]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1e4      	bne.n	80082ee <_Balloc+0x2e>
 8008324:	2000      	movs	r0, #0
 8008326:	bd70      	pop	{r4, r5, r6, pc}
 8008328:	6802      	ldr	r2, [r0, #0]
 800832a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800832e:	2300      	movs	r3, #0
 8008330:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008334:	e7f7      	b.n	8008326 <_Balloc+0x66>
 8008336:	bf00      	nop
 8008338:	0800932d 	.word	0x0800932d
 800833c:	080093ad 	.word	0x080093ad

08008340 <_Bfree>:
 8008340:	b570      	push	{r4, r5, r6, lr}
 8008342:	69c6      	ldr	r6, [r0, #28]
 8008344:	4605      	mov	r5, r0
 8008346:	460c      	mov	r4, r1
 8008348:	b976      	cbnz	r6, 8008368 <_Bfree+0x28>
 800834a:	2010      	movs	r0, #16
 800834c:	f7fe fafc 	bl	8006948 <malloc>
 8008350:	4602      	mov	r2, r0
 8008352:	61e8      	str	r0, [r5, #28]
 8008354:	b920      	cbnz	r0, 8008360 <_Bfree+0x20>
 8008356:	4b09      	ldr	r3, [pc, #36]	@ (800837c <_Bfree+0x3c>)
 8008358:	4809      	ldr	r0, [pc, #36]	@ (8008380 <_Bfree+0x40>)
 800835a:	218f      	movs	r1, #143	@ 0x8f
 800835c:	f000 fdc2 	bl	8008ee4 <__assert_func>
 8008360:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008364:	6006      	str	r6, [r0, #0]
 8008366:	60c6      	str	r6, [r0, #12]
 8008368:	b13c      	cbz	r4, 800837a <_Bfree+0x3a>
 800836a:	69eb      	ldr	r3, [r5, #28]
 800836c:	6862      	ldr	r2, [r4, #4]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008374:	6021      	str	r1, [r4, #0]
 8008376:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800837a:	bd70      	pop	{r4, r5, r6, pc}
 800837c:	0800932d 	.word	0x0800932d
 8008380:	080093ad 	.word	0x080093ad

08008384 <__multadd>:
 8008384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008388:	690d      	ldr	r5, [r1, #16]
 800838a:	4607      	mov	r7, r0
 800838c:	460c      	mov	r4, r1
 800838e:	461e      	mov	r6, r3
 8008390:	f101 0c14 	add.w	ip, r1, #20
 8008394:	2000      	movs	r0, #0
 8008396:	f8dc 3000 	ldr.w	r3, [ip]
 800839a:	b299      	uxth	r1, r3
 800839c:	fb02 6101 	mla	r1, r2, r1, r6
 80083a0:	0c1e      	lsrs	r6, r3, #16
 80083a2:	0c0b      	lsrs	r3, r1, #16
 80083a4:	fb02 3306 	mla	r3, r2, r6, r3
 80083a8:	b289      	uxth	r1, r1
 80083aa:	3001      	adds	r0, #1
 80083ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80083b0:	4285      	cmp	r5, r0
 80083b2:	f84c 1b04 	str.w	r1, [ip], #4
 80083b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80083ba:	dcec      	bgt.n	8008396 <__multadd+0x12>
 80083bc:	b30e      	cbz	r6, 8008402 <__multadd+0x7e>
 80083be:	68a3      	ldr	r3, [r4, #8]
 80083c0:	42ab      	cmp	r3, r5
 80083c2:	dc19      	bgt.n	80083f8 <__multadd+0x74>
 80083c4:	6861      	ldr	r1, [r4, #4]
 80083c6:	4638      	mov	r0, r7
 80083c8:	3101      	adds	r1, #1
 80083ca:	f7ff ff79 	bl	80082c0 <_Balloc>
 80083ce:	4680      	mov	r8, r0
 80083d0:	b928      	cbnz	r0, 80083de <__multadd+0x5a>
 80083d2:	4602      	mov	r2, r0
 80083d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008408 <__multadd+0x84>)
 80083d6:	480d      	ldr	r0, [pc, #52]	@ (800840c <__multadd+0x88>)
 80083d8:	21ba      	movs	r1, #186	@ 0xba
 80083da:	f000 fd83 	bl	8008ee4 <__assert_func>
 80083de:	6922      	ldr	r2, [r4, #16]
 80083e0:	3202      	adds	r2, #2
 80083e2:	f104 010c 	add.w	r1, r4, #12
 80083e6:	0092      	lsls	r2, r2, #2
 80083e8:	300c      	adds	r0, #12
 80083ea:	f000 fd6d 	bl	8008ec8 <memcpy>
 80083ee:	4621      	mov	r1, r4
 80083f0:	4638      	mov	r0, r7
 80083f2:	f7ff ffa5 	bl	8008340 <_Bfree>
 80083f6:	4644      	mov	r4, r8
 80083f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80083fc:	3501      	adds	r5, #1
 80083fe:	615e      	str	r6, [r3, #20]
 8008400:	6125      	str	r5, [r4, #16]
 8008402:	4620      	mov	r0, r4
 8008404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008408:	0800939c 	.word	0x0800939c
 800840c:	080093ad 	.word	0x080093ad

08008410 <__hi0bits>:
 8008410:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008414:	4603      	mov	r3, r0
 8008416:	bf36      	itet	cc
 8008418:	0403      	lslcc	r3, r0, #16
 800841a:	2000      	movcs	r0, #0
 800841c:	2010      	movcc	r0, #16
 800841e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008422:	bf3c      	itt	cc
 8008424:	021b      	lslcc	r3, r3, #8
 8008426:	3008      	addcc	r0, #8
 8008428:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800842c:	bf3c      	itt	cc
 800842e:	011b      	lslcc	r3, r3, #4
 8008430:	3004      	addcc	r0, #4
 8008432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008436:	bf3c      	itt	cc
 8008438:	009b      	lslcc	r3, r3, #2
 800843a:	3002      	addcc	r0, #2
 800843c:	2b00      	cmp	r3, #0
 800843e:	db05      	blt.n	800844c <__hi0bits+0x3c>
 8008440:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008444:	f100 0001 	add.w	r0, r0, #1
 8008448:	bf08      	it	eq
 800844a:	2020      	moveq	r0, #32
 800844c:	4770      	bx	lr

0800844e <__lo0bits>:
 800844e:	6803      	ldr	r3, [r0, #0]
 8008450:	4602      	mov	r2, r0
 8008452:	f013 0007 	ands.w	r0, r3, #7
 8008456:	d00b      	beq.n	8008470 <__lo0bits+0x22>
 8008458:	07d9      	lsls	r1, r3, #31
 800845a:	d421      	bmi.n	80084a0 <__lo0bits+0x52>
 800845c:	0798      	lsls	r0, r3, #30
 800845e:	bf49      	itett	mi
 8008460:	085b      	lsrmi	r3, r3, #1
 8008462:	089b      	lsrpl	r3, r3, #2
 8008464:	2001      	movmi	r0, #1
 8008466:	6013      	strmi	r3, [r2, #0]
 8008468:	bf5c      	itt	pl
 800846a:	6013      	strpl	r3, [r2, #0]
 800846c:	2002      	movpl	r0, #2
 800846e:	4770      	bx	lr
 8008470:	b299      	uxth	r1, r3
 8008472:	b909      	cbnz	r1, 8008478 <__lo0bits+0x2a>
 8008474:	0c1b      	lsrs	r3, r3, #16
 8008476:	2010      	movs	r0, #16
 8008478:	b2d9      	uxtb	r1, r3
 800847a:	b909      	cbnz	r1, 8008480 <__lo0bits+0x32>
 800847c:	3008      	adds	r0, #8
 800847e:	0a1b      	lsrs	r3, r3, #8
 8008480:	0719      	lsls	r1, r3, #28
 8008482:	bf04      	itt	eq
 8008484:	091b      	lsreq	r3, r3, #4
 8008486:	3004      	addeq	r0, #4
 8008488:	0799      	lsls	r1, r3, #30
 800848a:	bf04      	itt	eq
 800848c:	089b      	lsreq	r3, r3, #2
 800848e:	3002      	addeq	r0, #2
 8008490:	07d9      	lsls	r1, r3, #31
 8008492:	d403      	bmi.n	800849c <__lo0bits+0x4e>
 8008494:	085b      	lsrs	r3, r3, #1
 8008496:	f100 0001 	add.w	r0, r0, #1
 800849a:	d003      	beq.n	80084a4 <__lo0bits+0x56>
 800849c:	6013      	str	r3, [r2, #0]
 800849e:	4770      	bx	lr
 80084a0:	2000      	movs	r0, #0
 80084a2:	4770      	bx	lr
 80084a4:	2020      	movs	r0, #32
 80084a6:	4770      	bx	lr

080084a8 <__i2b>:
 80084a8:	b510      	push	{r4, lr}
 80084aa:	460c      	mov	r4, r1
 80084ac:	2101      	movs	r1, #1
 80084ae:	f7ff ff07 	bl	80082c0 <_Balloc>
 80084b2:	4602      	mov	r2, r0
 80084b4:	b928      	cbnz	r0, 80084c2 <__i2b+0x1a>
 80084b6:	4b05      	ldr	r3, [pc, #20]	@ (80084cc <__i2b+0x24>)
 80084b8:	4805      	ldr	r0, [pc, #20]	@ (80084d0 <__i2b+0x28>)
 80084ba:	f240 1145 	movw	r1, #325	@ 0x145
 80084be:	f000 fd11 	bl	8008ee4 <__assert_func>
 80084c2:	2301      	movs	r3, #1
 80084c4:	6144      	str	r4, [r0, #20]
 80084c6:	6103      	str	r3, [r0, #16]
 80084c8:	bd10      	pop	{r4, pc}
 80084ca:	bf00      	nop
 80084cc:	0800939c 	.word	0x0800939c
 80084d0:	080093ad 	.word	0x080093ad

080084d4 <__multiply>:
 80084d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d8:	4614      	mov	r4, r2
 80084da:	690a      	ldr	r2, [r1, #16]
 80084dc:	6923      	ldr	r3, [r4, #16]
 80084de:	429a      	cmp	r2, r3
 80084e0:	bfa8      	it	ge
 80084e2:	4623      	movge	r3, r4
 80084e4:	460f      	mov	r7, r1
 80084e6:	bfa4      	itt	ge
 80084e8:	460c      	movge	r4, r1
 80084ea:	461f      	movge	r7, r3
 80084ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80084f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80084f4:	68a3      	ldr	r3, [r4, #8]
 80084f6:	6861      	ldr	r1, [r4, #4]
 80084f8:	eb0a 0609 	add.w	r6, sl, r9
 80084fc:	42b3      	cmp	r3, r6
 80084fe:	b085      	sub	sp, #20
 8008500:	bfb8      	it	lt
 8008502:	3101      	addlt	r1, #1
 8008504:	f7ff fedc 	bl	80082c0 <_Balloc>
 8008508:	b930      	cbnz	r0, 8008518 <__multiply+0x44>
 800850a:	4602      	mov	r2, r0
 800850c:	4b44      	ldr	r3, [pc, #272]	@ (8008620 <__multiply+0x14c>)
 800850e:	4845      	ldr	r0, [pc, #276]	@ (8008624 <__multiply+0x150>)
 8008510:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008514:	f000 fce6 	bl	8008ee4 <__assert_func>
 8008518:	f100 0514 	add.w	r5, r0, #20
 800851c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008520:	462b      	mov	r3, r5
 8008522:	2200      	movs	r2, #0
 8008524:	4543      	cmp	r3, r8
 8008526:	d321      	bcc.n	800856c <__multiply+0x98>
 8008528:	f107 0114 	add.w	r1, r7, #20
 800852c:	f104 0214 	add.w	r2, r4, #20
 8008530:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008534:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008538:	9302      	str	r3, [sp, #8]
 800853a:	1b13      	subs	r3, r2, r4
 800853c:	3b15      	subs	r3, #21
 800853e:	f023 0303 	bic.w	r3, r3, #3
 8008542:	3304      	adds	r3, #4
 8008544:	f104 0715 	add.w	r7, r4, #21
 8008548:	42ba      	cmp	r2, r7
 800854a:	bf38      	it	cc
 800854c:	2304      	movcc	r3, #4
 800854e:	9301      	str	r3, [sp, #4]
 8008550:	9b02      	ldr	r3, [sp, #8]
 8008552:	9103      	str	r1, [sp, #12]
 8008554:	428b      	cmp	r3, r1
 8008556:	d80c      	bhi.n	8008572 <__multiply+0x9e>
 8008558:	2e00      	cmp	r6, #0
 800855a:	dd03      	ble.n	8008564 <__multiply+0x90>
 800855c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008560:	2b00      	cmp	r3, #0
 8008562:	d05b      	beq.n	800861c <__multiply+0x148>
 8008564:	6106      	str	r6, [r0, #16]
 8008566:	b005      	add	sp, #20
 8008568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800856c:	f843 2b04 	str.w	r2, [r3], #4
 8008570:	e7d8      	b.n	8008524 <__multiply+0x50>
 8008572:	f8b1 a000 	ldrh.w	sl, [r1]
 8008576:	f1ba 0f00 	cmp.w	sl, #0
 800857a:	d024      	beq.n	80085c6 <__multiply+0xf2>
 800857c:	f104 0e14 	add.w	lr, r4, #20
 8008580:	46a9      	mov	r9, r5
 8008582:	f04f 0c00 	mov.w	ip, #0
 8008586:	f85e 7b04 	ldr.w	r7, [lr], #4
 800858a:	f8d9 3000 	ldr.w	r3, [r9]
 800858e:	fa1f fb87 	uxth.w	fp, r7
 8008592:	b29b      	uxth	r3, r3
 8008594:	fb0a 330b 	mla	r3, sl, fp, r3
 8008598:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800859c:	f8d9 7000 	ldr.w	r7, [r9]
 80085a0:	4463      	add	r3, ip
 80085a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80085a6:	fb0a c70b 	mla	r7, sl, fp, ip
 80085aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80085b4:	4572      	cmp	r2, lr
 80085b6:	f849 3b04 	str.w	r3, [r9], #4
 80085ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80085be:	d8e2      	bhi.n	8008586 <__multiply+0xb2>
 80085c0:	9b01      	ldr	r3, [sp, #4]
 80085c2:	f845 c003 	str.w	ip, [r5, r3]
 80085c6:	9b03      	ldr	r3, [sp, #12]
 80085c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80085cc:	3104      	adds	r1, #4
 80085ce:	f1b9 0f00 	cmp.w	r9, #0
 80085d2:	d021      	beq.n	8008618 <__multiply+0x144>
 80085d4:	682b      	ldr	r3, [r5, #0]
 80085d6:	f104 0c14 	add.w	ip, r4, #20
 80085da:	46ae      	mov	lr, r5
 80085dc:	f04f 0a00 	mov.w	sl, #0
 80085e0:	f8bc b000 	ldrh.w	fp, [ip]
 80085e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80085e8:	fb09 770b 	mla	r7, r9, fp, r7
 80085ec:	4457      	add	r7, sl
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80085f4:	f84e 3b04 	str.w	r3, [lr], #4
 80085f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80085fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008600:	f8be 3000 	ldrh.w	r3, [lr]
 8008604:	fb09 330a 	mla	r3, r9, sl, r3
 8008608:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800860c:	4562      	cmp	r2, ip
 800860e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008612:	d8e5      	bhi.n	80085e0 <__multiply+0x10c>
 8008614:	9f01      	ldr	r7, [sp, #4]
 8008616:	51eb      	str	r3, [r5, r7]
 8008618:	3504      	adds	r5, #4
 800861a:	e799      	b.n	8008550 <__multiply+0x7c>
 800861c:	3e01      	subs	r6, #1
 800861e:	e79b      	b.n	8008558 <__multiply+0x84>
 8008620:	0800939c 	.word	0x0800939c
 8008624:	080093ad 	.word	0x080093ad

08008628 <__pow5mult>:
 8008628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800862c:	4615      	mov	r5, r2
 800862e:	f012 0203 	ands.w	r2, r2, #3
 8008632:	4607      	mov	r7, r0
 8008634:	460e      	mov	r6, r1
 8008636:	d007      	beq.n	8008648 <__pow5mult+0x20>
 8008638:	4c25      	ldr	r4, [pc, #148]	@ (80086d0 <__pow5mult+0xa8>)
 800863a:	3a01      	subs	r2, #1
 800863c:	2300      	movs	r3, #0
 800863e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008642:	f7ff fe9f 	bl	8008384 <__multadd>
 8008646:	4606      	mov	r6, r0
 8008648:	10ad      	asrs	r5, r5, #2
 800864a:	d03d      	beq.n	80086c8 <__pow5mult+0xa0>
 800864c:	69fc      	ldr	r4, [r7, #28]
 800864e:	b97c      	cbnz	r4, 8008670 <__pow5mult+0x48>
 8008650:	2010      	movs	r0, #16
 8008652:	f7fe f979 	bl	8006948 <malloc>
 8008656:	4602      	mov	r2, r0
 8008658:	61f8      	str	r0, [r7, #28]
 800865a:	b928      	cbnz	r0, 8008668 <__pow5mult+0x40>
 800865c:	4b1d      	ldr	r3, [pc, #116]	@ (80086d4 <__pow5mult+0xac>)
 800865e:	481e      	ldr	r0, [pc, #120]	@ (80086d8 <__pow5mult+0xb0>)
 8008660:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008664:	f000 fc3e 	bl	8008ee4 <__assert_func>
 8008668:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800866c:	6004      	str	r4, [r0, #0]
 800866e:	60c4      	str	r4, [r0, #12]
 8008670:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008674:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008678:	b94c      	cbnz	r4, 800868e <__pow5mult+0x66>
 800867a:	f240 2171 	movw	r1, #625	@ 0x271
 800867e:	4638      	mov	r0, r7
 8008680:	f7ff ff12 	bl	80084a8 <__i2b>
 8008684:	2300      	movs	r3, #0
 8008686:	f8c8 0008 	str.w	r0, [r8, #8]
 800868a:	4604      	mov	r4, r0
 800868c:	6003      	str	r3, [r0, #0]
 800868e:	f04f 0900 	mov.w	r9, #0
 8008692:	07eb      	lsls	r3, r5, #31
 8008694:	d50a      	bpl.n	80086ac <__pow5mult+0x84>
 8008696:	4631      	mov	r1, r6
 8008698:	4622      	mov	r2, r4
 800869a:	4638      	mov	r0, r7
 800869c:	f7ff ff1a 	bl	80084d4 <__multiply>
 80086a0:	4631      	mov	r1, r6
 80086a2:	4680      	mov	r8, r0
 80086a4:	4638      	mov	r0, r7
 80086a6:	f7ff fe4b 	bl	8008340 <_Bfree>
 80086aa:	4646      	mov	r6, r8
 80086ac:	106d      	asrs	r5, r5, #1
 80086ae:	d00b      	beq.n	80086c8 <__pow5mult+0xa0>
 80086b0:	6820      	ldr	r0, [r4, #0]
 80086b2:	b938      	cbnz	r0, 80086c4 <__pow5mult+0x9c>
 80086b4:	4622      	mov	r2, r4
 80086b6:	4621      	mov	r1, r4
 80086b8:	4638      	mov	r0, r7
 80086ba:	f7ff ff0b 	bl	80084d4 <__multiply>
 80086be:	6020      	str	r0, [r4, #0]
 80086c0:	f8c0 9000 	str.w	r9, [r0]
 80086c4:	4604      	mov	r4, r0
 80086c6:	e7e4      	b.n	8008692 <__pow5mult+0x6a>
 80086c8:	4630      	mov	r0, r6
 80086ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ce:	bf00      	nop
 80086d0:	08009408 	.word	0x08009408
 80086d4:	0800932d 	.word	0x0800932d
 80086d8:	080093ad 	.word	0x080093ad

080086dc <__lshift>:
 80086dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086e0:	460c      	mov	r4, r1
 80086e2:	6849      	ldr	r1, [r1, #4]
 80086e4:	6923      	ldr	r3, [r4, #16]
 80086e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80086ea:	68a3      	ldr	r3, [r4, #8]
 80086ec:	4607      	mov	r7, r0
 80086ee:	4691      	mov	r9, r2
 80086f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086f4:	f108 0601 	add.w	r6, r8, #1
 80086f8:	42b3      	cmp	r3, r6
 80086fa:	db0b      	blt.n	8008714 <__lshift+0x38>
 80086fc:	4638      	mov	r0, r7
 80086fe:	f7ff fddf 	bl	80082c0 <_Balloc>
 8008702:	4605      	mov	r5, r0
 8008704:	b948      	cbnz	r0, 800871a <__lshift+0x3e>
 8008706:	4602      	mov	r2, r0
 8008708:	4b28      	ldr	r3, [pc, #160]	@ (80087ac <__lshift+0xd0>)
 800870a:	4829      	ldr	r0, [pc, #164]	@ (80087b0 <__lshift+0xd4>)
 800870c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008710:	f000 fbe8 	bl	8008ee4 <__assert_func>
 8008714:	3101      	adds	r1, #1
 8008716:	005b      	lsls	r3, r3, #1
 8008718:	e7ee      	b.n	80086f8 <__lshift+0x1c>
 800871a:	2300      	movs	r3, #0
 800871c:	f100 0114 	add.w	r1, r0, #20
 8008720:	f100 0210 	add.w	r2, r0, #16
 8008724:	4618      	mov	r0, r3
 8008726:	4553      	cmp	r3, sl
 8008728:	db33      	blt.n	8008792 <__lshift+0xb6>
 800872a:	6920      	ldr	r0, [r4, #16]
 800872c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008730:	f104 0314 	add.w	r3, r4, #20
 8008734:	f019 091f 	ands.w	r9, r9, #31
 8008738:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800873c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008740:	d02b      	beq.n	800879a <__lshift+0xbe>
 8008742:	f1c9 0e20 	rsb	lr, r9, #32
 8008746:	468a      	mov	sl, r1
 8008748:	2200      	movs	r2, #0
 800874a:	6818      	ldr	r0, [r3, #0]
 800874c:	fa00 f009 	lsl.w	r0, r0, r9
 8008750:	4310      	orrs	r0, r2
 8008752:	f84a 0b04 	str.w	r0, [sl], #4
 8008756:	f853 2b04 	ldr.w	r2, [r3], #4
 800875a:	459c      	cmp	ip, r3
 800875c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008760:	d8f3      	bhi.n	800874a <__lshift+0x6e>
 8008762:	ebac 0304 	sub.w	r3, ip, r4
 8008766:	3b15      	subs	r3, #21
 8008768:	f023 0303 	bic.w	r3, r3, #3
 800876c:	3304      	adds	r3, #4
 800876e:	f104 0015 	add.w	r0, r4, #21
 8008772:	4584      	cmp	ip, r0
 8008774:	bf38      	it	cc
 8008776:	2304      	movcc	r3, #4
 8008778:	50ca      	str	r2, [r1, r3]
 800877a:	b10a      	cbz	r2, 8008780 <__lshift+0xa4>
 800877c:	f108 0602 	add.w	r6, r8, #2
 8008780:	3e01      	subs	r6, #1
 8008782:	4638      	mov	r0, r7
 8008784:	612e      	str	r6, [r5, #16]
 8008786:	4621      	mov	r1, r4
 8008788:	f7ff fdda 	bl	8008340 <_Bfree>
 800878c:	4628      	mov	r0, r5
 800878e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008792:	f842 0f04 	str.w	r0, [r2, #4]!
 8008796:	3301      	adds	r3, #1
 8008798:	e7c5      	b.n	8008726 <__lshift+0x4a>
 800879a:	3904      	subs	r1, #4
 800879c:	f853 2b04 	ldr.w	r2, [r3], #4
 80087a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80087a4:	459c      	cmp	ip, r3
 80087a6:	d8f9      	bhi.n	800879c <__lshift+0xc0>
 80087a8:	e7ea      	b.n	8008780 <__lshift+0xa4>
 80087aa:	bf00      	nop
 80087ac:	0800939c 	.word	0x0800939c
 80087b0:	080093ad 	.word	0x080093ad

080087b4 <__mcmp>:
 80087b4:	690a      	ldr	r2, [r1, #16]
 80087b6:	4603      	mov	r3, r0
 80087b8:	6900      	ldr	r0, [r0, #16]
 80087ba:	1a80      	subs	r0, r0, r2
 80087bc:	b530      	push	{r4, r5, lr}
 80087be:	d10e      	bne.n	80087de <__mcmp+0x2a>
 80087c0:	3314      	adds	r3, #20
 80087c2:	3114      	adds	r1, #20
 80087c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80087c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80087cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80087d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80087d4:	4295      	cmp	r5, r2
 80087d6:	d003      	beq.n	80087e0 <__mcmp+0x2c>
 80087d8:	d205      	bcs.n	80087e6 <__mcmp+0x32>
 80087da:	f04f 30ff 	mov.w	r0, #4294967295
 80087de:	bd30      	pop	{r4, r5, pc}
 80087e0:	42a3      	cmp	r3, r4
 80087e2:	d3f3      	bcc.n	80087cc <__mcmp+0x18>
 80087e4:	e7fb      	b.n	80087de <__mcmp+0x2a>
 80087e6:	2001      	movs	r0, #1
 80087e8:	e7f9      	b.n	80087de <__mcmp+0x2a>
	...

080087ec <__mdiff>:
 80087ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f0:	4689      	mov	r9, r1
 80087f2:	4606      	mov	r6, r0
 80087f4:	4611      	mov	r1, r2
 80087f6:	4648      	mov	r0, r9
 80087f8:	4614      	mov	r4, r2
 80087fa:	f7ff ffdb 	bl	80087b4 <__mcmp>
 80087fe:	1e05      	subs	r5, r0, #0
 8008800:	d112      	bne.n	8008828 <__mdiff+0x3c>
 8008802:	4629      	mov	r1, r5
 8008804:	4630      	mov	r0, r6
 8008806:	f7ff fd5b 	bl	80082c0 <_Balloc>
 800880a:	4602      	mov	r2, r0
 800880c:	b928      	cbnz	r0, 800881a <__mdiff+0x2e>
 800880e:	4b3f      	ldr	r3, [pc, #252]	@ (800890c <__mdiff+0x120>)
 8008810:	f240 2137 	movw	r1, #567	@ 0x237
 8008814:	483e      	ldr	r0, [pc, #248]	@ (8008910 <__mdiff+0x124>)
 8008816:	f000 fb65 	bl	8008ee4 <__assert_func>
 800881a:	2301      	movs	r3, #1
 800881c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008820:	4610      	mov	r0, r2
 8008822:	b003      	add	sp, #12
 8008824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008828:	bfbc      	itt	lt
 800882a:	464b      	movlt	r3, r9
 800882c:	46a1      	movlt	r9, r4
 800882e:	4630      	mov	r0, r6
 8008830:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008834:	bfba      	itte	lt
 8008836:	461c      	movlt	r4, r3
 8008838:	2501      	movlt	r5, #1
 800883a:	2500      	movge	r5, #0
 800883c:	f7ff fd40 	bl	80082c0 <_Balloc>
 8008840:	4602      	mov	r2, r0
 8008842:	b918      	cbnz	r0, 800884c <__mdiff+0x60>
 8008844:	4b31      	ldr	r3, [pc, #196]	@ (800890c <__mdiff+0x120>)
 8008846:	f240 2145 	movw	r1, #581	@ 0x245
 800884a:	e7e3      	b.n	8008814 <__mdiff+0x28>
 800884c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008850:	6926      	ldr	r6, [r4, #16]
 8008852:	60c5      	str	r5, [r0, #12]
 8008854:	f109 0310 	add.w	r3, r9, #16
 8008858:	f109 0514 	add.w	r5, r9, #20
 800885c:	f104 0e14 	add.w	lr, r4, #20
 8008860:	f100 0b14 	add.w	fp, r0, #20
 8008864:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008868:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	46d9      	mov	r9, fp
 8008870:	f04f 0c00 	mov.w	ip, #0
 8008874:	9b01      	ldr	r3, [sp, #4]
 8008876:	f85e 0b04 	ldr.w	r0, [lr], #4
 800887a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800887e:	9301      	str	r3, [sp, #4]
 8008880:	fa1f f38a 	uxth.w	r3, sl
 8008884:	4619      	mov	r1, r3
 8008886:	b283      	uxth	r3, r0
 8008888:	1acb      	subs	r3, r1, r3
 800888a:	0c00      	lsrs	r0, r0, #16
 800888c:	4463      	add	r3, ip
 800888e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008892:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008896:	b29b      	uxth	r3, r3
 8008898:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800889c:	4576      	cmp	r6, lr
 800889e:	f849 3b04 	str.w	r3, [r9], #4
 80088a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80088a6:	d8e5      	bhi.n	8008874 <__mdiff+0x88>
 80088a8:	1b33      	subs	r3, r6, r4
 80088aa:	3b15      	subs	r3, #21
 80088ac:	f023 0303 	bic.w	r3, r3, #3
 80088b0:	3415      	adds	r4, #21
 80088b2:	3304      	adds	r3, #4
 80088b4:	42a6      	cmp	r6, r4
 80088b6:	bf38      	it	cc
 80088b8:	2304      	movcc	r3, #4
 80088ba:	441d      	add	r5, r3
 80088bc:	445b      	add	r3, fp
 80088be:	461e      	mov	r6, r3
 80088c0:	462c      	mov	r4, r5
 80088c2:	4544      	cmp	r4, r8
 80088c4:	d30e      	bcc.n	80088e4 <__mdiff+0xf8>
 80088c6:	f108 0103 	add.w	r1, r8, #3
 80088ca:	1b49      	subs	r1, r1, r5
 80088cc:	f021 0103 	bic.w	r1, r1, #3
 80088d0:	3d03      	subs	r5, #3
 80088d2:	45a8      	cmp	r8, r5
 80088d4:	bf38      	it	cc
 80088d6:	2100      	movcc	r1, #0
 80088d8:	440b      	add	r3, r1
 80088da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80088de:	b191      	cbz	r1, 8008906 <__mdiff+0x11a>
 80088e0:	6117      	str	r7, [r2, #16]
 80088e2:	e79d      	b.n	8008820 <__mdiff+0x34>
 80088e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80088e8:	46e6      	mov	lr, ip
 80088ea:	0c08      	lsrs	r0, r1, #16
 80088ec:	fa1c fc81 	uxtah	ip, ip, r1
 80088f0:	4471      	add	r1, lr
 80088f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80088f6:	b289      	uxth	r1, r1
 80088f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80088fc:	f846 1b04 	str.w	r1, [r6], #4
 8008900:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008904:	e7dd      	b.n	80088c2 <__mdiff+0xd6>
 8008906:	3f01      	subs	r7, #1
 8008908:	e7e7      	b.n	80088da <__mdiff+0xee>
 800890a:	bf00      	nop
 800890c:	0800939c 	.word	0x0800939c
 8008910:	080093ad 	.word	0x080093ad

08008914 <__d2b>:
 8008914:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008918:	460f      	mov	r7, r1
 800891a:	2101      	movs	r1, #1
 800891c:	ec59 8b10 	vmov	r8, r9, d0
 8008920:	4616      	mov	r6, r2
 8008922:	f7ff fccd 	bl	80082c0 <_Balloc>
 8008926:	4604      	mov	r4, r0
 8008928:	b930      	cbnz	r0, 8008938 <__d2b+0x24>
 800892a:	4602      	mov	r2, r0
 800892c:	4b23      	ldr	r3, [pc, #140]	@ (80089bc <__d2b+0xa8>)
 800892e:	4824      	ldr	r0, [pc, #144]	@ (80089c0 <__d2b+0xac>)
 8008930:	f240 310f 	movw	r1, #783	@ 0x30f
 8008934:	f000 fad6 	bl	8008ee4 <__assert_func>
 8008938:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800893c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008940:	b10d      	cbz	r5, 8008946 <__d2b+0x32>
 8008942:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008946:	9301      	str	r3, [sp, #4]
 8008948:	f1b8 0300 	subs.w	r3, r8, #0
 800894c:	d023      	beq.n	8008996 <__d2b+0x82>
 800894e:	4668      	mov	r0, sp
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	f7ff fd7c 	bl	800844e <__lo0bits>
 8008956:	e9dd 1200 	ldrd	r1, r2, [sp]
 800895a:	b1d0      	cbz	r0, 8008992 <__d2b+0x7e>
 800895c:	f1c0 0320 	rsb	r3, r0, #32
 8008960:	fa02 f303 	lsl.w	r3, r2, r3
 8008964:	430b      	orrs	r3, r1
 8008966:	40c2      	lsrs	r2, r0
 8008968:	6163      	str	r3, [r4, #20]
 800896a:	9201      	str	r2, [sp, #4]
 800896c:	9b01      	ldr	r3, [sp, #4]
 800896e:	61a3      	str	r3, [r4, #24]
 8008970:	2b00      	cmp	r3, #0
 8008972:	bf0c      	ite	eq
 8008974:	2201      	moveq	r2, #1
 8008976:	2202      	movne	r2, #2
 8008978:	6122      	str	r2, [r4, #16]
 800897a:	b1a5      	cbz	r5, 80089a6 <__d2b+0x92>
 800897c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008980:	4405      	add	r5, r0
 8008982:	603d      	str	r5, [r7, #0]
 8008984:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008988:	6030      	str	r0, [r6, #0]
 800898a:	4620      	mov	r0, r4
 800898c:	b003      	add	sp, #12
 800898e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008992:	6161      	str	r1, [r4, #20]
 8008994:	e7ea      	b.n	800896c <__d2b+0x58>
 8008996:	a801      	add	r0, sp, #4
 8008998:	f7ff fd59 	bl	800844e <__lo0bits>
 800899c:	9b01      	ldr	r3, [sp, #4]
 800899e:	6163      	str	r3, [r4, #20]
 80089a0:	3020      	adds	r0, #32
 80089a2:	2201      	movs	r2, #1
 80089a4:	e7e8      	b.n	8008978 <__d2b+0x64>
 80089a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80089aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80089ae:	6038      	str	r0, [r7, #0]
 80089b0:	6918      	ldr	r0, [r3, #16]
 80089b2:	f7ff fd2d 	bl	8008410 <__hi0bits>
 80089b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80089ba:	e7e5      	b.n	8008988 <__d2b+0x74>
 80089bc:	0800939c 	.word	0x0800939c
 80089c0:	080093ad 	.word	0x080093ad

080089c4 <__sfputc_r>:
 80089c4:	6893      	ldr	r3, [r2, #8]
 80089c6:	3b01      	subs	r3, #1
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	b410      	push	{r4}
 80089cc:	6093      	str	r3, [r2, #8]
 80089ce:	da08      	bge.n	80089e2 <__sfputc_r+0x1e>
 80089d0:	6994      	ldr	r4, [r2, #24]
 80089d2:	42a3      	cmp	r3, r4
 80089d4:	db01      	blt.n	80089da <__sfputc_r+0x16>
 80089d6:	290a      	cmp	r1, #10
 80089d8:	d103      	bne.n	80089e2 <__sfputc_r+0x1e>
 80089da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089de:	f000 b9df 	b.w	8008da0 <__swbuf_r>
 80089e2:	6813      	ldr	r3, [r2, #0]
 80089e4:	1c58      	adds	r0, r3, #1
 80089e6:	6010      	str	r0, [r2, #0]
 80089e8:	7019      	strb	r1, [r3, #0]
 80089ea:	4608      	mov	r0, r1
 80089ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089f0:	4770      	bx	lr

080089f2 <__sfputs_r>:
 80089f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f4:	4606      	mov	r6, r0
 80089f6:	460f      	mov	r7, r1
 80089f8:	4614      	mov	r4, r2
 80089fa:	18d5      	adds	r5, r2, r3
 80089fc:	42ac      	cmp	r4, r5
 80089fe:	d101      	bne.n	8008a04 <__sfputs_r+0x12>
 8008a00:	2000      	movs	r0, #0
 8008a02:	e007      	b.n	8008a14 <__sfputs_r+0x22>
 8008a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a08:	463a      	mov	r2, r7
 8008a0a:	4630      	mov	r0, r6
 8008a0c:	f7ff ffda 	bl	80089c4 <__sfputc_r>
 8008a10:	1c43      	adds	r3, r0, #1
 8008a12:	d1f3      	bne.n	80089fc <__sfputs_r+0xa>
 8008a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a18 <_vfiprintf_r>:
 8008a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1c:	460d      	mov	r5, r1
 8008a1e:	b09d      	sub	sp, #116	@ 0x74
 8008a20:	4614      	mov	r4, r2
 8008a22:	4698      	mov	r8, r3
 8008a24:	4606      	mov	r6, r0
 8008a26:	b118      	cbz	r0, 8008a30 <_vfiprintf_r+0x18>
 8008a28:	6a03      	ldr	r3, [r0, #32]
 8008a2a:	b90b      	cbnz	r3, 8008a30 <_vfiprintf_r+0x18>
 8008a2c:	f7fe fd04 	bl	8007438 <__sinit>
 8008a30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a32:	07d9      	lsls	r1, r3, #31
 8008a34:	d405      	bmi.n	8008a42 <_vfiprintf_r+0x2a>
 8008a36:	89ab      	ldrh	r3, [r5, #12]
 8008a38:	059a      	lsls	r2, r3, #22
 8008a3a:	d402      	bmi.n	8008a42 <_vfiprintf_r+0x2a>
 8008a3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a3e:	f7fe fe14 	bl	800766a <__retarget_lock_acquire_recursive>
 8008a42:	89ab      	ldrh	r3, [r5, #12]
 8008a44:	071b      	lsls	r3, r3, #28
 8008a46:	d501      	bpl.n	8008a4c <_vfiprintf_r+0x34>
 8008a48:	692b      	ldr	r3, [r5, #16]
 8008a4a:	b99b      	cbnz	r3, 8008a74 <_vfiprintf_r+0x5c>
 8008a4c:	4629      	mov	r1, r5
 8008a4e:	4630      	mov	r0, r6
 8008a50:	f000 f9e4 	bl	8008e1c <__swsetup_r>
 8008a54:	b170      	cbz	r0, 8008a74 <_vfiprintf_r+0x5c>
 8008a56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a58:	07dc      	lsls	r4, r3, #31
 8008a5a:	d504      	bpl.n	8008a66 <_vfiprintf_r+0x4e>
 8008a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a60:	b01d      	add	sp, #116	@ 0x74
 8008a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a66:	89ab      	ldrh	r3, [r5, #12]
 8008a68:	0598      	lsls	r0, r3, #22
 8008a6a:	d4f7      	bmi.n	8008a5c <_vfiprintf_r+0x44>
 8008a6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a6e:	f7fe fdfd 	bl	800766c <__retarget_lock_release_recursive>
 8008a72:	e7f3      	b.n	8008a5c <_vfiprintf_r+0x44>
 8008a74:	2300      	movs	r3, #0
 8008a76:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a78:	2320      	movs	r3, #32
 8008a7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a82:	2330      	movs	r3, #48	@ 0x30
 8008a84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008c34 <_vfiprintf_r+0x21c>
 8008a88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a8c:	f04f 0901 	mov.w	r9, #1
 8008a90:	4623      	mov	r3, r4
 8008a92:	469a      	mov	sl, r3
 8008a94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a98:	b10a      	cbz	r2, 8008a9e <_vfiprintf_r+0x86>
 8008a9a:	2a25      	cmp	r2, #37	@ 0x25
 8008a9c:	d1f9      	bne.n	8008a92 <_vfiprintf_r+0x7a>
 8008a9e:	ebba 0b04 	subs.w	fp, sl, r4
 8008aa2:	d00b      	beq.n	8008abc <_vfiprintf_r+0xa4>
 8008aa4:	465b      	mov	r3, fp
 8008aa6:	4622      	mov	r2, r4
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	4630      	mov	r0, r6
 8008aac:	f7ff ffa1 	bl	80089f2 <__sfputs_r>
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	f000 80a7 	beq.w	8008c04 <_vfiprintf_r+0x1ec>
 8008ab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ab8:	445a      	add	r2, fp
 8008aba:	9209      	str	r2, [sp, #36]	@ 0x24
 8008abc:	f89a 3000 	ldrb.w	r3, [sl]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f000 809f 	beq.w	8008c04 <_vfiprintf_r+0x1ec>
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8008acc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ad0:	f10a 0a01 	add.w	sl, sl, #1
 8008ad4:	9304      	str	r3, [sp, #16]
 8008ad6:	9307      	str	r3, [sp, #28]
 8008ad8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008adc:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ade:	4654      	mov	r4, sl
 8008ae0:	2205      	movs	r2, #5
 8008ae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ae6:	4853      	ldr	r0, [pc, #332]	@ (8008c34 <_vfiprintf_r+0x21c>)
 8008ae8:	f7f7 fc12 	bl	8000310 <memchr>
 8008aec:	9a04      	ldr	r2, [sp, #16]
 8008aee:	b9d8      	cbnz	r0, 8008b28 <_vfiprintf_r+0x110>
 8008af0:	06d1      	lsls	r1, r2, #27
 8008af2:	bf44      	itt	mi
 8008af4:	2320      	movmi	r3, #32
 8008af6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008afa:	0713      	lsls	r3, r2, #28
 8008afc:	bf44      	itt	mi
 8008afe:	232b      	movmi	r3, #43	@ 0x2b
 8008b00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b04:	f89a 3000 	ldrb.w	r3, [sl]
 8008b08:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b0a:	d015      	beq.n	8008b38 <_vfiprintf_r+0x120>
 8008b0c:	9a07      	ldr	r2, [sp, #28]
 8008b0e:	4654      	mov	r4, sl
 8008b10:	2000      	movs	r0, #0
 8008b12:	f04f 0c0a 	mov.w	ip, #10
 8008b16:	4621      	mov	r1, r4
 8008b18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b1c:	3b30      	subs	r3, #48	@ 0x30
 8008b1e:	2b09      	cmp	r3, #9
 8008b20:	d94b      	bls.n	8008bba <_vfiprintf_r+0x1a2>
 8008b22:	b1b0      	cbz	r0, 8008b52 <_vfiprintf_r+0x13a>
 8008b24:	9207      	str	r2, [sp, #28]
 8008b26:	e014      	b.n	8008b52 <_vfiprintf_r+0x13a>
 8008b28:	eba0 0308 	sub.w	r3, r0, r8
 8008b2c:	fa09 f303 	lsl.w	r3, r9, r3
 8008b30:	4313      	orrs	r3, r2
 8008b32:	9304      	str	r3, [sp, #16]
 8008b34:	46a2      	mov	sl, r4
 8008b36:	e7d2      	b.n	8008ade <_vfiprintf_r+0xc6>
 8008b38:	9b03      	ldr	r3, [sp, #12]
 8008b3a:	1d19      	adds	r1, r3, #4
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	9103      	str	r1, [sp, #12]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	bfbb      	ittet	lt
 8008b44:	425b      	neglt	r3, r3
 8008b46:	f042 0202 	orrlt.w	r2, r2, #2
 8008b4a:	9307      	strge	r3, [sp, #28]
 8008b4c:	9307      	strlt	r3, [sp, #28]
 8008b4e:	bfb8      	it	lt
 8008b50:	9204      	strlt	r2, [sp, #16]
 8008b52:	7823      	ldrb	r3, [r4, #0]
 8008b54:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b56:	d10a      	bne.n	8008b6e <_vfiprintf_r+0x156>
 8008b58:	7863      	ldrb	r3, [r4, #1]
 8008b5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b5c:	d132      	bne.n	8008bc4 <_vfiprintf_r+0x1ac>
 8008b5e:	9b03      	ldr	r3, [sp, #12]
 8008b60:	1d1a      	adds	r2, r3, #4
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	9203      	str	r2, [sp, #12]
 8008b66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b6a:	3402      	adds	r4, #2
 8008b6c:	9305      	str	r3, [sp, #20]
 8008b6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c44 <_vfiprintf_r+0x22c>
 8008b72:	7821      	ldrb	r1, [r4, #0]
 8008b74:	2203      	movs	r2, #3
 8008b76:	4650      	mov	r0, sl
 8008b78:	f7f7 fbca 	bl	8000310 <memchr>
 8008b7c:	b138      	cbz	r0, 8008b8e <_vfiprintf_r+0x176>
 8008b7e:	9b04      	ldr	r3, [sp, #16]
 8008b80:	eba0 000a 	sub.w	r0, r0, sl
 8008b84:	2240      	movs	r2, #64	@ 0x40
 8008b86:	4082      	lsls	r2, r0
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	3401      	adds	r4, #1
 8008b8c:	9304      	str	r3, [sp, #16]
 8008b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b92:	4829      	ldr	r0, [pc, #164]	@ (8008c38 <_vfiprintf_r+0x220>)
 8008b94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b98:	2206      	movs	r2, #6
 8008b9a:	f7f7 fbb9 	bl	8000310 <memchr>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	d03f      	beq.n	8008c22 <_vfiprintf_r+0x20a>
 8008ba2:	4b26      	ldr	r3, [pc, #152]	@ (8008c3c <_vfiprintf_r+0x224>)
 8008ba4:	bb1b      	cbnz	r3, 8008bee <_vfiprintf_r+0x1d6>
 8008ba6:	9b03      	ldr	r3, [sp, #12]
 8008ba8:	3307      	adds	r3, #7
 8008baa:	f023 0307 	bic.w	r3, r3, #7
 8008bae:	3308      	adds	r3, #8
 8008bb0:	9303      	str	r3, [sp, #12]
 8008bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bb4:	443b      	add	r3, r7
 8008bb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bb8:	e76a      	b.n	8008a90 <_vfiprintf_r+0x78>
 8008bba:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bbe:	460c      	mov	r4, r1
 8008bc0:	2001      	movs	r0, #1
 8008bc2:	e7a8      	b.n	8008b16 <_vfiprintf_r+0xfe>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	3401      	adds	r4, #1
 8008bc8:	9305      	str	r3, [sp, #20]
 8008bca:	4619      	mov	r1, r3
 8008bcc:	f04f 0c0a 	mov.w	ip, #10
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bd6:	3a30      	subs	r2, #48	@ 0x30
 8008bd8:	2a09      	cmp	r2, #9
 8008bda:	d903      	bls.n	8008be4 <_vfiprintf_r+0x1cc>
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d0c6      	beq.n	8008b6e <_vfiprintf_r+0x156>
 8008be0:	9105      	str	r1, [sp, #20]
 8008be2:	e7c4      	b.n	8008b6e <_vfiprintf_r+0x156>
 8008be4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008be8:	4604      	mov	r4, r0
 8008bea:	2301      	movs	r3, #1
 8008bec:	e7f0      	b.n	8008bd0 <_vfiprintf_r+0x1b8>
 8008bee:	ab03      	add	r3, sp, #12
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	462a      	mov	r2, r5
 8008bf4:	4b12      	ldr	r3, [pc, #72]	@ (8008c40 <_vfiprintf_r+0x228>)
 8008bf6:	a904      	add	r1, sp, #16
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	f7fd ffe9 	bl	8006bd0 <_printf_float>
 8008bfe:	4607      	mov	r7, r0
 8008c00:	1c78      	adds	r0, r7, #1
 8008c02:	d1d6      	bne.n	8008bb2 <_vfiprintf_r+0x19a>
 8008c04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c06:	07d9      	lsls	r1, r3, #31
 8008c08:	d405      	bmi.n	8008c16 <_vfiprintf_r+0x1fe>
 8008c0a:	89ab      	ldrh	r3, [r5, #12]
 8008c0c:	059a      	lsls	r2, r3, #22
 8008c0e:	d402      	bmi.n	8008c16 <_vfiprintf_r+0x1fe>
 8008c10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c12:	f7fe fd2b 	bl	800766c <__retarget_lock_release_recursive>
 8008c16:	89ab      	ldrh	r3, [r5, #12]
 8008c18:	065b      	lsls	r3, r3, #25
 8008c1a:	f53f af1f 	bmi.w	8008a5c <_vfiprintf_r+0x44>
 8008c1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c20:	e71e      	b.n	8008a60 <_vfiprintf_r+0x48>
 8008c22:	ab03      	add	r3, sp, #12
 8008c24:	9300      	str	r3, [sp, #0]
 8008c26:	462a      	mov	r2, r5
 8008c28:	4b05      	ldr	r3, [pc, #20]	@ (8008c40 <_vfiprintf_r+0x228>)
 8008c2a:	a904      	add	r1, sp, #16
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	f7fe fa57 	bl	80070e0 <_printf_i>
 8008c32:	e7e4      	b.n	8008bfe <_vfiprintf_r+0x1e6>
 8008c34:	08009508 	.word	0x08009508
 8008c38:	08009512 	.word	0x08009512
 8008c3c:	08006bd1 	.word	0x08006bd1
 8008c40:	080089f3 	.word	0x080089f3
 8008c44:	0800950e 	.word	0x0800950e

08008c48 <__sflush_r>:
 8008c48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c50:	0716      	lsls	r6, r2, #28
 8008c52:	4605      	mov	r5, r0
 8008c54:	460c      	mov	r4, r1
 8008c56:	d454      	bmi.n	8008d02 <__sflush_r+0xba>
 8008c58:	684b      	ldr	r3, [r1, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	dc02      	bgt.n	8008c64 <__sflush_r+0x1c>
 8008c5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	dd48      	ble.n	8008cf6 <__sflush_r+0xae>
 8008c64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c66:	2e00      	cmp	r6, #0
 8008c68:	d045      	beq.n	8008cf6 <__sflush_r+0xae>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c70:	682f      	ldr	r7, [r5, #0]
 8008c72:	6a21      	ldr	r1, [r4, #32]
 8008c74:	602b      	str	r3, [r5, #0]
 8008c76:	d030      	beq.n	8008cda <__sflush_r+0x92>
 8008c78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c7a:	89a3      	ldrh	r3, [r4, #12]
 8008c7c:	0759      	lsls	r1, r3, #29
 8008c7e:	d505      	bpl.n	8008c8c <__sflush_r+0x44>
 8008c80:	6863      	ldr	r3, [r4, #4]
 8008c82:	1ad2      	subs	r2, r2, r3
 8008c84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c86:	b10b      	cbz	r3, 8008c8c <__sflush_r+0x44>
 8008c88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c8a:	1ad2      	subs	r2, r2, r3
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c90:	6a21      	ldr	r1, [r4, #32]
 8008c92:	4628      	mov	r0, r5
 8008c94:	47b0      	blx	r6
 8008c96:	1c43      	adds	r3, r0, #1
 8008c98:	89a3      	ldrh	r3, [r4, #12]
 8008c9a:	d106      	bne.n	8008caa <__sflush_r+0x62>
 8008c9c:	6829      	ldr	r1, [r5, #0]
 8008c9e:	291d      	cmp	r1, #29
 8008ca0:	d82b      	bhi.n	8008cfa <__sflush_r+0xb2>
 8008ca2:	4a2a      	ldr	r2, [pc, #168]	@ (8008d4c <__sflush_r+0x104>)
 8008ca4:	410a      	asrs	r2, r1
 8008ca6:	07d6      	lsls	r6, r2, #31
 8008ca8:	d427      	bmi.n	8008cfa <__sflush_r+0xb2>
 8008caa:	2200      	movs	r2, #0
 8008cac:	6062      	str	r2, [r4, #4]
 8008cae:	04d9      	lsls	r1, r3, #19
 8008cb0:	6922      	ldr	r2, [r4, #16]
 8008cb2:	6022      	str	r2, [r4, #0]
 8008cb4:	d504      	bpl.n	8008cc0 <__sflush_r+0x78>
 8008cb6:	1c42      	adds	r2, r0, #1
 8008cb8:	d101      	bne.n	8008cbe <__sflush_r+0x76>
 8008cba:	682b      	ldr	r3, [r5, #0]
 8008cbc:	b903      	cbnz	r3, 8008cc0 <__sflush_r+0x78>
 8008cbe:	6560      	str	r0, [r4, #84]	@ 0x54
 8008cc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cc2:	602f      	str	r7, [r5, #0]
 8008cc4:	b1b9      	cbz	r1, 8008cf6 <__sflush_r+0xae>
 8008cc6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cca:	4299      	cmp	r1, r3
 8008ccc:	d002      	beq.n	8008cd4 <__sflush_r+0x8c>
 8008cce:	4628      	mov	r0, r5
 8008cd0:	f7ff faac 	bl	800822c <_free_r>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cd8:	e00d      	b.n	8008cf6 <__sflush_r+0xae>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	4628      	mov	r0, r5
 8008cde:	47b0      	blx	r6
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	1c50      	adds	r0, r2, #1
 8008ce4:	d1c9      	bne.n	8008c7a <__sflush_r+0x32>
 8008ce6:	682b      	ldr	r3, [r5, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d0c6      	beq.n	8008c7a <__sflush_r+0x32>
 8008cec:	2b1d      	cmp	r3, #29
 8008cee:	d001      	beq.n	8008cf4 <__sflush_r+0xac>
 8008cf0:	2b16      	cmp	r3, #22
 8008cf2:	d11e      	bne.n	8008d32 <__sflush_r+0xea>
 8008cf4:	602f      	str	r7, [r5, #0]
 8008cf6:	2000      	movs	r0, #0
 8008cf8:	e022      	b.n	8008d40 <__sflush_r+0xf8>
 8008cfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cfe:	b21b      	sxth	r3, r3
 8008d00:	e01b      	b.n	8008d3a <__sflush_r+0xf2>
 8008d02:	690f      	ldr	r7, [r1, #16]
 8008d04:	2f00      	cmp	r7, #0
 8008d06:	d0f6      	beq.n	8008cf6 <__sflush_r+0xae>
 8008d08:	0793      	lsls	r3, r2, #30
 8008d0a:	680e      	ldr	r6, [r1, #0]
 8008d0c:	bf08      	it	eq
 8008d0e:	694b      	ldreq	r3, [r1, #20]
 8008d10:	600f      	str	r7, [r1, #0]
 8008d12:	bf18      	it	ne
 8008d14:	2300      	movne	r3, #0
 8008d16:	eba6 0807 	sub.w	r8, r6, r7
 8008d1a:	608b      	str	r3, [r1, #8]
 8008d1c:	f1b8 0f00 	cmp.w	r8, #0
 8008d20:	dde9      	ble.n	8008cf6 <__sflush_r+0xae>
 8008d22:	6a21      	ldr	r1, [r4, #32]
 8008d24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008d26:	4643      	mov	r3, r8
 8008d28:	463a      	mov	r2, r7
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	47b0      	blx	r6
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	dc08      	bgt.n	8008d44 <__sflush_r+0xfc>
 8008d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d3a:	81a3      	strh	r3, [r4, #12]
 8008d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d44:	4407      	add	r7, r0
 8008d46:	eba8 0800 	sub.w	r8, r8, r0
 8008d4a:	e7e7      	b.n	8008d1c <__sflush_r+0xd4>
 8008d4c:	dfbffffe 	.word	0xdfbffffe

08008d50 <_fflush_r>:
 8008d50:	b538      	push	{r3, r4, r5, lr}
 8008d52:	690b      	ldr	r3, [r1, #16]
 8008d54:	4605      	mov	r5, r0
 8008d56:	460c      	mov	r4, r1
 8008d58:	b913      	cbnz	r3, 8008d60 <_fflush_r+0x10>
 8008d5a:	2500      	movs	r5, #0
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	bd38      	pop	{r3, r4, r5, pc}
 8008d60:	b118      	cbz	r0, 8008d6a <_fflush_r+0x1a>
 8008d62:	6a03      	ldr	r3, [r0, #32]
 8008d64:	b90b      	cbnz	r3, 8008d6a <_fflush_r+0x1a>
 8008d66:	f7fe fb67 	bl	8007438 <__sinit>
 8008d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d0f3      	beq.n	8008d5a <_fflush_r+0xa>
 8008d72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d74:	07d0      	lsls	r0, r2, #31
 8008d76:	d404      	bmi.n	8008d82 <_fflush_r+0x32>
 8008d78:	0599      	lsls	r1, r3, #22
 8008d7a:	d402      	bmi.n	8008d82 <_fflush_r+0x32>
 8008d7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d7e:	f7fe fc74 	bl	800766a <__retarget_lock_acquire_recursive>
 8008d82:	4628      	mov	r0, r5
 8008d84:	4621      	mov	r1, r4
 8008d86:	f7ff ff5f 	bl	8008c48 <__sflush_r>
 8008d8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d8c:	07da      	lsls	r2, r3, #31
 8008d8e:	4605      	mov	r5, r0
 8008d90:	d4e4      	bmi.n	8008d5c <_fflush_r+0xc>
 8008d92:	89a3      	ldrh	r3, [r4, #12]
 8008d94:	059b      	lsls	r3, r3, #22
 8008d96:	d4e1      	bmi.n	8008d5c <_fflush_r+0xc>
 8008d98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d9a:	f7fe fc67 	bl	800766c <__retarget_lock_release_recursive>
 8008d9e:	e7dd      	b.n	8008d5c <_fflush_r+0xc>

08008da0 <__swbuf_r>:
 8008da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da2:	460e      	mov	r6, r1
 8008da4:	4614      	mov	r4, r2
 8008da6:	4605      	mov	r5, r0
 8008da8:	b118      	cbz	r0, 8008db2 <__swbuf_r+0x12>
 8008daa:	6a03      	ldr	r3, [r0, #32]
 8008dac:	b90b      	cbnz	r3, 8008db2 <__swbuf_r+0x12>
 8008dae:	f7fe fb43 	bl	8007438 <__sinit>
 8008db2:	69a3      	ldr	r3, [r4, #24]
 8008db4:	60a3      	str	r3, [r4, #8]
 8008db6:	89a3      	ldrh	r3, [r4, #12]
 8008db8:	071a      	lsls	r2, r3, #28
 8008dba:	d501      	bpl.n	8008dc0 <__swbuf_r+0x20>
 8008dbc:	6923      	ldr	r3, [r4, #16]
 8008dbe:	b943      	cbnz	r3, 8008dd2 <__swbuf_r+0x32>
 8008dc0:	4621      	mov	r1, r4
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	f000 f82a 	bl	8008e1c <__swsetup_r>
 8008dc8:	b118      	cbz	r0, 8008dd2 <__swbuf_r+0x32>
 8008dca:	f04f 37ff 	mov.w	r7, #4294967295
 8008dce:	4638      	mov	r0, r7
 8008dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dd2:	6823      	ldr	r3, [r4, #0]
 8008dd4:	6922      	ldr	r2, [r4, #16]
 8008dd6:	1a98      	subs	r0, r3, r2
 8008dd8:	6963      	ldr	r3, [r4, #20]
 8008dda:	b2f6      	uxtb	r6, r6
 8008ddc:	4283      	cmp	r3, r0
 8008dde:	4637      	mov	r7, r6
 8008de0:	dc05      	bgt.n	8008dee <__swbuf_r+0x4e>
 8008de2:	4621      	mov	r1, r4
 8008de4:	4628      	mov	r0, r5
 8008de6:	f7ff ffb3 	bl	8008d50 <_fflush_r>
 8008dea:	2800      	cmp	r0, #0
 8008dec:	d1ed      	bne.n	8008dca <__swbuf_r+0x2a>
 8008dee:	68a3      	ldr	r3, [r4, #8]
 8008df0:	3b01      	subs	r3, #1
 8008df2:	60a3      	str	r3, [r4, #8]
 8008df4:	6823      	ldr	r3, [r4, #0]
 8008df6:	1c5a      	adds	r2, r3, #1
 8008df8:	6022      	str	r2, [r4, #0]
 8008dfa:	701e      	strb	r6, [r3, #0]
 8008dfc:	6962      	ldr	r2, [r4, #20]
 8008dfe:	1c43      	adds	r3, r0, #1
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d004      	beq.n	8008e0e <__swbuf_r+0x6e>
 8008e04:	89a3      	ldrh	r3, [r4, #12]
 8008e06:	07db      	lsls	r3, r3, #31
 8008e08:	d5e1      	bpl.n	8008dce <__swbuf_r+0x2e>
 8008e0a:	2e0a      	cmp	r6, #10
 8008e0c:	d1df      	bne.n	8008dce <__swbuf_r+0x2e>
 8008e0e:	4621      	mov	r1, r4
 8008e10:	4628      	mov	r0, r5
 8008e12:	f7ff ff9d 	bl	8008d50 <_fflush_r>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d0d9      	beq.n	8008dce <__swbuf_r+0x2e>
 8008e1a:	e7d6      	b.n	8008dca <__swbuf_r+0x2a>

08008e1c <__swsetup_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	4b29      	ldr	r3, [pc, #164]	@ (8008ec4 <__swsetup_r+0xa8>)
 8008e20:	4605      	mov	r5, r0
 8008e22:	6818      	ldr	r0, [r3, #0]
 8008e24:	460c      	mov	r4, r1
 8008e26:	b118      	cbz	r0, 8008e30 <__swsetup_r+0x14>
 8008e28:	6a03      	ldr	r3, [r0, #32]
 8008e2a:	b90b      	cbnz	r3, 8008e30 <__swsetup_r+0x14>
 8008e2c:	f7fe fb04 	bl	8007438 <__sinit>
 8008e30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e34:	0719      	lsls	r1, r3, #28
 8008e36:	d422      	bmi.n	8008e7e <__swsetup_r+0x62>
 8008e38:	06da      	lsls	r2, r3, #27
 8008e3a:	d407      	bmi.n	8008e4c <__swsetup_r+0x30>
 8008e3c:	2209      	movs	r2, #9
 8008e3e:	602a      	str	r2, [r5, #0]
 8008e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e44:	81a3      	strh	r3, [r4, #12]
 8008e46:	f04f 30ff 	mov.w	r0, #4294967295
 8008e4a:	e033      	b.n	8008eb4 <__swsetup_r+0x98>
 8008e4c:	0758      	lsls	r0, r3, #29
 8008e4e:	d512      	bpl.n	8008e76 <__swsetup_r+0x5a>
 8008e50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e52:	b141      	cbz	r1, 8008e66 <__swsetup_r+0x4a>
 8008e54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e58:	4299      	cmp	r1, r3
 8008e5a:	d002      	beq.n	8008e62 <__swsetup_r+0x46>
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	f7ff f9e5 	bl	800822c <_free_r>
 8008e62:	2300      	movs	r3, #0
 8008e64:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e66:	89a3      	ldrh	r3, [r4, #12]
 8008e68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e6c:	81a3      	strh	r3, [r4, #12]
 8008e6e:	2300      	movs	r3, #0
 8008e70:	6063      	str	r3, [r4, #4]
 8008e72:	6923      	ldr	r3, [r4, #16]
 8008e74:	6023      	str	r3, [r4, #0]
 8008e76:	89a3      	ldrh	r3, [r4, #12]
 8008e78:	f043 0308 	orr.w	r3, r3, #8
 8008e7c:	81a3      	strh	r3, [r4, #12]
 8008e7e:	6923      	ldr	r3, [r4, #16]
 8008e80:	b94b      	cbnz	r3, 8008e96 <__swsetup_r+0x7a>
 8008e82:	89a3      	ldrh	r3, [r4, #12]
 8008e84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e8c:	d003      	beq.n	8008e96 <__swsetup_r+0x7a>
 8008e8e:	4621      	mov	r1, r4
 8008e90:	4628      	mov	r0, r5
 8008e92:	f000 f8b1 	bl	8008ff8 <__smakebuf_r>
 8008e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e9a:	f013 0201 	ands.w	r2, r3, #1
 8008e9e:	d00a      	beq.n	8008eb6 <__swsetup_r+0x9a>
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	60a2      	str	r2, [r4, #8]
 8008ea4:	6962      	ldr	r2, [r4, #20]
 8008ea6:	4252      	negs	r2, r2
 8008ea8:	61a2      	str	r2, [r4, #24]
 8008eaa:	6922      	ldr	r2, [r4, #16]
 8008eac:	b942      	cbnz	r2, 8008ec0 <__swsetup_r+0xa4>
 8008eae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008eb2:	d1c5      	bne.n	8008e40 <__swsetup_r+0x24>
 8008eb4:	bd38      	pop	{r3, r4, r5, pc}
 8008eb6:	0799      	lsls	r1, r3, #30
 8008eb8:	bf58      	it	pl
 8008eba:	6962      	ldrpl	r2, [r4, #20]
 8008ebc:	60a2      	str	r2, [r4, #8]
 8008ebe:	e7f4      	b.n	8008eaa <__swsetup_r+0x8e>
 8008ec0:	2000      	movs	r0, #0
 8008ec2:	e7f7      	b.n	8008eb4 <__swsetup_r+0x98>
 8008ec4:	24000020 	.word	0x24000020

08008ec8 <memcpy>:
 8008ec8:	440a      	add	r2, r1
 8008eca:	4291      	cmp	r1, r2
 8008ecc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ed0:	d100      	bne.n	8008ed4 <memcpy+0xc>
 8008ed2:	4770      	bx	lr
 8008ed4:	b510      	push	{r4, lr}
 8008ed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ede:	4291      	cmp	r1, r2
 8008ee0:	d1f9      	bne.n	8008ed6 <memcpy+0xe>
 8008ee2:	bd10      	pop	{r4, pc}

08008ee4 <__assert_func>:
 8008ee4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ee6:	4614      	mov	r4, r2
 8008ee8:	461a      	mov	r2, r3
 8008eea:	4b09      	ldr	r3, [pc, #36]	@ (8008f10 <__assert_func+0x2c>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4605      	mov	r5, r0
 8008ef0:	68d8      	ldr	r0, [r3, #12]
 8008ef2:	b954      	cbnz	r4, 8008f0a <__assert_func+0x26>
 8008ef4:	4b07      	ldr	r3, [pc, #28]	@ (8008f14 <__assert_func+0x30>)
 8008ef6:	461c      	mov	r4, r3
 8008ef8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008efc:	9100      	str	r1, [sp, #0]
 8008efe:	462b      	mov	r3, r5
 8008f00:	4905      	ldr	r1, [pc, #20]	@ (8008f18 <__assert_func+0x34>)
 8008f02:	f000 f841 	bl	8008f88 <fiprintf>
 8008f06:	f000 f8d5 	bl	80090b4 <abort>
 8008f0a:	4b04      	ldr	r3, [pc, #16]	@ (8008f1c <__assert_func+0x38>)
 8008f0c:	e7f4      	b.n	8008ef8 <__assert_func+0x14>
 8008f0e:	bf00      	nop
 8008f10:	24000020 	.word	0x24000020
 8008f14:	0800955e 	.word	0x0800955e
 8008f18:	08009530 	.word	0x08009530
 8008f1c:	08009523 	.word	0x08009523

08008f20 <_calloc_r>:
 8008f20:	b570      	push	{r4, r5, r6, lr}
 8008f22:	fba1 5402 	umull	r5, r4, r1, r2
 8008f26:	b93c      	cbnz	r4, 8008f38 <_calloc_r+0x18>
 8008f28:	4629      	mov	r1, r5
 8008f2a:	f7fd fd37 	bl	800699c <_malloc_r>
 8008f2e:	4606      	mov	r6, r0
 8008f30:	b928      	cbnz	r0, 8008f3e <_calloc_r+0x1e>
 8008f32:	2600      	movs	r6, #0
 8008f34:	4630      	mov	r0, r6
 8008f36:	bd70      	pop	{r4, r5, r6, pc}
 8008f38:	220c      	movs	r2, #12
 8008f3a:	6002      	str	r2, [r0, #0]
 8008f3c:	e7f9      	b.n	8008f32 <_calloc_r+0x12>
 8008f3e:	462a      	mov	r2, r5
 8008f40:	4621      	mov	r1, r4
 8008f42:	f7fe fb04 	bl	800754e <memset>
 8008f46:	e7f5      	b.n	8008f34 <_calloc_r+0x14>

08008f48 <__ascii_mbtowc>:
 8008f48:	b082      	sub	sp, #8
 8008f4a:	b901      	cbnz	r1, 8008f4e <__ascii_mbtowc+0x6>
 8008f4c:	a901      	add	r1, sp, #4
 8008f4e:	b142      	cbz	r2, 8008f62 <__ascii_mbtowc+0x1a>
 8008f50:	b14b      	cbz	r3, 8008f66 <__ascii_mbtowc+0x1e>
 8008f52:	7813      	ldrb	r3, [r2, #0]
 8008f54:	600b      	str	r3, [r1, #0]
 8008f56:	7812      	ldrb	r2, [r2, #0]
 8008f58:	1e10      	subs	r0, r2, #0
 8008f5a:	bf18      	it	ne
 8008f5c:	2001      	movne	r0, #1
 8008f5e:	b002      	add	sp, #8
 8008f60:	4770      	bx	lr
 8008f62:	4610      	mov	r0, r2
 8008f64:	e7fb      	b.n	8008f5e <__ascii_mbtowc+0x16>
 8008f66:	f06f 0001 	mvn.w	r0, #1
 8008f6a:	e7f8      	b.n	8008f5e <__ascii_mbtowc+0x16>

08008f6c <__ascii_wctomb>:
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	4608      	mov	r0, r1
 8008f70:	b141      	cbz	r1, 8008f84 <__ascii_wctomb+0x18>
 8008f72:	2aff      	cmp	r2, #255	@ 0xff
 8008f74:	d904      	bls.n	8008f80 <__ascii_wctomb+0x14>
 8008f76:	228a      	movs	r2, #138	@ 0x8a
 8008f78:	601a      	str	r2, [r3, #0]
 8008f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f7e:	4770      	bx	lr
 8008f80:	700a      	strb	r2, [r1, #0]
 8008f82:	2001      	movs	r0, #1
 8008f84:	4770      	bx	lr
	...

08008f88 <fiprintf>:
 8008f88:	b40e      	push	{r1, r2, r3}
 8008f8a:	b503      	push	{r0, r1, lr}
 8008f8c:	4601      	mov	r1, r0
 8008f8e:	ab03      	add	r3, sp, #12
 8008f90:	4805      	ldr	r0, [pc, #20]	@ (8008fa8 <fiprintf+0x20>)
 8008f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f96:	6800      	ldr	r0, [r0, #0]
 8008f98:	9301      	str	r3, [sp, #4]
 8008f9a:	f7ff fd3d 	bl	8008a18 <_vfiprintf_r>
 8008f9e:	b002      	add	sp, #8
 8008fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fa4:	b003      	add	sp, #12
 8008fa6:	4770      	bx	lr
 8008fa8:	24000020 	.word	0x24000020

08008fac <__swhatbuf_r>:
 8008fac:	b570      	push	{r4, r5, r6, lr}
 8008fae:	460c      	mov	r4, r1
 8008fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fb4:	2900      	cmp	r1, #0
 8008fb6:	b096      	sub	sp, #88	@ 0x58
 8008fb8:	4615      	mov	r5, r2
 8008fba:	461e      	mov	r6, r3
 8008fbc:	da0d      	bge.n	8008fda <__swhatbuf_r+0x2e>
 8008fbe:	89a3      	ldrh	r3, [r4, #12]
 8008fc0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008fc4:	f04f 0100 	mov.w	r1, #0
 8008fc8:	bf14      	ite	ne
 8008fca:	2340      	movne	r3, #64	@ 0x40
 8008fcc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	6031      	str	r1, [r6, #0]
 8008fd4:	602b      	str	r3, [r5, #0]
 8008fd6:	b016      	add	sp, #88	@ 0x58
 8008fd8:	bd70      	pop	{r4, r5, r6, pc}
 8008fda:	466a      	mov	r2, sp
 8008fdc:	f000 f848 	bl	8009070 <_fstat_r>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	dbec      	blt.n	8008fbe <__swhatbuf_r+0x12>
 8008fe4:	9901      	ldr	r1, [sp, #4]
 8008fe6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008fea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008fee:	4259      	negs	r1, r3
 8008ff0:	4159      	adcs	r1, r3
 8008ff2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ff6:	e7eb      	b.n	8008fd0 <__swhatbuf_r+0x24>

08008ff8 <__smakebuf_r>:
 8008ff8:	898b      	ldrh	r3, [r1, #12]
 8008ffa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ffc:	079d      	lsls	r5, r3, #30
 8008ffe:	4606      	mov	r6, r0
 8009000:	460c      	mov	r4, r1
 8009002:	d507      	bpl.n	8009014 <__smakebuf_r+0x1c>
 8009004:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009008:	6023      	str	r3, [r4, #0]
 800900a:	6123      	str	r3, [r4, #16]
 800900c:	2301      	movs	r3, #1
 800900e:	6163      	str	r3, [r4, #20]
 8009010:	b003      	add	sp, #12
 8009012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009014:	ab01      	add	r3, sp, #4
 8009016:	466a      	mov	r2, sp
 8009018:	f7ff ffc8 	bl	8008fac <__swhatbuf_r>
 800901c:	9f00      	ldr	r7, [sp, #0]
 800901e:	4605      	mov	r5, r0
 8009020:	4639      	mov	r1, r7
 8009022:	4630      	mov	r0, r6
 8009024:	f7fd fcba 	bl	800699c <_malloc_r>
 8009028:	b948      	cbnz	r0, 800903e <__smakebuf_r+0x46>
 800902a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800902e:	059a      	lsls	r2, r3, #22
 8009030:	d4ee      	bmi.n	8009010 <__smakebuf_r+0x18>
 8009032:	f023 0303 	bic.w	r3, r3, #3
 8009036:	f043 0302 	orr.w	r3, r3, #2
 800903a:	81a3      	strh	r3, [r4, #12]
 800903c:	e7e2      	b.n	8009004 <__smakebuf_r+0xc>
 800903e:	89a3      	ldrh	r3, [r4, #12]
 8009040:	6020      	str	r0, [r4, #0]
 8009042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009046:	81a3      	strh	r3, [r4, #12]
 8009048:	9b01      	ldr	r3, [sp, #4]
 800904a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800904e:	b15b      	cbz	r3, 8009068 <__smakebuf_r+0x70>
 8009050:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009054:	4630      	mov	r0, r6
 8009056:	f000 f81d 	bl	8009094 <_isatty_r>
 800905a:	b128      	cbz	r0, 8009068 <__smakebuf_r+0x70>
 800905c:	89a3      	ldrh	r3, [r4, #12]
 800905e:	f023 0303 	bic.w	r3, r3, #3
 8009062:	f043 0301 	orr.w	r3, r3, #1
 8009066:	81a3      	strh	r3, [r4, #12]
 8009068:	89a3      	ldrh	r3, [r4, #12]
 800906a:	431d      	orrs	r5, r3
 800906c:	81a5      	strh	r5, [r4, #12]
 800906e:	e7cf      	b.n	8009010 <__smakebuf_r+0x18>

08009070 <_fstat_r>:
 8009070:	b538      	push	{r3, r4, r5, lr}
 8009072:	4d07      	ldr	r5, [pc, #28]	@ (8009090 <_fstat_r+0x20>)
 8009074:	2300      	movs	r3, #0
 8009076:	4604      	mov	r4, r0
 8009078:	4608      	mov	r0, r1
 800907a:	4611      	mov	r1, r2
 800907c:	602b      	str	r3, [r5, #0]
 800907e:	f7f7 fee1 	bl	8000e44 <_fstat>
 8009082:	1c43      	adds	r3, r0, #1
 8009084:	d102      	bne.n	800908c <_fstat_r+0x1c>
 8009086:	682b      	ldr	r3, [r5, #0]
 8009088:	b103      	cbz	r3, 800908c <_fstat_r+0x1c>
 800908a:	6023      	str	r3, [r4, #0]
 800908c:	bd38      	pop	{r3, r4, r5, pc}
 800908e:	bf00      	nop
 8009090:	24000460 	.word	0x24000460

08009094 <_isatty_r>:
 8009094:	b538      	push	{r3, r4, r5, lr}
 8009096:	4d06      	ldr	r5, [pc, #24]	@ (80090b0 <_isatty_r+0x1c>)
 8009098:	2300      	movs	r3, #0
 800909a:	4604      	mov	r4, r0
 800909c:	4608      	mov	r0, r1
 800909e:	602b      	str	r3, [r5, #0]
 80090a0:	f7f7 fee0 	bl	8000e64 <_isatty>
 80090a4:	1c43      	adds	r3, r0, #1
 80090a6:	d102      	bne.n	80090ae <_isatty_r+0x1a>
 80090a8:	682b      	ldr	r3, [r5, #0]
 80090aa:	b103      	cbz	r3, 80090ae <_isatty_r+0x1a>
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	bd38      	pop	{r3, r4, r5, pc}
 80090b0:	24000460 	.word	0x24000460

080090b4 <abort>:
 80090b4:	b508      	push	{r3, lr}
 80090b6:	2006      	movs	r0, #6
 80090b8:	f000 f82c 	bl	8009114 <raise>
 80090bc:	2001      	movs	r0, #1
 80090be:	f7f7 fe8d 	bl	8000ddc <_exit>

080090c2 <_raise_r>:
 80090c2:	291f      	cmp	r1, #31
 80090c4:	b538      	push	{r3, r4, r5, lr}
 80090c6:	4605      	mov	r5, r0
 80090c8:	460c      	mov	r4, r1
 80090ca:	d904      	bls.n	80090d6 <_raise_r+0x14>
 80090cc:	2316      	movs	r3, #22
 80090ce:	6003      	str	r3, [r0, #0]
 80090d0:	f04f 30ff 	mov.w	r0, #4294967295
 80090d4:	bd38      	pop	{r3, r4, r5, pc}
 80090d6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80090d8:	b112      	cbz	r2, 80090e0 <_raise_r+0x1e>
 80090da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090de:	b94b      	cbnz	r3, 80090f4 <_raise_r+0x32>
 80090e0:	4628      	mov	r0, r5
 80090e2:	f000 f831 	bl	8009148 <_getpid_r>
 80090e6:	4622      	mov	r2, r4
 80090e8:	4601      	mov	r1, r0
 80090ea:	4628      	mov	r0, r5
 80090ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090f0:	f000 b818 	b.w	8009124 <_kill_r>
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d00a      	beq.n	800910e <_raise_r+0x4c>
 80090f8:	1c59      	adds	r1, r3, #1
 80090fa:	d103      	bne.n	8009104 <_raise_r+0x42>
 80090fc:	2316      	movs	r3, #22
 80090fe:	6003      	str	r3, [r0, #0]
 8009100:	2001      	movs	r0, #1
 8009102:	e7e7      	b.n	80090d4 <_raise_r+0x12>
 8009104:	2100      	movs	r1, #0
 8009106:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800910a:	4620      	mov	r0, r4
 800910c:	4798      	blx	r3
 800910e:	2000      	movs	r0, #0
 8009110:	e7e0      	b.n	80090d4 <_raise_r+0x12>
	...

08009114 <raise>:
 8009114:	4b02      	ldr	r3, [pc, #8]	@ (8009120 <raise+0xc>)
 8009116:	4601      	mov	r1, r0
 8009118:	6818      	ldr	r0, [r3, #0]
 800911a:	f7ff bfd2 	b.w	80090c2 <_raise_r>
 800911e:	bf00      	nop
 8009120:	24000020 	.word	0x24000020

08009124 <_kill_r>:
 8009124:	b538      	push	{r3, r4, r5, lr}
 8009126:	4d07      	ldr	r5, [pc, #28]	@ (8009144 <_kill_r+0x20>)
 8009128:	2300      	movs	r3, #0
 800912a:	4604      	mov	r4, r0
 800912c:	4608      	mov	r0, r1
 800912e:	4611      	mov	r1, r2
 8009130:	602b      	str	r3, [r5, #0]
 8009132:	f7f7 fe43 	bl	8000dbc <_kill>
 8009136:	1c43      	adds	r3, r0, #1
 8009138:	d102      	bne.n	8009140 <_kill_r+0x1c>
 800913a:	682b      	ldr	r3, [r5, #0]
 800913c:	b103      	cbz	r3, 8009140 <_kill_r+0x1c>
 800913e:	6023      	str	r3, [r4, #0]
 8009140:	bd38      	pop	{r3, r4, r5, pc}
 8009142:	bf00      	nop
 8009144:	24000460 	.word	0x24000460

08009148 <_getpid_r>:
 8009148:	f7f7 be30 	b.w	8000dac <_getpid>

0800914c <_init>:
 800914c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800914e:	bf00      	nop
 8009150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009152:	bc08      	pop	{r3}
 8009154:	469e      	mov	lr, r3
 8009156:	4770      	bx	lr

08009158 <_fini>:
 8009158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800915a:	bf00      	nop
 800915c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800915e:	bc08      	pop	{r3}
 8009160:	469e      	mov	lr, r3
 8009162:	4770      	bx	lr
